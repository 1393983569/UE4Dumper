Class: Package.Object

--------------------------------
Class: Object
	function ExecuteUbergraph();// 0x206ccd8

--------------------------------
Class: Class.Struct.Field.Object

--------------------------------
Class: Struct.Field.Object

--------------------------------
Class: Field.Object

--------------------------------
Class: ScriptStruct.Struct.Field.Object

--------------------------------
Class: IntProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: NumericProperty.Property.Field.Object

--------------------------------
Class: Property.Field.Object

--------------------------------
Class: BoolProperty.Property.Field.Object

--------------------------------
Class: NameProperty.Property.Field.Object

--------------------------------
Class: FloatProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: StructProperty.Property.Field.Object

--------------------------------
Class: ByteProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: Enum.Field.Object

--------------------------------
Class: ArrayProperty.Property.Field.Object

--------------------------------
Class: StrProperty.Property.Field.Object

--------------------------------
Class: EnumProperty.Property.Field.Object

--------------------------------
Class: Function.Struct.Field.Object

--------------------------------
Class: AndroidCommonDeviceProfileVulkanList.Object
	VulkanList(StructProperty)[] VulkanList;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: AndroidCommonDeviceProfileWhiteList.Object
	GradeMatchProfileWhiteList(StructProperty)[] GradeMatchProfileWhiteList;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: TextProperty.Property.Field.Object

--------------------------------
Class: DelegateFunction.Function.Struct.Field.Object

--------------------------------
Class: ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: WeakObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: MulticastDelegateProperty.Property.Field.Object

--------------------------------
Class: Int64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: ClassProperty.ObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftClassProperty.SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: SoftObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: InterfaceProperty.Property.Field.Object

--------------------------------
Class: UInt64Property.NumericProperty.Property.Field.Object

--------------------------------
Class: DelegateProperty.Property.Field.Object

--------------------------------
Class: CommonDeviceProfileMatchingRules.Object
	SwitcerMatchProfile(StructProperty)[] SwitcerMatchProfile;//[Offset: 0x1c , Size: 12]
	ChangeQualityMatchProfile(StructProperty)[] ChangeQualityMatchProfile;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: GCObjectReferencer.Object

--------------------------------
Class: AssetRegistryImpl.Object

--------------------------------
Class: MapProperty.Property.Field.Object

--------------------------------
Class: UInt32Property.NumericProperty.Property.Field.Object

--------------------------------
Class: Int8Property.NumericProperty.Property.Field.Object

--------------------------------
Class: DoubleProperty.NumericProperty.Property.Field.Object

--------------------------------
Class: UInt16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: SetProperty.Property.Field.Object

--------------------------------
Class: Int16Property.NumericProperty.Property.Field.Object

--------------------------------
Class: LazyObjectProperty.ObjectPropertyBase.Property.Field.Object

--------------------------------
Class: TextBuffer.Object

--------------------------------
Class: DynamicClass.Class.Struct.Field.Object

--------------------------------
Class: PackageMap.Object

--------------------------------
Class: Interface.Object

--------------------------------
Class: LinkerPlaceholderClass.Class.Struct.Field.Object

--------------------------------
Class: LinkerPlaceholderExportObject.Object

--------------------------------
Class: LinkerPlaceholderFunction.Function.Struct.Field.Object

--------------------------------
Class: MetaData.Object

--------------------------------
Class: ObjectRedirector.Object

--------------------------------
Class: Model.Object

--------------------------------
Class: Actor.Object
	ActorTickFunction PrimaryActorTick;//[Offset: 0x1c , Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	float CustomTimeDilation;//[Offset: 0x5c , Size: 4]
	bool bHidden;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	bool bNetTemporary;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60 , Size: 1]
	bool bNetStartup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60 , Size: 1]
	bool bOnlyRelevantToOwner;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x60 , Size: 1]
	bool bOnlyRelevantToConnection;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x60 , Size: 1]
	bool bRegionBasedNetConsideration;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x60 , Size: 1]
	bool bFastDistBasedRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x60 , Size: 1]
	bool bFastCustomOwnersRelevancy;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x60 , Size: 1]
	bool bAlwaysRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61 , Size: 1]
	bool bReplicateMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x61 , Size: 1]
	bool bTearOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x61 , Size: 1]
	bool bExchangedRoles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x61 , Size: 1]
	bool bNetLoadOnClient;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x61 , Size: 1]
	bool bNetUseOwnerRelevancy;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x61 , Size: 1]
	bool bBlockInput;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x61 , Size: 1]
	bool bAllowTickBeforeBeginPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x62 , Size: 1]
	bool bActorEnableCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x62 , Size: 1]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x62 , Size: 1]
	byte RemoteRole;//[Offset: 0x63 , Size: 1]
	Actor* Owner;//[Offset: 0x64 , Size: 4]
	byte WorldParallelismID;//[Offset: 0x68 , Size: 1]
	FName NetDriverName;//[Offset: 0x70 , Size: 8]
	RepMovement ReplicatedMovement;//[Offset: 0x78 , Size: 52]
	float InitialLifeSpan;//[Offset: 0xac , Size: 4]
	RepAttachment AttachmentReplication;//[Offset: 0xb0 , Size: 56]
	byte Role;//[Offset: 0xe8 , Size: 1]
	byte NetDormancy;//[Offset: 0xe9 , Size: 1]
	byte AutoReceiveInput;//[Offset: 0xea , Size: 1]
	int InputPriority;//[Offset: 0xec , Size: 4]
	InputComponent* InputComponent;//[Offset: 0xf0 , Size: 4]
	float NetCullDistanceSquared;//[Offset: 0xf4 , Size: 4]
	int NetTag;//[Offset: 0xf8 , Size: 4]
	float NetConsiderFrequency;//[Offset: 0x100 , Size: 4]
	float NetUpdateFrequency;//[Offset: 0x104 , Size: 4]
	float MinNetUpdateFrequency;//[Offset: 0x108 , Size: 4]
	float NetPriority;//[Offset: 0x110 , Size: 4]
	bool bAutoDestroyWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118 , Size: 1]
	bool bCanBeDamaged;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x118 , Size: 1]
	bool bActorIsBeingDestroyed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x118 , Size: 1]
	bool bCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x118 , Size: 1]
	bool bFindCameraComponentWhenViewTarget;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x118 , Size: 1]
	bool bRelevantForNetworkReplays;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x118 , Size: 1]
	bool bLowUpdateRateForReplay;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x118 , Size: 1]
	bool bGenerateOverlapEventsDuringLevelStreaming;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x118 , Size: 1]
	bool bCanBeInCluster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x119 , Size: 1]
	bool bAllowReceiveTickEventOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x119 , Size: 1]
	bool bActorSeamlessTraveled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x119 , Size: 1]
	bool bIgnoresOriginShifting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x119 , Size: 1]
	bool bEnableAutoLODGeneration;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x119 , Size: 1]
	enum SpawnCollisionHandlingMethod;//[Offset: 0x11a , Size: 1]
	Pawn* Instigator;//[Offset: 0x128 , Size: 4]
	Children(ObjectProperty)[] Children;//[Offset: 0x12c , Size: 12]
	SceneComponent* RootComponent;//[Offset: 0x138 , Size: 4]
	ControllingMatineeActors(ObjectProperty)[] ControllingMatineeActors;//[Offset: 0x13c , Size: 12]
	Layers(NameProperty)[] Layers;//[Offset: 0x150 , Size: 12]
	ChildActorComponent* ParentComponent;//[Offset: 0x15c , Size: 8]
	Tags(NameProperty)[] Tags;//[Offset: 0x164 , Size: 12]
	uint64 HiddenEditorViews;//[Offset: 0x170 , Size: 8]
	delegate OnTakeAnyDamage;//[Offset: 0x178 , Size: 12]
	delegate OnTakePointDamage;//[Offset: 0x184 , Size: 12]
	delegate OnActorBeginOverlap;//[Offset: 0x190 , Size: 12]
	delegate OnActorEndOverlap;//[Offset: 0x19c , Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x1a8 , Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x1b4 , Size: 12]
	delegate OnClicked;//[Offset: 0x1c0 , Size: 12]
	delegate OnReleased;//[Offset: 0x1cc , Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x1d8 , Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x1e4 , Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x1f0 , Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x1fc , Size: 12]
	delegate OnActorHit;//[Offset: 0x208 , Size: 12]
	delegate OnDestroyed;//[Offset: 0x214 , Size: 12]
	delegate OnEndPlay;//[Offset: 0x220 , Size: 12]
	BlueprintCreatedComponents(ObjectProperty)[] BlueprintCreatedComponents;//[Offset: 0x2a4 , Size: 12]
	InstanceComponents(ObjectProperty)[] InstanceComponents;//[Offset: 0x2b0 , Size: 12]
	function WasRecentlyRendered();// 0x363c628
	function UserConstructionScript();// 0x206ccd8
	function TearOff();// 0x16d3ec4
	function SnapRootComponentTo();// 0x363c56c
	function SetTickGroup();// 0x363c4f4
	function SetTickableWhenPaused();// 0x363c474
	function SetReplicates();// 0x363c3f4
	function SetReplicateMovement();// 0x363c36c
	function SetOwner();// 0x16fb9f8
	function SetNetDormancy();// 0x363c2f4
	function SetLifeSpan();// 0x363c274
	function SetActorTickInterval();// 0x363c1fc
	function SetActorTickEnabled();// 0x363c17c
	function SetActorScale3D();// 0x363c10c
	function SetActorRelativeScale3D();// 0x363c09c
	function SetActorHiddenInGame();// 0x363c014
	function SetActorEnableCollision();// 0x363bf94
	function RemoveTickPrerequisiteComponent();// 0x1702e74
	function RemoveTickPrerequisiteActor();// 0x1702f10
	function ReceiveTick();// 0x206ccd8
	function ReceiveRadialDamage();// 0x206ccd8
	function ReceivePointDamage();// 0x206ccd8
	function ReceiveHit();// 0x206ccd8
	function ReceiveEndPlay();// 0x206ccd8
	function ReceiveDestroyed();// 0x206ccd8
	function ReceiveBeginPlay();// 0x206ccd8
	function ReceiveAnyDamage();// 0x206ccd8
	function ReceiveActorOnReleased();// 0x206ccd8
	function ReceiveActorOnInputTouchLeave();// 0x206ccd8
	function ReceiveActorOnInputTouchEnter();// 0x206ccd8
	function ReceiveActorOnInputTouchEnd();// 0x206ccd8
	function ReceiveActorOnInputTouchBegin();// 0x206ccd8
	function ReceiveActorOnClicked();// 0x206ccd8
	function ReceiveActorEndOverlap();// 0x206ccd8
	function ReceiveActorEndCursorOver();// 0x206ccd8
	function ReceiveActorBeginOverlap();// 0x206ccd8
	function ReceiveActorBeginCursorOver();// 0x206ccd8
	function PrestreamTextures();// 0x363be80
	function OnRep_ReplicateMovement();// 0x199c3f8
	function OnRep_ReplicatedMovement();// 0x1698f30
	function OnRep_Owner();// 0x1790b84
	function OnRep_Instigator();// 0x363be64
	function OnRep_AttachmentReplication();// 0x16d3a24
	function MakeNoise();// 0x363bcc8
	function MakeMIDForMaterial();// 0x19878c0
	function K2_TeleportTo();// 0x363bc00
	function K2_SetActorTransform();// 0x363ba10
	function K2_SetActorRotation();// 0x363b940
	function K2_SetActorRelativeTransform();// 0x363b760
	function K2_SetActorRelativeRotation();// 0x363b5dc
	function K2_SetActorRelativeLocation();// 0x363b460
	function K2_SetActorLocationAndRotation();// 0x363b290
	function K2_SetActorLocation();// 0x363b110
	function K2_OnReset();// 0x206ccd8
	function K2_OnEndViewTarget();// 0x206ccd8
	function K2_OnBecomeViewTarget();// 0x206ccd8
	function K2_GetRootComponent();// 0x174cf58
	function K2_GetActorRotation();// 0x363b01c
	function K2_GetActorLocation();// 0x363afdc
	function K2_DetachFromActor();// 0x363aedc
	function K2_DestroyComponent();// 0x363ae64
	function K2_DestroyActor();// 0x363ae48
	function K2_AttachToComponent();// 0x363ac68
	function K2_AttachToActor();// 0x363aa88
	function K2_AttachRootComponentToActor();// 0x363a934
	function K2_AttachRootComponentTo();// 0x363a7e0
	function K2_AddActorWorldTransform();// 0x363a600
	function K2_AddActorWorldRotation();// 0x363a47c
	function K2_AddActorWorldOffset();// 0x363a300
	function K2_AddActorLocalTransform();// 0x363a120
	function K2_AddActorLocalRotation();// 0x3639fa0
	function K2_AddActorLocalOffset();// 0x3639e24
	function IsOverlappingActor();// 0x3639da4
	function IsChildActor();// 0x3639d7c
	function IsActorTickEnabled();// 0x3639d54
	function IsActorBeingDestroyed();// 0x3639d30
	function HasAuthority();// 0x3639d08
	function GetVerticalDistanceTo();// 0x3639c88
	function GetVelocity();// 0x3639c38
	function GetTransform();// 0x3639bec
	function GetTickableWhenPaused();// 0x3639bc4
	function GetSquaredDistanceTo();// 0x3639b44
	function GetRemoteRole();// 0x3639b28
	function GetParentComponent();// 0x3639b00
	function GetParentActor();// 0x3639ad8
	function GetOwner();// 0x3639abc
	function GetOverlappingComponents();// 0x36399f0
	function GetOverlappingActors();// 0x36398dc
	function GetLifeSpan();// 0x36398ac
	function GetInstigatorController();// 0x3639884
	function GetInstigator();// 0x18fec40
	function GetInputVectorAxisValue();// 0x3639580
	function GetInputAxisValue();// 0x3639500
	function GetInputAxisKeyValue();// 0x3639208
	function GetHorizontalDotProductTo();// 0x3639188
	function GetHorizontalDistanceTo();// 0x3639108
	function GetGameTimeSinceCreation();// 0x36390e0
	function GetDotProductTo();// 0x3639060
	function GetDistanceTo();// 0x3638fe0
	function GetComponentsByTag();// 0x3638e8c
	function GetComponentsByClass();// 0x3638d84
	function GetComponentByClass();// 0x3638d04
	function GetAttachParentSocketName();// 0x3638cc4
	function GetAttachParentActor();// 0x3638c9c
	function GetAttachedActors();// 0x3638bd0
	function GetAllChildActors();// 0x3638ab4
	function GetActorUpVector();// 0x3638a40
	function GetActorTimeDilation();// 0x3638a18
	function GetActorTickInterval();// 0x36389f0
	function GetActorScale3D();// 0x36389a8
	function GetActorRightVector();// 0x3638934
	function GetActorRelativeScale3D();// 0x36388ec
	function GetActorForwardVector();// 0x3638878
	function GetActorEyesViewPoint();// 0x3638798
	function GetActorEnableCollision();// 0x3638778
	function GetActorBounds();// 0x3638650
	function ForceNetUpdate();// 0x1795538
	function ForceNetConsider();// 0x3638634
	function FlushNetDormancy();// 0x3638620
	function EnableInput();// 0x36385a0
	function DisableInput();// 0x3638520
	function DetachRootComponentFromParent();// 0x36384a0
	function AddTickPrerequisiteComponent();// 0x3638420
	function AddTickPrerequisiteActor();// 0x36383a0
	function AddComponent();// 0x36381e0
	function ActorHasTag();// 0x3638158

--------------------------------
Class: ActorTickFunction.TickFunction

--------------------------------
Class: TickFunction
	byte TickGroup;//[Offset: 0x4 , Size: 1]
	byte EndTickGroup;//[Offset: 0x5 , Size: 1]
	bool bTickEvenWhenPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bStartWithTickEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bAllowTickOnDedicatedServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	float TickInterval;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: RepMovement
	Vector LinearVelocity;//[Offset: 0x0 , Size: 12]
	Vector AngularVelocity;//[Offset: 0xc , Size: 12]
	Vector Location;//[Offset: 0x18 , Size: 12]
	Rotator Rotation;//[Offset: 0x24 , Size: 12]
	bool bSimulatedPhysicSleep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bRepPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	enum LocationQuantizationLevel;//[Offset: 0x31 , Size: 1]
	enum VelocityQuantizationLevel;//[Offset: 0x32 , Size: 1]
	enum RotationQuantizationLevel;//[Offset: 0x33 , Size: 1]

--------------------------------
Class: Vector
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: Rotator
	float Pitch;//[Offset: 0x0 , Size: 4]
	float Yaw;//[Offset: 0x4 , Size: 4]
	float Roll;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: RepAttachment
	Actor* AttachParent;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize100 LocationOffset;//[Offset: 0x4 , Size: 12]
	Vector_NetQuantize100 RelativeScale3D;//[Offset: 0x10 , Size: 12]
	Rotator RotationOffset;//[Offset: 0x1c , Size: 12]
	FName AttachSocket;//[Offset: 0x28 , Size: 8]
	SceneComponent* AttachComponent;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: Vector_NetQuantize100.Vector

--------------------------------
Class: SceneComponent.ActorComponent.Object
	PhysicsVolume* PhysicsVolume;//[Offset: 0xc0 , Size: 8]
	SceneComponent* AttachParent;//[Offset: 0xc8 , Size: 4]
	FName AttachSocketName;//[Offset: 0xd0 , Size: 8]
	AttachChildren(ObjectProperty)[] AttachChildren;//[Offset: 0xd8 , Size: 12]
	ClientAttachedChildren(ObjectProperty)[] ClientAttachedChildren;//[Offset: 0xe4 , Size: 12]
	Vector RelativeLocation;//[Offset: 0x118 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x124 , Size: 12]
	Vector RelativeScale3D;//[Offset: 0x130 , Size: 12]
	Vector ComponentVelocity;//[Offset: 0x1a0 , Size: 12]
	bool bComponentToWorldUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1ac , Size: 1]
	bool bAbsoluteLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1ac , Size: 1]
	int AntiCheatRandValue0;//[Offset: 0x1b0 , Size: 4]
	bool bAbsoluteRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1b4 , Size: 1]
	bool bAbsoluteScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1b4 , Size: 1]
	int AntiCheatRandValue1;//[Offset: 0x1b8 , Size: 4]
	bool bVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1bc , Size: 1]
	bool bHiddenInGame;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1bc , Size: 1]
	int AntiCheatRandValue2;//[Offset: 0x1c0 , Size: 4]
	bool bShouldUpdatePhysicsVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c4 , Size: 1]
	bool bBoundsChangeTriggersStreamingDataRebuild;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c4 , Size: 1]
	bool bUseAttachParentBound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c4 , Size: 1]
	int AntiCheatRandValue3;//[Offset: 0x1c8 , Size: 4]
	bool bShouldUpdateOverLaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1cc , Size: 1]
	int AntiCheatRandValue4;//[Offset: 0x1d0 , Size: 4]
	int AntiCheatRandValue5;//[Offset: 0x1d8 , Size: 4]
	bool bAbsoluteTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1dc , Size: 1]
	byte Mobility;//[Offset: 0x1dd , Size: 1]
	int AntiCheatRandValue6;//[Offset: 0x1e0 , Size: 4]
	byte DetailMode;//[Offset: 0x1e4 , Size: 1]
	delegate PhysicsVolumeChangedDelegate;//[Offset: 0x230 , Size: 12]
	function ToggleVisibility();// 0x3778e44
	function SnapTo();// 0x3778d80
	function SetWorldScale3D();// 0x3778d10
	function SetVisibility();// 0x3778c3c
	function SetRelativeScale3D();// 0x3778bc4
	function SetHiddenInGame();// 0x3778af0
	function SetAbsolute();// 0x37789d0
	function ResetRelativeTransform();// 0x37789bc
	function OnRep_Visibility();// 0x377893c
	function OnRep_Transform();// 0x3778928
	function OnRep_AttachSocketName();// 0x3778914
	function OnRep_AttachParent();// 0x3778914
	function OnRep_AttachChildren();// 0x3778900
	function K2_SetWorldTransform();// 0x3778720
	function K2_SetWorldRotation();// 0x3778598
	function K2_SetWorldLocationAndRotation();// 0x37783dc
	function K2_SetWorldLocation();// 0x3778260
	function K2_SetRelativeTransform();// 0x3778080
	function K2_SetRelativeRotation();// 0x3777f04
	function K2_SetRelativeLocationAndRotation();// 0x3777d48
	function K2_SetRelativeLocation();// 0x3777bcc
	function K2_GetComponentToWorld();// 0x3777b6c
	function K2_GetComponentScale();// 0x3777b24
	function K2_GetComponentRotation();// 0x3777adc
	function K2_GetComponentLocation();// 0x3777a94
	function K2_DetachFromComponent();// 0x3777944
	function K2_AttachToComponent();// 0x377775c
	function K2_AttachTo();// 0x3777600
	function K2_AddWorldTransform();// 0x3777420
	function K2_AddWorldRotation();// 0x37772a4
	function K2_AddWorldOffset();// 0x3777128
	function K2_AddRelativeRotation();// 0x3776fac
	function K2_AddRelativeLocation();// 0x3776e30
	function K2_AddLocalTransform();// 0x3776c50
	function K2_AddLocalRotation();// 0x3776acc
	function K2_AddLocalOffset();// 0x3776950
	function IsVisible();// 0x3776920
	function IsSimulatingPhysics();// 0x3776898
	function IsAnySimulatingPhysics();// 0x3776868
	function GetUpVector();// 0x3776820
	function GetSocketTransform();// 0x3776724
	function GetSocketRotation();// 0x3776688
	function GetSocketQuaternion();// 0x37765ec
	function GetSocketLocation();// 0x3776550
	function GetRightVector();// 0x3776508
	function GetRelativeTransform();// 0x37764a8
	function GetPhysicsVolume();// 0x3776480
	function GetParentComponents();// 0x37763b4
	function GetNumChildrenComponents();// 0x377638c
	function GetForwardVector();// 0x374e180
	function GetComponentVelocity();// 0x377633c
	function GetComponentTransformViewTranslatedBP();// 0x3776300
	function GetComponentLocal();// 0x3776200
	function GetChildrenComponents();// 0x37760e0
	function GetChildComponent();// 0x3776060
	function GetAttachSocketName();// 0x3776044
	function GetAttachParent();// 0x17f66fc
	function GetAllSocketNames();// 0x3775f84
	function DoesSocketExist();// 0x3775efc
	function DetachFromParent();// 0x3775e24

--------------------------------
Class: ActorComponent.Object
	ActorComponentTickFunction PrimaryComponentTick;//[Offset: 0x20 , Size: 60]
	bool bSupportSuspendTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	ComponentTags(NameProperty)[] ComponentTags;//[Offset: 0x60 , Size: 12]
	bool bDestroyIfOnClientNoLocalControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	float NetUpdateFrequency;//[Offset: 0x70 , Size: 4]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x78 , Size: 12]
	bool bReplicates;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x84 , Size: 1]
	bool bNetAddressable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x84 , Size: 1]
	bool bAutoActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x86 , Size: 1]
	bool bIsActive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x86 , Size: 1]
	bool bEditableWhenInherited;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x86 , Size: 1]
	bool bCanEverAffectNavigation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x86 , Size: 1]
	bool bIsEditorOnly;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x86 , Size: 1]
	bool bIsClientOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x87 , Size: 1]
	enum CreationMethod;//[Offset: 0x89 , Size: 1]
	UCSModifiedProperties(StructProperty)[] UCSModifiedProperties;//[Offset: 0x8c , Size: 12]
	delegate OnComponentActivated;//[Offset: 0x9c , Size: 12]
	delegate OnComponentDeactivated;//[Offset: 0xa8 , Size: 12]
	function ToggleActive();// 0x1790b84
	function SetTickGroup();// 0x363f984
	function SetTickableWhenPaused();// 0x363f904
	function SetIsReplicated();// 0x363f884
	function SetComponentTickInterval();// 0x363f80c
	function SetComponentTickEnabled();// 0x363f784
	function SetAutoActivate();// 0x16b817c
	function SetActive();// 0x363f6ac
	function RemoveTickPrerequisiteComponent();// 0x363f62c
	function RemoveTickPrerequisiteActor();// 0x363f5ac
	function ReceiveTick();// 0x206ccd8
	function ReceiveEndPlay();// 0x206ccd8
	function ReceiveBeginPlay();// 0x206ccd8
	function OnRep_Replicates();// 0x363f598
	function OnRep_IsActive();// 0x363f584
	function K2_DestroyComponent();// 0x363f50c
	function IsComponentTickEnabled();// 0x363f4e4
	function IsBeingDestroyed();// 0x363f4c4
	function IsActive();// 0x363f494
	function GetOwner();// 0x363f478
	function GetComponentTickInterval();// 0x363f450
	function ForceNetUpdate();// 0x1795538
	function Deactivate();// 0x1790b4c
	function ComponentHasTag();// 0x363f3d0
	function AddTickPrerequisiteComponent();// 0x363f350
	function AddTickPrerequisiteActor();// 0x363f2d0
	function Activate();// 0x16b80f4

--------------------------------
Class: ActorComponentTickFunction.TickFunction

--------------------------------
Class: PhysicsVolume.Volume.Brush.Actor.Object
	float TerminalVelocity;//[Offset: 0x2ec , Size: 4]
	int Priority;//[Offset: 0x2f0 , Size: 4]
	float FluidFriction;//[Offset: 0x2f4 , Size: 4]
	bool bWaterVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8 , Size: 1]
	bool bPhysicsOnContact;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8 , Size: 1]

--------------------------------
Class: Volume.Brush.Actor.Object

--------------------------------
Class: Brush.Actor.Object
	byte BrushType;//[Offset: 0x2c4 , Size: 1]
	Color BrushColor;//[Offset: 0x2c8 , Size: 4]
	int PolyFlags;//[Offset: 0x2cc , Size: 4]
	bool bColored;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0 , Size: 1]
	bool bSolidWhenSelected;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d0 , Size: 1]
	bool bPlaceableFromClassBrowser;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d0 , Size: 1]
	bool bNotForClientOrServer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d0 , Size: 1]
	Model* Brush;//[Offset: 0x2d4 , Size: 4]
	BrushComponent* BrushComponent;//[Offset: 0x2d8 , Size: 4]
	bool bInManipulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	SavedSelections(StructProperty)[] SavedSelections;//[Offset: 0x2e0 , Size: 12]

--------------------------------
Class: Color
	byte B;//[Offset: 0x0 , Size: 1]
	byte G;//[Offset: 0x1 , Size: 1]
	byte R;//[Offset: 0x2 , Size: 1]
	byte A;//[Offset: 0x3 , Size: 1]

--------------------------------
Class: BrushComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Model* Brush;//[Offset: 0x54c , Size: 4]
	BodySetup* BrushBodySetup;//[Offset: 0x550 , Size: 4]
	Vector PrePivot;//[Offset: 0x554 , Size: 12]

--------------------------------
Class: PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CullingScreenSize;//[Offset: 0x264 , Size: 4]
	float MinDrawDistance;//[Offset: 0x268 , Size: 4]
	float LDMaxDrawDistance;//[Offset: 0x26c , Size: 4]
	float MaxDrawDistanceOffset;//[Offset: 0x270 , Size: 4]
	float CachedMaxDrawDistance;//[Offset: 0x274 , Size: 4]
	byte DepthPriorityGroup;//[Offset: 0x278 , Size: 1]
	byte ViewOwnerDepthPriorityGroup;//[Offset: 0x279 , Size: 1]
	enum LightmapType;//[Offset: 0x27a , Size: 1]
	bool bBulletCanBreakThrough;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27b , Size: 1]
	bool bAlwaysCreatePhysicsState;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27b , Size: 1]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27b , Size: 1]
	bool bMultiBodyOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27b , Size: 1]
	bool bCheckAsyncSceneOnMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c , Size: 1]
	bool bTraceComplexOnMove;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c , Size: 1]
	bool bReturnMaterialOnMove;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c , Size: 1]
	bool bUseViewOwnerDepthPriorityGroup;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c , Size: 1]
	bool bAllowCullDistanceVolume;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c , Size: 1]
	bool bAllowCullDistanceVolumeMovable;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c , Size: 1]
	bool bHasMotionBlurVelocityMeshes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27c , Size: 1]
	bool bVisibleInReflectionCaptures;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27c , Size: 1]
	bool bRenderInMainPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27d , Size: 1]
	bool bRenderInMono;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27d , Size: 1]
	bool bReceivesDecals;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27d , Size: 1]
	bool bOwnerNoSee;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27d , Size: 1]
	bool bOnlyOwnerSee;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27d , Size: 1]
	bool bTreatAsBackgroundForOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27d , Size: 1]
	bool bDrawIdeaOutline;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x27d , Size: 1]
	bool bOverrideIdeaOutlineColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x27d , Size: 1]
	LinearColor IdeaOutlineColor;//[Offset: 0x280 , Size: 16]
	bool bOverrideIdeaOutlineThickness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290 , Size: 1]
	float IdeaOutlineThickness;//[Offset: 0x294 , Size: 4]
	bool bDrawDyeing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x298 , Size: 1]
	enum DrawDyeingMode;//[Offset: 0x299 , Size: 1]
	LinearColor VisibleDyeingColor;//[Offset: 0x29c , Size: 16]
	LinearColor OccludedDyeingColor;//[Offset: 0x2ac , Size: 16]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bc , Size: 1]
	bool bUseAsOccluder;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bc , Size: 1]
	bool bSelectable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bc , Size: 1]
	bool bForceMipStreaming;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bc , Size: 1]
	bool bHasPerInstanceHitProxies;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bc , Size: 1]
	bool CastShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bc , Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bc , Size: 1]
	bool bAffectDistanceFieldLighting;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bc , Size: 1]
	bool bCastDynamicShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bd , Size: 1]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bd , Size: 1]
	bool bCastVolumetricTranslucentShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bd , Size: 1]
	bool bSelfShadowOnly;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bd , Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2bd , Size: 1]
	bool bCastInsetShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2bd , Size: 1]
	bool bCastCinematicShadow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2bd , Size: 1]
	bool bCastHiddenShadow;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2bd , Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2be , Size: 1]
	bool bLightAsIfStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2be , Size: 1]
	bool bLightAttachmentsAsGroup;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2be , Size: 1]
	bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2be , Size: 1]
	bool bSingleSampleShadowFromStationaryLights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2be , Size: 1]
	bool bIgnoreRadialImpulse;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2be , Size: 1]
	bool bIgnoreRadialForce;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2be , Size: 1]
	bool bApplyImpulseOnDamage;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2be , Size: 1]
	bool AlwaysLoadOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2bf , Size: 1]
	bool AlwaysLoadOnServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2bf , Size: 1]
	bool bUseEditorCompositing;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2bf , Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2bf , Size: 1]
	byte bHasCustomNavigableGeometry;//[Offset: 0x2c0 , Size: 1]
	byte CanCharacterStepUpOn;//[Offset: 0x2c2 , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2c3 , Size: 1]
	enum CustomDepthStencilWriteMask;//[Offset: 0x2c4 , Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x2c8 , Size: 4]
	int TranslucencySortPriority;//[Offset: 0x2cc , Size: 4]
	int VisibilityId;//[Offset: 0x2d0 , Size: 4]
	float OverrideCylinderMaxDrawHeight;//[Offset: 0x2dc , Size: 4]
	float BoundsScale;//[Offset: 0x2e4 , Size: 4]
	float LastSubmitTime;//[Offset: 0x2e8 , Size: 4]
	float LastRenderTime;//[Offset: 0x2ec , Size: 4]
	float LastRenderTimeOnScreen;//[Offset: 0x2f0 , Size: 4]
	MoveIgnoreActors(ObjectProperty)[] MoveIgnoreActors;//[Offset: 0x2f4 , Size: 12]
	MoveIgnoreComponents(ObjectProperty)[] MoveIgnoreComponents;//[Offset: 0x300 , Size: 12]
	BodyInstance BodyInstance;//[Offset: 0x318 , Size: 320]
	delegate OnComponentHit;//[Offset: 0x458 , Size: 12]
	delegate OnComponentBeginOverlap;//[Offset: 0x464 , Size: 12]
	delegate OnComponentEndOverlap;//[Offset: 0x470 , Size: 12]
	delegate OnComponentWake;//[Offset: 0x47c , Size: 12]
	delegate OnComponentSleep;//[Offset: 0x488 , Size: 12]
	delegate OnBeginCursorOver;//[Offset: 0x4a0 , Size: 12]
	delegate OnEndCursorOver;//[Offset: 0x4ac , Size: 12]
	delegate OnClicked;//[Offset: 0x4b8 , Size: 12]
	delegate OnReleased;//[Offset: 0x4c4 , Size: 12]
	delegate OnInputTouchBegin;//[Offset: 0x4d0 , Size: 12]
	delegate OnInputTouchEnd;//[Offset: 0x4dc , Size: 12]
	delegate OnInputTouchEnter;//[Offset: 0x4e8 , Size: 12]
	delegate OnInputTouchLeave;//[Offset: 0x4f4 , Size: 12]
	PrimitiveComponent* LODParentPrimitive;//[Offset: 0x50c , Size: 4]
	PrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick;//[Offset: 0x510 , Size: 60]
	function WakeRigidBody();// 0x3768464
	function WakeAllRigidBodies();// 0x3679cbc
	function SetWalkableSlopeOverride();// 0x37683cc
	function SetVisibleDyeingColor();// 0x3768348
	function SetTranslucentSortPriority();// 0x37682d0
	function SetSingleSampleShadowFromStationaryLights();// 0x3768250
	function SetSimulatePhysics();// 0x1909450
	function SetRenderInMono();// 0x37681d0
	function SetRenderInMainPass();// 0x3768150
	function SetRenderCustomDepth();// 0x37680d0
	function SetReceivesDecals();// 0x3768050
	function SetPhysMaterialOverride();// 0x3767fd0
	function SetPhysicsMaxAngularVelocityInRadians();// 0x3767ebc
	function SetPhysicsMaxAngularVelocityInDegrees();// 0x3767d98
	function SetPhysicsMaxAngularVelocity();// 0x3767d98
	function SetPhysicsLinearVelocity();// 0x3767c84
	function SetPhysicsAngularVelocityInRadians();// 0x3767b70
	function SetPhysicsAngularVelocityInDegrees();// 0x3767a38
	function SetPhysicsAngularVelocity();// 0x3767a38
	function SetOwnerNoSee();// 0x37679b8
	function SetOnlyOwnerSee();// 0x3767938
	function SetOccludedDyeingColor();// 0x37678b4
	function SetNotifyRigidBodyCollision();// 0x376782c
	function SetMaterialByName();// 0x3767768
	function SetMaterial();// 0x37676a4
	function SetMassScale();// 0x37675d8
	function SetMassOverrideInKg();// 0x37674bc
	function SetLockedAxis();// 0x376743c
	function SetLinearDamping();// 0x37472e0
	function SetEnableGravity();// 0x37512f8
	function SetDrawIdeaOutline();// 0x37673bc
	function SetDrawDyeingMode();// 0x3767344
	function SetDrawDyeing();// 0x37672c4
	function SetCustomDepthStencilWriteMask();// 0x376724c
	function SetCustomDepthStencilValue();// 0x37671d4
	function SetCullDistance();// 0x376715c
	function SetConstraintMode();// 0x37670dc
	function SetCollisionResponseToChannel();// 0x3767018
	function SetCollisionResponseToAllChannels();// 0x3766f98
	function SetCollisionProfileName();// 0x3766f18
	function SetCollisionObjectType();// 0x3766e98
	function SetCollisionEnabled();// 0x3766e18
	function SetCenterOfMass();// 0x3766d58
	function SetCastShadow();// 0x3766cd8
	function SetBoundsScale();// 0x3766c60
	function SetAngularDamping();// 0x3766be0
	function SetAllPhysicsLinearVelocity();// 0x3766b14
	function SetAllPhysicsAngularVelocityInRadians();// 0x3766a38
	function SetAllPhysicsAngularVelocityInDegrees();// 0x3766930
	function SetAllPhysicsAngularVelocity();// 0x3766854
	function SetAllMassScale();// 0x36805a4
	function ScaleByMomentOfInertia();// 0x3766768
	function PutRigidBodyToSleep();// 0x37666f0
	function OverrideIdeaOutlineThickness();// 0x3766628
	function OverrideIdeaOutlineColor();// 0x3766554
	function K2_LineTraceComponent();// 0x3766264
	function K2_IsQueryCollisionEnabled();// 0x3766224
	function K2_IsPhysicsCollisionEnabled();// 0x37661e4
	function K2_IsCollisionEnabled();// 0x37661ac
	function IsOverlappingComponent();// 0x376612c
	function IsOverlappingActor();// 0x37660ac
	function IsGravityEnabled();// 0x376607c
	function IsAnyRigidBodyAwake();// 0x366f638
	function IgnoreComponentWhenMoving();// 0x3765fb8
	function IgnoreActorWhenMoving();// 0x3765ef4
	function GetWalkableSlopeOverride();// 0x3765eb8
	function GetPhysicsLinearVelocityAtPoint();// 0x3765dd4
	function GetPhysicsLinearVelocity();// 0x3765d40
	function GetPhysicsAngularVelocityInRadians();// 0x3765cac
	function GetPhysicsAngularVelocityInDegrees();// 0x3765c00
	function GetPhysicsAngularVelocity();// 0x3765c00
	function GetOverlappingComponents();// 0x3765b34
	function GetOverlappingActors();// 0x3765a20
	function GetNumMaterials();// 0x37659f0
	function GetMaterialFromCollisionFaceIndex();// 0x3765914
	function GetMaterial();// 0x376588c
	function GetMassScale();// 0x3765804
	function GetMass();// 0x37657d4
	function GetLinearDamping();// 0x37657a4
	function GetInertiaTensor();// 0x3765708
	function GetCollisionResponseToChannel();// 0x3765680
	function GetCollisionProfileName();// 0x3765640
	function GetCollisionObjectType();// 0x3765610
	function GetCollisionEnabled();// 0x37655e0
	function GetClosestPointOnCollision();// 0x37654b0
	function GetCenterOfMass();// 0x376541c
	function GetAngularDamping();// 0x37653ec
	function CreateDynamicMaterialInstance();// 0x3765320
	function CreateAndSetMaterialInstanceDynamicFromMaterial();// 0x3765254
	function CreateAndSetMaterialInstanceDynamic();// 0x37651cc
	function CopyArrayOfMoveIgnoreComponents();// 0x376510c
	function CopyArrayOfMoveIgnoreActors();// 0x376504c
	function ClearMoveIgnoreComponents();// 0x376501c
	function ClearMoveIgnoreActors();// 0x3765008
	function CanCharacterStepUp();// 0x3764f80
	function AddTorqueInRadians();// 0x3764d3c
	function AddTorqueInDegrees();// 0x3764e4c
	function AddTorque();// 0x3764d3c
	function AddRadialImpulse();// 0x3764b98
	function AddRadialForce();// 0x37649f4
	function AddImpulseAtLocation();// 0x37648dc
	function AddImpulse();// 0x37647c4
	function AddForceAtLocationLocal();// 0x37646ac
	function AddForceAtLocation();// 0x3764594
	function AddForce();// 0x376447c
	function AddAngularImpulseInRadians();// 0x3764364
	function AddAngularImpulseInDegrees();// 0x3764228
	function AddAngularImpulse();// 0x3764110

--------------------------------
Class: LinearColor
	float R;//[Offset: 0x0 , Size: 4]
	float G;//[Offset: 0x4 , Size: 4]
	float B;//[Offset: 0x8 , Size: 4]
	float A;//[Offset: 0xc , Size: 4]

--------------------------------
Class: LightingChannels
	bool bChannel0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bChannel1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bChannel2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: BodyInstance
	enum SleepFamily;//[Offset: 0x19 , Size: 1]
	byte DOFMode;//[Offset: 0x1a , Size: 1]
	byte CollisionEnabled;//[Offset: 0x1b , Size: 1]
	FName CollisionProfileName;//[Offset: 0x20 , Size: 8]
	CollisionResponse CollisionResponses;//[Offset: 0x28 , Size: 44]
	bool bUseCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55 , Size: 1]
	bool bNotifyRigidBodyCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55 , Size: 1]
	bool bSimulatePhysics;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x55 , Size: 1]
	bool bOverrideMass;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x55 , Size: 1]
	bool bEnableGravity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x55 , Size: 1]
	bool bAutoWeld;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x55 , Size: 1]
	bool bStartAwake;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x55 , Size: 1]
	bool bGenerateWakeEvents;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x55 , Size: 1]
	bool bUpdateMassWhenScaleChanges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56 , Size: 1]
	bool bLockTranslation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56 , Size: 1]
	bool bLockRotation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x56 , Size: 1]
	bool bLockXTranslation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x56 , Size: 1]
	bool bLockYTranslation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x56 , Size: 1]
	bool bLockZTranslation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x56 , Size: 1]
	bool bLockXRotation;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x56 , Size: 1]
	bool bLockYRotation;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x56 , Size: 1]
	bool bLockZRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x57 , Size: 1]
	bool bOverrideMaxAngularVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x57 , Size: 1]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x57 , Size: 1]
	bool bOverrideMaxDepenetrationVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x57 , Size: 1]
	bool bOverrideWalkableSlopeOnInstance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x57 , Size: 1]
	float MaxDepenetrationVelocity;//[Offset: 0x58 , Size: 4]
	float MassInKgOverride;//[Offset: 0x64 , Size: 4]
	float LinearDamping;//[Offset: 0x68 , Size: 4]
	float AngularDamping;//[Offset: 0x6c , Size: 4]
	Vector CustomDOFPlaneNormal;//[Offset: 0x70 , Size: 12]
	Vector COMNudge;//[Offset: 0x7c , Size: 12]
	float MassScale;//[Offset: 0x88 , Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x8c , Size: 12]
	byte ObjectType;//[Offset: 0x98 , Size: 1]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0xa4 , Size: 16]
	PhysicalMaterial* PhysMaterialOverride;//[Offset: 0xb4 , Size: 4]
	float MaxAngularVelocity;//[Offset: 0xb8 , Size: 4]
	float CustomSleepThresholdMultiplier;//[Offset: 0xbc , Size: 4]
	float StabilizationThresholdMultiplier;//[Offset: 0xc0 , Size: 4]
	float PhysicsBlendWeight;//[Offset: 0xc4 , Size: 4]
	int PositionSolverIterationCount;//[Offset: 0xc8 , Size: 4]
	uint64 RigidActorSyncId;//[Offset: 0xe0 , Size: 8]
	uint64 RigidActorAsyncId;//[Offset: 0xe8 , Size: 8]
	int VelocitySolverIterationCount;//[Offset: 0xf0 , Size: 4]

--------------------------------
Class: CollisionResponse
	CollisionResponseContainer ResponseToChannels;//[Offset: 0x0 , Size: 32]
	ResponseArray(StructProperty)[] ResponseArray;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: CollisionResponseContainer
	byte WorldStatic;//[Offset: 0x0 , Size: 1]
	byte WorldDynamic;//[Offset: 0x1 , Size: 1]
	byte Pawn;//[Offset: 0x2 , Size: 1]
	byte Visibility;//[Offset: 0x3 , Size: 1]
	byte Camera;//[Offset: 0x4 , Size: 1]
	byte PhysicsBody;//[Offset: 0x5 , Size: 1]
	byte Vehicle;//[Offset: 0x6 , Size: 1]
	byte Destructible;//[Offset: 0x7 , Size: 1]
	byte EngineTraceChannel1;//[Offset: 0x8 , Size: 1]
	byte EngineTraceChannel2;//[Offset: 0x9 , Size: 1]
	byte EngineTraceChannel3;//[Offset: 0xa , Size: 1]
	byte EngineTraceChannel4;//[Offset: 0xb , Size: 1]
	byte EngineTraceChannel5;//[Offset: 0xc , Size: 1]
	byte EngineTraceChannel6;//[Offset: 0xd , Size: 1]
	byte GameTraceChannel1;//[Offset: 0xe , Size: 1]
	byte GameTraceChannel2;//[Offset: 0xf , Size: 1]
	byte GameTraceChannel3;//[Offset: 0x10 , Size: 1]
	byte GameTraceChannel4;//[Offset: 0x11 , Size: 1]
	byte GameTraceChannel5;//[Offset: 0x12 , Size: 1]
	byte GameTraceChannel6;//[Offset: 0x13 , Size: 1]
	byte GameTraceChannel7;//[Offset: 0x14 , Size: 1]
	byte GameTraceChannel8;//[Offset: 0x15 , Size: 1]
	byte GameTraceChannel9;//[Offset: 0x16 , Size: 1]
	byte GameTraceChannel10;//[Offset: 0x17 , Size: 1]
	byte GameTraceChannel11;//[Offset: 0x18 , Size: 1]
	byte GameTraceChannel12;//[Offset: 0x19 , Size: 1]
	byte GameTraceChannel13;//[Offset: 0x1a , Size: 1]
	byte GameTraceChannel14;//[Offset: 0x1b , Size: 1]
	byte GameTraceChannel15;//[Offset: 0x1c , Size: 1]
	byte GameTraceChannel16;//[Offset: 0x1d , Size: 1]
	byte GameTraceChannel17;//[Offset: 0x1e , Size: 1]
	byte GameTraceChannel18;//[Offset: 0x1f , Size: 1]

--------------------------------
Class: WalkableSlopeOverride
	byte WalkableSlopeBehavior;//[Offset: 0x0 , Size: 1]
	float WalkableSlopeAngle;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: PhysicalMaterial.Object
	float Friction;//[Offset: 0x1c , Size: 4]
	byte FrictionCombineMode;//[Offset: 0x20 , Size: 1]
	bool bOverrideFrictionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	float Restitution;//[Offset: 0x24 , Size: 4]
	byte RestitutionCombineMode;//[Offset: 0x28 , Size: 1]
	bool bOverrideRestitutionCombineMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	float Density;//[Offset: 0x2c , Size: 4]
	float RaiseMassToPower;//[Offset: 0x30 , Size: 4]
	float DestructibleDamageThresholdScale;//[Offset: 0x34 , Size: 4]
	PhysicalMaterialPropertyBase* PhysicalMaterialProperty;//[Offset: 0x38 , Size: 4]
	byte SurfaceType;//[Offset: 0x3c , Size: 1]
	float TireFrictionScale;//[Offset: 0x40 , Size: 4]
	TireFrictionScales(StructProperty)[] TireFrictionScales;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: PhysicalMaterialPropertyBase.Object

--------------------------------
Class: BodySetup.Object
	KAggregateGeom AggGeom;//[Offset: 0x1c , Size: 52]
	FName BoneName;//[Offset: 0x50 , Size: 8]
	byte PhysicsType;//[Offset: 0x58 , Size: 1]
	bool bAlwaysFullAnimWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x59 , Size: 1]
	bool bConsiderForBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x59 , Size: 1]
	bool bMeshCollideAll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x59 , Size: 1]
	bool bDoubleSidedGeometry;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x59 , Size: 1]
	bool bGenerateNonMirroredCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x59 , Size: 1]
	bool bSharedCookedData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x59 , Size: 1]
	bool bGenerateMirroredCollision;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x59 , Size: 1]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c , Size: 4]
	PhysSimpleStaticMeshList(ObjectProperty)[] PhysSimpleStaticMeshList;//[Offset: 0x60 , Size: 12]
	byte CollisionReponse;//[Offset: 0x6c , Size: 1]
	bool bCollisionPerShape;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d , Size: 1]
	SphereCollisionEnabledList(ByteProperty)[] SphereCollisionEnabledList;//[Offset: 0x70 , Size: 12]
	CapsuleCollisionEnabledList(ByteProperty)[] CapsuleCollisionEnabledList;//[Offset: 0x7c , Size: 12]
	BoxCollisionEnabledList(ByteProperty)[] BoxCollisionEnabledList;//[Offset: 0x88 , Size: 12]
	ConvexCollisionEnabledList(ByteProperty)[] ConvexCollisionEnabledList;//[Offset: 0x94 , Size: 12]
	TriMeshesCollisionEnabledList(ByteProperty)[] TriMeshesCollisionEnabledList;//[Offset: 0xa0 , Size: 12]
	byte CollisionTraceFlag;//[Offset: 0xac , Size: 1]
	BodyInstance DefaultInstance;//[Offset: 0xb0 , Size: 320]
	WalkableSlopeOverride WalkableSlopeOverride;//[Offset: 0x1f0 , Size: 16]
	float BuildScale;//[Offset: 0x200 , Size: 4]
	Vector BuildScale3D;//[Offset: 0x204 , Size: 12]

--------------------------------
Class: KAggregateGeom
	SphereElems(StructProperty)[] SphereElems;//[Offset: 0x0 , Size: 12]
	BoxElems(StructProperty)[] BoxElems;//[Offset: 0xc , Size: 12]
	SphylElems(StructProperty)[] SphylElems;//[Offset: 0x18 , Size: 12]
	ConvexElems(StructProperty)[] ConvexElems;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: PrimitiveComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: InputComponent.ActorComponent.Object
	function WasControllerKeyJustReleased();// 0x36b17c4
	function WasControllerKeyJustPressed();// 0x36b17c4
	function IsControllerKeyDown();// 0x36b17c4
	function GetTouchState();// 0x36b1644
	function GetControllerVectorKeyState();// 0x36b1340
	function GetControllerMouseDelta();// 0x36b1260
	function GetControllerKeyTimeDown();// 0x36b0e44
	function GetControllerAnalogStickState();// 0x36b113c
	function GetControllerAnalogKeyState();// 0x36b0e44

--------------------------------
Class: Pawn.Actor.Object
	bool bUseControllerRotationPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	bool bUseControllerRotationYaw;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8 , Size: 1]
	bool bUseControllerRotationRoll;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8 , Size: 1]
	bool bCanAffectNavigationGeneration;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c8 , Size: 1]
	bool bUseViewTranslatedTransform;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c8 , Size: 1]
	float BaseEyeHeight;//[Offset: 0x2cc , Size: 4]
	byte AutoPossessPlayer;//[Offset: 0x2d0 , Size: 1]
	enum AutoPossessAI;//[Offset: 0x2d1 , Size: 1]
	class Controller* AIControllerClass;//[Offset: 0x2d4 , Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2d8 , Size: 4]
	byte RemoteViewPitch;//[Offset: 0x2dc , Size: 1]
	Controller* LastHitBy;//[Offset: 0x2e0 , Size: 4]
	Controller* Controller;//[Offset: 0x2e4 , Size: 4]
	Vector ControlInputVector;//[Offset: 0x2f0 , Size: 12]
	Vector LastControlInputVector;//[Offset: 0x2fc , Size: 12]
	function SpawnDefaultController();// 0x3747ac8
	function SetUseViewTranslatedTransform();// 0x1919ca0
	function SetCanAffectNavigationGeneration();// 0x37479f8
	function ReceiveUnpossessed();// 0x206ccd8
	function ReceivePossessed();// 0x206ccd8
	function PawnMakeNoise();// 0x37478a4
	function OnRep_PlayerState();// 0x18b5ff8
	function OnRep_Controller();// 0x3679c04
	function LaunchPawn();// 0x3747790
	function K2_GetMovementInputVector();// 0x3747690
	function IsPlayerControlled();// 0x3747760
	function IsMoveInputIgnored();// 0x3747730
	function IsLocallyControlled();// 0x3747700
	function IsControlled();// 0x37476d8
	function GetPendingMovementInputVector();// 0x3747690
	function GetNavAgentLocation();// 0x3747640
	function GetMovementComponent();// 0x17c8a74
	function GetMovementBaseActor();// 0x37475c8
	function GetLastMovementInputVector();// 0x3747580
	function GetControlRotation();// 0x3747530
	function GetController();// 0x3747514
	function GetBaseAimRotation();// 0x37474c4
	function DetachFromControllerPendingDestroy();// 0x16ff194
	function ConsumeMovementInputVector();// 0x3747474
	function AddMovementInput();// 0x3747360
	function AddControllerYawInput();// 0x37472e0
	function AddControllerRollInput();// 0x16e3b18
	function AddControllerPitchInput();// 0x3747260

--------------------------------
Class: Controller.Actor.Object
	Pawn* Pawn;//[Offset: 0x2c8 , Size: 4]
	Character* Character;//[Offset: 0x2d4 , Size: 4]
	PlayerState* PlayerState;//[Offset: 0x2d8 , Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2dc , Size: 4]
	Rotator ControlRotation;//[Offset: 0x2e0 , Size: 12]
	bool bAttachToPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2ec , Size: 1]
	bool bIsPlayerController;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2ec , Size: 1]
	FName StateName;//[Offset: 0x2f8 , Size: 8]
	delegate OnInstigatedAnyDamage;//[Offset: 0x300 , Size: 12]
	function UnPossess();// 0x3679ec8
	function StopMovement();// 0x17b8ee4
	function SetInitialLocationAndRotation();// 0x3679de8
	function SetIgnoreMoveInput();// 0x3679d60
	function SetIgnoreLookInput();// 0x3679cd8
	function SetControlRotation();// 0x187e3fc
	function ResetIgnoreMoveInput();// 0x3679cbc
	function ResetIgnoreLookInput();// 0x3679ca0
	function ResetIgnoreInputFlags();// 0x1891ef0
	function ReceiveInstigatedAnyDamage();// 0x206ccd8
	function Possess();// 0x3679c20
	function OnRep_PlayerState();// 0x3679c04
	function OnRep_Pawn();// 0x3679be8
	function LineOfSightTo();// 0x3679acc
	function K2_GetPawn();// 0x3679aa4
	function IsPlayerController();// 0x3679a84
	function IsMoveInputIgnored();// 0x3679a54
	function IsLookInputIgnored();// 0x3679a24
	function IsLocalPlayerController();// 0x36799e0
	function IsLocalController();// 0x36799b0
	function GetViewTarget();// 0x36724e0
	function GetDesiredRotation();// 0x3679960
	function GetControlRotation();// 0x3679910
	function ClientSetRotation();// 0x3679844
	function ClientSetLocation();// 0x367977c
	function CastToPlayerController();// 0x3679754

--------------------------------
Class: Character.Pawn.Actor.Object
	SkeletalMeshComponent* Mesh;//[Offset: 0x308 , Size: 4]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x30c , Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x310 , Size: 4]
	BasedMovementInfo BasedMovement;//[Offset: 0x318 , Size: 48]
	BasedMovementInfo ReplicatedBasedMovement;//[Offset: 0x348 , Size: 48]
	float AnimRootMotionTranslationScale;//[Offset: 0x378 , Size: 4]
	Vector BaseTranslationOffset;//[Offset: 0x37c , Size: 12]
	Quat BaseRotationOffset;//[Offset: 0x390 , Size: 16]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x3a0 , Size: 4]
	byte ReplicatedMovementMode;//[Offset: 0x3a4 , Size: 1]
	bool bInBaseReplication;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a5 , Size: 1]
	int MiddleDeviceAllowedParticleNum;//[Offset: 0x3a8 , Size: 4]
	float MiddleDeviceAllowedParticleDistance;//[Offset: 0x3ac , Size: 4]
	int LowDeviceAllowedParticleNum;//[Offset: 0x3b0 , Size: 4]
	float LowDeviceAllowedParticleDistance;//[Offset: 0x3b4 , Size: 4]
	float CrouchedEyeHeight;//[Offset: 0x3bc , Size: 4]
	bool bIsCrouched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0 , Size: 1]
	bool bPressedJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c0 , Size: 1]
	bool bClientUpdating;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c0 , Size: 1]
	bool bClientWasFalling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c0 , Size: 1]
	bool bClientResimulateRootMotion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c0 , Size: 1]
	bool bClientResimulateRootMotionSources;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3c0 , Size: 1]
	bool bSimGravityDisabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3c0 , Size: 1]
	bool bClientCheckEncroachmentOnNetUpdate;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c0 , Size: 1]
	bool bServerMoveIgnoreRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c1 , Size: 1]
	float JumpKeyHoldTime;//[Offset: 0x3c4 , Size: 4]
	float JumpMaxHoldTime;//[Offset: 0x3c8 , Size: 4]
	int JumpMaxCount;//[Offset: 0x3cc , Size: 4]
	int JumpCurrentCount;//[Offset: 0x3d0 , Size: 4]
	bool bWasJumping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d4 , Size: 1]
	delegate OnReachedJumpApex;//[Offset: 0x3d8 , Size: 12]
	delegate MovementModeChangedDelegate;//[Offset: 0x3f0 , Size: 12]
	delegate OnCharacterMovementUpdated;//[Offset: 0x3fc , Size: 12]
	RootMotionSourceGroup SavedRootMotion;//[Offset: 0x408 , Size: 144]
	RootMotionMovementParams ClientRootMotionParams;//[Offset: 0x4a0 , Size: 64]
	RootMotionRepMoves(StructProperty)[] RootMotionRepMoves;//[Offset: 0x4e0 , Size: 12]
	RepRootMotionMontage RepRootMotion;//[Offset: 0x4f0 , Size: 224]
	function UnCrouch();// 0x366fdc4
	function StopJumping();// 0x17b8b94
	function StopAnimMontage();// 0x366fd44
	function SetReplicateMovement();// 0x363c36c
	function RootMotionDebugClientPrintOnScreen();// 0x366fc80
	function PlayAnimMontage();// 0x366fb68
	function OnWalkingOffLedge();// 0x366f9e8
	function OnRep_RootMotion();// 0x366f9d4
	function OnRep_ReplicatedBasedMovement();// 0x170044c
	function OnRep_IsCrouched();// 0x1896fe8
	function OnLaunched();// 0x206ccd8
	function OnLanded();// 0x206ccd8
	function OnJumped();// 0x1700258
	function LaunchCharacter();// 0x366f8b8
	function K2_UpdateCustomMovement();// 0x206ccd8
	function K2_OnStartCrouch();// 0x206ccd8
	function K2_OnMovementModeChanged();// 0x206ccd8
	function K2_OnEndCrouch();// 0x206ccd8
	function Jump();// 0x366f89c
	function IsPlayingRootMotion();// 0x366f874
	function IsPlayingNetworkedRootMotionMontage();// 0x366f84c
	function IsJumpProvidingForce();// 0x366f81c
	function GetCurrentMontage();// 0x366f7f4
	function GetBaseTranslationOffset();// 0x366f7d0
	function GetBaseRotationOffsetRotator();// 0x366f76c
	function GetAnimRootMotionTranslationScale();// 0x366f744
	function Crouch();// 0x366f6bc
	function ClientCheatWalk();// 0x366f6a0
	function ClientCheatGhost();// 0x366f684
	function ClientCheatFly();// 0x366f668
	function CanJumpInternal();// 0x366f638
	function CanJump();// 0x366f610
	function CacheInitialMeshOffset();// 0x366f548

--------------------------------
Class: SkeletalMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	byte AnimationMode;//[Offset: 0x658 , Size: 1]
	class Object* AnimBlueprintGeneratedClass;//[Offset: 0x65c , Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x660 , Size: 4]
	AnimInstance* AnimScriptInstance;//[Offset: 0x664 , Size: 4]
	SubInstances(ObjectProperty)[] SubInstances;//[Offset: 0x668 , Size: 12]
	AnimInstance* PostProcessAnimInstance;//[Offset: 0x674 , Size: 4]
	SingleAnimationPlayData AnimationData;//[Offset: 0x678 , Size: 16]
	CachedBoneSpaceTransforms(StructProperty)[] CachedBoneSpaceTransforms;//[Offset: 0x6ac , Size: 12]
	CachedComponentSpaceTransforms(StructProperty)[] CachedComponentSpaceTransforms;//[Offset: 0x6b8 , Size: 12]
	float GlobalAnimRateScale;//[Offset: 0x6d8 , Size: 4]
	enum UseAsyncScene;//[Offset: 0x6dc , Size: 1]
	bool bHasValidBodies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6dd , Size: 1]
	byte KinematicBonesUpdateType;//[Offset: 0x6de , Size: 1]
	byte PhysicsTransformUpdateMode;//[Offset: 0x6df , Size: 1]
	bool bBlendPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6e0 , Size: 1]
	bool bEnablePhysicsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6e0 , Size: 1]
	bool bUpdateJointsFromAnimation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6e0 , Size: 1]
	bool bDisableClothSimulation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6e0 , Size: 1]
	bool bAllowAnimCurveEvaluation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6e0 , Size: 1]
	bool bDisableAnimCurves;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6e0 , Size: 1]
	DisallowedAnimCurves(NameProperty)[] DisallowedAnimCurves;//[Offset: 0x6e4 , Size: 12]
	bool bCollideWithEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6f0 , Size: 1]
	bool bCollideWithAttachedChildren;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6f0 , Size: 1]
	bool bLocalSpaceSimulation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6f0 , Size: 1]
	bool bClothMorphTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6f0 , Size: 1]
	bool bResetAfterTeleport;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6f0 , Size: 1]
	float ClothBlendWeight;//[Offset: 0x6f4 , Size: 4]
	Vector RootBoneTranslation;//[Offset: 0x6fc , Size: 12]
	bool bDeferMovementFromSceneQueries;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x708 , Size: 1]
	bool bNoSkeletonUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x708 , Size: 1]
	bool bPauseAnims;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x708 , Size: 1]
	bool bUseRefPoseOnInitAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x709 , Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70a , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x70c , Size: 4]
	bool bForceRefpose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x710 , Size: 1]
	bool bOnlyAllowAutonomousTickPose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x711 , Size: 1]
	bool bIsAutonomousTickPose;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x711 , Size: 1]
	bool bOldForceRefPose;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x711 , Size: 1]
	bool bShowPrePhysBones;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x711 , Size: 1]
	bool bRequiredBonesUpToDate;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x711 , Size: 1]
	bool bAnimTreeInitialised;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x711 , Size: 1]
	bool bIncludeComponentLocationIntoBounds;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x711 , Size: 1]
	bool bEnableLineCheckWithBounds;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x711 , Size: 1]
	uint16 CachedAnimCurveUidVersion;//[Offset: 0x712 , Size: 2]
	Vector LineCheckBoundsScale;//[Offset: 0x714 , Size: 12]
	delegate OnConstraintBroken;//[Offset: 0x724 , Size: 12]
	class ClothingSimulationFactory* ClothingSimulationFactory;//[Offset: 0x7e8 , Size: 4]
	float TeleportDistanceThreshold;//[Offset: 0x7ec , Size: 4]
	float TeleportRotationThreshold;//[Offset: 0x7f0 , Size: 4]
	delegate OnAnimInitialized;//[Offset: 0x8e0 , Size: 12]
	AnimSequence* SequenceToPlay;//[Offset: 0x974 , Size: 4]
	AnimationAsset* AnimToPlay;//[Offset: 0x978 , Size: 4]
	bool bDefaultLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97c , Size: 1]
	bool bDefaultPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97c , Size: 1]
	float DefaultPosition;//[Offset: 0x980 , Size: 4]
	float DefaultPlayRate;//[Offset: 0x984 , Size: 4]
	uint32 LastPoseTickFrame;//[Offset: 0x988 , Size: 4]
	float LastPoseTickTime;//[Offset: 0x98c , Size: 4]
	bool bNeedsQueuedAnimEventsDispatched;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9b8 , Size: 1]
	bool bIsNeedUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9ba , Size: 1]
	function UnbindClothFromMasterPoseComponent();// 0x377fdd0
	function SuspendClothingSimulation();// 0x377fdbc
	function Stop();// 0x377fda8
	function SnapshotPose();// 0x377fc98
	function SetUpdateAnimationInEditor();// 0x1702fa4
	function SetTeleportRotationThreshold();// 0x377fc20
	function SetTeleportDistanceThreshold();// 0x377fba8
	function SetPosition();// 0x377fae4
	function SetPlayRate();// 0x377fa6c
	function SetPhysicsBlendWeight();// 0x377f9f4
	function SetNotifyRigidBodyCollisionBelow();// 0x377f8d0
	function SetMorphTarget();// 0x377f7bc
	function SetEnablePhysicsBlending();// 0x377f73c
	function SetEnableGravityOnAllBodiesBelow();// 0x377f620
	function SetEnableBodyGravity();// 0x377f558
	function SetDisableAnimCurves();// 0x377f4d8
	function SetConstraintProfileForAll();// 0x377f40c
	function SetConstraintProfile();// 0x377f2f0
	function SetClothMaxDistanceScale();// 0x377f278
	function SetBodyNotifyRigidBodyCollision();// 0x377f1a8
	function SetAnimInstanceClass();// 0x377f130
	function SetAnimationMode();// 0x377f0b8
	function SetAnimation();// 0x377f040
	function SetAngularLimits();// 0x377eeec
	function SetAllowedAnimCurvesEvaluation();// 0x377edd0
	function SetAllowAnimCurveEvaluation();// 0x377ed50
	function SetAllMotorsAngularVelocityDrive();// 0x377ec30
	function SetAllMotorsAngularPositionDrive();// 0x377eb10
	function SetAllMotorsAngularDriveParams();// 0x377e9c0
	function SetAllBodiesSimulatePhysics();// 0x377e940
	function SetAllBodiesPhysicsBlendWeight();// 0x377e87c
	function SetAllBodiesBelowSimulatePhysics();// 0x377e750
	function SetAllBodiesBelowPhysicsBlendWeight();// 0x377e5dc
	function ResumeClothingSimulation();// 0x377e5c8
	function ResetClothTeleportMode();// 0x377e5b4
	function ResetAllowedAnimCurveEvaluation();// 0x377e5a0
	function ResetAllBodiesSimulatePhysics();// 0x377e58c
	function PlayAnimation();// 0x377e4c8
	function Play();// 0x377e448
	function OverrideAnimationData();// 0x377e2a0
	function K2_GetClosestPointOnPhysicsAsset();// 0x377e0b4
	function IsPlaying();// 0x377e08c
	function IsClothingSimulationSuspended();// 0x377e064
	function IsBodyGravityEnabled();// 0x377dfe4
	function GetTeleportRotationThreshold();// 0x377dfbc
	function GetTeleportDistanceThreshold();// 0x377dfbc
	function GetSubAnimInstances();// 0x377defc
	function GetSkeletalCenterOfMass();// 0x377deb4
	function GetPostProcessInstance();// 0x377de8c
	function GetPosition();// 0x377de64
	function GetPlayRate();// 0x377de3c
	function GetMorphTarget();// 0x377ddbc
	function GetDisableAnimCurves();// 0x377dd98
	function GetCurrentJointAngles();// 0x377dc18
	function GetClothMaxDistanceScale();// 0x16e1d5c
	function GetBoneMass();// 0x377db44
	function GetAnimInstance();// 0x377db1c
	function GetAnimationMode();// 0x377daf4
	function GetAllowedAnimCurveEvaluate();// 0x377dad4
	function ForceClothNextUpdateTeleportAndReset();// 0x377dac0
	function ForceClothNextUpdateTeleport();// 0x377daac
	function FindConstraintBoneName();// 0x377da24
	function ClearMorphTargets();// 0x377da10
	function BreakConstraint();// 0x377d900
	function BindClothToMasterPoseComponent();// 0x377d8ec
	function AllowAnimCurveEvaluation();// 0x377d820
	function AddImpulseToAllBodiesBelow();// 0x377d6b8
	function AddForceToAllBodiesBelow();// 0x377d550
	function AccumulateAllBodiesBelowPhysicsBlendWeight();// 0x377d430

--------------------------------
Class: SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SkeletalMesh* SkeletalMesh;//[Offset: 0x568 , Size: 4]
	SkinnedMeshComponent* MasterPoseComponent;//[Offset: 0x56c , Size: 8]
	bool bUseBoundsFromMasterPoseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5b8 , Size: 1]
	PhysicsAsset* PhysicsAssetOverride;//[Offset: 0x5d4 , Size: 4]
	int ForcedLodModel;//[Offset: 0x5d8 , Size: 4]
	int MinLodModel;//[Offset: 0x5dc , Size: 4]
	LODInfo(StructProperty)[] LODInfo;//[Offset: 0x5ec , Size: 12]
	float StreamingDistanceMultiplier;//[Offset: 0x5f8 , Size: 4]
	Color WireframeColor;//[Offset: 0x5fc , Size: 4]
	bool bForceWireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x600 , Size: 1]
	bool bDisplayBones;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x600 , Size: 1]
	bool bDisableMorphTarget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x600 , Size: 1]
	bool bHideSkin;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x600 , Size: 1]
	bool bPerBoneMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x610 , Size: 1]
	bool bComponentUseFixedSkelBounds;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x610 , Size: 1]
	bool bConsiderAllBodiesForBounds;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x610 , Size: 1]
	byte MeshComponentUpdateFlag;//[Offset: 0x611 , Size: 1]
	bool NeedUpdateEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x612 , Size: 1]
	bool bForceMeshObjectUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x613 , Size: 1]
	bool bCanHighlightSelectedSections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x613 , Size: 1]
	bool bRecentlyRendered;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x613 , Size: 1]
	byte CustomSortAlternateIndexMode;//[Offset: 0x614 , Size: 1]
	bool bCastCapsuleDirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x615 , Size: 1]
	bool bCastCapsuleIndirectShadow;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x615 , Size: 1]
	float CapsuleIndirectShadowMinVisibility;//[Offset: 0x618 , Size: 4]
	bool bCPUSkinning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61c , Size: 1]
	BoxSphereBounds CachedLocalBounds;//[Offset: 0x628 , Size: 28]
	bool bCachedLocalBoundsUpToDate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644 , Size: 1]
	bool bEnableUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x645 , Size: 1]
	bool bDisplayDebugUpdateRateOptimizations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x646 , Size: 1]
	function UnHideBoneByName();// 0x3783974
	function TransformToBoneSpace();// 0x37837b0
	function TransformFromBoneSpace();// 0x37835ec
	function SetVertexColorOverride_LinearColor();// 0x37834dc
	function SetSkinWeightOverride();// 0x37833cc
	function SetSkeletalMesh();// 0x3783300
	function SetPhysicsAsset();// 0x3783234
	function SetMinLOD();// 0x37831bc
	function SetMasterPoseComponent();// 0x3783144
	function SetForcedLOD();// 0x37830cc
	function SetCastCapsuleIndirectShadow();// 0x378304c
	function SetCastCapsuleDirectShadow();// 0x3782fcc
	function SetCapsuleIndirectShadowMinVisibility();// 0x3782f54
	function IsBoneHiddenByName();// 0x3782ed4
	function HideBoneByName();// 0x3782e10
	function GetSocketBoneName();// 0x3782d84
	function GetParentBone();// 0x3782cf8
	function GetNumBones();// 0x3782cd0
	function GetBoneName();// 0x3782c48
	function GetBoneIndex();// 0x3782bc8
	function FindClosestBone_K2();// 0x3782a50
	function ClearVertexColorOverride();// 0x37829d8
	function ClearSkinWeightOverride();// 0x3782960
	function BoneIsChildOf();// 0x3782894

--------------------------------
Class: MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	OverrideMaterials(ObjectProperty)[] OverrideMaterials;//[Offset: 0x54c , Size: 12]
	function SetVectorParameterValueOnMaterials();// 0x37266d8
	function SetScalarParameterValueOnMaterials();// 0x3726614
	function PrestreamTextures();// 0x3726500
	function IsMaterialSlotNameValid();// 0x3726478
	function GetMaterialSlotNames();// 0x37263b0
	function GetMaterials();// 0x37262e8
	function GetMaterialIndex();// 0x3726260

--------------------------------
Class: SkeletalMesh.Object
	Skeleton* Skeleton;//[Offset: 0x2c , Size: 4]
	BoxSphereBounds ImportedBounds;//[Offset: 0x30 , Size: 28]
	BoxSphereBounds ExtendedBounds;//[Offset: 0x4c , Size: 28]
	Vector PositiveBoundsExtension;//[Offset: 0x68 , Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0x74 , Size: 12]
	Materials(StructProperty)[] Materials;//[Offset: 0x80 , Size: 12]
	SkelMirrorTable(StructProperty)[] SkelMirrorTable;//[Offset: 0x8c , Size: 12]
	byte SkelMirrorAxis;//[Offset: 0x98 , Size: 1]
	byte SkelMirrorFlipAxis;//[Offset: 0x99 , Size: 1]
	LODInfo(StructProperty)[] LODInfo;//[Offset: 0x9c , Size: 12]
	bool bUseFullPrecisionUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8 , Size: 1]
	bool bHasBeenSimplified;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8 , Size: 1]
	bool bHasVertexColors;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8 , Size: 1]
	bool bEnablePerPolyCollision;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa8 , Size: 1]
	bool bEnableSelfCollision;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa8 , Size: 1]
	BodySetup* BodySetup;//[Offset: 0xac , Size: 4]
	PhysicsAsset* PhysicsAsset;//[Offset: 0xb0 , Size: 4]
	PhysicsAsset* ShadowPhysicsAsset;//[Offset: 0xb4 , Size: 4]
	NodeMappingData(ObjectProperty)[] NodeMappingData;//[Offset: 0xb8 , Size: 12]
	MorphTargets(ObjectProperty)[] MorphTargets;//[Offset: 0xc4 , Size: 12]
	ClothingAssets(StructProperty)[] ClothingAssets;//[Offset: 0x1e0 , Size: 12]
	class AnimInstance* PostProcessAnimBlueprint;//[Offset: 0x1ec , Size: 4]
	MeshClothingAssets(ObjectProperty)[] MeshClothingAssets;//[Offset: 0x1f0 , Size: 12]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x1fc , Size: 12]
	Sockets(ObjectProperty)[] Sockets;//[Offset: 0x20c , Size: 12]
	function NumSockets();// 0x377bc60
	function IsSectionUsingCloth();// 0x377bb94
	function GetSocketByIndex();// 0x377bb14
	function GetNodeMappingContainer();// 0x377ba94
	function GetImportedBounds();// 0x377ba40
	function GetBounds();// 0x377b9ec
	function FindSocketAndIndex();// 0x377b910
	function FindSocket();// 0x377b890

--------------------------------
Class: Skeleton.Object
	BoneTree(StructProperty)[] BoneTree;//[Offset: 0x20 , Size: 12]
	RefLocalPoses(StructProperty)[] RefLocalPoses;//[Offset: 0x2c , Size: 12]
	Guid VirtualBoneGuid;//[Offset: 0x108 , Size: 16]
	VirtualBones(StructProperty)[] VirtualBones;//[Offset: 0x118 , Size: 12]
	Sockets(ObjectProperty)[] Sockets;//[Offset: 0x124 , Size: 12]
	SmartNameContainer SmartNames;//[Offset: 0x16c , Size: 60]
	BlendProfiles(ObjectProperty)[] BlendProfiles;//[Offset: 0x1b8 , Size: 12]
	SlotGroups(StructProperty)[] SlotGroups;//[Offset: 0x1c4 , Size: 12]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x268 , Size: 12]

--------------------------------
Class: Guid
	int A;//[Offset: 0x0 , Size: 4]
	int B;//[Offset: 0x4 , Size: 4]
	int C;//[Offset: 0x8 , Size: 4]
	int D;//[Offset: 0xc , Size: 4]

--------------------------------
Class: SmartNameContainer

--------------------------------
Class: BoxSphereBounds
	Vector Origin;//[Offset: 0x0 , Size: 12]
	Vector BoxExtent;//[Offset: 0xc , Size: 12]
	float SphereRadius;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: PhysicsAsset.Object
	BoundsBodies(IntProperty)[] BoundsBodies;//[Offset: 0x1c , Size: 12]
	SkeletalBodySetups(ObjectProperty)[] SkeletalBodySetups;//[Offset: 0x28 , Size: 12]
	ConstraintSetup(ObjectProperty)[] ConstraintSetup;//[Offset: 0x34 , Size: 12]
	bool bUseAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	ThumbnailInfo* ThumbnailInfo;//[Offset: 0xbc , Size: 4]
	BodySetup(ObjectProperty)[] BodySetup;//[Offset: 0xc0 , Size: 12]

--------------------------------
Class: ThumbnailInfo.Object

--------------------------------
Class: AnimInstance.Object
	float DeltaTime;//[Offset: 0x1c , Size: 4]
	Skeleton* CurrentSkeleton;//[Offset: 0x20 , Size: 4]
	byte RootMotionMode;//[Offset: 0x24 , Size: 1]
	bool bRunUpdatesInWorkerThreads;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool bCanUseParallelUpdateAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x27 , Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	delegate OnMontageBlendingOut;//[Offset: 0x2c , Size: 12]
	delegate OnMontageStarted;//[Offset: 0x38 , Size: 12]
	delegate OnMontageEnded;//[Offset: 0x44 , Size: 12]
	delegate OnAllMontageInstancesEnded;//[Offset: 0x50 , Size: 12]
	bool bQueueMontageEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	ActiveAnimNotifyState(StructProperty)[] ActiveAnimNotifyState;//[Offset: 0x118 , Size: 12]
	function UnlockAIResources();// 0x3648998
	function TryGetPawnOwner();// 0x3648968
	function StopSlotAnimation();// 0x36488ac
	function SnapshotPose();// 0x3648794
	function SetRootMotionMode();// 0x3648714
	function SetMorphTarget();// 0x3648650
	function SavePoseSnapshot();// 0x36485d0
	function PlaySlotAnimationAsDynamicMontage();// 0x3648358
	function PlaySlotAnimation();// 0x3648170
	function Montage_Stop();// 0x36480b4
	function Montage_SetPosition();// 0x3647ff8
	function Montage_SetPlayRate();// 0x3647f3c
	function Montage_SetNextSection();// 0x3647e34
	function Montage_Resume();// 0x3647dbc
	function Montage_Play();// 0x3647c64
	function Montage_Pause();// 0x3647bec
	function Montage_JumpToSectionsEnd();// 0x3647b30
	function Montage_JumpToSection();// 0x3647a74
	function Montage_IsPlaying();// 0x36479f4
	function Montage_IsActive();// 0x3647974
	function Montage_GetPosition();// 0x36478f4
	function Montage_GetPlayRate();// 0x3647874
	function Montage_GetNextSection();// 0x364779c
	function Montage_GetIsStopped();// 0x364771c
	function Montage_GetCurrentSection();// 0x3647694
	function Montage_GetBlendTime();// 0x3647614
	function LockAIResources();// 0x3647544
	function IsSyncGroupBetweenMarkers();// 0x36473d4
	function IsPlayingSlotAnimation();// 0x3647310
	function IsAnyMontagePlaying();// 0x36472e8
	function HasMarkerBeenHitThisFrame();// 0x364721c
	function GetTimeToClosestMarker();// 0x36470ec
	function GetSyncGroupPosition();// 0x3647054
	function GetRelevantAnimTimeRemainingFraction();// 0x3646f90
	function GetRelevantAnimTimeRemaining();// 0x3646ecc
	function GetRelevantAnimTimeFraction();// 0x3646e08
	function GetRelevantAnimTime();// 0x3646d44
	function GetRelevantAnimLength();// 0x3646c80
	function GetOwningComponent();// 0x3646c58
	function GetOwningActor();// 0x3646c30
	function GetInstanceTransitionTimeElapsedFraction();// 0x3646b6c
	function GetInstanceTransitionTimeElapsed();// 0x3646aa8
	function GetInstanceTransitionCrossfadeDuration();// 0x36469e4
	function GetInstanceStateWeight();// 0x3646920
	function GetInstanceMachineWeight();// 0x36468a0
	function GetInstanceCurrentStateElapsedTime();// 0x3646820
	function GetInstanceAssetPlayerTimeFromEndFraction();// 0x36467a0
	function GetInstanceAssetPlayerTimeFromEnd();// 0x3646720
	function GetInstanceAssetPlayerTimeFraction();// 0x36466a0
	function GetInstanceAssetPlayerTime();// 0x3646620
	function GetInstanceAssetPlayerLength();// 0x36465a0
	function GetCurveValue();// 0x3646520
	function GetCurrentStateName();// 0x3646498
	function GetCurrentActiveMontage();// 0x3646470
	function ClearMorphTargets();// 0x364645c
	function CalculateDirection();// 0x364637c
	function BlueprintUpdateAnimation();// 0x206ccd8
	function BlueprintPostEvaluateAnimation();// 0x206ccd8
	function BlueprintInitializeAnimation();// 0x206ccd8
	function BlueprintBeginPlay();// 0x206ccd8

--------------------------------
Class: SingleAnimationPlayData
	AnimationAsset* AnimToPlay;//[Offset: 0x0 , Size: 4]
	bool bSavedLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	bool bSavedPlaying;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4 , Size: 1]
	float SavedPosition;//[Offset: 0x8 , Size: 4]
	float SavedPlayRate;//[Offset: 0xc , Size: 4]

--------------------------------
Class: AnimationAsset.Object
	Skeleton* Skeleton;//[Offset: 0x20 , Size: 4]
	MetaData(ObjectProperty)[] MetaData;//[Offset: 0x44 , Size: 12]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x50 , Size: 12]

--------------------------------
Class: ClothingSimulationFactory.Object

--------------------------------
Class: AnimSequence.AnimSequenceBase.AnimationAsset.Object
	int NumFrames;//[Offset: 0x7c , Size: 4]
	TrackToSkeletonMapTable(StructProperty)[] TrackToSkeletonMapTable;//[Offset: 0x80 , Size: 12]
	byte AdditiveAnimType;//[Offset: 0xf0 , Size: 1]
	byte RefPoseType;//[Offset: 0xf1 , Size: 1]
	AnimSequence* RefPoseSeq;//[Offset: 0xf4 , Size: 4]
	int RefFrameIndex;//[Offset: 0xf8 , Size: 4]
	int EncodingPkgVersion;//[Offset: 0xfc , Size: 4]
	FName RetargetSource;//[Offset: 0x100 , Size: 8]
	enum Interpolation;//[Offset: 0x108 , Size: 1]
	bool bEnableRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109 , Size: 1]
	byte RootMotionRootLock;//[Offset: 0x10a , Size: 1]
	bool bForceRootLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b , Size: 1]
	bool bRootMotionSettingsCopiedFromMontage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	AuthoredSyncMarkers(StructProperty)[] AuthoredSyncMarkers;//[Offset: 0x110 , Size: 12]

--------------------------------
Class: AnimSequenceBase.AnimationAsset.Object
	Notifies(StructProperty)[] Notifies;//[Offset: 0x5c , Size: 12]
	float SequenceLength;//[Offset: 0x68 , Size: 4]
	float RateScale;//[Offset: 0x6c , Size: 4]
	RawCurveTracks RawCurveData;//[Offset: 0x70 , Size: 12]
	function GetPlayLength();// 0x3650654

--------------------------------
Class: RawCurveTracks
	FloatCurves(StructProperty)[] FloatCurves;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Character* CharacterOwner;//[Offset: 0x12c , Size: 4]
	bool bApplyGravityWhileJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x130 , Size: 1]
	float GravityScale;//[Offset: 0x134 , Size: 4]
	float MaxStepHeight;//[Offset: 0x138 , Size: 4]
	float JumpZVelocity;//[Offset: 0x13c , Size: 4]
	float JumpOffJumpZFactor;//[Offset: 0x140 , Size: 4]
	float WalkableFloorAngle;//[Offset: 0x144 , Size: 4]
	float WalkableFloorZ;//[Offset: 0x148 , Size: 4]
	byte MovementMode;//[Offset: 0x14c , Size: 1]
	byte CustomMovementMode;//[Offset: 0x14d , Size: 1]
	float GroundFriction;//[Offset: 0x170 , Size: 4]
	float MaxWalkSpeed;//[Offset: 0x174 , Size: 4]
	float MaxWalkSpeedCrouched;//[Offset: 0x178 , Size: 4]
	float MaxSwimSpeed;//[Offset: 0x17c , Size: 4]
	float MaxFlySpeed;//[Offset: 0x180 , Size: 4]
	float MaxCustomMovementSpeed;//[Offset: 0x184 , Size: 4]
	float MaxAcceleration;//[Offset: 0x188 , Size: 4]
	float MinAnalogWalkSpeed;//[Offset: 0x18c , Size: 4]
	float BrakingFrictionFactor;//[Offset: 0x190 , Size: 4]
	float BrakingFriction;//[Offset: 0x194 , Size: 4]
	bool bUseSeparateBrakingFriction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x198 , Size: 1]
	float BrakingDecelerationWalking;//[Offset: 0x19c , Size: 4]
	float BrakingDecelerationFalling;//[Offset: 0x1a0 , Size: 4]
	float BrakingDecelerationSwimming;//[Offset: 0x1a4 , Size: 4]
	float BrakingDecelerationFlying;//[Offset: 0x1a8 , Size: 4]
	float AirControl;//[Offset: 0x1ac , Size: 4]
	float AirControlBoostMultiplier;//[Offset: 0x1b0 , Size: 4]
	float AirControlBoostVelocityThreshold;//[Offset: 0x1b4 , Size: 4]
	float FallingLateralFriction;//[Offset: 0x1b8 , Size: 4]
	float CrouchedHalfHeight;//[Offset: 0x1bc , Size: 4]
	float Buoyancy;//[Offset: 0x1c0 , Size: 4]
	float PerchRadiusThreshold;//[Offset: 0x1c4 , Size: 4]
	float PerchAdditionalHeight;//[Offset: 0x1c8 , Size: 4]
	Rotator RotationRate;//[Offset: 0x1cc , Size: 12]
	bool bUseControllerDesiredRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d8 , Size: 1]
	bool bOrientRotationToMovement;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d8 , Size: 1]
	bool bSweepWhileNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d8 , Size: 1]
	bool bMovementInProgress;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1d8 , Size: 1]
	bool bEnableScopedMovementUpdates;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d8 , Size: 1]
	bool bForceMaxAccel;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d8 , Size: 1]
	bool bRunPhysicsWithNoController;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1d8 , Size: 1]
	bool bForceNextFloorCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d9 , Size: 1]
	bool bShrinkProxyCapsule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d9 , Size: 1]
	bool bCanWalkOffLedges;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d9 , Size: 1]
	bool bCanWalkOffLedgesWhenCrouching;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d9 , Size: 1]
	bool bNetworkSkipProxyPredictionOnNetUpdate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1d9 , Size: 1]
	bool bDeferUpdateMoveComponent;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1d9 , Size: 1]
	SceneComponent* DeferredUpdatedMoveComponent;//[Offset: 0x1dc , Size: 4]
	float MaxOutOfWaterStepHeight;//[Offset: 0x1e0 , Size: 4]
	float OutofWaterZ;//[Offset: 0x1e4 , Size: 4]
	float Mass;//[Offset: 0x1e8 , Size: 4]
	bool bEnablePhysicsInteraction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ec , Size: 1]
	bool bTouchForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ed , Size: 1]
	bool bPushForceScaledToMass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ee , Size: 1]
	bool bPushForceUsingZOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ef , Size: 1]
	bool bScalePushForceToVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f0 , Size: 1]
	float StandingDownwardForceScale;//[Offset: 0x1f4 , Size: 4]
	float InitialPushForceFactor;//[Offset: 0x1f8 , Size: 4]
	float PushForceFactor;//[Offset: 0x1fc , Size: 4]
	float PushForcePointZOffsetFactor;//[Offset: 0x200 , Size: 4]
	float TouchForceFactor;//[Offset: 0x204 , Size: 4]
	float MinTouchForce;//[Offset: 0x208 , Size: 4]
	float MaxTouchForce;//[Offset: 0x20c , Size: 4]
	float RepulsionForce;//[Offset: 0x210 , Size: 4]
	bool bForceBraking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x214 , Size: 1]
	float CrouchedSpeedMultiplier;//[Offset: 0x218 , Size: 4]
	float UpperImpactNormalScale;//[Offset: 0x21c , Size: 4]
	Vector Acceleration;//[Offset: 0x220 , Size: 12]
	Vector LastUpdateLocation;//[Offset: 0x22c , Size: 12]
	Quat LastUpdateRotation;//[Offset: 0x240 , Size: 16]
	Vector LastUpdateVelocity;//[Offset: 0x250 , Size: 12]
	float ServerLastTransformUpdateTimeStamp;//[Offset: 0x25c , Size: 4]
	Vector PendingImpulseToApply;//[Offset: 0x260 , Size: 12]
	Vector PendingForceToApply;//[Offset: 0x26c , Size: 12]
	float AnalogInputModifier;//[Offset: 0x278 , Size: 4]
	float MaxSimulationTimeStep;//[Offset: 0x284 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x288 , Size: 4]
	float MaxDepenetrationWithGeometry;//[Offset: 0x28c , Size: 4]
	float MaxDepenetrationWithGeometryAsProxy;//[Offset: 0x290 , Size: 4]
	float MaxDepenetrationWithPawn;//[Offset: 0x294 , Size: 4]
	float MaxDepenetrationWithPawnAsProxy;//[Offset: 0x298 , Size: 4]
	float NetworkSimulatedSmoothLocationTime;//[Offset: 0x29c , Size: 4]
	float NetworkSimulatedSmoothRotationTime;//[Offset: 0x2a0 , Size: 4]
	float ListenServerNetworkSimulatedSmoothLocationTime;//[Offset: 0x2a4 , Size: 4]
	float ListenServerNetworkSimulatedSmoothRotationTime;//[Offset: 0x2a8 , Size: 4]
	float NetProxyShrinkRadius;//[Offset: 0x2ac , Size: 4]
	float NetProxyShrinkHalfHeight;//[Offset: 0x2b0 , Size: 4]
	float NetworkMaxSmoothUpdateDistance;//[Offset: 0x2b4 , Size: 4]
	float NetworkNoSmoothUpdateDistance;//[Offset: 0x2b8 , Size: 4]
	bool bReplaySmoothUseInterp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2bc , Size: 1]
	enum NetworkSmoothingMode;//[Offset: 0x2bd , Size: 1]
	float LedgeCheckThreshold;//[Offset: 0x2c0 , Size: 4]
	float JumpOutOfWaterPitch;//[Offset: 0x2c4 , Size: 4]
	FindFloorResult CurrentFloor;//[Offset: 0x2c8 , Size: 152]
	byte DefaultLandMovementMode;//[Offset: 0x360 , Size: 1]
	byte DefaultWaterMovementMode;//[Offset: 0x361 , Size: 1]
	byte GroundMovementMode;//[Offset: 0x362 , Size: 1]
	bool bMaintainHorizontalGroundVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x363 , Size: 1]
	bool bImpartBaseVelocityZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x363 , Size: 1]
	bool bImpartBaseAngularVelocity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x363 , Size: 1]
	bool bJustTeleported;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x363 , Size: 1]
	bool bNetworkUpdateReceived;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x363 , Size: 1]
	bool bNetworkMovementModeChanged;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x363 , Size: 1]
	bool bIgnoreClientMovementErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364 , Size: 1]
	bool bNotifyApex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x364 , Size: 1]
	bool bCheatFlying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x364 , Size: 1]
	bool bWantsToCrouch;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x364 , Size: 1]
	bool bCrouchMaintainsBaseLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x364 , Size: 1]
	bool bIgnoreBaseRotation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x364 , Size: 1]
	bool bFastAttachedMove;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x364 , Size: 1]
	bool bAlwaysCheckFloor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x364 , Size: 1]
	bool bUseFlatBaseForFloorChecks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x365 , Size: 1]
	bool bPerformingJumpOff;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x365 , Size: 1]
	bool bWantsToLeaveNavWalking;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x365 , Size: 1]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x365 , Size: 1]
	bool bRequestedMoveUseAcceleration;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x365 , Size: 1]
	bool bHasRequestedVelocity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x365 , Size: 1]
	bool bRequestedMoveWithMaxSpeed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x365 , Size: 1]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x366 , Size: 1]
	bool bProjectNavMeshWalking;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x366 , Size: 1]
	bool bProjectNavMeshOnBothWorldChannels;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x366 , Size: 1]
	float AvoidanceConsiderationRadius;//[Offset: 0x378 , Size: 4]
	Vector RequestedVelocity;//[Offset: 0x37c , Size: 12]
	int AvoidanceUID;//[Offset: 0x388 , Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x38c , Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x390 , Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x394 , Size: 4]
	float AvoidanceWeight;//[Offset: 0x398 , Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x39c , Size: 12]
	float NavMeshProjectionInterval;//[Offset: 0x448 , Size: 4]
	float NavMeshProjectionTimer;//[Offset: 0x44c , Size: 4]
	float NavMeshProjectionInterpSpeed;//[Offset: 0x450 , Size: 4]
	float NavMeshProjectionHeightScaleUp;//[Offset: 0x454 , Size: 4]
	float NavMeshProjectionHeightScaleDown;//[Offset: 0x458 , Size: 4]
	float NavWalkingFloorDistTolerance;//[Offset: 0x45c , Size: 4]
	CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;//[Offset: 0x460 , Size: 60]
	float MinTimeBetweenTimeStampResets;//[Offset: 0x4a4 , Size: 4]
	RootMotionSourceGroup CurrentRootMotion;//[Offset: 0x4a8 , Size: 144]
	RootMotionMovementParams RootMotionParams;//[Offset: 0x5d0 , Size: 64]
	Vector AnimRootMotionVelocity;//[Offset: 0x610 , Size: 12]
	bool bWasSimulatingRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61c , Size: 1]
	bool bAllowPhysicsRotationDuringAnimRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x61d , Size: 1]
	function SetWalkableFloorZ();// 0x3673d10
	function SetWalkableFloorAngle();// 0x3673c98
	function SetMovementMode();// 0x3673bd4
	function SetGroupsToIgnoreMask();// 0x3673b50
	function SetGroupsToIgnore();// 0x3673ad8
	function SetGroupsToAvoidMask();// 0x3673a54
	function SetGroupsToAvoid();// 0x36739dc
	function SetAvoidanceGroupMask();// 0x3673958
	function SetAvoidanceGroup();// 0x36738e0
	function SetAvoidanceEnabled();// 0x3673860
	function ServerMoveOld();// 0x367370c
	function ServerMoveDualHybridRootMotion();// 0x36731d4
	function ServerMoveDual();// 0x3672c9c
	function ServerMove();// 0x3672910
	function K2_GetWalkableFloorZ();// 0x36728e8
	function K2_GetWalkableFloorAngle();// 0x36728c0
	function K2_GetModifiedMaxAcceleration();// 0x3672890
	function K2_FindFloor();// 0x36727a8
	function K2_ComputeFloorDist();// 0x36725e8
	function IsWalking();// 0x36725b8
	function IsWalkable();// 0x17f4ac8
	function GetValidPerchRadius();// 0x3672590
	function GetPerchRadiusThreshold();// 0x3672568
	function GetMovementBase();// 0x3672540
	function GetMinAnalogSpeed();// 0x3672510
	function GetMaxJumpHeightWithJumpTime();// 0x36724e0
	function GetMaxJumpHeight();// 0x36724b0
	function GetMaxBrakingDeceleration();// 0x3672480
	function GetMaxAcceleration();// 0x3672450
	function GetImpartedMovementBaseVelocity();// 0x3672400
	function GetCurrentAcceleration();// 0x36723b8
	function GetCharacterOwner();// 0x367239c
	function GetAnalogInputModifier();// 0x3672374
	function DisableMovement();// 0x3672358
	function ClientVeryShortAdjustPosition();// 0x3672118
	function ClientAdjustRootMotionSourcePosition();// 0x3671d10
	function ClientAdjustRootMotionPosition();// 0x36719ec
	function ClientAdjustPosition();// 0x3671744
	function ClientAckGoodMove();// 0x36716c4
	function ClearAccumulatedForces();// 0x36716a8
	function CapsuleTouched();// 0x36714a4
	function CalcVelocity();// 0x3671348
	function AddImpulse();// 0x367127c
	function AddForce();// 0x3671204

--------------------------------
Class: PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	Pawn* PawnOwner;//[Offset: 0x120 , Size: 4]
	function K2_GetInputVector();// 0x3748754
	function IsMoveInputIgnored();// 0x374879c
	function GetPendingInputVector();// 0x3748754
	function GetPawnOwner();// 0x18fec68
	function GetLastInputVector();// 0x374870c
	function ConsumeInputVector();// 0x37486bc
	function AddInputVector();// 0x37485f0

--------------------------------
Class: NavMovementComponent.MovementComponent.ActorComponent.Object
	NavAgentProperties NavAgentProps;//[Offset: 0xf4 , Size: 24]
	float FixedPathBrakingDistance;//[Offset: 0x10c , Size: 4]
	bool bUpdateNavAgentWithOwnersCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110 , Size: 1]
	bool bUseAccelerationForPaths;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110 , Size: 1]
	bool bUseFixedBrakingDistanceForPaths;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x110 , Size: 1]
	MovementProperties MovementState;//[Offset: 0x114 , Size: 4]
	function StopMovementKeepPathing();// 0x37320a0
	function StopActiveMovement();// 0x3732084
	function IsSwimming();// 0x3732054
	function IsMovingOnGround();// 0x36725b8
	function IsFlying();// 0x3732024
	function IsFalling();// 0x17d5bc0
	function IsCrouching();// 0x17d5bf0

--------------------------------
Class: MovementComponent.ActorComponent.Object
	SceneComponent* UpdatedComponent;//[Offset: 0xbc , Size: 4]
	PrimitiveComponent* UpdatedPrimitive;//[Offset: 0xc0 , Size: 4]
	Vector Velocity;//[Offset: 0xc8 , Size: 12]
	bool bConstrainToPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4 , Size: 1]
	bool bSnapToPlaneAtStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd4 , Size: 1]
	enum PlaneConstraintAxisSetting;//[Offset: 0xd5 , Size: 1]
	Vector PlaneConstraintNormal;//[Offset: 0xd8 , Size: 12]
	Vector PlaneConstraintOrigin;//[Offset: 0xe4 , Size: 12]
	bool bUpdateOnlyIfRendered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf0 , Size: 1]
	bool bAutoUpdateTickRegistration;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf0 , Size: 1]
	bool bTickBeforeOwner;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf0 , Size: 1]
	bool bAutoRegisterUpdatedComponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf0 , Size: 1]
	function StopMovementImmediately();// 0x372995c
	function SnapUpdatedComponentToPlane();// 0x3729940
	function SetUpdatedComponent();// 0x37298c0
	function SetPlaneConstraintOrigin();// 0x3729848
	function SetPlaneConstraintNormal();// 0x37297d0
	function SetPlaneConstraintFromVectors();// 0x3729708
	function SetPlaneConstraintEnabled();// 0x3729680
	function SetPlaneConstraintAxisSetting();// 0x3729600
	function PhysicsVolumeChanged();// 0x1c74828
	function K2_MoveUpdatedComponent();// 0x372943c
	function K2_GetModifiedMaxSpeed();// 0x1705ea8
	function K2_GetMaxSpeedModifier();// 0x372940c
	function IsExceedingMaxSpeed();// 0x3729384
	function GetPlaneConstraintOrigin();// 0x3729350
	function GetPlaneConstraintNormal();// 0x372931c
	function GetPlaneConstraintAxisSetting();// 0x3729300
	function GetPhysicsVolume();// 0x37292d0
	function GetMaxSpeed();// 0x37292a0
	function GetGravityZ();// 0x1c606d8
	function ConstrainNormalToPlane();// 0x3729204
	function ConstrainLocationToPlane();// 0x3729168
	function ConstrainDirectionToPlane();// 0x37290cc

--------------------------------
Class: NavAgentProperties.MovementProperties
	float AgentRadius;//[Offset: 0x4 , Size: 4]
	float AgentHeight;//[Offset: 0x8 , Size: 4]
	float AgentStepHeight;//[Offset: 0xc , Size: 4]
	float NavWalkingSearchHeightScale;//[Offset: 0x10 , Size: 4]
	class NavigationData* PreferredNavData;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: MovementProperties
	bool bCanCrouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bCanWalk;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bCanSwim;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bCanFly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]

--------------------------------
Class: NavigationData.Actor.Object
	PrimitiveComponent* RenderingComp;//[Offset: 0x2c4 , Size: 4]
	NavDataConfig NavDataConfig;//[Offset: 0x2c8 , Size: 80]
	bool bEnableDrawing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318 , Size: 1]
	bool bForceRebuildOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x318 , Size: 1]
	bool bCanBeMainNavData;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x318 , Size: 1]
	bool bCanSpawnOnRebuild;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x318 , Size: 1]
	bool bRebuildAtRuntime;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x318 , Size: 1]
	enum RuntimeGeneration;//[Offset: 0x319 , Size: 1]
	float ObservedPathsTickInterval;//[Offset: 0x31c , Size: 4]
	uint32 DataVersion;//[Offset: 0x320 , Size: 4]
	SupportedAreas(StructProperty)[] SupportedAreas;//[Offset: 0x3ac , Size: 12]

--------------------------------
Class: NavDataConfig.NavAgentProperties.MovementProperties
	FName Name;//[Offset: 0x18 , Size: 8]
	Color Color;//[Offset: 0x20 , Size: 4]
	Vector DefaultQueryExtent;//[Offset: 0x24 , Size: 12]
	class NavigationData* NavigationDataClass;//[Offset: 0x30 , Size: 4]
	SoftClassPath NavigationDataClassName;//[Offset: 0x38 , Size: 24]

--------------------------------
Class: SoftClassPath.SoftObjectPath

--------------------------------
Class: SoftObjectPath
	FName AssetPathName;//[Offset: 0x0 , Size: 8]
	FString SubPathString;//[Offset: 0x8 , Size: 12]

--------------------------------
Class: Quat
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: FindFloorResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bWalkableFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bLineTrace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	float FloorDist;//[Offset: 0x4 , Size: 4]
	float LineDist;//[Offset: 0x8 , Size: 4]
	HitResult HitResult;//[Offset: 0x10 , Size: 136]

--------------------------------
Class: HitResult
	bool bBlockingHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bStartPenetrating;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	float Time;//[Offset: 0x4 , Size: 4]
	float Distance;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantize Location;//[Offset: 0xc , Size: 12]
	Vector_NetQuantize ImpactPoint;//[Offset: 0x18 , Size: 12]
	Vector_NetQuantizeNormal Normal;//[Offset: 0x24 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0x30 , Size: 12]
	Vector_NetQuantize TraceStart;//[Offset: 0x3c , Size: 12]
	Vector_NetQuantize TraceEnd;//[Offset: 0x48 , Size: 12]
	float PenetrationDepth;//[Offset: 0x54 , Size: 4]
	int Item;//[Offset: 0x58 , Size: 4]
	PhysicalMaterial* PhysMaterial;//[Offset: 0x5c , Size: 8]
	Actor* Actor;//[Offset: 0x64 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x6c , Size: 8]
	FName BoneName;//[Offset: 0x78 , Size: 8]
	int FaceIndex;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: Vector_NetQuantize.Vector

--------------------------------
Class: Vector_NetQuantizeNormal.Vector

--------------------------------
Class: NavAvoidanceMask
	bool bGroup0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bGroup1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bGroup2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bGroup3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bGroup4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bGroup5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bGroup6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bGroup7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bGroup8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bGroup9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bGroup10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bGroup11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bGroup12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bGroup13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bGroup14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bGroup15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]
	bool bGroup16;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2 , Size: 1]
	bool bGroup17;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2 , Size: 1]
	bool bGroup18;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2 , Size: 1]
	bool bGroup19;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2 , Size: 1]
	bool bGroup20;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2 , Size: 1]
	bool bGroup21;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2 , Size: 1]
	bool bGroup22;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2 , Size: 1]
	bool bGroup23;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2 , Size: 1]
	bool bGroup24;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3 , Size: 1]
	bool bGroup25;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3 , Size: 1]
	bool bGroup26;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3 , Size: 1]
	bool bGroup27;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3 , Size: 1]
	bool bGroup28;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3 , Size: 1]
	bool bGroup29;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3 , Size: 1]
	bool bGroup30;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3 , Size: 1]
	bool bGroup31;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3 , Size: 1]

--------------------------------
Class: CharacterMovementComponentPostPhysicsTickFunction.TickFunction

--------------------------------
Class: RootMotionSourceGroup
	bool bHasAdditiveSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]
	bool bHasOverrideSources;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d , Size: 1]
	Vector_NetQuantize10 LastPreAdditiveVelocity;//[Offset: 0x80 , Size: 12]
	bool bIsAdditiveVelocityApplied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	RootMotionSourceSettings LastAccumulatedSettings;//[Offset: 0x8d , Size: 1]

--------------------------------
Class: Vector_NetQuantize10.Vector

--------------------------------
Class: RootMotionSourceSettings
	byte Flags;//[Offset: 0x0 , Size: 1]

--------------------------------
Class: RootMotionMovementParams
	bool bHasRootMotion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float BlendWeight;//[Offset: 0x4 , Size: 4]
	Transform RootMotionTransform;//[Offset: 0x10 , Size: 48]

--------------------------------
Class: Transform
	Quat Rotation;//[Offset: 0x0 , Size: 16]
	Vector Translation;//[Offset: 0x10 , Size: 12]
	Vector Scale3D;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: CapsuleComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float CapsuleHalfHeight;//[Offset: 0x55c , Size: 4]
	float CapsuleRadius;//[Offset: 0x560 , Size: 4]
	float CapsuleHeight;//[Offset: 0x564 , Size: 4]
	function SetCapsuleSize();// 0x366e4f8
	function SetCapsuleRadius();// 0x366e430
	function SetCapsuleHalfHeight();// 0x366e368
	function GetUnscaledCapsuleSize_WithoutHemisphere();// 0x366e27c
	function GetUnscaledCapsuleSize();// 0x366e198
	function GetUnscaledCapsuleRadius();// 0x366e17c
	function GetUnscaledCapsuleHalfHeight_WithoutHemisphere();// 0x366e14c
	function GetUnscaledCapsuleHalfHeight();// 0x366e130
	function GetShapeScale();// 0x366e0c0
	function GetScaledCapsuleSize_WithoutHemisphere();// 0x366df68
	function GetScaledCapsuleSize();// 0x366de18
	function GetScaledCapsuleRadius();// 0x366dda0
	function GetScaledCapsuleHalfHeight_WithoutHemisphere();// 0x366dd18
	function GetScaledCapsuleHalfHeight();// 0x366dc98

--------------------------------
Class: ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ShapeColor;//[Offset: 0x54c , Size: 4]
	BodySetup* ShapeBodySetup;//[Offset: 0x550 , Size: 4]
	bool bDrawOnlyIfSelected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x554 , Size: 1]
	bool bShouldCollideWhenPlacing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x554 , Size: 1]
	bool bDynamicObstacle;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x554 , Size: 1]
	class NavArea* AreaClass;//[Offset: 0x558 , Size: 4]

--------------------------------
Class: NavArea.Object
	float DefaultCost;//[Offset: 0x1c , Size: 4]
	float FixedAreaEnteringCost;//[Offset: 0x20 , Size: 4]
	Color DrawColor;//[Offset: 0x24 , Size: 4]
	NavAgentSelector SupportedAgents;//[Offset: 0x28 , Size: 4]
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2c , Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d , Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d , Size: 1]

--------------------------------
Class: NavAgentSelector
	bool bSupportsAgent0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bSupportsAgent8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bSupportsAgent15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]

--------------------------------
Class: BasedMovementInfo
	PrimitiveComponent* MovementBase;//[Offset: 0x0 , Size: 4]
	FName BoneName;//[Offset: 0x8 , Size: 8]
	Vector_NetQuantize100 Location;//[Offset: 0x10 , Size: 12]
	Rotator Rotation;//[Offset: 0x1c , Size: 12]
	bool bServerHasBaseComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29 , Size: 1]
	bool bServerHasVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a , Size: 1]

--------------------------------
Class: RepRootMotionMontage
	bool bIsActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	AnimMontage* AnimMontage;//[Offset: 0x4 , Size: 4]
	float Position;//[Offset: 0x8 , Size: 4]
	Vector_NetQuantize100 Location;//[Offset: 0xc , Size: 12]
	Rotator Rotation;//[Offset: 0x18 , Size: 12]
	PrimitiveComponent* MovementBase;//[Offset: 0x24 , Size: 4]
	FName MovementBaseBoneName;//[Offset: 0x28 , Size: 8]
	bool bRelativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	bool bRelativeRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31 , Size: 1]
	RootMotionSourceGroup AuthoritativeRootMotion;//[Offset: 0x34 , Size: 144]
	Vector_NetQuantize10 Acceleration;//[Offset: 0xc4 , Size: 12]
	Vector_NetQuantize10 LinearVelocity;//[Offset: 0xd0 , Size: 12]

--------------------------------
Class: AnimMontage.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AlphaBlend BlendIn;//[Offset: 0x7c , Size: 44]
	float BlendInTime;//[Offset: 0xa8 , Size: 4]
	AlphaBlend BlendOut;//[Offset: 0xac , Size: 44]
	float BlendOutTime;//[Offset: 0xd8 , Size: 4]
	float BlendOutTriggerTime;//[Offset: 0xdc , Size: 4]
	FName SyncGroup;//[Offset: 0xe0 , Size: 8]
	int SyncSlotIndex;//[Offset: 0xe8 , Size: 4]
	MarkerSyncData MarkerData;//[Offset: 0xec , Size: 24]
	CompositeSections(StructProperty)[] CompositeSections;//[Offset: 0x104 , Size: 12]
	SlotAnimTracks(StructProperty)[] SlotAnimTracks;//[Offset: 0x110 , Size: 12]
	BranchingPoints(StructProperty)[] BranchingPoints;//[Offset: 0x11c , Size: 12]
	bool bEnableRootMotionTranslation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128 , Size: 1]
	bool bEnableRootMotionRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x129 , Size: 1]
	byte RootMotionRootLock;//[Offset: 0x12a , Size: 1]
	BranchingPointMarkers(StructProperty)[] BranchingPointMarkers;//[Offset: 0x12c , Size: 12]
	BranchingPointStateNotifyIndices(IntProperty)[] BranchingPointStateNotifyIndices;//[Offset: 0x138 , Size: 12]
	TimeStretchCurve TimeStretchCurve;//[Offset: 0x144 , Size: 32]
	FName TimeStretchCurveName;//[Offset: 0x168 , Size: 8]

--------------------------------
Class: AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object

--------------------------------
Class: AlphaBlend
	enum BlendOption;//[Offset: 0x0 , Size: 1]
	CurveFloat* CustomCurve;//[Offset: 0x4 , Size: 4]
	float blendTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: CurveFloat.CurveBase.Object
	RichCurve FloatCurve;//[Offset: 0x20 , Size: 84]
	bool bIsEventCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]
	function GetFloatValue();// 0x367c124

--------------------------------
Class: CurveBase.Object
	function GetValueRange();// 0x367bb60
	function GetTimeRange();// 0x367ba80

--------------------------------
Class: RichCurve.IndexedCurve
	byte PreInfinityExtrap;//[Offset: 0x40 , Size: 1]
	byte PostInfinityExtrap;//[Offset: 0x41 , Size: 1]
	float DefaultValue;//[Offset: 0x44 , Size: 4]
	Keys(StructProperty)[] Keys;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: IndexedCurve
	KeyHandleMap KeyHandlesToIndices;//[Offset: 0x4 , Size: 60]

--------------------------------
Class: KeyHandleMap

--------------------------------
Class: MarkerSyncData
	AuthoredSyncMarkers(StructProperty)[] AuthoredSyncMarkers;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: TimeStretchCurve
	float SamplingRate;//[Offset: 0x0 , Size: 4]
	float CurveValueMinPrecision;//[Offset: 0x4 , Size: 4]
	Markers(StructProperty)[] Markers;//[Offset: 0x8 , Size: 12]
	float Sum_dT_i_by_C_i;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: PlayerState.Info.Actor.Object
	float Score;//[Offset: 0x2c4 , Size: 4]
	byte Ping;//[Offset: 0x2c8 , Size: 1]
	FString PlayerName;//[Offset: 0x2cc , Size: 12]
	int PlayerID;//[Offset: 0x2e4 , Size: 4]
	bool bIsSpectator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e8 , Size: 1]
	bool bOnlySpectator;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e8 , Size: 1]
	bool bIsABot;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e8 , Size: 1]
	bool bIsInactive;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2e8 , Size: 1]
	bool bFromPreviousLevel;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2e8 , Size: 1]
	int StartTime;//[Offset: 0x2ec , Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x2f0 , Size: 4]
	FString SavedNetworkAddress;//[Offset: 0x2f8 , Size: 12]
	UniqueNetIdRepl UniqueId;//[Offset: 0x304 , Size: 12]
	function ReceiveOverrideWith();// 0x206ccd8
	function ReceiveCopyProperties();// 0x206ccd8
	function OnRep_UniqueId();// 0x16fae60
	function OnRep_Score();// 0x16f99b4
	function OnRep_PlayerName();// 0x16e6e40
	function OnRep_bIsInactive();// 0x16a8160

--------------------------------
Class: Info.Actor.Object

--------------------------------
Class: LocalMessage.Object

--------------------------------
Class: UniqueNetIdRepl.UniqueNetIdWrapper

--------------------------------
Class: UniqueNetIdWrapper

--------------------------------
Class: ChildActorComponent.SceneComponent.ActorComponent.Object
	class Actor* ChildActorClass;//[Offset: 0x260 , Size: 4]
	Actor* ChildActor;//[Offset: 0x264 , Size: 4]
	Actor* ChildActorTemplate;//[Offset: 0x268 , Size: 4]
	function SetChildActorClass();// 0x367767c

--------------------------------
Class: AbstractNavData.NavigationData.Actor.Object

--------------------------------
Class: Channel.Object
	NetConnection* Connection;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: NetConnection.Player.Object
	Children(ObjectProperty)[] Children;//[Offset: 0x30 , Size: 12]
	NetDriver* Driver;//[Offset: 0x3c , Size: 4]
	class PackageMap* PackageMapClass;//[Offset: 0x40 , Size: 4]
	PackageMap* PackageMap;//[Offset: 0x44 , Size: 4]
	OpenChannels(ObjectProperty)[] OpenChannels;//[Offset: 0x48 , Size: 12]
	SentTemporaries(ObjectProperty)[] SentTemporaries;//[Offset: 0x54 , Size: 12]
	Actor* ViewTarget;//[Offset: 0x60 , Size: 4]
	Actor* OwningActor;//[Offset: 0x64 , Size: 4]
	int MaxPacket;//[Offset: 0x68 , Size: 4]
	bool InternalAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	UniqueNetIdRepl PlayerID;//[Offset: 0xec , Size: 12]
	double LastReceiveTime;//[Offset: 0x148 , Size: 8]
	ChannelsToTick(ObjectProperty)[] ChannelsToTick;//[Offset: 0x294b8 , Size: 12]

--------------------------------
Class: Player.Object
	PlayerController* PlayerController;//[Offset: 0x20 , Size: 4]
	int CurrentNetSpeed;//[Offset: 0x24 , Size: 4]
	int ConfiguredInternetSpeed;//[Offset: 0x28 , Size: 4]
	int ConfiguredLanSpeed;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: NetDriver.Object
	FString NetConnectionClassName;//[Offset: 0x20 , Size: 12]
	int MaxDownloadSize;//[Offset: 0x2c , Size: 4]
	bool bClampListenServerTickRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	int NetServerMaxTickRate;//[Offset: 0x34 , Size: 4]
	int MaxInternetClientRate;//[Offset: 0x38 , Size: 4]
	int MaxClientRate;//[Offset: 0x3c , Size: 4]
	float ServerTravelPause;//[Offset: 0x40 , Size: 4]
	float SpawnPrioritySeconds;//[Offset: 0x44 , Size: 4]
	float RelevantTimeout;//[Offset: 0x48 , Size: 4]
	float KeepAliveTime;//[Offset: 0x4c , Size: 4]
	float InitialConnectTimeout;//[Offset: 0x50 , Size: 4]
	float ConnectionTimeout;//[Offset: 0x54 , Size: 4]
	float TimeoutMultiplierForUnoptimizedBuilds;//[Offset: 0x58 , Size: 4]
	bool bNoTimeouts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	bool bIgnoreStablyNamed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d , Size: 1]
	NetConnection* ServerConnection;//[Offset: 0x60 , Size: 4]
	ClientConnections(ObjectProperty)[] ClientConnections;//[Offset: 0x64 , Size: 12]
	World* World;//[Offset: 0x7c , Size: 4]
	class Object* NetConnectionClass;//[Offset: 0x90 , Size: 4]
	Property* RoleProperty;//[Offset: 0x94 , Size: 4]
	Property* RemoteRoleProperty;//[Offset: 0x98 , Size: 4]
	FName NetDriverName;//[Offset: 0xa0 , Size: 8]
	float Time;//[Offset: 0xcc , Size: 4]
	<PendingForceNetUpdateObjectSet(ObjectProperty)> PendingForceNetUpdateObjectSet;//[Offset: 0x340 , Size: 60]

--------------------------------
Class: World.Object
	Level* PersistentLevel;//[Offset: 0x20 , Size: 4]
	NetDriver* NetDriver;//[Offset: 0x24 , Size: 4]
	LineBatchComponent* LineBatcher;//[Offset: 0x28 , Size: 4]
	LineBatchComponent* PersistentLineBatcher;//[Offset: 0x2c , Size: 4]
	LineBatchComponent* ForegroundLineBatcher;//[Offset: 0x30 , Size: 4]
	GameNetworkManager* NetworkManager;//[Offset: 0x34 , Size: 4]
	PhysicsCollisionHandler* PhysicsCollisionHandler;//[Offset: 0x38 , Size: 4]
	ExtraReferencedObjects(ObjectProperty)[] ExtraReferencedObjects;//[Offset: 0x3c , Size: 12]
	PerModuleDataObjects(ObjectProperty)[] PerModuleDataObjects;//[Offset: 0x48 , Size: 12]
	StreamingLevels(ObjectProperty)[] StreamingLevels;//[Offset: 0x54 , Size: 12]
	FString StreamingLevelsPrefix;//[Offset: 0x60 , Size: 12]
	Level* CurrentLevelPendingVisibility;//[Offset: 0x6c , Size: 4]
	Level* CurrentLevelPendingInvisibility;//[Offset: 0x70 , Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x74 , Size: 4]
	ParticleEventManager* MyParticleEventManager;//[Offset: 0x78 , Size: 4]
	ObjectPoolManager ObjectPoolManager;//[Offset: 0x7c , Size: 132]
	PhysicsVolume* DefaultPhysicsVolume;//[Offset: 0x104 , Size: 4]
	NavigationSystem* NavigationSystem;//[Offset: 0x124 , Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x128 , Size: 4]
	GameStateBase* GameState;//[Offset: 0x12c , Size: 4]
	AISystemBase* AISystem;//[Offset: 0x130 , Size: 4]
	AvoidanceManager* AvoidanceManager;//[Offset: 0x134 , Size: 4]
	Levels(ObjectProperty)[] Levels;//[Offset: 0x138 , Size: 12]
	LevelCollections(StructProperty)[] LevelCollections;//[Offset: 0x144 , Size: 12]
	Level* CurrentLevel;//[Offset: 0x154 , Size: 4]
	GameInstance* OwningGameInstance;//[Offset: 0x158 , Size: 4]
	ParameterCollectionInstances(ObjectProperty)[] ParameterCollectionInstances;//[Offset: 0x15c , Size: 12]
	Canvas* CanvasForRenderingToTarget;//[Offset: 0x168 , Size: 4]
	Canvas* CanvasForDrawMaterialToRenderTarget;//[Offset: 0x16c , Size: 4]
	WorldComposition* WorldComposition;//[Offset: 0x6c4 , Size: 4]
	bool bAreConstraintsDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70a , Size: 1]

--------------------------------
Class: Level.Object
	World* OwningWorld;//[Offset: 0x88 , Size: 4]
	Model* Model;//[Offset: 0x8c , Size: 4]
	ModelComponents(ObjectProperty)[] ModelComponents;//[Offset: 0x90 , Size: 12]
	LevelActorContainer* ActorCluster;//[Offset: 0x9c , Size: 4]
	int NumTextureStreamingUnbuiltComponents;//[Offset: 0xa0 , Size: 4]
	int NumTextureStreamingDirtyResources;//[Offset: 0xa4 , Size: 4]
	LevelScriptActor* LevelScriptActor;//[Offset: 0xa8 , Size: 4]
	NavigationObjectBase* NavListStart;//[Offset: 0xac , Size: 4]
	NavigationObjectBase* NavListEnd;//[Offset: 0xb0 , Size: 4]
	NavDataChunks(ObjectProperty)[] NavDataChunks;//[Offset: 0xb4 , Size: 12]
	float LightmapTotalSize;//[Offset: 0xc0 , Size: 4]
	float ShadowmapTotalSize;//[Offset: 0xc4 , Size: 4]
	StaticNavigableGeometry(StructProperty)[] StaticNavigableGeometry;//[Offset: 0xc8 , Size: 12]
	StreamingTextureGuids(StructProperty)[] StreamingTextureGuids;//[Offset: 0xd4 , Size: 12]
	bool bIsLightingScenario;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	Guid LevelBuildDataId;//[Offset: 0x158 , Size: 16]
	MapBuildDataRegistry* MapBuildData;//[Offset: 0x168 , Size: 4]
	IntVector LightBuildLevelOffset;//[Offset: 0x16c , Size: 12]
	bool bTextureStreamingRotationChanged;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x178 , Size: 1]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x178 , Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x178 , Size: 1]
	WorldSettings* WorldSettings;//[Offset: 0x1bc , Size: 4]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x1c4 , Size: 12]

--------------------------------
Class: LevelActorContainer.Object
	Actors(ObjectProperty)[] Actors;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: LevelScriptActor.Actor.Object
	bool bInputEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c4 , Size: 1]
	function WorldOriginLocationChanged();// 0x206ccd8
	function SetCinematicMode();// 0x370e150
	function RemoteEvent();// 0x370e0c8
	function LevelReset();// 0x206ccd8

--------------------------------
Class: NavigationObjectBase.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2c8 , Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2cc , Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2d0 , Size: 4]
	bool bIsPIEPlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]

--------------------------------
Class: BillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Texture2D* Sprite;//[Offset: 0x54c , Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x550 , Size: 1]
	float ScreenSize;//[Offset: 0x554 , Size: 4]
	float U;//[Offset: 0x558 , Size: 4]
	float UL;//[Offset: 0x55c , Size: 4]
	float V;//[Offset: 0x560 , Size: 4]
	float VL;//[Offset: 0x564 , Size: 4]
	function SetUV();// 0x365c524
	function SetSpriteAndUV();// 0x365c38c
	function SetSprite();// 0x365c30c

--------------------------------
Class: Texture2D.Texture.Object
	int StreamingIndex;//[Offset: 0x90 , Size: 4]
	int LevelIndex;//[Offset: 0x94 , Size: 4]
	int FirstResourceMemMip;//[Offset: 0x98 , Size: 4]
	IntPoint ImportedSize;//[Offset: 0x9c , Size: 8]
	double ForceMipLevelsToBeResidentTimestamp;//[Offset: 0xa8 , Size: 8]
	bool bTemporarilyDisableStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1 , Size: 1]
	bool bHasStreamingUpdatePending;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2 , Size: 1]
	bool bForceMiplevelsToBeResident;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2 , Size: 1]
	bool bIgnoreStreamingMipBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb2 , Size: 1]
	bool bGlobalForceMipLevelsToBeResident;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb2 , Size: 1]
	byte AddressX;//[Offset: 0xb3 , Size: 1]
	byte AddressY;//[Offset: 0xb4 , Size: 1]
	function Blueprint_GetSizeY();// 0x379a078
	function Blueprint_GetSizeX();// 0x379a050

--------------------------------
Class: Texture.Object
	Guid LightingGuid;//[Offset: 0x20 , Size: 16]
	int LODBias;//[Offset: 0x30 , Size: 4]
	int NumCinematicMipLevels;//[Offset: 0x34 , Size: 4]
	bool SRGB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bNotUsedInHighQuality;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	bool bNotUsedInMediumQuality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38 , Size: 1]
	bool bNotUsedInLowQuality;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38 , Size: 1]
	bool NeverStream;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x38 , Size: 1]
	bool bNoTiling;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x38 , Size: 1]
	bool bUseCinematicMipLevels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x38 , Size: 1]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x3c , Size: 12]
	int CachedCombinedLODBias;//[Offset: 0x48 , Size: 4]
	bool bAsyncResourceReleaseHasBeenStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	byte CompressionSettings;//[Offset: 0x4d , Size: 1]
	byte Filter;//[Offset: 0x4e , Size: 1]
	byte LODGroup;//[Offset: 0x4f , Size: 1]

--------------------------------
Class: IntPoint
	int X;//[Offset: 0x0 , Size: 4]
	int Y;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: MapBuildDataRegistry.Object
	byte LevelLightingQuality;//[Offset: 0x1c , Size: 1]

--------------------------------
Class: IntVector
	int X;//[Offset: 0x0 , Size: 4]
	int Y;//[Offset: 0x4 , Size: 4]
	int Z;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: WorldSettings.Info.Actor.Object
	bool bEnableFOVDistanceCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	FOVCulling(StructProperty)[] FOVCulling;//[Offset: 0x2cc , Size: 12]
	bool bWithoutFrontendHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8 , Size: 1]
	bool bWithoutWidget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8 , Size: 1]
	bool bWithoutLobbyWidget;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d8 , Size: 1]
	bool bEnableWorldBoundsChecks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2d8 , Size: 1]
	bool bEnableNavigationSystem;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2d8 , Size: 1]
	bool bEnableAISystem;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2d8 , Size: 1]
	bool bEnableWorldComposition;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2d8 , Size: 1]
	bool bUseClientSideLevelStreamingVolumes;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2d8 , Size: 1]
	bool bEnableWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d9 , Size: 1]
	bool bWorldGravitySet;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d9 , Size: 1]
	bool bGlobalGravitySet;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2d9 , Size: 1]
	float KillZ;//[Offset: 0x2dc , Size: 4]
	class DamageType* KillZDamageType;//[Offset: 0x2e0 , Size: 4]
	float WorldGravityZ;//[Offset: 0x2e4 , Size: 4]
	float GlobalGravityZ;//[Offset: 0x2e8 , Size: 4]
	class DefaultPhysicsVolume* DefaultPhysicsVolumeClass;//[Offset: 0x2ec , Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x2f0 , Size: 4]
	class GameModeBase* DefaultGameMode;//[Offset: 0x2f4 , Size: 4]
	class GameNetworkManager* GameNetworkManagerClass;//[Offset: 0x2f8 , Size: 4]
	int PackedLightAndShadowMapTextureSize;//[Offset: 0x2fc , Size: 4]
	bool bMinimizeBSPSections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300 , Size: 1]
	Vector DefaultColorScale;//[Offset: 0x304 , Size: 12]
	float DefaultMaxDistanceFieldOcclusionDistance;//[Offset: 0x310 , Size: 4]
	float GlobalDistanceFieldViewDistance;//[Offset: 0x314 , Size: 4]
	bool bEnableWorldComposition2DLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x318 , Size: 1]
	float MaxWorldSize;//[Offset: 0x31c , Size: 4]
	int RegionSizeNear;//[Offset: 0x320 , Size: 4]
	int RegionSizeFar;//[Offset: 0x324 , Size: 4]
	bool RegionXAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	bool RegionYAdd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329 , Size: 1]
	int Graduation;//[Offset: 0x32c , Size: 4]
	float DynamicIndirectShadowsSelfShadowingIntensity;//[Offset: 0x330 , Size: 4]
	bool bPrecomputeVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x334 , Size: 1]
	bool bPlaceCellsOnlyAlongCameraTracks;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x334 , Size: 1]
	int VisibilityCellSize;//[Offset: 0x338 , Size: 4]
	byte VisibilityAggressiveness;//[Offset: 0x33c , Size: 1]
	bool bForceNoPrecomputedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x33d , Size: 1]
	LightmassWorldInfoSettings LightmassSettings;//[Offset: 0x340 , Size: 80]
	IdeaBakingWorldInfoSettings IdeaBakingSettings;//[Offset: 0x390 , Size: 88]
	ReverbSettings DefaultReverbSettings;//[Offset: 0x3e8 , Size: 16]
	InteriorSettings DefaultAmbientZoneSettings;//[Offset: 0x3f8 , Size: 36]
	SoundMix* DefaultBaseSoundMix;//[Offset: 0x41c , Size: 4]
	float WorldToMeters;//[Offset: 0x420 , Size: 4]
	float MonoCullingDistance;//[Offset: 0x424 , Size: 4]
	BookMark* BookMarks;//[Offset: 0x428 , Size: 4]
	float TimeDilation;//[Offset: 0x450 , Size: 4]
	float MatineeTimeDilation;//[Offset: 0x454 , Size: 4]
	float DemoPlayTimeDilation;//[Offset: 0x458 , Size: 4]
	float MinGlobalTimeDilation;//[Offset: 0x45c , Size: 4]
	float MaxGlobalTimeDilation;//[Offset: 0x460 , Size: 4]
	float MinUndilatedFrameTime;//[Offset: 0x464 , Size: 4]
	float MaxUndilatedFrameTime;//[Offset: 0x468 , Size: 4]
	PlayerState* Pauser;//[Offset: 0x46c , Size: 4]
	bool bHighPriorityLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x470 , Size: 1]
	bool bHighPriorityLoadingLocal;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x470 , Size: 1]
	ReplicationViewers(StructProperty)[] ReplicationViewers;//[Offset: 0x474 , Size: 12]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x480 , Size: 12]
	LODRelativeDistances(FloatProperty)[] LODRelativeDistances;//[Offset: 0x48c , Size: 12]
	bool bEnablestreamingLevelLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498 , Size: 1]
	int WorldCompositionNums;//[Offset: 0x49c , Size: 4]
	int CompositionBlockLength;//[Offset: 0x4a0 , Size: 4]
	function OnRep_WorldGravityZ();// 0x16e6e40

--------------------------------
Class: DamageType.Object
	bool bCausedByWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bScaleMomentumByMass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bRadialDamageVelChange;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	float DamageImpulse;//[Offset: 0x20 , Size: 4]
	float DestructibleImpulse;//[Offset: 0x24 , Size: 4]
	float DestructibleDamageSpreadScale;//[Offset: 0x28 , Size: 4]
	float DamageFalloff;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: DefaultPhysicsVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PhysicsCollisionHandler.Object
	float ImpactThreshold;//[Offset: 0x1c , Size: 4]
	float ImpactReFireDelay;//[Offset: 0x20 , Size: 4]
	SoundBase* DefaultImpactSound;//[Offset: 0x24 , Size: 4]
	float LastImpactSoundTime;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: SoundBase.Object
	SoundClass* SoundClassObject;//[Offset: 0x1c , Size: 4]
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bOverrideConcurrency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20 , Size: 1]
	bool bOutputToBusOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]
	bool bIgnoreFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x20 , Size: 1]
	SoundConcurrency* SoundConcurrencySettings;//[Offset: 0x24 , Size: 4]
	SoundConcurrencySettings ConcurrencyOverrides;//[Offset: 0x28 , Size: 12]
	byte MaxConcurrentResolutionRule;//[Offset: 0x34 , Size: 1]
	int MaxConcurrentPlayCount;//[Offset: 0x38 , Size: 4]
	float Duration;//[Offset: 0x3c , Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x40 , Size: 4]
	float Priority;//[Offset: 0x44 , Size: 4]
	SoundSubmix* SoundSubmixObject;//[Offset: 0x48 , Size: 4]
	SoundSubmixSends(StructProperty)[] SoundSubmixSends;//[Offset: 0x4c , Size: 12]
	SoundEffectSourcePresetChain* SourceEffectChain;//[Offset: 0x58 , Size: 4]
	BusSends(StructProperty)[] BusSends;//[Offset: 0x5c , Size: 12]

--------------------------------
Class: SoundClass.Object
	SoundClassProperties Properties;//[Offset: 0x1c , Size: 40]
	ChildClasses(ObjectProperty)[] ChildClasses;//[Offset: 0x44 , Size: 12]
	PassiveSoundMixModifiers(StructProperty)[] PassiveSoundMixModifiers;//[Offset: 0x50 , Size: 12]
	SoundClass* ParentClass;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: SoundClassProperties
	float Volume;//[Offset: 0x0 , Size: 4]
	float Pitch;//[Offset: 0x4 , Size: 4]
	float StereoBleed;//[Offset: 0x8 , Size: 4]
	float LFEBleed;//[Offset: 0xc , Size: 4]
	float VoiceCenterChannelVolume;//[Offset: 0x10 , Size: 4]
	float RadioFilterVolume;//[Offset: 0x14 , Size: 4]
	float RadioFilterVolumeThreshold;//[Offset: 0x18 , Size: 4]
	bool bApplyEffects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bAlwaysPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	bool bIsMusic;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c , Size: 1]
	bool bReverb;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c , Size: 1]
	float Default2DReverbSendAmount;//[Offset: 0x20 , Size: 4]
	bool bCenterChannelOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24 , Size: 1]
	bool bApplyAmbientVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24 , Size: 1]
	byte OutputTarget;//[Offset: 0x25 , Size: 1]

--------------------------------
Class: SoundConcurrency.Object
	SoundConcurrencySettings Concurrency;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: SoundConcurrencySettings
	int MaxCount;//[Offset: 0x0 , Size: 4]
	bool bLimitToOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	byte ResolutionRule;//[Offset: 0x5 , Size: 1]
	float VolumeScale;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: SoundAttenuation.Object
	SoundAttenuationSettings Attenuation;//[Offset: 0x1c , Size: 532]

--------------------------------
Class: SoundAttenuationSettings.BaseAttenuationSettings
	bool bAttenuate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	bool bSpatialize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c , Size: 1]
	bool bAttenuateWithLPF;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c , Size: 1]
	bool bEnableListenerFocus;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c , Size: 1]
	bool bEnableFocusInterpolation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c , Size: 1]
	bool bEnableOcclusion;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c , Size: 1]
	bool bUseComplexCollisionForOcclusion;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c , Size: 1]
	bool bEnableReverbSend;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c , Size: 1]
	bool bApplyNormalizationToStereoSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d , Size: 1]
	bool bEnableLogFrequencyScaling;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7d , Size: 1]
	byte DistanceType;//[Offset: 0x7e , Size: 1]
	float OmniRadius;//[Offset: 0x80 , Size: 4]
	float StereoSpread;//[Offset: 0x84 , Size: 4]
	byte SpatializationAlgorithm;//[Offset: 0x88 , Size: 1]
	SpatializationPluginSourceSettingsBase* SpatializationPluginSettings;//[Offset: 0x8c , Size: 4]
	float RadiusMin;//[Offset: 0x90 , Size: 4]
	float RadiusMax;//[Offset: 0x94 , Size: 4]
	float LPFRadiusMin;//[Offset: 0x98 , Size: 4]
	float LPFRadiusMax;//[Offset: 0x9c , Size: 4]
	enum AbsorptionMethod;//[Offset: 0xa0 , Size: 1]
	RuntimeFloatCurve CustomLowpassAirAbsorptionCurve;//[Offset: 0xa4 , Size: 88]
	RuntimeFloatCurve CustomHighpassAirAbsorptionCurve;//[Offset: 0xfc , Size: 88]
	float LPFFrequencyAtMin;//[Offset: 0x154 , Size: 4]
	float LPFFrequencyAtMax;//[Offset: 0x158 , Size: 4]
	float HPFFrequencyAtMin;//[Offset: 0x15c , Size: 4]
	float HPFFrequencyAtMax;//[Offset: 0x160 , Size: 4]
	float FocusAzimuth;//[Offset: 0x164 , Size: 4]
	float NonFocusAzimuth;//[Offset: 0x168 , Size: 4]
	float FocusDistanceScale;//[Offset: 0x16c , Size: 4]
	float NonFocusDistanceScale;//[Offset: 0x170 , Size: 4]
	float FocusPriorityScale;//[Offset: 0x174 , Size: 4]
	float NonFocusPriorityScale;//[Offset: 0x178 , Size: 4]
	float FocusVolumeAttenuation;//[Offset: 0x17c , Size: 4]
	float NonFocusVolumeAttenuation;//[Offset: 0x180 , Size: 4]
	float FocusAttackInterpSpeed;//[Offset: 0x184 , Size: 4]
	float FocusReleaseInterpSpeed;//[Offset: 0x188 , Size: 4]
	byte OcclusionTraceChannel;//[Offset: 0x18c , Size: 1]
	float OcclusionLowPassFilterFrequency;//[Offset: 0x190 , Size: 4]
	float OcclusionVolumeAttenuation;//[Offset: 0x194 , Size: 4]
	float OcclusionInterpolationTime;//[Offset: 0x198 , Size: 4]
	OcclusionPluginSourceSettingsBase* OcclusionPluginSettings;//[Offset: 0x19c , Size: 4]
	enum ReverbSendMethod;//[Offset: 0x1a0 , Size: 1]
	ReverbPluginSourceSettingsBase* ReverbPluginSettings;//[Offset: 0x1a4 , Size: 4]
	float ReverbWetLevelMin;//[Offset: 0x1a8 , Size: 4]
	float ReverbWetLevelMax;//[Offset: 0x1ac , Size: 4]
	float ReverbDistanceMin;//[Offset: 0x1b0 , Size: 4]
	float ReverbDistanceMax;//[Offset: 0x1b4 , Size: 4]
	RuntimeFloatCurve CustomReverbSendCurve;//[Offset: 0x1b8 , Size: 88]
	float ManualReverbSendLevel;//[Offset: 0x210 , Size: 4]

--------------------------------
Class: BaseAttenuationSettings
	enum DistanceAlgorithm;//[Offset: 0x4 , Size: 1]
	RuntimeFloatCurve CustomAttenuationCurve;//[Offset: 0x8 , Size: 88]
	byte AttenuationShape;//[Offset: 0x60 , Size: 1]
	float dBAttenuationAtMax;//[Offset: 0x64 , Size: 4]
	Vector AttenuationShapeExtents;//[Offset: 0x68 , Size: 12]
	float ConeOffset;//[Offset: 0x74 , Size: 4]
	float FalloffDistance;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: RuntimeFloatCurve
	RichCurve EditorCurveData;//[Offset: 0x0 , Size: 84]
	CurveFloat* ExternalCurve;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: SpatializationPluginSourceSettingsBase.Object

--------------------------------
Class: OcclusionPluginSourceSettingsBase.Object

--------------------------------
Class: ReverbPluginSourceSettingsBase.Object

--------------------------------
Class: SoundSubmix.Object
	ChildSubmixes(ObjectProperty)[] ChildSubmixes;//[Offset: 0x1c , Size: 12]
	SoundSubmix* ParentSubmix;//[Offset: 0x28 , Size: 4]
	SubmixEffectChain(ObjectProperty)[] SubmixEffectChain;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: SoundEffectSourcePresetChain.Object
	Chain(StructProperty)[] Chain;//[Offset: 0x1c , Size: 12]
	bool bPlayEffectChainTails;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]

--------------------------------
Class: GameModeBase.Info.Actor.Object
	FString OptionsString;//[Offset: 0x2c4 , Size: 12]
	class GameSession* GameSessionClass;//[Offset: 0x2d0 , Size: 4]
	class GameStateBase* GameStateClass;//[Offset: 0x2d4 , Size: 4]
	class PlayerController* PlayerControllerClass;//[Offset: 0x2d8 , Size: 4]
	class PlayerState* PlayerStateClass;//[Offset: 0x2dc , Size: 4]
	class HUD* HUDClass;//[Offset: 0x2e0 , Size: 4]
	class Pawn* DefaultPawnClass;//[Offset: 0x2e4 , Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2e8 , Size: 4]
	class PlayerController* ReplaySpectatorPlayerControllerClass;//[Offset: 0x2ec , Size: 4]
	GameSession* GameSession;//[Offset: 0x2f0 , Size: 4]
	GameStateBase* GameState;//[Offset: 0x2f4 , Size: 4]
	FText DefaultPlayerName;//[Offset: 0x2f8 , Size: 12]
	bool bUseSeamlessTravel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x304 , Size: 1]
	bool bStartPlayersAsSpectators;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x304 , Size: 1]
	bool bPauseable;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x304 , Size: 1]
	function StartPlay();// 0x369825c
	function SpawnDefaultPawnFor();// 0x3698190
	function SpawnDefaultPawnAtTransform();// 0x3698060
	function ShouldReset();// 0x3697fd0
	function ReturnToMainMenuHost();// 0x1752180
	function RestartPlayerAtTransform();// 0x3697eb0
	function RestartPlayerAtPlayerStart();// 0x17b109c
	function RestartPlayer();// 0x16e3b18
	function ResetLevel();// 0x1891918
	function PlayerCanRestart();// 0x3697e20
	function MustSpectate();// 0x3697d98
	function K2_PostLogin();// 0x206ccd8
	function K2_OnSwapPlayerControllers();// 0x206ccd8
	function K2_OnRestartPlayer();// 0x206ccd8
	function K2_OnLogout();// 0x206ccd8
	function K2_OnChangeName();// 0x206ccd8
	function K2_FindPlayerStart();// 0x3697c90
	function InitStartSpot();// 0x18d28e8
	function InitializeHUDForPlayer();// 0x16a817c
	function HasMatchStarted();// 0x3697c60
	function HandleStartingNewPlayer();// 0x3697be0
	function GetNumSpectators();// 0x3672510
	function GetNumPlayers();// 0x36724e0
	function GetDefaultPawnClassForController();// 0x3697b58
	function FindPlayerStart();// 0x3697a48
	function ChoosePlayerStart();// 0x36979c0
	function ChangeName();// 0x1c8afe0
	function CanSpectate();// 0x36978f4

--------------------------------
Class: GameSession.Info.Actor.Object
	int MaxSpectators;//[Offset: 0x2c4 , Size: 4]
	int MaxPlayers;//[Offset: 0x2c8 , Size: 4]
	int MaxPartySize;//[Offset: 0x2cc , Size: 4]
	byte MaxSplitscreensPerConnection;//[Offset: 0x2d0 , Size: 1]
	bool bRequiresPushToTalk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1 , Size: 1]
	FName SessionName;//[Offset: 0x2d8 , Size: 8]

--------------------------------
Class: GameStateBase.Info.Actor.Object
	class GameModeBase* GameModeClass;//[Offset: 0x2c4 , Size: 4]
	GameModeBase* AuthorityGameMode;//[Offset: 0x2c8 , Size: 4]
	class SpectatorPawn* SpectatorClass;//[Offset: 0x2cc , Size: 4]
	PlayerArray(ObjectProperty)[] PlayerArray;//[Offset: 0x2d0 , Size: 12]
	bool bReplicatedHasBegunPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc , Size: 1]
	float ReplicatedWorldTimeSeconds;//[Offset: 0x2e0 , Size: 4]
	float ServerWorldTimeSecondsDelta;//[Offset: 0x2e4 , Size: 4]
	float ServerWorldTimeSecondsUpdateFrequency;//[Offset: 0x2e8 , Size: 4]
	function OnRep_SpectatorClass();// 0x3679c04
	function OnRep_ReplicatedWorldTimeSeconds();// 0x36a71c0
	function OnRep_ReplicatedHasBegunPlay();// 0x18b5ff8
	function OnRep_GameModeClass();// 0x3679be8
	function HasMatchStarted();// 0x36a7190
	function HasBegunPlay();// 0x36a7160
	function GetServerWorldTimeSeconds();// 0x17c8a74
	function GetPlayerStartTime();// 0x36a70d8
	function GetPlayerRespawnDelay();// 0x36a7050

--------------------------------
Class: SpectatorPawn.DefaultPawn.Pawn.Actor.Object

--------------------------------
Class: DefaultPawn.Pawn.Actor.Object
	float BaseTurnRate;//[Offset: 0x308 , Size: 4]
	float BaseLookUpRate;//[Offset: 0x30c , Size: 4]
	PawnMovementComponent* MovementComponent;//[Offset: 0x310 , Size: 4]
	SphereComponent* CollisionComponent;//[Offset: 0x314 , Size: 4]
	StaticMeshComponent* MeshComponent;//[Offset: 0x318 , Size: 4]
	bool bAddDefaultMovementBindings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c , Size: 1]
	function TurnAtRate();// 0x3680624
	function MoveUp_World();// 0x36805a4
	function MoveRight();// 0x1700468
	function MoveForward();// 0x18480b0
	function LookUpAtRate();// 0x368052c

--------------------------------
Class: SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	float SphereRadius;//[Offset: 0x55c , Size: 4]
	function SetSphereRadius();// 0x378b664
	function GetUnscaledSphereRadius();// 0x366e130
	function GetShapeScale();// 0x366e0c0
	function GetScaledSphereRadius();// 0x366dc98

--------------------------------
Class: StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	int ForcedLodModel;//[Offset: 0x568 , Size: 4]
	int PreviousLODLevel;//[Offset: 0x56c , Size: 4]
	int MinLOD;//[Offset: 0x570 , Size: 4]
	StaticMesh* StaticMesh;//[Offset: 0x574 , Size: 4]
	bool bOverrideWireframeColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x578 , Size: 1]
	bool bOverrideMinLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x578 , Size: 1]
	bool bOverrideNavigationExport;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x578 , Size: 1]
	bool bForceNavigationObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x578 , Size: 1]
	bool bDisallowMeshPaintPerInstance;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x578 , Size: 1]
	bool bIgnoreInstanceForTextureStreaming;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x578 , Size: 1]
	bool bOverrideLightMapRes;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x578 , Size: 1]
	bool bOverrideCullingScreenSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x578 , Size: 1]
	bool bCastDistanceFieldIndirectShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x579 , Size: 1]
	bool bOverrideDistanceFieldSelfShadowBias;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x579 , Size: 1]
	bool bUseSubDivisions;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x579 , Size: 1]
	bool bUseDefaultCollision;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x579 , Size: 1]
	int OverriddenLightMapRes;//[Offset: 0x57c , Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x580 , Size: 4]
	LODData(StructProperty)[] LODData;//[Offset: 0x584 , Size: 12]
	StreamingTextureData(StructProperty)[] StreamingTextureData;//[Offset: 0x590 , Size: 12]
	bool IsDynamicInstancingParametersEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c , Size: 1]
	<DynamicInstancingParameters_Key(StrProperty) , DynamicInstancingParameters(StructProperty)> DynamicInstancingParameters;//[Offset: 0x5a0 , Size: 60]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x5dc , Size: 24]
	IdeaBakingPrimitiveSettings IdeaBakingSettings;//[Offset: 0x5f4 , Size: 20]
	bool bForceNotHzbOccluder;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x608 , Size: 1]
	function SetStaticMesh();// 0x2d92f68
	function SetForcedLodModel();// 0x37960d4
	function SetDistanceFieldSelfShadowBias();// 0x173e6cc
	function SetDirty();// 0x37960c0
	function OnRep_StaticMesh();// 0x3796048
	function GetLocalBounds();// 0x3795f70

--------------------------------
Class: StaticMesh.Object
	int MinLOD;//[Offset: 0x28 , Size: 4]
	Materials(ObjectProperty)[] Materials;//[Offset: 0x2c , Size: 12]
	StaticMaterials(StructProperty)[] StaticMaterials;//[Offset: 0x38 , Size: 12]
	float LightmapUVDensity;//[Offset: 0x44 , Size: 4]
	int LightMapResolution;//[Offset: 0x48 , Size: 4]
	int LightMapCoordinateIndex;//[Offset: 0x4c , Size: 4]
	float DistanceFieldSelfShadowBias;//[Offset: 0x50 , Size: 4]
	bool bGenerateMeshDistanceField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x58 , Size: 4]
	int LODForCollision;//[Offset: 0x5c , Size: 4]
	float CullingScreenSize;//[Offset: 0x60 , Size: 4]
	bool bUseScreenSizeModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	bool bIsGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65 , Size: 1]
	bool bIsTree;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66 , Size: 1]
	bool bStripComplexCollisionForConsole;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x67 , Size: 1]
	bool bHasNavigationData;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x67 , Size: 1]
	bool bIsStreamable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	bool bSupportUniformlyDistributedSampling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	float LpvBiasMultiplier;//[Offset: 0xa0 , Size: 4]
	bool bAllowCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	Sockets(ObjectProperty)[] Sockets;//[Offset: 0xd0 , Size: 12]
	Vector PositiveBoundsExtension;//[Offset: 0xe4 , Size: 12]
	Vector NegativeBoundsExtension;//[Offset: 0xf0 , Size: 12]
	BoxSphereBounds ExtendedBounds;//[Offset: 0xfc , Size: 28]
	OcclusionCullingVertex(StructProperty)[] OcclusionCullingVertex;//[Offset: 0x118 , Size: 12]
	int ElementToIgnoreForTexFactor;//[Offset: 0x124 , Size: 4]
	AssetUserData(ObjectProperty)[] AssetUserData;//[Offset: 0x128 , Size: 12]
	NavCollision* NavCollision;//[Offset: 0x134 , Size: 4]
	function GetNumSections();// 0x37956f4
	function GetNumLODs();// 0x37956cc
	function GetMaterialIndex();// 0x379564c
	function GetMaterial();// 0x37955cc
	function GetBounds();// 0x3795578
	function GetBoundingBox();// 0x3795524

--------------------------------
Class: NavCollision.Object
	CylinderCollision(StructProperty)[] CylinderCollision;//[Offset: 0x58 , Size: 12]
	BoxCollision(StructProperty)[] BoxCollision;//[Offset: 0x64 , Size: 12]
	class NavArea* AreaClass;//[Offset: 0x70 , Size: 4]
	bool bIsDynamicObstacle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74 , Size: 1]
	bool bGatherConvexGeometry;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74 , Size: 1]

--------------------------------
Class: LightmassPrimitiveSettings
	bool bUseTwoSidedLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bShadowIndirectOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bUseEmissiveForStaticLighting;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bUseVertexNormalForHemisphereGather;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	float EmissiveLightFalloffExponent;//[Offset: 0x4 , Size: 4]
	float EmissiveLightExplicitInfluenceRadius;//[Offset: 0x8 , Size: 4]
	float EmissiveBoost;//[Offset: 0xc , Size: 4]
	float DiffuseBoost;//[Offset: 0x10 , Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: IdeaBakingPrimitiveSettings
	float IdeaMaterialDiffuse;//[Offset: 0x0 , Size: 4]
	float LightmapBoost;//[Offset: 0x4 , Size: 4]
	float DiscardPixelFrontfaceFactor;//[Offset: 0x8 , Size: 4]
	float SunIntensity;//[Offset: 0xc , Size: 4]
	float LocalLightsAffectMaxDistance;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PlayerController.Controller.Actor.Object
	Player* Player;//[Offset: 0x30c , Size: 4]
	Pawn* AcknowledgedPawn;//[Offset: 0x314 , Size: 4]
	InterpTrackInstDirector* ControllingDirTrackInst;//[Offset: 0x318 , Size: 4]
	HUD* MyHUD;//[Offset: 0x320 , Size: 4]
	PlayerCameraManager* PlayerCameraManager;//[Offset: 0x324 , Size: 4]
	class PlayerCameraManager* PlayerCameraManagerClass;//[Offset: 0x328 , Size: 4]
	bool bAutoManageActiveCameraTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	Rotator TargetViewRotation;//[Offset: 0x330 , Size: 12]
	float SmoothTargetViewRotationSpeed;//[Offset: 0x348 , Size: 4]
	HiddenActors(ObjectProperty)[] HiddenActors;//[Offset: 0x34c , Size: 12]
	HiddenPrimitiveComponents(WeakObjectProperty)[] HiddenPrimitiveComponents;//[Offset: 0x358 , Size: 12]
	float LastSpectatorStateSynchTime;//[Offset: 0x368 , Size: 4]
	Vector LastSpectatorSyncLocation;//[Offset: 0x36c , Size: 12]
	Rotator LastSpectatorSyncRotation;//[Offset: 0x378 , Size: 12]
	int ClientCap;//[Offset: 0x384 , Size: 4]
	CheatManager* CheatManager;//[Offset: 0x388 , Size: 4]
	class CheatManager* CheatClass;//[Offset: 0x38c , Size: 4]
	PlayerInput* PlayerInput;//[Offset: 0x390 , Size: 4]
	ActiveForceFeedbackEffects(StructProperty)[] ActiveForceFeedbackEffects;//[Offset: 0x394 , Size: 12]
	bool bPlayerIsWaiting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x400 , Size: 1]
	byte NetPlayerIndex;//[Offset: 0x401 , Size: 1]
	NetConnection* PendingSwapConnection;//[Offset: 0x430 , Size: 4]
	NetConnection* NetConnection;//[Offset: 0x434 , Size: 4]
	float InputYawScale;//[Offset: 0x444 , Size: 4]
	float InputPitchScale;//[Offset: 0x448 , Size: 4]
	float InputRollScale;//[Offset: 0x44c , Size: 4]
	bool bShowMouseCursor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x450 , Size: 1]
	bool bEnableClickEvents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x450 , Size: 1]
	bool bEnableTouchEvents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x450 , Size: 1]
	bool bEnableMouseOverEvents;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x450 , Size: 1]
	bool bEnableTouchOverEvents;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x450 , Size: 1]
	bool bForceFeedbackEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x450 , Size: 1]
	float ForceFeedbackScale;//[Offset: 0x454 , Size: 4]
	ClickEventKeys(StructProperty)[] ClickEventKeys;//[Offset: 0x458 , Size: 12]
	byte DefaultMouseCursor;//[Offset: 0x464 , Size: 1]
	byte CurrentMouseCursor;//[Offset: 0x465 , Size: 1]
	byte DefaultClickTraceChannel;//[Offset: 0x466 , Size: 1]
	byte CurrentClickTraceChannel;//[Offset: 0x467 , Size: 1]
	float HitResultTraceDistance;//[Offset: 0x468 , Size: 4]
	bool bPauseUpdateStreamingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47c , Size: 1]
	InputComponent* InactiveStateInputComponent;//[Offset: 0x4ec , Size: 4]
	bool bShouldPerformFullTickWhenPaused;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4f0 , Size: 1]
	TouchInterface* CurrentTouchInterface;//[Offset: 0x4fc , Size: 4]
	SpectatorPawn* SpectatorPawn;//[Offset: 0x53c , Size: 4]
	Vector SpawnLocation;//[Offset: 0x540 , Size: 12]
	bool bIsLocalPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x550 , Size: 1]
	uint16 SeamlessTravelCount;//[Offset: 0x552 , Size: 2]
	uint16 LastCompletedSeamlessTravelCount;//[Offset: 0x554 , Size: 2]
	function WasInputKeyJustReleased();// 0x375c1c8
	function WasInputKeyJustPressed();// 0x375bed4
	function ToggleSpeaking();// 0x375be4c
	function SwitchLevel();// 0x375bd88
	function StopHapticEffect();// 0x375bd10
	function StartFire();// 0x375bc90
	function SetVirtualJoystickVisibility();// 0x375bc08
	function SetViewTargetWithBlend();// 0x375ba68
	function SetName();// 0x375b9a4
	function SetMouseLocation();// 0x375b8e8
	function SetMouseCursorWidget();// 0x375b82c
	function SetHapticsByValue();// 0x375b72c
	function SetControllerLightColor();// 0x375b6bc
	function SetCinematicMode();// 0x375b4f0
	function SetAudioListenerOverride();// 0x375b3e4
	function ServerViewSelf();// 0x375b2d4
	function ServerViewPrevPlayer();// 0x375b278
	function ServerViewNextPlayer();// 0x375b21c
	function ServerVerifyViewTarget();// 0x375b1c0
	function ServerUpdateLevelVisibility();// 0x375b0b4
	function ServerUpdateCamera();// 0x375afb0
	function ServerUnmutePlayer();// 0x375aa94
	function ServerToggleAILogging();// 0x375aa38
	function ServerShortTimeout();// 0x375a9dc
	function ServerSetSpectatorWaiting();// 0x375a914
	function ServerSetSpectatorLocation();// 0x375a7fc
	function ServerRestartPlayer();// 0x375a7a0
	function ServerPause();// 0x375a744
	function ServerNotifyLoadedWorld();// 0x375a6a0
	function ServerMutePlayer();// 0x375a184
	function ServerCheckClientPossessionReliable();// 0x375a128
	function ServerCheckClientPossession();// 0x375a0cc
	function ServerChangeName();// 0x3759fd8
	function ServerCamera();// 0x3759f24
	function ServerAcknowledgePossession();// 0x3759e70
	function SendToConsole();// 0x3759dac
	function RestartLevel();// 0x3759d90
	function ProjectWorldLocationToScreen();// 0x3759c70
	function PlayHapticEffect();// 0x3759b20
	function PlayDynamicForceFeedback();// 0x3759840
	function Pause();// 0x3759820
	function OnServerStartedVisualLogger();// 0x3759798
	function LocalTravel();// 0x37596d4
	function IsInputKeyDown();// 0x37593e0
	function GetViewportSize();// 0x3759300
	function GetSpectatorPawn();// 0x37592e4
	function GetMousePosition();// 0x37591fc
	function GetInputVectorKeyState();// 0x3758ef8
	function GetInputTouchState();// 0x3758d78
	function GetInputMouseDelta();// 0x3758c98
	function GetInputMotionState();// 0x3758b14
	function GetInputKeyTimeDown();// 0x375881c
	function GetInputAnalogStickState();// 0x37586f8
	function GetInputAnalogKeyState();// 0x3758400
	function GetHUD();// 0x37583d8
	function GetHitResultUnderFingerForObjects();// 0x3758204
	function GetHitResultUnderFingerByChannel();// 0x3758088
	function GetHitResultUnderFinger();// 0x3757f0c
	function GetHitResultUnderCursorForObjects();// 0x3757d7c
	function GetHitResultUnderCursorByChannel();// 0x3757c44
	function GetHitResultUnderCursor();// 0x3757b0c
	function GetFocalLocation();// 0x186f8b0
	function FOV();// 0x3757a8c
	function EnableCheats();// 0x3757a70
	function DeprojectScreenPositionToWorld();// 0x3757904
	function DeprojectMousePositionToWorld();// 0x3757824
	function ConsoleKey();// 0x3757530
	function ClientWasKicked();// 0x375739c
	function ClientVoiceHandshakeComplete();// 0x3757380
	function ClientUpdateLevelStreamingStatus();// 0x37571c8
	function ClientUnmutePlayer();// 0x3756e5c
	function ClientTravelInternal();// 0x3756cac
	function ClientTravel();// 0x3756b0c
	function ClientTeamMessage();// 0x3756970
	function ClientStopForceFeedback();// 0x37568ac
	function ClientStopCameraShake();// 0x37567e0
	function ClientStopCameraAnim();// 0x3756760
	function ClientStartOnlineSession();// 0x18508b8
	function ClientSpawnCameraLensEffect();// 0x17fb244
	function ClientSetViewTarget();// 0x3756658
	function ClientSetSpectatorWaiting();// 0x37565d0
	function ClientSetHUD();// 0x3756550
	function ClientSetForceMipLevelsToBeResident();// 0x3756448
	function ClientSetCinematicMode();// 0x37562cc
	function ClientSetCameraMode();// 0x375624c
	function ClientSetCameraFade();// 0x37560a8
	function ClientSetBlockOnAsyncLoading();// 0x375608c
	function ClientReturnToMainMenu();// 0x3755fc8
	function ClientRetryClientRestart();// 0x3755f48
	function ClientRestart();// 0x3755ec8
	function ClientReset();// 0x3755eac
	function ClientRepObjRef();// 0x3755e2c
	function ClientReceiveLocalizedMessage();// 0x3755c94
	function ClientPrestreamTextures();// 0x3755b38
	function ClientPrepareMapChange();// 0x3755a14
	function ClientPlaySoundAtLocation();// 0x37558c0
	function ClientPlaySound();// 0x37557b8
	function ClientPlayForceFeedback();// 0x375564c
	function ClientPlayCameraShake();// 0x37554f8
	function ClientPlayCameraAnim();// 0x3755228
	function ClientMutePlayer();// 0x3754ebc
	function ClientMessage();// 0x3754d68
	function ClientIgnoreMoveInput();// 0x3754ce0
	function ClientIgnoreLookInput();// 0x3754c58
	function ClientGotoState();// 0x3754bd8
	function ClientGameEnded();// 0x3754b0c
	function ClientForceGarbageCollection();// 0x1c8bdec
	function ClientFlushLevelStreaming();// 0x3754af8
	function ClientEndOnlineSession();// 0x3754adc
	function ClientEnableNetworkVoice();// 0x3754a54
	function ClientCommitMapChange();// 0x3754a38
	function ClientClearCameraLensEffects();// 0x3754a1c
	function ClientCapBandwidth();// 0x375499c
	function ClientCancelPendingMapChange();// 0x3754980
	function ClientAddTextureStreamingLoc();// 0x3754874
	function ClearAudioListenerOverride();// 0x3754860
	function Camera();// 0x37547e0
	function AddYawInput();// 0x3754760
	function AddRollInput();// 0x37546e0
	function AddPitchInput();// 0x3754660
	function ActivateTouchInterface();// 0x186a3a8

--------------------------------
Class: InterpTrackInstDirector.InterpTrackInst.Object
	Actor* OldViewTarget;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInst.Object

--------------------------------
Class: HUD.Actor.Object
	PlayerController* PlayerOwner;//[Offset: 0x2c4 , Size: 4]
	bool bLostFocusPaused;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	bool bShowHUD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8 , Size: 1]
	bool bShowDebugInfo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8 , Size: 1]
	bool bShowHitBoxDebugInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2c8 , Size: 1]
	bool bShowOverlays;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2c8 , Size: 1]
	bool bEnableDebugTextShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2c8 , Size: 1]
	bool bDebugInfoUseModifiedActor;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2c8 , Size: 1]
	PostRenderedActors(ObjectProperty)[] PostRenderedActors;//[Offset: 0x2cc , Size: 12]
	DebugDisplay(NameProperty)[] DebugDisplay;//[Offset: 0x2e0 , Size: 12]
	ToggledDebugCategories(NameProperty)[] ToggledDebugCategories;//[Offset: 0x2ec , Size: 12]
	Canvas* Canvas;//[Offset: 0x2f8 , Size: 4]
	Canvas* DebugCanvas;//[Offset: 0x2fc , Size: 4]
	DebugTextList(StructProperty)[] DebugTextList;//[Offset: 0x300 , Size: 12]
	class Actor* ShowDebugTargetDesiredClass;//[Offset: 0x30c , Size: 4]
	Actor* ShowDebugTargetActor;//[Offset: 0x310 , Size: 4]
	function UpdateShowDebugTargetActor();// 0x206ccd8
	function ShowHUD();// 0x16f99b4
	function ShowDebugToggleSubCategory();// 0x36ad01c
	function ShowDebugForReticleTargetToggle();// 0x36acfa4
	function ShowDebugForMoifiedTargetActor();// 0x36acf90
	function ShowDebug();// 0x36acf10
	function RemoveDebugText();// 0x36ace4c
	function RemoveAllDebugStrings();// 0x36ace38
	function ReceiveHitBoxRelease();// 0x206ccd8
	function ReceiveHitBoxEndCursorOver();// 0x206ccd8
	function ReceiveHitBoxClick();// 0x206ccd8
	function ReceiveHitBoxBeginCursorOver();// 0x206ccd8
	function ReceiveDrawHUD();// 0x206ccd8
	function Project();// 0x36acda4
	function GetTextSize();// 0x36acba8
	function GetOwningPlayerController();// 0x16e607c
	function GetOwningPawn();// 0x36acb80
	function GetActorsInSelectionRectangle();// 0x36ac928
	function DrawTextureSimple();// 0x36ac790
	function DrawTexture();// 0x36ac318
	function DrawText();// 0x36ac0a0
	function DrawRect();// 0x36abf04
	function DrawMaterialTriangle();// 0x36abb80
	function DrawMaterialSimple();// 0x36ab958
	function DrawMaterial();// 0x36ab580
	function DrawLine();// 0x36ab39c
	function Deproject();// 0x36ab238
	function AddHitBox();// 0x36ab09c
	function AddDebugText();// 0x36aacac

--------------------------------
Class: Canvas.Object
	float OrgX;//[Offset: 0x1c , Size: 4]
	float OrgY;//[Offset: 0x20 , Size: 4]
	float ClipX;//[Offset: 0x24 , Size: 4]
	float ClipY;//[Offset: 0x28 , Size: 4]
	Color DrawColor;//[Offset: 0x2c , Size: 4]
	bool bCenterX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bCenterY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	bool bNoSmooth;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30 , Size: 1]
	int SizeX;//[Offset: 0x34 , Size: 4]
	int SizeY;//[Offset: 0x38 , Size: 4]
	Plane ColorModulate;//[Offset: 0x40 , Size: 16]
	Texture2D* DefaultTexture;//[Offset: 0x50 , Size: 4]
	Texture2D* GradientTexture0;//[Offset: 0x54 , Size: 4]
	ReporterGraph* ReporterGraph;//[Offset: 0x58 , Size: 4]
	function K2_TextSize();// 0x366cd6c
	function K2_StrLen();// 0x366cc5c
	function K2_Project();// 0x366cbc8
	function K2_DrawTriangle();// 0x366ca24
	function K2_DrawTexture();// 0x366c750
	function K2_DrawText();// 0x366c348
	function K2_DrawPolygon();// 0x366c1b4
	function K2_DrawMaterialTriangle();// 0x366c010
	function K2_DrawMaterial();// 0x366bdf8
	function K2_DrawLine();// 0x366bca0
	function K2_DrawBox();// 0x366bba0
	function K2_DrawBorder();// 0x366b680
	function K2_Deproject();// 0x366b564

--------------------------------
Class: Plane.Vector
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ReporterGraph.ReporterBase.Object

--------------------------------
Class: ReporterBase.Object

--------------------------------
Class: PlayerCameraManager.Actor.Object
	PlayerController* PCOwner;//[Offset: 0x2c4 , Size: 4]
	SceneComponent* TransformComponent;//[Offset: 0x2c8 , Size: 4]
	float DefaultFOV;//[Offset: 0x2d8 , Size: 4]
	float DefaultOrthoWidth;//[Offset: 0x2e0 , Size: 4]
	float DefaultAspectRatio;//[Offset: 0x2e8 , Size: 4]
	CameraCacheEntry CameraCache;//[Offset: 0x330 , Size: 1328]
	CameraCacheEntry LastFrameCameraCache;//[Offset: 0x860 , Size: 1328]
	TViewTarget ViewTarget;//[Offset: 0xd90 , Size: 1344]
	TViewTarget PendingViewTarget;//[Offset: 0x12d0 , Size: 1344]
	ModifierList(ObjectProperty)[] ModifierList;//[Offset: 0x1824 , Size: 12]
	DefaultModifiers(ClassProperty)[] DefaultModifiers;//[Offset: 0x1830 , Size: 12]
	float FreeCamDistance;//[Offset: 0x183c , Size: 4]
	Vector FreeCamOffset;//[Offset: 0x1840 , Size: 12]
	Vector ViewTargetOffset;//[Offset: 0x184c , Size: 12]
	CameraLensEffects(ObjectProperty)[] CameraLensEffects;//[Offset: 0x1868 , Size: 12]
	CameraModifier_CameraShake* CachedCameraShakeMod;//[Offset: 0x1874 , Size: 4]
	CameraAnimInst* AnimInstPool;//[Offset: 0x1878 , Size: 4]
	PostProcessBlendCache(StructProperty)[] PostProcessBlendCache;//[Offset: 0x1898 , Size: 12]
	ActiveAnims(ObjectProperty)[] ActiveAnims;//[Offset: 0x18b0 , Size: 12]
	FreeAnims(ObjectProperty)[] FreeAnims;//[Offset: 0x18bc , Size: 12]
	CameraActor* AnimCameraActor;//[Offset: 0x18c8 , Size: 4]
	bool bIsOrthographic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x18cc , Size: 1]
	bool bDefaultConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x18cc , Size: 1]
	bool bUseClientSideCameraUpdates;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x18cc , Size: 1]
	bool bGameCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x18cd , Size: 1]
	float ViewPitchMin;//[Offset: 0x18d0 , Size: 4]
	float ViewPitchMax;//[Offset: 0x18d4 , Size: 4]
	float ViewYawMin;//[Offset: 0x18d8 , Size: 4]
	float ViewYawMax;//[Offset: 0x18dc , Size: 4]
	float ViewRollMin;//[Offset: 0x18e0 , Size: 4]
	float ViewRollMax;//[Offset: 0x18e4 , Size: 4]
	function StopCameraShake();// 0x37515e4
	function StopCameraFade();// 0x3679ca0
	function StopCameraAnimInst();// 0x3751518
	function StopAllInstancesOfCameraShake();// 0x375144c
	function StopAllInstancesOfCameraAnim();// 0x3751380
	function StopAllCameraShakes();// 0x37512f8
	function StopAllCameraAnims();// 0x3751270
	function StartCameraFade();// 0x3751084
	function SetManualCameraFade();// 0x3750f70
	function RemoveCameraModifier();// 0x3697fd0
	function RemoveCameraLensEffect();// 0x3750ef0
	function PlayCameraShake();// 0x3750d94
	function PlayCameraAnim();// 0x3750a70
	function PhotographyCameraModify();// 0x3750908
	function OnPhotographySessionStart();// 0x16fae60
	function OnPhotographySessionEnd();// 0x16a8160
	function OnPhotographyMultiPartCaptureStart();// 0x16e6e40
	function OnPhotographyMultiPartCaptureEnd();// 0x16f99b4
	function GetOwningPlayerController();// 0x37508d8
	function GetFOVAngle();// 0x36724b0
	function GetCameraRotation();// 0x3750890
	function GetCameraLocation();// 0x3750848
	function FindCameraModifierByClass();// 0x37507c0
	function ClearCameraLensEffects();// 0x37507a4
	function BlueprintUpdateCamera();// 0x206ccd8
	function AddNewCameraModifier();// 0x375071c
	function AddCameraLensEffect();// 0x3750694

--------------------------------
Class: CameraCacheEntry
	float TimeStamp;//[Offset: 0x0 , Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10 , Size: 1312]

--------------------------------
Class: MinimalViewInfo
	Vector Location;//[Offset: 0x0 , Size: 12]
	Vector LocationLocalSpace;//[Offset: 0xc , Size: 12]
	Rotator Rotation;//[Offset: 0x18 , Size: 12]
	float FOV;//[Offset: 0x24 , Size: 4]
	float OrthoWidth;//[Offset: 0x28 , Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x2c , Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x30 , Size: 4]
	float AspectRatio;//[Offset: 0x34 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	byte ProjectionMode;//[Offset: 0x39 , Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x3c , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x40 , Size: 1232]
	Vector2D OffCenterProjectionOffset;//[Offset: 0x510 , Size: 8]

--------------------------------
Class: PostProcessSettings
	bool bOverride_WhiteTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bOverride_WhiteTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorSaturation;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorContrast;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorGamma;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorGain;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorOffset;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorSaturationShadows;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bOverride_ColorContrastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGammaShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGainShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorOffsetShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorSaturationMidtones;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorContrastMidtones;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGammaMidtones;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorGainMidtones;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]
	bool bOverride_ColorOffsetMidtones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorSaturationHighlights;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorContrastHighlights;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorGammaHighlights;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorGainHighlights;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorOffsetHighlights;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorCorrectionShadowsMax;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2 , Size: 1]
	bool bOverride_ColorCorrectionHighlightsMin;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2 , Size: 1]
	bool bOverride_FilmWhitePoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmSaturation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerRed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerGreen;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmChannelMixerBlue;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmContrast;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmDynamicRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmHealAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3 , Size: 1]
	bool bOverride_FilmToeAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTintBlend;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShadowTintAmount;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmSlope;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmToe;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmShoulder;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmBlackClip;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x4 , Size: 1]
	bool bOverride_FilmWhiteClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5 , Size: 1]
	bool bOverride_SceneColorTint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x5 , Size: 1]
	bool bOverride_SceneFringeIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x5 , Size: 1]
	bool bOverride_AmbientCubemapTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x5 , Size: 1]
	bool bOverride_AmbientCubemapIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomMethod;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x5 , Size: 1]
	bool bOverride_BloomThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x5 , Size: 1]
	bool bOverride_Bloom1Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom1Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom2Size;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom2Tint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom3Tint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom3Size;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom4Tint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom4Size;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x6 , Size: 1]
	bool bOverride_Bloom5Tint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom5Size;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom6Tint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7 , Size: 1]
	bool bOverride_Bloom6Size;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomSizeScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionTexture;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionCenterUV;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7 , Size: 1]
	bool bOverride_BloomConvolutionPreFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMin;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMax;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionPreFilterMult;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomConvolutionBufferScale;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMaskIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMaskTint;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x8 , Size: 1]
	bool bOverride_BloomDirtMask;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x8 , Size: 1]
	bool bOverride_AutoExposureMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureLowPercent;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureHighPercent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureMinBrightness;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureMaxBrightness;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureSpeedUp;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureSpeedDown;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9 , Size: 1]
	bool bOverride_AutoExposureBias;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9 , Size: 1]
	bool bOverride_HistogramLogMin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa , Size: 1]
	bool bOverride_HistogramLogMax;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareIntensity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareTint;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareTints;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareBokehSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareBokehShape;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa , Size: 1]
	bool bOverride_LensFlareThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa , Size: 1]
	bool bOverride_VignetteIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb , Size: 1]
	bool bOverride_GrainIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb , Size: 1]
	bool bOverride_GrainJitter;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionFadeDistance;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionFadeRadius;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb , Size: 1]
	bool bOverride_AmbientOcclusionDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionPower;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipBlend;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xc , Size: 1]
	bool bOverride_AmbientOcclusionMipThreshold;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xc , Size: 1]
	bool bOverride_LPVIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDirectionalOcclusionIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDirectionalOcclusionRadius;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDiffuseOcclusionExponent;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSpecularOcclusionExponent;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xd , Size: 1]
	bool bOverride_LPVDiffuseOcclusionIntensity;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSpecularOcclusionIntensity;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSize;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xd , Size: 1]
	bool bOverride_LPVSecondaryOcclusionIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe , Size: 1]
	bool bOverride_LPVSecondaryBounceIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe , Size: 1]
	bool bOverride_LPVGeometryVolumeBias;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe , Size: 1]
	bool bOverride_LPVVplInjectionBias;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xe , Size: 1]
	bool bOverride_LPVEmissiveInjectionIntensity;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xe , Size: 1]
	bool bOverride_LPVFadeRange;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xe , Size: 1]
	bool bOverride_LPVDirectionalOcclusionFadeRange;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xe , Size: 1]
	bool bOverride_IndirectLightingColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xe , Size: 1]
	bool bOverride_IndirectLightingIntensity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf , Size: 1]
	bool bOverride_ColorGradingIntensity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xf , Size: 1]
	bool bOverride_ColorGradingLUT;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFocalDistance;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFstop;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldSensorWidth;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldDepthBlurRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldDepthBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xf , Size: 1]
	bool bOverride_DepthOfFieldFocalRegion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldNearTransitionRegion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldFarTransitionRegion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldMaxBokehSize;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldNearBlurSize;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldFarBlurSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x10 , Size: 1]
	bool bOverride_DepthOfFieldMethod;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x10 , Size: 1]
	bool bOverride_MobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldBokehShape;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldColorThreshold;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldSizeThreshold;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldSkyFocusDistance;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x11 , Size: 1]
	bool bOverride_DepthOfFieldVignetteSize;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x11 , Size: 1]
	bool bOverride_MotionBlurAmount;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x11 , Size: 1]
	bool bOverride_MotionBlurMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x12 , Size: 1]
	bool bOverride_MotionBlurPerObjectSize;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenPercentage;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionIntensity;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionQuality;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionMaxRoughness;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x12 , Size: 1]
	bool bOverride_ScreenSpaceReflectionRoughnessScale;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x12 , Size: 1]
	float WhiteTemp;//[Offset: 0x14 , Size: 4]
	float WhiteTint;//[Offset: 0x18 , Size: 4]
	Vector4 ColorSaturation;//[Offset: 0x20 , Size: 16]
	Vector4 ColorContrast;//[Offset: 0x30 , Size: 16]
	Vector4 ColorGamma;//[Offset: 0x40 , Size: 16]
	Vector4 ColorGain;//[Offset: 0x50 , Size: 16]
	Vector4 ColorOffset;//[Offset: 0x60 , Size: 16]
	Vector4 ColorSaturationShadows;//[Offset: 0x70 , Size: 16]
	Vector4 ColorContrastShadows;//[Offset: 0x80 , Size: 16]
	Vector4 ColorGammaShadows;//[Offset: 0x90 , Size: 16]
	Vector4 ColorGainShadows;//[Offset: 0xa0 , Size: 16]
	Vector4 ColorOffsetShadows;//[Offset: 0xb0 , Size: 16]
	float ColorCorrectionShadowsMax;//[Offset: 0xc0 , Size: 4]
	Vector4 ColorSaturationMidtones;//[Offset: 0xd0 , Size: 16]
	Vector4 ColorContrastMidtones;//[Offset: 0xe0 , Size: 16]
	Vector4 ColorGammaMidtones;//[Offset: 0xf0 , Size: 16]
	Vector4 ColorGainMidtones;//[Offset: 0x100 , Size: 16]
	Vector4 ColorOffsetMidtones;//[Offset: 0x110 , Size: 16]
	Vector4 ColorSaturationHighlights;//[Offset: 0x120 , Size: 16]
	Vector4 ColorContrastHighlights;//[Offset: 0x130 , Size: 16]
	Vector4 ColorGammaHighlights;//[Offset: 0x140 , Size: 16]
	Vector4 ColorGainHighlights;//[Offset: 0x150 , Size: 16]
	Vector4 ColorOffsetHighlights;//[Offset: 0x160 , Size: 16]
	float ColorCorrectionHighlightsMin;//[Offset: 0x170 , Size: 4]
	float FilmSlope;//[Offset: 0x174 , Size: 4]
	float FilmToe;//[Offset: 0x178 , Size: 4]
	float FilmShoulder;//[Offset: 0x17c , Size: 4]
	float FilmBlackClip;//[Offset: 0x180 , Size: 4]
	float FilmWhiteClip;//[Offset: 0x184 , Size: 4]
	LinearColor FilmWhitePoint;//[Offset: 0x188 , Size: 16]
	LinearColor FilmShadowTint;//[Offset: 0x198 , Size: 16]
	float FilmShadowTintBlend;//[Offset: 0x1a8 , Size: 4]
	float FilmShadowTintAmount;//[Offset: 0x1ac , Size: 4]
	float FilmSaturation;//[Offset: 0x1b0 , Size: 4]
	LinearColor FilmChannelMixerRed;//[Offset: 0x1b4 , Size: 16]
	LinearColor FilmChannelMixerGreen;//[Offset: 0x1c4 , Size: 16]
	LinearColor FilmChannelMixerBlue;//[Offset: 0x1d4 , Size: 16]
	float FilmContrast;//[Offset: 0x1e4 , Size: 4]
	float FilmToeAmount;//[Offset: 0x1e8 , Size: 4]
	float FilmHealAmount;//[Offset: 0x1ec , Size: 4]
	float FilmDynamicRange;//[Offset: 0x1f0 , Size: 4]
	LinearColor SceneColorTint;//[Offset: 0x1f4 , Size: 16]
	float SceneFringeIntensity;//[Offset: 0x204 , Size: 4]
	byte BloomMethod;//[Offset: 0x208 , Size: 1]
	float BloomIntensity;//[Offset: 0x20c , Size: 4]
	float BloomThreshold;//[Offset: 0x210 , Size: 4]
	float BloomSizeScale;//[Offset: 0x214 , Size: 4]
	float Bloom1Size;//[Offset: 0x218 , Size: 4]
	float Bloom2Size;//[Offset: 0x21c , Size: 4]
	float Bloom3Size;//[Offset: 0x220 , Size: 4]
	float Bloom4Size;//[Offset: 0x224 , Size: 4]
	float Bloom5Size;//[Offset: 0x228 , Size: 4]
	float Bloom6Size;//[Offset: 0x22c , Size: 4]
	LinearColor Bloom1Tint;//[Offset: 0x230 , Size: 16]
	LinearColor Bloom2Tint;//[Offset: 0x240 , Size: 16]
	LinearColor Bloom3Tint;//[Offset: 0x250 , Size: 16]
	LinearColor Bloom4Tint;//[Offset: 0x260 , Size: 16]
	LinearColor Bloom5Tint;//[Offset: 0x270 , Size: 16]
	LinearColor Bloom6Tint;//[Offset: 0x280 , Size: 16]
	Texture2D* BloomConvolutionTexture;//[Offset: 0x290 , Size: 4]
	float BloomConvolutionSize;//[Offset: 0x294 , Size: 4]
	Vector2D BloomConvolutionCenterUV;//[Offset: 0x298 , Size: 8]
	Vector BloomConvolutionPreFilter;//[Offset: 0x2a0 , Size: 12]
	float BloomConvolutionPreFilterMin;//[Offset: 0x2ac , Size: 4]
	float BloomConvolutionPreFilterMax;//[Offset: 0x2b0 , Size: 4]
	float BloomConvolutionPreFilterMult;//[Offset: 0x2b4 , Size: 4]
	float BloomConvolutionBufferScale;//[Offset: 0x2b8 , Size: 4]
	Texture* BloomDirtMask;//[Offset: 0x2bc , Size: 4]
	float BloomDirtMaskIntensity;//[Offset: 0x2c0 , Size: 4]
	LinearColor BloomDirtMaskTint;//[Offset: 0x2c4 , Size: 16]
	LinearColor AmbientCubemapTint;//[Offset: 0x2d4 , Size: 16]
	float AmbientCubemapIntensity;//[Offset: 0x2e4 , Size: 4]
	TextureCube* AmbientCubemap;//[Offset: 0x2e8 , Size: 4]
	byte AutoExposureMethod;//[Offset: 0x2ec , Size: 1]
	float AutoExposureLowPercent;//[Offset: 0x2f0 , Size: 4]
	float AutoExposureHighPercent;//[Offset: 0x2f4 , Size: 4]
	float AutoExposureMinBrightness;//[Offset: 0x2f8 , Size: 4]
	float AutoExposureMaxBrightness;//[Offset: 0x2fc , Size: 4]
	float AutoExposureSpeedUp;//[Offset: 0x300 , Size: 4]
	float AutoExposureSpeedDown;//[Offset: 0x304 , Size: 4]
	float AutoExposureBias;//[Offset: 0x308 , Size: 4]
	float HistogramLogMin;//[Offset: 0x30c , Size: 4]
	float HistogramLogMax;//[Offset: 0x310 , Size: 4]
	float LensFlareIntensity;//[Offset: 0x314 , Size: 4]
	LinearColor LensFlareTint;//[Offset: 0x318 , Size: 16]
	float LensFlareBokehSize;//[Offset: 0x328 , Size: 4]
	int LensFlareCount;//[Offset: 0x32c , Size: 4]
	float LensFlareThreshold;//[Offset: 0x330 , Size: 4]
	Texture* LensFlareBokehShape;//[Offset: 0x334 , Size: 4]
	LinearColor LensFlareTints;//[Offset: 0x338 , Size: 16]
	float VignetteIntensity;//[Offset: 0x3b8 , Size: 4]
	float GrainJitter;//[Offset: 0x3bc , Size: 4]
	float GrainIntensity;//[Offset: 0x3c0 , Size: 4]
	float AmbientOcclusionIntensity;//[Offset: 0x3c4 , Size: 4]
	float AmbientOcclusionStaticFraction;//[Offset: 0x3c8 , Size: 4]
	float AmbientOcclusionRadius;//[Offset: 0x3cc , Size: 4]
	bool AmbientOcclusionRadiusInWS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d0 , Size: 1]
	float AmbientOcclusionFadeDistance;//[Offset: 0x3d4 , Size: 4]
	float AmbientOcclusionFadeRadius;//[Offset: 0x3d8 , Size: 4]
	float AmbientOcclusionDistance;//[Offset: 0x3dc , Size: 4]
	float AmbientOcclusionPower;//[Offset: 0x3e0 , Size: 4]
	float AmbientOcclusionBias;//[Offset: 0x3e4 , Size: 4]
	float AmbientOcclusionQuality;//[Offset: 0x3e8 , Size: 4]
	float AmbientOcclusionMipBlend;//[Offset: 0x3ec , Size: 4]
	float AmbientOcclusionMipScale;//[Offset: 0x3f0 , Size: 4]
	float AmbientOcclusionMipThreshold;//[Offset: 0x3f4 , Size: 4]
	LinearColor IndirectLightingColor;//[Offset: 0x3f8 , Size: 16]
	float IndirectLightingIntensity;//[Offset: 0x408 , Size: 4]
	float ColorGradingIntensity;//[Offset: 0x40c , Size: 4]
	Texture* ColorGradingLUT;//[Offset: 0x410 , Size: 4]
	byte DepthOfFieldMethod;//[Offset: 0x414 , Size: 1]
	bool bMobileHQGaussian;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x415 , Size: 1]
	float DepthOfFieldFstop;//[Offset: 0x418 , Size: 4]
	float DepthOfFieldSensorWidth;//[Offset: 0x41c , Size: 4]
	float DepthOfFieldFocalDistance;//[Offset: 0x420 , Size: 4]
	float DepthOfFieldDepthBlurAmount;//[Offset: 0x424 , Size: 4]
	float DepthOfFieldDepthBlurRadius;//[Offset: 0x428 , Size: 4]
	float DepthOfFieldFocalRegion;//[Offset: 0x42c , Size: 4]
	float DepthOfFieldNearTransitionRegion;//[Offset: 0x430 , Size: 4]
	float DepthOfFieldFarTransitionRegion;//[Offset: 0x434 , Size: 4]
	float DepthOfFieldScale;//[Offset: 0x438 , Size: 4]
	float DepthOfFieldMaxBokehSize;//[Offset: 0x43c , Size: 4]
	float DepthOfFieldNearBlurSize;//[Offset: 0x440 , Size: 4]
	float DepthOfFieldFarBlurSize;//[Offset: 0x444 , Size: 4]
	Texture* DepthOfFieldBokehShape;//[Offset: 0x448 , Size: 4]
	float DepthOfFieldOcclusion;//[Offset: 0x44c , Size: 4]
	float DepthOfFieldColorThreshold;//[Offset: 0x450 , Size: 4]
	float DepthOfFieldSizeThreshold;//[Offset: 0x454 , Size: 4]
	float DepthOfFieldSkyFocusDistance;//[Offset: 0x458 , Size: 4]
	float DepthOfFieldVignetteSize;//[Offset: 0x45c , Size: 4]
	float MotionBlurAmount;//[Offset: 0x460 , Size: 4]
	float MotionBlurMax;//[Offset: 0x464 , Size: 4]
	float MotionBlurPerObjectSize;//[Offset: 0x468 , Size: 4]
	float LPVIntensity;//[Offset: 0x46c , Size: 4]
	float LPVVplInjectionBias;//[Offset: 0x470 , Size: 4]
	float LPVSize;//[Offset: 0x474 , Size: 4]
	float LPVSecondaryOcclusionIntensity;//[Offset: 0x478 , Size: 4]
	float LPVSecondaryBounceIntensity;//[Offset: 0x47c , Size: 4]
	float LPVGeometryVolumeBias;//[Offset: 0x480 , Size: 4]
	float LPVEmissiveInjectionIntensity;//[Offset: 0x484 , Size: 4]
	float LPVDirectionalOcclusionIntensity;//[Offset: 0x488 , Size: 4]
	float LPVDirectionalOcclusionRadius;//[Offset: 0x48c , Size: 4]
	float LPVDiffuseOcclusionExponent;//[Offset: 0x490 , Size: 4]
	float LPVSpecularOcclusionExponent;//[Offset: 0x494 , Size: 4]
	float LPVDiffuseOcclusionIntensity;//[Offset: 0x498 , Size: 4]
	float LPVSpecularOcclusionIntensity;//[Offset: 0x49c , Size: 4]
	float ScreenSpaceReflectionIntensity;//[Offset: 0x4a0 , Size: 4]
	float ScreenSpaceReflectionQuality;//[Offset: 0x4a4 , Size: 4]
	float ScreenSpaceReflectionMaxRoughness;//[Offset: 0x4a8 , Size: 4]
	float LPVFadeRange;//[Offset: 0x4ac , Size: 4]
	float LPVDirectionalOcclusionFadeRange;//[Offset: 0x4b0 , Size: 4]
	float ScreenPercentage;//[Offset: 0x4b4 , Size: 4]
	WeightedBlendables WeightedBlendables;//[Offset: 0x4b8 , Size: 12]
	Blendables(ObjectProperty)[] Blendables;//[Offset: 0x4c4 , Size: 12]

--------------------------------
Class: Vector4
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]
	float Z;//[Offset: 0x8 , Size: 4]
	float W;//[Offset: 0xc , Size: 4]

--------------------------------
Class: Vector2D
	float X;//[Offset: 0x0 , Size: 4]
	float Y;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TextureCube.Texture.Object

--------------------------------
Class: WeightedBlendables
	Array(StructProperty)[] Array;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: TViewTarget
	Actor* Target;//[Offset: 0x0 , Size: 4]
	MinimalViewInfo POV;//[Offset: 0x10 , Size: 1312]
	PlayerState* PlayerState;//[Offset: 0x530 , Size: 4]

--------------------------------
Class: CameraModifier_CameraShake.CameraModifier.Object
	ActiveShakes(ObjectProperty)[] ActiveShakes;//[Offset: 0x30 , Size: 12]
	float SplitScreenShakeScale;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: CameraModifier.Object
	bool bDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bExclusive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	byte Priority;//[Offset: 0x1d , Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0x20 , Size: 4]
	float AlphaInTime;//[Offset: 0x24 , Size: 4]
	float AlphaOutTime;//[Offset: 0x28 , Size: 4]
	float alpha;//[Offset: 0x2c , Size: 4]
	function IsDisabled();// 0x1738b28
	function GetViewTarget();// 0x2bef5cc
	function EnableModifier();// 0x17e2208
	function DisableModifier();// 0x36697a0
	function BlueprintModifyPostProcess();// 0x206ccd8
	function BlueprintModifyCamera();// 0x206ccd8

--------------------------------
Class: CameraAnimInst.Object
	CameraAnim* CamAnim;//[Offset: 0x1c , Size: 4]
	InterpGroupInst* InterpGroupInst;//[Offset: 0x20 , Size: 4]
	float PlayRate;//[Offset: 0x3c , Size: 4]
	InterpTrackMove* MoveTrack;//[Offset: 0x50 , Size: 4]
	InterpTrackInstMove* MoveInst;//[Offset: 0x54 , Size: 4]
	byte PlaySpace;//[Offset: 0x58 , Size: 1]
	function Stop();// 0x3668314
	function SetScale();// 0x18d0998
	function SetDuration();// 0x366829c

--------------------------------
Class: CameraAnim.Object
	InterpGroup* CameraInterpGroup;//[Offset: 0x1c , Size: 4]
	float AnimLength;//[Offset: 0x20 , Size: 4]
	Box BoundingBox;//[Offset: 0x24 , Size: 28]
	bool bRelativeToInitialTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	bool bRelativeToInitialFOV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40 , Size: 1]
	float BaseFOV;//[Offset: 0x44 , Size: 4]
	PostProcessSettings BasePostProcessSettings;//[Offset: 0x50 , Size: 1232]
	float BasePostProcessBlendWeight;//[Offset: 0x520 , Size: 4]

--------------------------------
Class: InterpGroup.Object
	InterpTracks(ObjectProperty)[] InterpTracks;//[Offset: 0x20 , Size: 12]
	FName GroupName;//[Offset: 0x30 , Size: 8]
	Color GroupColor;//[Offset: 0x38 , Size: 4]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3c , Size: 1]
	bool bIsFolder;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3c , Size: 1]
	bool bIsParented;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3c , Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3c , Size: 1]

--------------------------------
Class: Box
	Vector Min;//[Offset: 0x0 , Size: 12]
	Vector Max;//[Offset: 0xc , Size: 12]
	byte IsValid;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: InterpGroupInst.Object
	InterpGroup* Group;//[Offset: 0x1c , Size: 4]
	Actor* GroupActor;//[Offset: 0x20 , Size: 4]
	TrackInst(ObjectProperty)[] TrackInst;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: InterpTrackMove.InterpTrack.Object
	InterpCurveVector PosTrack;//[Offset: 0x48 , Size: 20]
	InterpCurveVector EulerTrack;//[Offset: 0x5c , Size: 20]
	InterpLookupTrack LookupTrack;//[Offset: 0x70 , Size: 12]
	FName LookAtGroupName;//[Offset: 0x80 , Size: 8]
	float LinCurveTension;//[Offset: 0x88 , Size: 4]
	float AngCurveTension;//[Offset: 0x8c , Size: 4]
	bool bUseQuatInterpolation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	bool bShowArrowAtKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90 , Size: 1]
	bool bDisableMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90 , Size: 1]
	bool bShowTranslationOnCurveEd;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90 , Size: 1]
	bool bShowRotationOnCurveEd;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x90 , Size: 1]
	bool bHide3DTrack;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x90 , Size: 1]
	byte RotMode;//[Offset: 0x91 , Size: 1]

--------------------------------
Class: InterpTrack.Object
	SubTracks(ObjectProperty)[] SubTracks;//[Offset: 0x24 , Size: 12]
	class InterpTrackInst* TrackInstClass;//[Offset: 0x30 , Size: 4]
	byte ActiveCondition;//[Offset: 0x34 , Size: 1]
	FString TrackTitle;//[Offset: 0x38 , Size: 12]
	bool bOnePerGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bDirGroupOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	bool bDisableTrack;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44 , Size: 1]
	bool bIsSelected;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x44 , Size: 1]
	bool bIsAnimControlTrack;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x44 , Size: 1]
	bool bSubTrackOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x44 , Size: 1]
	bool bVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x44 , Size: 1]
	bool bIsRecording;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x44 , Size: 1]

--------------------------------
Class: InterpCurveVector
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpLookupTrack
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: InterpTrackInstMove.InterpTrackInst.Object
	Vector ResetLocation;//[Offset: 0x1c , Size: 12]
	Rotator ResetRotation;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: CameraActor.Actor.Object
	byte AutoActivateForPlayer;//[Offset: 0x2c4 , Size: 1]
	CameraComponent* CameraComponent;//[Offset: 0x2c8 , Size: 4]
	SceneComponent* SceneComponent;//[Offset: 0x2cc , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8 , Size: 1]
	float AspectRatio;//[Offset: 0x2dc , Size: 4]
	float FOVAngle;//[Offset: 0x2e0 , Size: 4]
	float PostProcessBlendWeight;//[Offset: 0x2e4 , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2f0 , Size: 1232]
	function GetAutoActivatePlayerIndex();// 0x3667cec

--------------------------------
Class: CameraComponent.SceneComponent.ActorComponent.Object
	float FieldOfView;//[Offset: 0x260 , Size: 4]
	float OrthoWidth;//[Offset: 0x264 , Size: 4]
	float OrthoNearClipPlane;//[Offset: 0x268 , Size: 4]
	float OrthoFarClipPlane;//[Offset: 0x26c , Size: 4]
	float AspectRatio;//[Offset: 0x270 , Size: 4]
	bool bConstrainAspectRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274 , Size: 1]
	bool bUseFieldOfViewForLOD;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274 , Size: 1]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274 , Size: 1]
	byte ProjectionMode;//[Offset: 0x275 , Size: 1]
	float PostProcessBlendWeight;//[Offset: 0x278 , Size: 4]
	PostProcessSettings PostProcessSettings;//[Offset: 0x280 , Size: 1232]
	bool bUseControllerViewRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x79c , Size: 1]
	function SetUseFieldOfViewForLOD();// 0x3668cd4
	function SetProjectionMode();// 0x3668c60
	function SetPostProcessBlendWeight();// 0x3668bec
	function SetOrthoWidth();// 0x3668b78
	function SetOrthoNearClipPlane();// 0x3668b04
	function SetOrthoFarClipPlane();// 0x3668a90
	function SetFieldOfView();// 0x17624f0
	function SetConstraintAspectRatio();// 0x3668a08
	function SetAspectRatio();// 0x3668994
	function SetActive();// 0x363f6ac
	function RemoveBlendable();// 0x36688a4
	function GetCameraView();// 0x17894b0
	function ApplyDrawDistanceOffset();// 0x366882c
	function AddOrUpdateBlendable();// 0x36686fc

--------------------------------
Class: CheatManager.Object
	DebugCameraController* DebugCameraControllerRef;//[Offset: 0x1c , Size: 4]
	class DebugCameraController* DebugCameraControllerClass;//[Offset: 0x20 , Size: 4]
	function Walk();// 0x17e2208
	function ViewSelf();// 0x363be64
	function ViewPlayer();// 0x36762bc
	function ViewClass();// 0x1858fac
	function ViewActor();// 0x367623c
	function ToggleDebugCamera();// 0x3676220
	function ToggleAILogging();// 0x3676204
	function TestCollisionDistance();// 0x36761e8
	function Teleport();// 0x1790b68
	function Summon();// 0x3676124
	function StreamLevelOut();// 0x36760a4
	function StreamLevelIn();// 0x17fe680
	function Slomo();// 0x3676024
	function SetWorldOrigin();// 0x3676010
	function SetNavDrawDistance();// 0x3675f98
	function SetMouseSensitivityToDefault();// 0x3675f84
	function ServerToggleAILogging();// 0x3675f28
	function ReceiveInitCheatManager();// 0x206ccd8
	function ReceiveEndPlay();// 0x206ccd8
	function RebuildNavigation();// 0x3675f0c
	function PlayersOnly();// 0x16b8458
	function OnlyLoadLevel();// 0x3675e8c
	function LogLoc();// 0x3675e70
	function InvertMouse();// 0x3675e5c
	function God();// 0x18ec038
	function Ghost();// 0x1735f78
	function FreezeFrame();// 0x18d1054
	function Fly();// 0x16b843c
	function FlushLog();// 0x3675e40
	function EnableDebugCamera();// 0x3675e24
	function DumpVoiceMutingState();// 0x3675e08
	function DumpPartyState();// 0x18aa3e8
	function DumpOnlineSessionState();// 0x3675dec
	function DumpChatState();// 0x3675dd0
	function DisableDebugCamera();// 0x3675db4
	function DestroyTarget();// 0x16b8904
	function DestroyPawns();// 0x3675d34
	function DestroyAllPawnsExceptTarget();// 0x3675d18
	function DestroyAll();// 0x2bc9d7c
	function DebugCapsuleSweepSize();// 0x3675c54
	function DebugCapsuleSweepPawn();// 0x3675c38
	function DebugCapsuleSweepComplex();// 0x3675bb0
	function DebugCapsuleSweepClear();// 0x3675b94
	function DebugCapsuleSweepChannel();// 0x3675b14
	function DebugCapsuleSweepCapture();// 0x3675af8
	function DebugCapsuleSweep();// 0x1702ef4
	function DamageTarget();// 0x3675a78
	function CheatScript();// 0x3675920
	function ChangeSize();// 0x18d1e00
	function BugItStringCreator();// 0x3675724
	function BugItGo();// 0x3675544
	function BugIt();// 0x3675480

--------------------------------
Class: DebugCameraController.PlayerController.Controller.Actor.Object
	bool bShowSelectedInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55c , Size: 1]
	bool bIsFrozenRendering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x55c , Size: 1]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x560 , Size: 4]
	float SpeedScale;//[Offset: 0x574 , Size: 4]
	float InitialMaxSpeed;//[Offset: 0x578 , Size: 4]
	float InitialAccel;//[Offset: 0x57c , Size: 4]
	float InitialDecel;//[Offset: 0x580 , Size: 4]
	function ToggleDisplay();// 0x367f144
	function ShowDebugSelectedInfo();// 0x367f128
	function SetPawnMovementSpeedScale();// 0x367f0b0
	function ReceiveOnDeactivate();// 0x206ccd8
	function ReceiveOnActorSelected();// 0x206ccd8
	function ReceiveOnActivate();// 0x206ccd8
	function GetSelectedActor();// 0x367f088

--------------------------------
Class: DrawFrustumComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color FrustumColor;//[Offset: 0x54c , Size: 4]
	float FrustumAngle;//[Offset: 0x550 , Size: 4]
	float FrustumAspectRatio;//[Offset: 0x554 , Size: 4]
	float FrustumStartDist;//[Offset: 0x558 , Size: 4]
	float FrustumEndDist;//[Offset: 0x55c , Size: 4]
	Texture* Texture;//[Offset: 0x560 , Size: 4]

--------------------------------
Class: PlayerInput.Object
	bool bEnableKeyInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d , Size: 1]
	DebugExecBindings(StructProperty)[] DebugExecBindings;//[Offset: 0x160 , Size: 12]
	InvertedAxis(NameProperty)[] InvertedAxis;//[Offset: 0x190 , Size: 12]
	function SetMouseSensitivity();// 0x375f390
	function SetBind();// 0x375f288
	function InvertAxisKey();// 0x375ef9c
	function InvertAxis();// 0x375ef24
	function ClearSmoothing();// 0x375ef10

--------------------------------
Class: TouchInterface.Object
	Controls(StructProperty)[] Controls;//[Offset: 0x1c , Size: 12]
	float ActiveOpacity;//[Offset: 0x28 , Size: 4]
	float InactiveOpacity;//[Offset: 0x2c , Size: 4]
	float TimeUntilDeactive;//[Offset: 0x30 , Size: 4]
	float TimeUntilReset;//[Offset: 0x34 , Size: 4]
	float ActivationDelay;//[Offset: 0x38 , Size: 4]
	bool bPreventRecenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	float StartupDelay;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: GameNetworkManager.Info.Actor.Object
	int AdjustedNetSpeed;//[Offset: 0x2c4 , Size: 4]
	float LastNetSpeedUpdateTime;//[Offset: 0x2c8 , Size: 4]
	int TotalNetBandwidth;//[Offset: 0x2cc , Size: 4]
	int MinDynamicBandwidth;//[Offset: 0x2d0 , Size: 4]
	int MaxDynamicBandwidth;//[Offset: 0x2d4 , Size: 4]
	bool bIsStandbyCheckingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d8 , Size: 1]
	bool bHasStandbyCheatTriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d8 , Size: 1]
	float StandbyRxCheatTime;//[Offset: 0x2dc , Size: 4]
	float StandbyTxCheatTime;//[Offset: 0x2e0 , Size: 4]
	int BadPingThreshold;//[Offset: 0x2e4 , Size: 4]
	float PercentMissingForRxStandby;//[Offset: 0x2e8 , Size: 4]
	float PercentMissingForTxStandby;//[Offset: 0x2ec , Size: 4]
	float PercentForBadPing;//[Offset: 0x2f0 , Size: 4]
	float JoinInProgressStandbyWaitTime;//[Offset: 0x2f4 , Size: 4]
	float MoveRepSize;//[Offset: 0x2f8 , Size: 4]
	float MAXPOSITIONERRORSQUARED;//[Offset: 0x2fc , Size: 4]
	float MAXNEARZEROVELOCITYSQUARED;//[Offset: 0x300 , Size: 4]
	float CLIENTADJUSTUPDATECOST;//[Offset: 0x304 , Size: 4]
	float MAXCLIENTUPDATEINTERVAL;//[Offset: 0x308 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x30c , Size: 4]
	float ClientNetSendMoveDeltaTime;//[Offset: 0x310 , Size: 4]
	float ClientNetSendMoveDeltaTimeThrottled;//[Offset: 0x314 , Size: 4]
	float ClientNetSendMoveDeltaTimeStationary;//[Offset: 0x318 , Size: 4]
	int ClientNetSendMoveThrottleAtNetSpeed;//[Offset: 0x31c , Size: 4]
	int ClientNetSendMoveThrottleOverPlayerCount;//[Offset: 0x320 , Size: 4]
	bool ClientAuthorativePosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	float ClientErrorUpdateRateLimit;//[Offset: 0x328 , Size: 4]
	bool bMovementTimeDiscrepancyDetection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	bool bMovementTimeDiscrepancyResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32d , Size: 1]
	float MovementTimeDiscrepancyMaxTimeMargin;//[Offset: 0x330 , Size: 4]
	float MovementTimeDiscrepancyMinTimeMargin;//[Offset: 0x334 , Size: 4]
	float MovementTimeDiscrepancyResolutionRate;//[Offset: 0x338 , Size: 4]
	float MovementTimeDiscrepancyDriftAllowance;//[Offset: 0x33c , Size: 4]
	bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x340 , Size: 1]
	bool bUseDistanceBasedRelevancy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x341 , Size: 1]

--------------------------------
Class: LightmassWorldInfoSettings
	float StaticLightingLevelScale;//[Offset: 0x0 , Size: 4]
	int NumIndirectLightingBounces;//[Offset: 0x4 , Size: 4]
	int NumSkyLightingBounces;//[Offset: 0x8 , Size: 4]
	float IndirectLightingQuality;//[Offset: 0xc , Size: 4]
	float IndirectLightingSmoothness;//[Offset: 0x10 , Size: 4]
	Color EnvironmentColor;//[Offset: 0x14 , Size: 4]
	float EnvironmentIntensity;//[Offset: 0x18 , Size: 4]
	float EmissiveBoost;//[Offset: 0x1c , Size: 4]
	float DiffuseBoost;//[Offset: 0x20 , Size: 4]
	byte VolumeLightingMethod;//[Offset: 0x24 , Size: 1]
	float VolumetricLightmapDetailCellSize;//[Offset: 0x28 , Size: 4]
	float VolumetricLightmapMaximumBrickMemoryMb;//[Offset: 0x2c , Size: 4]
	float VolumeLightSamplePlacementScale;//[Offset: 0x30 , Size: 4]
	bool bUseAmbientOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bGenerateAmbientOcclusionMaterialMask;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	float DirectIlluminationOcclusionFraction;//[Offset: 0x38 , Size: 4]
	float IndirectIlluminationOcclusionFraction;//[Offset: 0x3c , Size: 4]
	float OcclusionExponent;//[Offset: 0x40 , Size: 4]
	float FullyOccludedSamplesFraction;//[Offset: 0x44 , Size: 4]
	float MaxOcclusionDistance;//[Offset: 0x48 , Size: 4]
	bool bVisualizeMaterialDiffuse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	bool bVisualizeAmbientOcclusion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c , Size: 1]
	bool bCompressLightmaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4c , Size: 1]
	bool bUseSimpleLightmap;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x4c , Size: 1]

--------------------------------
Class: IdeaBakingWorldInfoSettings
	enum BakingLayout;//[Offset: 0x0 , Size: 1]
	int NumCoarseSamples;//[Offset: 0x4 , Size: 4]
	int NumSamples;//[Offset: 0x8 , Size: 4]
	int NumLightingBounces;//[Offset: 0xc , Size: 4]
	float LightmapBoost;//[Offset: 0x10 , Size: 4]
	float SunHardness;//[Offset: 0x14 , Size: 4]
	enum BakingMode;//[Offset: 0x18 , Size: 1]
	bool bUseParallelBaking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19 , Size: 1]
	bool bUseConservativeRasterization;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x19 , Size: 1]
	bool bUseLocalOcclusion;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x19 , Size: 1]
	float LocalOcclusionRadius;//[Offset: 0x1c , Size: 4]
	float LocalOcclusionFallOff;//[Offset: 0x20 , Size: 4]
	float LocalOcclusionDistribution;//[Offset: 0x24 , Size: 4]
	float LocalOcclusionFadeRatio;//[Offset: 0x28 , Size: 4]
	int LocalOcclusionRes;//[Offset: 0x2c , Size: 4]
	int LocalOcclusionMultiple;//[Offset: 0x30 , Size: 4]
	float LocalOcclusionPower;//[Offset: 0x34 , Size: 4]
	int LocalOcclusionDenoising;//[Offset: 0x38 , Size: 4]
	int NumDenoisingIterators;//[Offset: 0x3c , Size: 4]
	int NumDilationIterators;//[Offset: 0x40 , Size: 4]
	float RayTraceMaxDistance;//[Offset: 0x44 , Size: 4]
	float RetraceDistance;//[Offset: 0x48 , Size: 4]
	float SmallestTexelRadius;//[Offset: 0x4c , Size: 4]
	uint32 AreaLightSampleCount;//[Offset: 0x50 , Size: 4]
	bool bWithPortalDirectLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]

--------------------------------
Class: ReverbSettings
	bool bApplyReverb;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	byte ReverbType;//[Offset: 0x1 , Size: 1]
	ReverbEffect* ReverbEffect;//[Offset: 0x4 , Size: 4]
	float Volume;//[Offset: 0x8 , Size: 4]
	float FadeTime;//[Offset: 0xc , Size: 4]

--------------------------------
Class: ReverbEffect.Object
	float Density;//[Offset: 0x1c , Size: 4]
	float Diffusion;//[Offset: 0x20 , Size: 4]
	float Gain;//[Offset: 0x24 , Size: 4]
	float GainHF;//[Offset: 0x28 , Size: 4]
	float DecayTime;//[Offset: 0x2c , Size: 4]
	float DecayHFRatio;//[Offset: 0x30 , Size: 4]
	float ReflectionsGain;//[Offset: 0x34 , Size: 4]
	float ReflectionsDelay;//[Offset: 0x38 , Size: 4]
	float LateGain;//[Offset: 0x3c , Size: 4]
	float LateDelay;//[Offset: 0x40 , Size: 4]
	float AirAbsorptionGainHF;//[Offset: 0x44 , Size: 4]
	float RoomRolloffFactor;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: InteriorSettings
	bool bIsWorldSettings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	float ExteriorVolume;//[Offset: 0x4 , Size: 4]
	float ExteriorTime;//[Offset: 0x8 , Size: 4]
	float ExteriorLPF;//[Offset: 0xc , Size: 4]
	float ExteriorLPFTime;//[Offset: 0x10 , Size: 4]
	float InteriorVolume;//[Offset: 0x14 , Size: 4]
	float InteriorTime;//[Offset: 0x18 , Size: 4]
	float InteriorLPF;//[Offset: 0x1c , Size: 4]
	float InteriorLPFTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: SoundMix.Object
	bool bApplyEQ;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	float EQPriority;//[Offset: 0x20 , Size: 4]
	AudioEQEffect EQSettings;//[Offset: 0x28 , Size: 56]
	SoundClassEffects(StructProperty)[] SoundClassEffects;//[Offset: 0x60 , Size: 12]
	float InitialDelay;//[Offset: 0x6c , Size: 4]
	float FadeInTime;//[Offset: 0x70 , Size: 4]
	float Duration;//[Offset: 0x74 , Size: 4]
	float FadeOutTime;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: AudioEQEffect
	float FrequencyCenter0;//[Offset: 0x8 , Size: 4]
	float Gain0;//[Offset: 0xc , Size: 4]
	float Bandwidth0;//[Offset: 0x10 , Size: 4]
	float FrequencyCenter1;//[Offset: 0x14 , Size: 4]
	float Gain1;//[Offset: 0x18 , Size: 4]
	float Bandwidth1;//[Offset: 0x1c , Size: 4]
	float FrequencyCenter2;//[Offset: 0x20 , Size: 4]
	float Gain2;//[Offset: 0x24 , Size: 4]
	float Bandwidth2;//[Offset: 0x28 , Size: 4]
	float FrequencyCenter3;//[Offset: 0x2c , Size: 4]
	float Gain3;//[Offset: 0x30 , Size: 4]
	float Bandwidth3;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: BookMark.Object
	Vector Location;//[Offset: 0x1c , Size: 12]
	Rotator Rotation;//[Offset: 0x28 , Size: 12]
	HiddenLevels(StrProperty)[] HiddenLevels;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: LineBatchComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DemoNetDriver.NetDriver.Object
	<RollbackNetStartupActors_Key(StrProperty) , RollbackNetStartupActors(StructProperty)> RollbackNetStartupActors;//[Offset: 0x464 , Size: 60]
	float CheckpointSaveMaxMSPerFrame;//[Offset: 0x6e4 , Size: 4]
	bool bIsLocalReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70c , Size: 1]
	GameInstance* GameInstance;//[Offset: 0x720 , Size: 4]

--------------------------------
Class: GameInstance.Object
	EncryptedLocalPlayers(Int64Property)[] EncryptedLocalPlayers;//[Offset: 0x24 , Size: 12]
	LocalPlayers(ObjectProperty)[] LocalPlayers;//[Offset: 0x30 , Size: 12]
	OnlineSession* OnlineSession;//[Offset: 0x3c , Size: 4]
	bool bUseEncryptLocalPlayerPtr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	function ReceiveShutdown();// 0x206ccd8
	function ReceiveInit();// 0x206ccd8
	function HandleTravelError();// 0x206ccd8
	function HandleNetworkError();// 0x206ccd8
	function GetDeviceLevel();// 0x183f008
	function DebugRemovePlayer();// 0x3676024
	function DebugCreatePlayer();// 0x3696404

--------------------------------
Class: OnlineSession.Object

--------------------------------
Class: ParticleEventManager.Actor.Object

--------------------------------
Class: ObjectPoolManager
	bool bUseGMCommand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool bEnabledAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	bool bEnabledAutoResetData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]
	<Pools_Key(ClassProperty) , Pools(StructProperty)> Pools;//[Offset: 0x4 , Size: 60]
	int iInitedClassConfigGroup;//[Offset: 0x40 , Size: 4]
	<mapClassConfigs_Key(NameProperty) , mapClassConfigs(StructProperty)> mapClassConfigs;//[Offset: 0x44 , Size: 60]
	bool bInitedIgnoringProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]

--------------------------------
Class: NavigationSystem.BlueprintFunctionLibrary.Object
	NavigationData* MainNavData;//[Offset: 0x1c , Size: 4]
	NavigationData* AbstractNavData;//[Offset: 0x20 , Size: 4]
	class CrowdManagerBase* CrowdManagerClass;//[Offset: 0x24 , Size: 4]
	bool bAutoCreateNavigationData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	bool bAllowClientSideNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28 , Size: 1]
	bool bSupportRebuilding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28 , Size: 1]
	bool bInitialBuildingLocked;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28 , Size: 1]
	bool bSkipAgentHeightCheckWhenPickingNavData;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x28 , Size: 1]
	enum DataGatheringMode;//[Offset: 0x29 , Size: 1]
	bool bGenerateNavigationOnlyAroundNavigationInvokers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a , Size: 1]
	float ActiveTilesUpdateInterval;//[Offset: 0x2c , Size: 4]
	SupportedAgents(StructProperty)[] SupportedAgents;//[Offset: 0x30 , Size: 12]
	float UpdateInterval;//[Offset: 0x3c , Size: 4]
	float DirtyAreasUpdateFreq;//[Offset: 0x40 , Size: 4]
	NavDataSet(ObjectProperty)[] NavDataSet;//[Offset: 0x44 , Size: 12]
	NavDataRegistrationQueue(ObjectProperty)[] NavDataRegistrationQueue;//[Offset: 0x50 , Size: 12]
	delegate OnNavDataRegisteredEvent;//[Offset: 0xa4 , Size: 12]
	delegate OnNavigationGenerationFinishedDelegate;//[Offset: 0xb0 , Size: 12]
	enum OperationMode;//[Offset: 0x158 , Size: 1]
	function UpdateDynamicGenerateTargetNav();// 0x372ea3c
	function UnregisterNavigationInvoker();// 0x372e9c4
	function SimpleMoveToLocation();// 0x372e904
	function SimpleMoveToActor();// 0x372e850
	function SetMaxSimultaneousTileGenerationJobsCount();// 0x372e7d8
	function SetGeometryGatheringMode();// 0x372e760
	function ResetMaxSimultaneousTileGenerationJobsCount();// 0x372e74c
	function RegisterNavigationInvoker();// 0x372e64c
	function ProjectPointToNavigation();// 0x372e4a0
	function OnNavigationBoundsUpdated();// 0x372e428
	function NavigationRaycast();// 0x372e228
	function K2_ProjectPointToNavigation();// 0x372e038
	function K2_GetRandomReachablePointInRadius();// 0x372de48
	function K2_GetRandomPointInNavigableRadius();// 0x372dc58
	function IsNavigationBeingBuiltOrLocked();// 0x372dbe0
	function IsNavigationBeingBuilt();// 0x372db68
	function GetRandomReachablePointInRadius();// 0x372d9bc
	function GetRandomPointInNavigableRadius();// 0x372d810
	function GetPathLength();// 0x372d60c
	function GetPathCost();// 0x372d408
	function GetNavigationSystem();// 0x372d390
	function FindPathToLocationSynchronously();// 0x372d1e4
	function FindPathToActorSynchronously();// 0x372d004

--------------------------------
Class: BlueprintFunctionLibrary.Object

--------------------------------
Class: CrowdManagerBase.Object

--------------------------------
Class: AISystemBase.Object
	SoftClassPath AISystemClassName;//[Offset: 0x20 , Size: 24]
	FName AISystemModuleName;//[Offset: 0x38 , Size: 8]
	bool bInstantiateAISystemOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]

--------------------------------
Class: AvoidanceManager.Object
	float DefaultTimeToLive;//[Offset: 0x20 , Size: 4]
	float LockTimeAfterAvoid;//[Offset: 0x24 , Size: 4]
	float LockTimeAfterClean;//[Offset: 0x28 , Size: 4]
	float DeltaTimeToPredict;//[Offset: 0x2c , Size: 4]
	float ArtificialRadiusExpansion;//[Offset: 0x30 , Size: 4]
	float TestHeightDifference;//[Offset: 0x34 , Size: 4]
	float HeightCheckMargin;//[Offset: 0x38 , Size: 4]
	function RegisterMovementComponent();// 0x365beec
	function GetObjectCount();// 0x365bec4
	function GetNewAvoidanceUID();// 0x365be9c
	function GetAvoidanceVelocityForComponent();// 0x365be0c

--------------------------------
Class: WorldComposition.Object
	TilesStreaming(ObjectProperty)[] TilesStreaming;//[Offset: 0x98 , Size: 12]
	double TilesStreamingTimeThreshold;//[Offset: 0xa8 , Size: 8]
	bool bLoadAllTilesDuringCinematic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0 , Size: 1]
	bool bRebaseOriginIn3DSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb1 , Size: 1]
	float RebaseOriginDistance;//[Offset: 0xb4 , Size: 4]
	FString PVEBordersName;//[Offset: 0xb8 , Size: 12]

--------------------------------
Class: ActorChannel.Channel.Object
	Actor* Actor;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BlendSpaceBase.AnimationAsset.Object
	bool bRotationBlendInMeshSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	float AnimLength;//[Offset: 0x64 , Size: 4]
	InterpolationParameter InterpolationParam;//[Offset: 0x68 , Size: 8]
	float TargetWeightInterpolationSpeedPerSec;//[Offset: 0x80 , Size: 4]
	byte NotifyTriggerMode;//[Offset: 0x84 , Size: 1]
	PerBoneBlend(StructProperty)[] PerBoneBlend;//[Offset: 0x88 , Size: 12]
	int SampleIndexWithMarkers;//[Offset: 0x94 , Size: 4]
	SampleData(StructProperty)[] SampleData;//[Offset: 0x98 , Size: 12]
	GridSamples(StructProperty)[] GridSamples;//[Offset: 0xa4 , Size: 12]
	BlendParameter BlendParameters;//[Offset: 0xb0 , Size: 24]

--------------------------------
Class: InterpolationParameter
	float InterpolationTime;//[Offset: 0x0 , Size: 4]
	byte InterpolationType;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: BlendParameter
	FString DisplayName;//[Offset: 0x0 , Size: 12]
	float Min;//[Offset: 0xc , Size: 4]
	float Max;//[Offset: 0x10 , Size: 4]
	int GridNum;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: BlendSpace.BlendSpaceBase.AnimationAsset.Object
	byte AxisToScaleAnimation;//[Offset: 0xf8 , Size: 1]

--------------------------------
Class: AimOffsetBlendSpace.BlendSpace.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: BlendSpace1D.BlendSpaceBase.AnimationAsset.Object
	bool bScaleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]

--------------------------------
Class: AimOffsetBlendSpace1D.BlendSpace1D.BlendSpaceBase.AnimationAsset.Object

--------------------------------
Class: AmbientSound.Actor.Object
	AudioComponent* AudioComponent;//[Offset: 0x2c4 , Size: 4]
	function Stop();// 0x3640cfc
	function Play();// 0x3640c84
	function FadeOut();// 0x3640bc8
	function FadeIn();// 0x3640b0c
	function AdjustVolume();// 0x3640a50

--------------------------------
Class: AudioComponent.SceneComponent.ActorComponent.Object
	SoundBase* Sound;//[Offset: 0x260 , Size: 4]
	InstanceParameters(StructProperty)[] InstanceParameters;//[Offset: 0x264 , Size: 12]
	SoundClass* SoundClassOverride;//[Offset: 0x270 , Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274 , Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x274 , Size: 1]
	bool bShouldRemainActiveIfDropped;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x274 , Size: 1]
	bool bAllowSpatialization;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x274 , Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x274 , Size: 1]
	bool bOverrideSubtitlePriority;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x274 , Size: 1]
	bool bIsUISound;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x274 , Size: 1]
	bool bEnableLowPassFilter;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x274 , Size: 1]
	bool bOverridePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x275 , Size: 1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x275 , Size: 1]
	FName AudioComponentUserID;//[Offset: 0x280 , Size: 8]
	float PitchModulationMin;//[Offset: 0x288 , Size: 4]
	float PitchModulationMax;//[Offset: 0x28c , Size: 4]
	float VolumeModulationMin;//[Offset: 0x290 , Size: 4]
	float VolumeModulationMax;//[Offset: 0x294 , Size: 4]
	float VolumeMultiplier;//[Offset: 0x298 , Size: 4]
	float Priority;//[Offset: 0x29c , Size: 4]
	float SubtitlePriority;//[Offset: 0x2a0 , Size: 4]
	float VolumeWeightedPriorityScale;//[Offset: 0x2a4 , Size: 4]
	float PitchMultiplier;//[Offset: 0x2a8 , Size: 4]
	float HighFrequencyGainMultiplier;//[Offset: 0x2ac , Size: 4]
	float LowPassFilterFrequency;//[Offset: 0x2b0 , Size: 4]
	SoundAttenuation* AttenuationSettings;//[Offset: 0x2b4 , Size: 4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x2b8 , Size: 532]
	SoundConcurrency* ConcurrencySettings;//[Offset: 0x4cc , Size: 4]
	delegate OnAudioFinished;//[Offset: 0x4d4 , Size: 12]
	delegate OnAudioPlaybackPercent;//[Offset: 0x4f4 , Size: 12]
	delegate OnQueueSubtitles;//[Offset: 0x518 , Size: 16]
	function Stop();// 0x16e6044
	function SetWaveParameter();// 0x3658bf4
	function SetVolumeMultiplier();// 0x3658b7c
	function SetUISound();// 0x3658afc
	function SetSubmixSend();// 0x3658a40
	function SetSound();// 0x36589c8
	function SetPitchMultiplier();// 0x3658950
	function SetPaused();// 0x36588d0
	function SetLowPassFilterFrequency();// 0x3658858
	function SetLowPassFilterEnabled();// 0x36587d8
	function SetIntParameter();// 0x365871c
	function SetFloatParameter();// 0x3658658
	function SetBoolParameter();// 0x365858c
	function Play();// 0x365850c
	function IsPlaying();// 0x17d5b90
	function FadeOut();// 0x3658448
	function FadeIn();// 0x3658340
	function BP_GetAttenuationSettingsToApply();// 0x365828c
	function AdjustVolume();// 0x36581d0
	function AdjustAttenuation();// 0x3658124

--------------------------------
Class: DeveloperSettings.Object

--------------------------------
Class: AnimationSettings.DeveloperSettings.Object
	int CompressCommandletVersion;//[Offset: 0x30 , Size: 4]
	KeyEndEffectorsMatchNameArray(StrProperty)[] KeyEndEffectorsMatchNameArray;//[Offset: 0x34 , Size: 12]
	class AnimCompress* DefaultCompressionAlgorithm;//[Offset: 0x40 , Size: 4]
	byte RotationCompressionFormat;//[Offset: 0x44 , Size: 1]
	byte TranslationCompressionFormat;//[Offset: 0x45 , Size: 1]
	float MaxCurveError;//[Offset: 0x48 , Size: 4]
	float AlternativeCompressionThreshold;//[Offset: 0x4c , Size: 4]
	bool ForceRecompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]
	bool bOnlyCheckForMissingSkeletalMeshes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51 , Size: 1]
	bool bForceBelowThreshold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x52 , Size: 1]
	bool bFirstRecompressUsingCurrentOrDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53 , Size: 1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	bool bTryFixedBitwiseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55 , Size: 1]
	bool bTryPerTrackBitwiseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56 , Size: 1]
	bool bTryLinearKeyRemovalCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57 , Size: 1]
	bool bTryIntervalKeyRemoval;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x58 , Size: 1]
	bool bEnablePerformanceLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59 , Size: 1]
	bool bStripAnimationDataOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a , Size: 1]

--------------------------------
Class: AnimCompress.Object
	FString Description;//[Offset: 0x1c , Size: 12]
	bool bNeedsSkeleton;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	byte TranslationCompressionFormat;//[Offset: 0x29 , Size: 1]
	byte RotationCompressionFormat;//[Offset: 0x2a , Size: 1]
	byte ScaleCompressionFormat;//[Offset: 0x2b , Size: 1]
	float MaxCurveError;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: BlueprintCore.Object
	class Object* SkeletonGeneratedClass;//[Offset: 0x1c , Size: 4]
	class Object* GeneratedClass;//[Offset: 0x20 , Size: 4]
	bool bLegacyNeedToPurgeSkelRefs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bLegacyGeneratedClassIsAuthoritative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	Guid BlueprintGuid;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: Blueprint.BlueprintCore.Object
	bool bRecompileOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	class Object* ParentClass;//[Offset: 0x3c , Size: 4]
	Object* PRIVATE_InnermostPreviousCDO;//[Offset: 0x40 , Size: 4]
	bool bHasBeenRegenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bIsRegeneratingOnLoad;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x48 , Size: 4]
	ComponentTemplates(ObjectProperty)[] ComponentTemplates;//[Offset: 0x4c , Size: 12]
	Timelines(ObjectProperty)[] Timelines;//[Offset: 0x58 , Size: 12]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x64 , Size: 4]
	byte BlueprintType;//[Offset: 0x68 , Size: 1]
	int BlueprintSystemVersion;//[Offset: 0x6c , Size: 4]
	bool bNativize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]

--------------------------------
Class: SimpleConstructionScript.Object
	RootNodes(ObjectProperty)[] RootNodes;//[Offset: 0x1c , Size: 12]
	AllNodes(ObjectProperty)[] AllNodes;//[Offset: 0x28 , Size: 12]
	SCS_Node* DefaultSceneRootNode;//[Offset: 0x34 , Size: 4]
	SCS_Node* RootNode;//[Offset: 0x38 , Size: 4]
	ActorComponentNodes(ObjectProperty)[] ActorComponentNodes;//[Offset: 0x3c , Size: 12]

--------------------------------
Class: SCS_Node.Object
	class Object* ComponentClass;//[Offset: 0x1c , Size: 4]
	ActorComponent* ComponentTemplate;//[Offset: 0x20 , Size: 4]
	BlueprintCookedComponentInstancingData CookedComponentInstancingData;//[Offset: 0x28 , Size: 56]
	FName VariableName;//[Offset: 0x60 , Size: 8]
	FName AttachToName;//[Offset: 0x68 , Size: 8]
	FName ParentComponentOrVariableName;//[Offset: 0x70 , Size: 8]
	FName ParentComponentOwnerClassName;//[Offset: 0x78 , Size: 8]
	bool bIsParentComponentNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	ChildNodes(ObjectProperty)[] ChildNodes;//[Offset: 0x84 , Size: 12]
	MetaDataArray(StructProperty)[] MetaDataArray;//[Offset: 0x90 , Size: 12]
	Guid VariableGuid;//[Offset: 0x9c , Size: 16]
	bool bIsFalseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	bool bIsNative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad , Size: 1]
	FName NativeComponentName;//[Offset: 0xb0 , Size: 8]
	bool bVariableNameAutoGenerated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8 , Size: 1]
	FName InternalVariableName;//[Offset: 0xc0 , Size: 8]

--------------------------------
Class: BlueprintCookedComponentInstancingData
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	ChangedPropertyList(StructProperty)[] ChangedPropertyList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: InheritableComponentHandler.Object
	Records(StructProperty)[] Records;//[Offset: 0x1c , Size: 12]
	UnnecessaryComponents(ObjectProperty)[] UnnecessaryComponents;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: AnimBlueprint.Blueprint.BlueprintCore.Object
	Skeleton* TargetSkeleton;//[Offset: 0x9c , Size: 4]
	Groups(StructProperty)[] Groups;//[Offset: 0xa0 , Size: 12]
	bool bUseMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	bool bWarnAboutBlueprintUsage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad , Size: 1]

--------------------------------
Class: BlueprintGeneratedClass.Class.Struct.Field.Object
	int NumReplicatedProperties;//[Offset: 0x14c , Size: 4]
	bool bHasNativizedParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150 , Size: 1]
	DynamicBindingObjects(ObjectProperty)[] DynamicBindingObjects;//[Offset: 0x154 , Size: 12]
	ComponentTemplates(ObjectProperty)[] ComponentTemplates;//[Offset: 0x160 , Size: 12]
	Timelines(ObjectProperty)[] Timelines;//[Offset: 0x16c , Size: 12]
	SimpleConstructionScript* SimpleConstructionScript;//[Offset: 0x178 , Size: 4]
	InheritableComponentHandler* InheritableComponentHandler;//[Offset: 0x17c , Size: 4]
	StructProperty* UberGraphFramePointerProperty;//[Offset: 0x180 , Size: 4]
	Function* UberGraphFunction;//[Offset: 0x184 , Size: 4]
	<CookedComponentInstancingData_Key(NameProperty) , CookedComponentInstancingData(StructProperty)> CookedComponentInstancingData;//[Offset: 0x188 , Size: 60]

--------------------------------
Class: AnimBlueprintGeneratedClass.BlueprintGeneratedClass.Class.Struct.Field.Object
	BakedStateMachines(StructProperty)[] BakedStateMachines;//[Offset: 0x1d8 , Size: 12]
	Skeleton* TargetSkeleton;//[Offset: 0x1e4 , Size: 4]
	AnimNotifies(StructProperty)[] AnimNotifies;//[Offset: 0x1e8 , Size: 12]
	int RootAnimNodeIndex;//[Offset: 0x1f4 , Size: 4]
	OrderedSavedPoseIndices(IntProperty)[] OrderedSavedPoseIndices;//[Offset: 0x1f8 , Size: 12]
	SyncGroupNames(NameProperty)[] SyncGroupNames;//[Offset: 0x214 , Size: 12]

--------------------------------
Class: AnimClassData.Object
	BakedStateMachines(StructProperty)[] BakedStateMachines;//[Offset: 0x20 , Size: 12]
	Skeleton* TargetSkeleton;//[Offset: 0x2c , Size: 4]
	AnimNotifies(StructProperty)[] AnimNotifies;//[Offset: 0x30 , Size: 12]
	int RootAnimNodeIndex;//[Offset: 0x3c , Size: 4]
	OrderedSavedPoseIndices(IntProperty)[] OrderedSavedPoseIndices;//[Offset: 0x40 , Size: 12]
	StructProperty* RootAnimNodeProperty;//[Offset: 0x4c , Size: 4]
	AnimNodeProperties(ObjectProperty)[] AnimNodeProperties;//[Offset: 0x50 , Size: 12]
	SyncGroupNames(NameProperty)[] SyncGroupNames;//[Offset: 0x5c , Size: 12]

--------------------------------
Class: AnimClassInterface.Interface.Object

--------------------------------
Class: AnimComposite.AnimCompositeBase.AnimSequenceBase.AnimationAsset.Object
	AnimTrack AnimationTrack;//[Offset: 0x7c , Size: 12]

--------------------------------
Class: AnimTrack
	AnimSegments(StructProperty)[] AnimSegments;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: AnimCompress_Automatic.AnimCompress.Object
	float MaxEndEffectorError;//[Offset: 0x30 , Size: 4]
	bool bTryFixedBitwiseCompression;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bTryPerTrackBitwiseCompression;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool bTryLinearKeyRemovalCompression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	bool bTryIntervalKeyRemoval;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34 , Size: 1]
	bool bRunCurrentDefaultCompressor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34 , Size: 1]
	bool bAutoReplaceIfExistingErrorTooGreat;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34 , Size: 1]
	bool bRaiseMaxErrorToExisting;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34 , Size: 1]

--------------------------------
Class: AnimCompress_BitwiseCompressOnly.AnimCompress.Object

--------------------------------
Class: AnimCompress_LeastDestructive.AnimCompress.Object

--------------------------------
Class: AnimCompress_RemoveLinearKeys.AnimCompress.Object
	float MaxPosDiff;//[Offset: 0x30 , Size: 4]
	float MaxAngleDiff;//[Offset: 0x34 , Size: 4]
	float MaxScaleDiff;//[Offset: 0x38 , Size: 4]
	float MaxEffectorDiff;//[Offset: 0x3c , Size: 4]
	float MinEffectorDiff;//[Offset: 0x40 , Size: 4]
	float EffectorDiffSocket;//[Offset: 0x44 , Size: 4]
	float ParentKeyScale;//[Offset: 0x48 , Size: 4]
	bool bRetarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	bool bActuallyFilterLinearKeys;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4c , Size: 1]

--------------------------------
Class: AnimCompress_PerTrackCompression.AnimCompress_RemoveLinearKeys.AnimCompress.Object
	float MaxZeroingThreshold;//[Offset: 0x50 , Size: 4]
	float MaxPosDiffBitwise;//[Offset: 0x54 , Size: 4]
	float MaxAngleDiffBitwise;//[Offset: 0x58 , Size: 4]
	float MaxScaleDiffBitwise;//[Offset: 0x5c , Size: 4]
	AllowedRotationFormats(ByteProperty)[] AllowedRotationFormats;//[Offset: 0x60 , Size: 12]
	AllowedTranslationFormats(ByteProperty)[] AllowedTranslationFormats;//[Offset: 0x6c , Size: 12]
	AllowedScaleFormats(ByteProperty)[] AllowedScaleFormats;//[Offset: 0x78 , Size: 12]
	bool bResampleAnimation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84 , Size: 1]
	float ResampledFramerate;//[Offset: 0x88 , Size: 4]
	int MinKeysForResampling;//[Offset: 0x8c , Size: 4]
	bool bUseAdaptiveError;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	bool bUseOverrideForEndEffectors;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90 , Size: 1]
	int TrackHeightBias;//[Offset: 0x94 , Size: 4]
	float ParentingDivisor;//[Offset: 0x98 , Size: 4]
	float ParentingDivisorExponent;//[Offset: 0x9c , Size: 4]
	bool bUseAdaptiveError2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0 , Size: 1]
	float RotationErrorSourceRatio;//[Offset: 0xa4 , Size: 4]
	float TranslationErrorSourceRatio;//[Offset: 0xa8 , Size: 4]
	float ScaleErrorSourceRatio;//[Offset: 0xac , Size: 4]
	float MaxErrorPerTrackRatio;//[Offset: 0xb0 , Size: 4]
	float PerturbationProbeSize;//[Offset: 0xb4 , Size: 4]

--------------------------------
Class: AnimCompress_RemoveEverySecondKey.AnimCompress.Object
	int MinKeys;//[Offset: 0x30 , Size: 4]
	bool bStartAtSecondKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]

--------------------------------
Class: AnimCompress_RemoveTrivialKeys.AnimCompress.Object
	float MaxPosDiff;//[Offset: 0x30 , Size: 4]
	float MaxAngleDiff;//[Offset: 0x34 , Size: 4]
	float MaxScaleDiff;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: AnimMetaData.Object

--------------------------------
Class: AnimNotify.Object
	function Received_Notify();// 0x206ccd8
	function GetNotifyName();// 0x364e67c

--------------------------------
Class: AnimNotify_AdjustHitBox.AnimNotify.Object
	Transform NewTransform;//[Offset: 0x30 , Size: 48]

--------------------------------
Class: AnimNotify_PlayParticleEffect.AnimNotify.Object
	ParticleSystem* PSTemplate;//[Offset: 0x24 , Size: 4]
	Vector LocationOffset;//[Offset: 0x28 , Size: 12]
	Rotator RotationOffset;//[Offset: 0x34 , Size: 12]
	Vector Scale;//[Offset: 0x40 , Size: 12]
	bool Attached;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68 , Size: 1]
	FName SocketName;//[Offset: 0x70 , Size: 8]
	bool LimitedAmount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78 , Size: 1]
	function OnParticleSystemFinished();// 0x364ed18

--------------------------------
Class: ParticleSystem.Object
	byte SystemUpdateMode;//[Offset: 0x1c , Size: 1]
	float UpdateTime_FPS;//[Offset: 0x20 , Size: 4]
	float UpdateTime_Delta;//[Offset: 0x24 , Size: 4]
	float WarmupTime;//[Offset: 0x28 , Size: 4]
	float WarmupTickRate;//[Offset: 0x2c , Size: 4]
	Emitters(ObjectProperty)[] Emitters;//[Offset: 0x30 , Size: 12]
	ParticleSystemComponent* PreviewComponent;//[Offset: 0x3c , Size: 4]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x40 , Size: 4]
	bool bOrientZAxisTowardCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	float LODDistanceCheckTime;//[Offset: 0x48 , Size: 4]
	byte LODMethod;//[Offset: 0x4c , Size: 1]
	LODDistances(FloatProperty)[] LODDistances;//[Offset: 0x50 , Size: 12]
	bool bRegenerateLODDuplicate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c , Size: 1]
	LODSettings(StructProperty)[] LODSettings;//[Offset: 0x60 , Size: 12]
	bool bUseFixedRelativeBoundingBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	Box FixedRelativeBoundingBox;//[Offset: 0x70 , Size: 28]
	float SecondsBeforeInactive;//[Offset: 0x8c , Size: 4]
	bool bShouldResetPeakCounts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	bool bHasPhysics;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x90 , Size: 1]
	bool bUseRealtimeThumbnail;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x90 , Size: 1]
	bool ThumbnailImageOutOfDate;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x90 , Size: 1]
	float Delay;//[Offset: 0x94 , Size: 4]
	float DelayLow;//[Offset: 0x98 , Size: 4]
	bool bUseDelayRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bAutoDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d , Size: 1]
	uint32 MinTimeBetweenTicks;//[Offset: 0xa0 , Size: 4]
	enum InsignificantReaction;//[Offset: 0xa4 , Size: 1]
	float InsignificanceDelay;//[Offset: 0xa8 , Size: 4]
	enum MaxSignificanceLevel;//[Offset: 0xac , Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb0 , Size: 12]
	float MacroUVRadius;//[Offset: 0xbc , Size: 4]
	byte OcclusionBoundsMethod;//[Offset: 0xc0 , Size: 1]
	Box CustomOcclusionBounds;//[Offset: 0xc4 , Size: 28]
	SoloTracking(StructProperty)[] SoloTracking;//[Offset: 0xe0 , Size: 12]
	NamedMaterialSlots(StructProperty)[] NamedMaterialSlots;//[Offset: 0xec , Size: 12]
	function ContainsEmitterType();// 0x3743984

--------------------------------
Class: ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* Template;//[Offset: 0x54c , Size: 4]
	EmitterMaterials(ObjectProperty)[] EmitterMaterials;//[Offset: 0x550 , Size: 12]
	SkelMeshComponents(ObjectProperty)[] SkelMeshComponents;//[Offset: 0x55c , Size: 12]
	bool bResetOnDetach;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x568 , Size: 1]
	bool bUpdateOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x569 , Size: 1]
	bool bAllowRecycling;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x569 , Size: 1]
	bool bAutoManageAttachment;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x569 , Size: 1]
	bool bWarmingUp;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x569 , Size: 1]
	bool bOverrideLODMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x56a , Size: 1]
	bool bSkipUpdateDynamicDataDuringTick;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x56a , Size: 1]
	byte LODMethod;//[Offset: 0x56c , Size: 1]
	enum RequiredSignificance;//[Offset: 0x56d , Size: 1]
	InstanceParameters(StructProperty)[] InstanceParameters;//[Offset: 0x570 , Size: 12]
	delegate OnParticleSpawn;//[Offset: 0x57c , Size: 12]
	delegate OnParticleBurst;//[Offset: 0x588 , Size: 12]
	delegate OnParticleDeath;//[Offset: 0x594 , Size: 12]
	delegate OnParticleCollide;//[Offset: 0x5a0 , Size: 12]
	Vector OldPosition;//[Offset: 0x5ac , Size: 12]
	Vector PartSysVelocity;//[Offset: 0x5b8 , Size: 12]
	float WarmupTime;//[Offset: 0x5c4 , Size: 4]
	float WarmupTickRate;//[Offset: 0x5c8 , Size: 4]
	float SecondsBeforeInactive;//[Offset: 0x5d0 , Size: 4]
	float MaxTimeBeforeForceUpdateTransform;//[Offset: 0x5d8 , Size: 4]
	ReplayClips(ObjectProperty)[] ReplayClips;//[Offset: 0x5f8 , Size: 12]
	float CustomTimeDilation;//[Offset: 0x60c , Size: 4]
	SceneComponent* AutoAttachParent;//[Offset: 0x650 , Size: 8]
	FName AutoAttachSocketName;//[Offset: 0x658 , Size: 8]
	enum AutoAttachLocationRule;//[Offset: 0x660 , Size: 1]
	enum AutoAttachRotationRule;//[Offset: 0x661 , Size: 1]
	enum AutoAttachScaleRule;//[Offset: 0x662 , Size: 1]
	delegate OnSystemFinished;//[Offset: 0x68c , Size: 12]
	function SetVectorParameter();// 0x37463d0
	function SetTrailSourceData();// 0x3746278
	function SetTemplate();// 0x3746200
	function SetMaterialParameter();// 0x3746144
	function SetFloatParameter();// 0x3746080
	function SetEmitterEnable();// 0x3745fac
	function SetColorParameter();// 0x3745ee4
	function SetBeamTargetTangent();// 0x3745dd8
	function SetBeamTargetStrength();// 0x3745cd0
	function SetBeamTargetPoint();// 0x3745bc4
	function SetBeamSourceTangent();// 0x3745ab8
	function SetBeamSourceStrength();// 0x37459b0
	function SetBeamSourcePoint();// 0x37458a4
	function SetBeamEndPoint();// 0x37457e0
	function SetAutoAttachParams();// 0x37456b8
	function SetAutoAttachmentParameters();// 0x3745518
	function SetActorParameter();// 0x374545c
	function GetNumActiveParticles();// 0x3745434
	function GetNamedMaterial();// 0x37453ac
	function GetBeamTargetTangent();// 0x3745290
	function GetBeamTargetStrength();// 0x3745170
	function GetBeamTargetPoint();// 0x3745054
	function GetBeamSourceTangent();// 0x3744f38
	function GetBeamSourceStrength();// 0x3744e18
	function GetBeamSourcePoint();// 0x3744cfc
	function GetBeamEndPoint();// 0x3744c24
	function GenerateParticleEvent();// 0x3744a84
	function EndTrails();// 0x3744a70
	function CreateNamedDynamicMaterialInstance();// 0x37449a4
	function BeginTrails();// 0x374484c

--------------------------------
Class: InterpCurveEdSetup.Object
	Tabs(StructProperty)[] Tabs;//[Offset: 0x1c , Size: 12]
	int ActiveTab;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: AnimNotify_PlaySound.AnimNotify.Object
	SoundBase* Sound;//[Offset: 0x24 , Size: 4]
	float VolumeMultiplier;//[Offset: 0x28 , Size: 4]
	float PitchMultiplier;//[Offset: 0x2c , Size: 4]
	bool bFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	FName AttachName;//[Offset: 0x38 , Size: 8]

--------------------------------
Class: AnimNotify_ResetClothingSimulation.AnimNotify.Object

--------------------------------
Class: AnimNotifyState.Object
	function Received_NotifyTick();// 0x206ccd8
	function Received_NotifyEnd();// 0x206ccd8
	function Received_NotifyBegin();// 0x206ccd8
	function GetNotifyName();// 0x364e67c

--------------------------------
Class: AnimNotifyState_DisableRootMotion.AnimNotifyState.Object

--------------------------------
Class: AnimNotifyState_TimedParticleEffect.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x20 , Size: 4]
	FName SocketName;//[Offset: 0x28 , Size: 8]
	Vector LocationOffset;//[Offset: 0x30 , Size: 12]
	Rotator RotationOffset;//[Offset: 0x3c , Size: 12]
	bool bDestroyAtEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]

--------------------------------
Class: AnimNotifyState_Trail.AnimNotifyState.Object
	ParticleSystem* PSTemplate;//[Offset: 0x20 , Size: 4]
	FName FirstSocketName;//[Offset: 0x28 , Size: 8]
	FName SecondSocketName;//[Offset: 0x30 , Size: 8]
	byte WidthScaleMode;//[Offset: 0x38 , Size: 1]
	FName WidthScaleCurve;//[Offset: 0x40 , Size: 8]
	bool bRecycleSpawnedSystems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	function OverridePSTemplate();// 0x206ccd8

--------------------------------
Class: AnimSet.Object
	bool bAnimRotationOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	TrackBoneNames(NameProperty)[] TrackBoneNames;//[Offset: 0x20 , Size: 12]
	LinkupCache(StructProperty)[] LinkupCache;//[Offset: 0x2c , Size: 12]
	BoneUseAnimTranslation(ByteProperty)[] BoneUseAnimTranslation;//[Offset: 0x38 , Size: 12]
	ForceUseMeshTranslation(ByteProperty)[] ForceUseMeshTranslation;//[Offset: 0x44 , Size: 12]
	UseTranslationBoneNames(NameProperty)[] UseTranslationBoneNames;//[Offset: 0x50 , Size: 12]
	ForceMeshTranslationBoneNames(NameProperty)[] ForceMeshTranslationBoneNames;//[Offset: 0x5c , Size: 12]
	FName PreviewSkelMeshName;//[Offset: 0x68 , Size: 8]
	FName BestRatioSkelMeshName;//[Offset: 0x70 , Size: 8]

--------------------------------
Class: AnimSingleNodeInstance.AnimInstance.Object
	AnimationAsset* CurrentAsset;//[Offset: 0x2ec , Size: 4]
	delegate PostEvaluateAnimEvent;//[Offset: 0x2f0 , Size: 16]
	function StopAnim();// 0x365131c
	function SetReverse();// 0x365129c
	function SetPreviewCurveOverride();// 0x365117c
	function SetPositionWithPreviousTime();// 0x3651074
	function SetPosition();// 0x3650fb0
	function SetPlayRate();// 0x3650f38
	function SetPlaying();// 0x3650eb8
	function SetLooping();// 0x3650e38
	function SetBlendSpaceInput();// 0x3650db4
	function SetAnimationAsset();// 0x3650ca0
	function PlayAnim();// 0x3650b94
	function GetLength();// 0x3650b6c
	function GetAnimationAsset();// 0x17f82ac

--------------------------------
Class: AnimStateMachineTypes.Object

--------------------------------
Class: ApplicationLifecycleComponent.ActorComponent.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0xbc , Size: 12]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0xc8 , Size: 12]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0xd4 , Size: 12]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0xe0 , Size: 12]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0xec , Size: 12]
	delegate OnTemperatureChangeDelegate;//[Offset: 0xf8 , Size: 12]

--------------------------------
Class: PhysicsSettings.DeveloperSettings.Object
	float DefaultGravityZ;//[Offset: 0x30 , Size: 4]
	float DefaultTerminalVelocity;//[Offset: 0x34 , Size: 4]
	float DefaultFluidFriction;//[Offset: 0x38 , Size: 4]
	int SimulateScratchMemorySize;//[Offset: 0x3c , Size: 4]
	int RagdollAggregateThreshold;//[Offset: 0x40 , Size: 4]
	float TriangleMeshTriangleMinAreaThreshold;//[Offset: 0x44 , Size: 4]
	bool bEnableAsyncScene;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	bool bEnableShapeSharing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]
	bool bEnablePCM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a , Size: 1]
	bool bEnableStabilization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b , Size: 1]
	bool bWarnMissingLocks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	bool bEnable2DPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d , Size: 1]
	byte LockedAxis;//[Offset: 0x4e , Size: 1]
	byte DefaultDegreesOfFreedom;//[Offset: 0x4f , Size: 1]
	float BounceThresholdVelocity;//[Offset: 0x50 , Size: 4]
	byte FrictionCombineMode;//[Offset: 0x54 , Size: 1]
	byte RestitutionCombineMode;//[Offset: 0x55 , Size: 1]
	float MaxAngularVelocity;//[Offset: 0x58 , Size: 4]
	float MaxDepenetrationVelocity;//[Offset: 0x5c , Size: 4]
	float ContactOffsetMultiplier;//[Offset: 0x60 , Size: 4]
	float MinContactOffset;//[Offset: 0x64 , Size: 4]
	float MaxContactOffset;//[Offset: 0x68 , Size: 4]
	bool bSimulateSkeletalMeshOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	byte DefaultShapeComplexity;//[Offset: 0x6d , Size: 1]
	bool bDefaultHasComplexCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e , Size: 1]
	bool bSuppressFaceRemapTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6f , Size: 1]
	bool bSupportUVFromHitResults;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70 , Size: 1]
	bool bDisableActiveActors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x71 , Size: 1]
	bool bDisableCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x72 , Size: 1]
	bool bEnableEnhancedDeterminism;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x73 , Size: 1]
	float MaxPhysicsDeltaTime;//[Offset: 0x74 , Size: 4]
	bool bSubstepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	bool bSubsteppingAsync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79 , Size: 1]
	float MaxSubstepDeltaTime;//[Offset: 0x7c , Size: 4]
	int MaxSubsteps;//[Offset: 0x80 , Size: 4]
	float ServerMaxSubstepDeltaTime;//[Offset: 0x84 , Size: 4]
	int ServerMaxSubsteps;//[Offset: 0x88 , Size: 4]
	float SyncSceneSmoothingFactor;//[Offset: 0x8c , Size: 4]
	float AsyncSceneSmoothingFactor;//[Offset: 0x90 , Size: 4]
	float InitialAverageFrameRate;//[Offset: 0x94 , Size: 4]
	int PhysXTreeRebuildRate;//[Offset: 0x98 , Size: 4]
	PhysicalSurfaces(StructProperty)[] PhysicalSurfaces;//[Offset: 0x9c , Size: 12]

--------------------------------
Class: CollisionProfile.DeveloperSettings.Object
	Profiles(StructProperty)[] Profiles;//[Offset: 0x30 , Size: 12]
	DefaultChannelResponses(StructProperty)[] DefaultChannelResponses;//[Offset: 0x3c , Size: 12]
	EditProfiles(StructProperty)[] EditProfiles;//[Offset: 0x48 , Size: 12]
	ProfileRedirects(StructProperty)[] ProfileRedirects;//[Offset: 0x54 , Size: 12]
	CollisionChannelRedirects(StructProperty)[] CollisionChannelRedirects;//[Offset: 0x60 , Size: 12]

--------------------------------
Class: ArrowComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Color ArrowColor;//[Offset: 0x54c , Size: 4]
	float ArrowSize;//[Offset: 0x550 , Size: 4]
	bool bIsScreenSizeScaled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554 , Size: 1]
	float ScreenSize;//[Offset: 0x558 , Size: 4]
	bool bTreatAsASprite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x55c , Size: 1]
	function SetArrowColor();// 0x3652fa8

--------------------------------
Class: AssetImportData.Object

--------------------------------
Class: AssetManager.Object
	ObjectReferenceList(ObjectProperty)[] ObjectReferenceList;//[Offset: 0x1bc , Size: 12]
	bool bIsGlobalAsyncScanEnvironment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c8 , Size: 1]
	bool bShouldGuessTypeAndName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c9 , Size: 1]
	bool bShouldUseSynchronousLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca , Size: 1]
	bool bIsLoadingFromPakFiles;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cb , Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cc , Size: 1]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd , Size: 1]
	bool bIsBulkScanning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce , Size: 1]
	bool bIsManagementDatabaseCurrent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf , Size: 1]
	bool bUpdateManagementDatabaseAfterScan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	bool bIncludeOnlyOnDiskAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1 , Size: 1]
	int NumberOfSpawnedNotifications;//[Offset: 0x1d4 , Size: 4]

--------------------------------
Class: AssetManagerSettings.DeveloperSettings.Object
	PrimaryAssetTypesToScan(StructProperty)[] PrimaryAssetTypesToScan;//[Offset: 0x30 , Size: 12]
	DirectoriesToExclude(StructProperty)[] DirectoriesToExclude;//[Offset: 0x3c , Size: 12]
	PrimaryAssetRules(StructProperty)[] PrimaryAssetRules;//[Offset: 0x48 , Size: 12]
	bool bOnlyCookProductionAssets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	bool bShouldGuessTypeAndNameInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x55 , Size: 1]
	bool bShouldAcquireMissingChunksOnLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x56 , Size: 1]
	PrimaryAssetIdRedirects(StructProperty)[] PrimaryAssetIdRedirects;//[Offset: 0x58 , Size: 12]
	PrimaryAssetTypeRedirects(StructProperty)[] PrimaryAssetTypeRedirects;//[Offset: 0x64 , Size: 12]
	AssetPathRedirects(StructProperty)[] AssetPathRedirects;//[Offset: 0x70 , Size: 12]

--------------------------------
Class: AssetMappingTable.Object
	MappedAssets(StructProperty)[] MappedAssets;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: AssetUserData.Object

--------------------------------
Class: BlueprintAsyncActionBase.Object
	function Activate();// 0x199c3f8

--------------------------------
Class: AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object

--------------------------------
Class: AsyncActionLoadPrimaryAsset.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c , Size: 12]
	function AsyncLoadPrimaryAsset();// 0x3655870

--------------------------------
Class: AsyncActionLoadPrimaryAssetClass.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c , Size: 12]
	function AsyncLoadPrimaryAssetClass();// 0x3655c5c

--------------------------------
Class: AsyncActionLoadPrimaryAssetList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c , Size: 12]
	function AsyncLoadPrimaryAssetList();// 0x3656048

--------------------------------
Class: AsyncActionLoadPrimaryAssetClassList.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c , Size: 12]
	function AsyncLoadPrimaryAssetClassList();// 0x365647c

--------------------------------
Class: AsyncActionChangePrimaryAssetBundles.AsyncActionLoadPrimaryAssetBase.BlueprintAsyncActionBase.Object
	delegate Completed;//[Offset: 0x4c , Size: 12]
	function AsyncChangeBundleStateForPrimaryAssetList();// 0x3656a14
	function AsyncChangeBundleStateForMatchingPrimaryAssets();// 0x36568b0

--------------------------------
Class: AtmosphericFog.Info.Actor.Object
	AtmosphericFogComponent* AtmosphericFogComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: AtmosphericFogComponent.SceneComponent.ActorComponent.Object
	float SunMultiplier;//[Offset: 0x260 , Size: 4]
	float FogMultiplier;//[Offset: 0x264 , Size: 4]
	float DensityMultiplier;//[Offset: 0x268 , Size: 4]
	float DensityOffset;//[Offset: 0x26c , Size: 4]
	float DistanceScale;//[Offset: 0x270 , Size: 4]
	float AltitudeScale;//[Offset: 0x274 , Size: 4]
	float DistanceOffset;//[Offset: 0x278 , Size: 4]
	float GroundOffset;//[Offset: 0x27c , Size: 4]
	float StartDistance;//[Offset: 0x280 , Size: 4]
	float SunDiscScale;//[Offset: 0x284 , Size: 4]
	float DefaultBrightness;//[Offset: 0x288 , Size: 4]
	Color DefaultLightColor;//[Offset: 0x28c , Size: 4]
	bool bDisableSunDisk;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x290 , Size: 1]
	bool bDisableGroundScattering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x290 , Size: 1]
	AtmospherePrecomputeParameters PrecomputeParams;//[Offset: 0x294 , Size: 44]
	Texture2D* TransmittanceTexture;//[Offset: 0x2c0 , Size: 4]
	Texture2D* IrradianceTexture;//[Offset: 0x2c4 , Size: 4]
	function StartPrecompute();// 0x16ad21c
	function SetSunMultiplier();// 0x3657688
	function SetStartDistance();// 0x3657610
	function SetPrecomputeParams();// 0x17049f8
	function SetFogMultiplier();// 0x3657598
	function SetDistanceScale();// 0x3657520
	function SetDistanceOffset();// 0x36574a8
	function SetDensityOffset();// 0x3657430
	function SetDensityMultiplier();// 0x36573b8
	function SetDefaultLightColor();// 0x365733c
	function SetDefaultBrightness();// 0x36572c4
	function SetAltitudeScale();// 0x365724c
	function DisableSunDisk();// 0x36571cc
	function DisableGroundScattering();// 0x365714c

--------------------------------
Class: AtmospherePrecomputeParameters
	float DensityHeight;//[Offset: 0x0 , Size: 4]
	float DecayHeight;//[Offset: 0x4 , Size: 4]
	int MaxScatteringOrder;//[Offset: 0x8 , Size: 4]
	int TransmittanceTexWidth;//[Offset: 0xc , Size: 4]
	int TransmittanceTexHeight;//[Offset: 0x10 , Size: 4]
	int IrradianceTexWidth;//[Offset: 0x14 , Size: 4]
	int IrradianceTexHeight;//[Offset: 0x18 , Size: 4]
	int InscatterAltitudeSampleNum;//[Offset: 0x1c , Size: 4]
	int InscatterMuNum;//[Offset: 0x20 , Size: 4]
	int InscatterMuSNum;//[Offset: 0x24 , Size: 4]
	int InscatterNuNum;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: AudioSettings.DeveloperSettings.Object
	SoftObjectPath DefaultSoundClassName;//[Offset: 0x30 , Size: 24]
	SoftObjectPath DefaultSoundConcurrencyName;//[Offset: 0x48 , Size: 24]
	SoftObjectPath DefaultBaseSoundMix;//[Offset: 0x60 , Size: 24]
	SoftObjectPath VoiPSoundClass;//[Offset: 0x78 , Size: 24]
	float DefaultReverbSendLevel;//[Offset: 0x90 , Size: 4]
	float LowPassFilterResonance;//[Offset: 0x94 , Size: 4]
	int MaximumConcurrentStreams;//[Offset: 0x98 , Size: 4]
	QualityLevels(StructProperty)[] QualityLevels;//[Offset: 0x9c , Size: 12]
	bool bAllowVirtualizedSounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	bool bDisableMasterEQ;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa8 , Size: 1]
	bool bDisableMasterReverb;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8 , Size: 1]
	bool bAllowCenterChannel3DPanning;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa8 , Size: 1]
	FString DialogueFilenameFormat;//[Offset: 0xac , Size: 12]

--------------------------------
Class: AudioVolume.Volume.Brush.Actor.Object
	float Priority;//[Offset: 0x2ec , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f0 , Size: 1]
	ReverbSettings Settings;//[Offset: 0x2f4 , Size: 16]
	InteriorSettings AmbientZoneSettings;//[Offset: 0x304 , Size: 36]
	function SetReverbSettings();// 0x3659b7c
	function SetPriority();// 0x3659b04
	function SetInteriorSettings();// 0x3659a74
	function SetEnabled();// 0x36599f4
	function OnRep_bEnabled();// 0x1723214

--------------------------------
Class: AutomationTestSettings.Object
	EngineTestModules(StrProperty)[] EngineTestModules;//[Offset: 0x1c , Size: 12]
	EditorTestModules(StrProperty)[] EditorTestModules;//[Offset: 0x28 , Size: 12]
	SoftObjectPath AutomationTestmap;//[Offset: 0x38 , Size: 24]
	EditorPerformanceTestMaps(StructProperty)[] EditorPerformanceTestMaps;//[Offset: 0x50 , Size: 12]
	AssetsToOpen(StructProperty)[] AssetsToOpen;//[Offset: 0x5c , Size: 12]
	BuildPromotionTestSettings BuildPromotionTest;//[Offset: 0x68 , Size: 372]
	MaterialEditorPromotionSettings MaterialEditorPromotionTest;//[Offset: 0x1dc , Size: 36]
	ParticleEditorPromotionSettings ParticleEditorPromotionTest;//[Offset: 0x200 , Size: 12]
	BlueprintEditorPromotionSettings BlueprintEditorPromotionTest;//[Offset: 0x20c , Size: 36]
	TestLevelFolders(StrProperty)[] TestLevelFolders;//[Offset: 0x230 , Size: 12]
	ExternalTools(StructProperty)[] ExternalTools;//[Offset: 0x23c , Size: 12]
	ImportExportTestDefinitions(StructProperty)[] ImportExportTestDefinitions;//[Offset: 0x248 , Size: 12]
	LaunchOnSettings(StructProperty)[] LaunchOnSettings;//[Offset: 0x254 , Size: 12]
	IntPoint DefaultScreenshotResolution;//[Offset: 0x260 , Size: 8]

--------------------------------
Class: BuildPromotionTestSettings
	FilePath DefaultStaticMeshAsset;//[Offset: 0x0 , Size: 12]
	BuildPromotionImportWorkflowSettings ImportWorkflow;//[Offset: 0xc , Size: 252]
	BuildPromotionOpenAssetSettings OpenAssets;//[Offset: 0x108 , Size: 72]
	BuildPromotionNewProjectSettings NewProjectSettings;//[Offset: 0x150 , Size: 24]
	FilePath SourceControlMaterial;//[Offset: 0x168 , Size: 12]

--------------------------------
Class: FilePath
	FString FilePath;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: BuildPromotionImportWorkflowSettings
	EditorImportWorkflowDefinition Diffuse;//[Offset: 0x0 , Size: 24]
	EditorImportWorkflowDefinition Normal;//[Offset: 0x18 , Size: 24]
	EditorImportWorkflowDefinition StaticMesh;//[Offset: 0x30 , Size: 24]
	EditorImportWorkflowDefinition ReimportStaticMesh;//[Offset: 0x48 , Size: 24]
	EditorImportWorkflowDefinition BlendShapeMesh;//[Offset: 0x60 , Size: 24]
	EditorImportWorkflowDefinition MorphMesh;//[Offset: 0x78 , Size: 24]
	EditorImportWorkflowDefinition SkeletalMesh;//[Offset: 0x90 , Size: 24]
	EditorImportWorkflowDefinition Animation;//[Offset: 0xa8 , Size: 24]
	EditorImportWorkflowDefinition Sound;//[Offset: 0xc0 , Size: 24]
	EditorImportWorkflowDefinition SurroundSound;//[Offset: 0xd8 , Size: 24]
	OtherAssetsToImport(StructProperty)[] OtherAssetsToImport;//[Offset: 0xf0 , Size: 12]

--------------------------------
Class: EditorImportWorkflowDefinition
	FilePath ImportFilePath;//[Offset: 0x0 , Size: 12]
	FactorySettings(StructProperty)[] FactorySettings;//[Offset: 0xc , Size: 12]

--------------------------------
Class: BuildPromotionOpenAssetSettings
	FilePath BlueprintAsset;//[Offset: 0x0 , Size: 12]
	FilePath MaterialAsset;//[Offset: 0xc , Size: 12]
	FilePath ParticleSystemAsset;//[Offset: 0x18 , Size: 12]
	FilePath SkeletalMeshAsset;//[Offset: 0x24 , Size: 12]
	FilePath StaticMeshAsset;//[Offset: 0x30 , Size: 12]
	FilePath TextureAsset;//[Offset: 0x3c , Size: 12]

--------------------------------
Class: BuildPromotionNewProjectSettings
	DirectoryPath NewProjectFolderOverride;//[Offset: 0x0 , Size: 12]
	FString NewProjectNameOverride;//[Offset: 0xc , Size: 12]

--------------------------------
Class: DirectoryPath
	FString Path;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: MaterialEditorPromotionSettings
	FilePath DefaultMaterialAsset;//[Offset: 0x0 , Size: 12]
	FilePath DefaultDiffuseTexture;//[Offset: 0xc , Size: 12]
	FilePath DefaultNormalTexture;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: ParticleEditorPromotionSettings
	FilePath DefaultParticleAsset;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: BlueprintEditorPromotionSettings
	FilePath FirstMeshPath;//[Offset: 0x0 , Size: 12]
	FilePath SecondMeshPath;//[Offset: 0xc , Size: 12]
	FilePath DefaultParticleAsset;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: BlendableInterface.Interface.Object

--------------------------------
Class: BlendProfile.Object
	Skeleton* OwningSkeleton;//[Offset: 0x20 , Size: 4]
	ProfileEntries(StructProperty)[] ProfileEntries;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: BlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: BlueprintMapLibrary.BlueprintFunctionLibrary.Object
	function SetMapPropertyByName();// 0x365fb34
	function Map_Values();// 0x365f9fc
	function Map_Remove();// 0x365f840
	function Map_Length();// 0x365f784
	function Map_Keys();// 0x365f64c
	function Map_Find();// 0x365f394
	function Map_Contains();// 0x365f1d4
	function Map_Clear();// 0x365f120
	function Map_Add();// 0x365ee98

--------------------------------
Class: GameMapsSettings.Object
	SoftObjectPath EditorStartupMap;//[Offset: 0x20 , Size: 24]
	FString LocalMapOptions;//[Offset: 0x38 , Size: 12]
	SoftObjectPath TransitionMap;//[Offset: 0x48 , Size: 24]
	bool bUseSplitscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	byte TwoPlayerSplitscreenLayout;//[Offset: 0x61 , Size: 1]
	byte ThreePlayerSplitscreenLayout;//[Offset: 0x62 , Size: 1]
	bool bOffsetPlayerGamepadIds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63 , Size: 1]
	SoftClassPath GameInstanceClass;//[Offset: 0x68 , Size: 24]
	SoftObjectPath GameDefaultMap;//[Offset: 0x80 , Size: 24]
	SoftObjectPath ServerDefaultMap;//[Offset: 0x98 , Size: 24]
	SoftClassPath GlobalDefaultGameMode;//[Offset: 0xb0 , Size: 24]
	SoftClassPath GlobalDefaultServerGameMode;//[Offset: 0xc8 , Size: 24]
	GameModeMapPrefixes(StructProperty)[] GameModeMapPrefixes;//[Offset: 0xe0 , Size: 12]
	GameModeClassAliases(StructProperty)[] GameModeClassAliases;//[Offset: 0xec , Size: 12]

--------------------------------
Class: PlatformGameInstance.GameInstance.Object
	delegate ApplicationWillDeactivateDelegate;//[Offset: 0x13c , Size: 12]
	delegate ApplicationHasReactivatedDelegate;//[Offset: 0x148 , Size: 12]
	delegate ApplicationWillEnterBackgroundDelegate;//[Offset: 0x154 , Size: 12]
	delegate ApplicationHasEnteredForegroundDelegate;//[Offset: 0x160 , Size: 12]
	delegate ApplicationWillTerminateDelegate;//[Offset: 0x16c , Size: 12]
	delegate ApplicationRegisteredForRemoteNotificationsDelegate;//[Offset: 0x178 , Size: 12]
	delegate ApplicationRegisteredForUserNotificationsDelegate;//[Offset: 0x184 , Size: 12]
	delegate ApplicationFailedToRegisterForRemoteNotificationsDelegate;//[Offset: 0x190 , Size: 12]
	delegate ApplicationReceivedRemoteNotificationDelegate;//[Offset: 0x19c , Size: 12]
	delegate ApplicationReceivedLocalNotificationDelegate;//[Offset: 0x1a8 , Size: 12]
	delegate ApplicationReceivedScreenOrientationChangedNotificationDelegate;//[Offset: 0x1b4 , Size: 12]

--------------------------------
Class: BlueprintPlatformLibrary.BlueprintFunctionLibrary.Object
	function ScheduleLocalNotificationFromNow();// 0x3660ed4
	function ScheduleLocalNotificationBadgeFromNow();// 0x3660e20
	function ScheduleLocalNotificationBadgeAtTime();// 0x3660d0c
	function ScheduleLocalNotificationAtTime();// 0x36607ac
	function GetLaunchNotification();// 0x3660638
	function ClearAllLocalNotifications();// 0x3660624
	function CancelLocalNotification();// 0x36605b4

--------------------------------
Class: BlueprintSetLibrary.BlueprintFunctionLibrary.Object
	function SetSetPropertyByName();// 0x36627a4
	function Set_Union();// 0x36625dc
	function Set_ToArray();// 0x36624a4
	function Set_RemoveItems();// 0x366236c
	function Set_Remove();// 0x36621b0
	function Set_Length();// 0x36620f4
	function Set_Intersection();// 0x3661f2c
	function Set_Difference();// 0x3661d64
	function Set_Contains();// 0x3661ba8
	function Set_Clear();// 0x3661af4
	function Set_AddItems();// 0x36619bc
	function Set_Add();// 0x3661808

--------------------------------
Class: BoneMaskFilter.Object
	BlendPoses(StructProperty)[] BlendPoses;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: BookMark2D.Object
	float Zoom2D;//[Offset: 0x1c , Size: 4]
	IntPoint Location;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: BoxComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Vector BoxExtent;//[Offset: 0x55c , Size: 12]
	function SetBoxExtent();// 0x3666530
	function GetUnscaledBoxExtent();// 0x3666504
	function GetScaledBoxExtent();// 0x36664b0

--------------------------------
Class: ReflectionCapture.Actor.Object
	ReflectionCaptureComponent* CaptureComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	BillboardComponent* CaptureOffsetComponent;//[Offset: 0x260 , Size: 4]
	enum ReflectionSourceType;//[Offset: 0x264 , Size: 1]
	TextureCube* Cubemap;//[Offset: 0x268 , Size: 4]
	float SourceCubemapAngle;//[Offset: 0x26c , Size: 4]
	float Brightness;//[Offset: 0x270 , Size: 4]
	Vector CaptureOffset;//[Offset: 0x274 , Size: 12]
	Guid stateID;//[Offset: 0x294 , Size: 16]

--------------------------------
Class: BoxReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float BoxTransitionDistance;//[Offset: 0x2c0 , Size: 4]
	BoxComponent* PreviewInfluenceBox;//[Offset: 0x2c4 , Size: 4]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: BoxReflectionCaptureSAComponent.BoxReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: Breakpoint.Object
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	EdGraphNode* Node;//[Offset: 0x20 , Size: 4]
	bool bStepOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24 , Size: 1]
	bool bStepOnce_WasPreviouslyDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24 , Size: 1]
	bool bStepOnce_RemoveAfterHit;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x24 , Size: 1]

--------------------------------
Class: EdGraphNode.Object
	DeprecatedPins(ObjectProperty)[] DeprecatedPins;//[Offset: 0x28 , Size: 12]
	int NodePosX;//[Offset: 0x34 , Size: 4]
	int NodePosY;//[Offset: 0x38 , Size: 4]
	int NodeWidth;//[Offset: 0x3c , Size: 4]
	int NodeHeight;//[Offset: 0x40 , Size: 4]
	byte AdvancedPinDisplay;//[Offset: 0x44 , Size: 1]
	enum EnabledState;//[Offset: 0x45 , Size: 1]
	bool bUserSetEnabledState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x47 , Size: 1]
	bool bIsNodeEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x47 , Size: 1]
	bool bHasCompilerMessage;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x47 , Size: 1]
	bool bCommentBubblePinned;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x47 , Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x47 , Size: 1]
	bool bCommentBubbleMakeVisible;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x47 , Size: 1]
	FString NodeComment;//[Offset: 0x48 , Size: 12]
	int ErrorType;//[Offset: 0x54 , Size: 4]
	FString errorMsg;//[Offset: 0x58 , Size: 12]
	Guid NodeGuid;//[Offset: 0x64 , Size: 16]

--------------------------------
Class: BrushBuilder.Object
	FString BitmapFilename;//[Offset: 0x1c , Size: 12]
	FString ToolTip;//[Offset: 0x28 , Size: 12]
	bool NotifyBadParams;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	Vertices(StructProperty)[] Vertices;//[Offset: 0x38 , Size: 12]
	Polys(StructProperty)[] Polys;//[Offset: 0x44 , Size: 12]
	FName Layer;//[Offset: 0x50 , Size: 8]
	bool MergeCoplanars;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]

--------------------------------
Class: BrushShape.Brush.Actor.Object

--------------------------------
Class: ButtonStyleAsset.Object
	ButtonStyle ButtonStyle;//[Offset: 0x20 , Size: 664]

--------------------------------
Class: ButtonStyle.SlateWidgetStyle
	SlateBrush Normal;//[Offset: 0x8 , Size: 144]
	SlateBrush Hovered;//[Offset: 0x98 , Size: 144]
	SlateBrush Pressed;//[Offset: 0x128 , Size: 144]
	SlateBrush Disabled;//[Offset: 0x1b8 , Size: 144]
	Margin NormalPadding;//[Offset: 0x248 , Size: 16]
	Margin PressedPadding;//[Offset: 0x258 , Size: 16]
	SlateSound PressedSlateSound;//[Offset: 0x268 , Size: 24]
	SlateSound HoveredSlateSound;//[Offset: 0x280 , Size: 24]

--------------------------------
Class: SlateWidgetStyle

--------------------------------
Class: SlateBrush
	Vector2D ImageSize;//[Offset: 0x4 , Size: 8]
	Margin Margin;//[Offset: 0xc , Size: 16]
	SlateColor TintColor;//[Offset: 0x1c , Size: 28]
	bool bAsyncEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	bool bOnlySoftInEditor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	Object* ResourceObject;//[Offset: 0x3c , Size: 4]
	Object* SoftResourceObject;//[Offset: 0x40 , Size: 40]
	FName ResourceName;//[Offset: 0x68 , Size: 8]
	Box2D UVRegion;//[Offset: 0x70 , Size: 20]
	byte DrawAs;//[Offset: 0x84 , Size: 1]
	byte Tiling;//[Offset: 0x85 , Size: 1]
	byte Mirroring;//[Offset: 0x86 , Size: 1]
	byte ImageType;//[Offset: 0x87 , Size: 1]
	bool bIsDynamicallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]
	bool bHasUObject;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x88 , Size: 1]

--------------------------------
Class: Margin
	float Left;//[Offset: 0x0 , Size: 4]
	float Top;//[Offset: 0x4 , Size: 4]
	float Right;//[Offset: 0x8 , Size: 4]
	float Bottom;//[Offset: 0xc , Size: 4]

--------------------------------
Class: SlateColor
	LinearColor SpecifiedColor;//[Offset: 0x0 , Size: 16]
	byte ColorUseRule;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: Box2D
	Vector2D Min;//[Offset: 0x0 , Size: 8]
	Vector2D Max;//[Offset: 0x8 , Size: 8]
	byte bIsValid;//[Offset: 0x10 , Size: 1]

--------------------------------
Class: SlateSound
	Object* ResourceObject;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: CameraBlockingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: CameraObserverActor.Actor.Object

--------------------------------
Class: CameraShake.Object
	bool bSingleInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	float OscillationDuration;//[Offset: 0x20 , Size: 4]
	float OscillationBlendInTime;//[Offset: 0x24 , Size: 4]
	float OscillationBlendOutTime;//[Offset: 0x28 , Size: 4]
	ROscillator RotOscillation;//[Offset: 0x2c , Size: 36]
	VOscillator LocOscillation;//[Offset: 0x50 , Size: 36]
	FOscillator FOVOscillation;//[Offset: 0x74 , Size: 12]
	float AnimPlayRate;//[Offset: 0x80 , Size: 4]
	float AnimScale;//[Offset: 0x84 , Size: 4]
	float AnimBlendInTime;//[Offset: 0x88 , Size: 4]
	float AnimBlendOutTime;//[Offset: 0x8c , Size: 4]
	float RandomAnimSegmentDuration;//[Offset: 0x90 , Size: 4]
	CameraAnim* Anim;//[Offset: 0x94 , Size: 4]
	bool bRandomAnimSegment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98 , Size: 1]
	PlayerCameraManager* CameraOwner;//[Offset: 0xa8 , Size: 4]
	float ShakeScale;//[Offset: 0x134 , Size: 4]
	float OscillatorTimeRemaining;//[Offset: 0x138 , Size: 4]
	CameraAnimInst* AnimInst;//[Offset: 0x13c , Size: 4]
	function ReceiveStopShake();// 0x206ccd8
	function ReceivePlayShake();// 0x206ccd8
	function ReceiveIsFinished();// 0x1710168
	function BlueprintUpdateCameraShake();// 0x206ccd8

--------------------------------
Class: ROscillator
	FOscillator Pitch;//[Offset: 0x0 , Size: 12]
	FOscillator Yaw;//[Offset: 0xc , Size: 12]
	FOscillator Roll;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: FOscillator
	float Amplitude;//[Offset: 0x0 , Size: 4]
	float Frequency;//[Offset: 0x4 , Size: 4]
	byte InitialOffset;//[Offset: 0x8 , Size: 1]

--------------------------------
Class: VOscillator
	FOscillator X;//[Offset: 0x0 , Size: 12]
	FOscillator Y;//[Offset: 0xc , Size: 12]
	FOscillator Z;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: DeviceProfileManager.Object
	Profiles(ObjectProperty)[] Profiles;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: DeviceProfile.TextureLODSettings.Object
	FString DeviceType;//[Offset: 0x28 , Size: 12]
	FString BaseProfileName;//[Offset: 0x34 , Size: 12]
	Object* Parent;//[Offset: 0x40 , Size: 4]
	CVars(StrProperty)[] CVars;//[Offset: 0x54 , Size: 12]

--------------------------------
Class: TextureLODSettings.Object
	TextureLODGroups(StructProperty)[] TextureLODGroups;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: TextureRenderTarget.Texture.Object
	float TargetGamma;//[Offset: 0x90 , Size: 4]

--------------------------------
Class: TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x98 , Size: 4]
	int SizeY;//[Offset: 0x9c , Size: 4]
	LinearColor ClearColor;//[Offset: 0xa0 , Size: 16]
	byte AddressX;//[Offset: 0xb0 , Size: 1]
	byte AddressY;//[Offset: 0xb1 , Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb2 , Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb2 , Size: 1]
	byte RenderTargetFormat;//[Offset: 0xb3 , Size: 1]
	bool bGPUSharedFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4 , Size: 1]
	bool bAutoGenerateMips;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4 , Size: 1]
	byte OverrideFormat;//[Offset: 0xb5 , Size: 1]

--------------------------------
Class: CanvasRenderTarget2D.TextureRenderTarget2D.TextureRenderTarget.Texture.Object
	delegate OnCanvasRenderTargetUpdate;//[Offset: 0xbc , Size: 12]
	World* World;//[Offset: 0xc8 , Size: 8]
	bool bShouldClearRenderTargetOnReceiveUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	function UpdateResource();// 0x16d3ec4
	function ReceiveUpdate();// 0x206ccd8
	function GetSize();// 0x366d690
	function CreateCanvasRenderTarget2D();// 0x366d54c

--------------------------------
Class: Engine.Object
	Font* TinyFont;//[Offset: 0x20 , Size: 4]
	SoftObjectPath TinyFontName;//[Offset: 0x28 , Size: 24]
	Font* SmallFont;//[Offset: 0x5c , Size: 4]
	SoftObjectPath SmallFontName;//[Offset: 0x60 , Size: 24]
	Font* MediumFont;//[Offset: 0x78 , Size: 4]
	SoftObjectPath MediumFontName;//[Offset: 0x80 , Size: 24]
	Font* LargeFont;//[Offset: 0x98 , Size: 4]
	SoftObjectPath LargeFontName;//[Offset: 0xa0 , Size: 24]
	Font* SubtitleFont;//[Offset: 0xb8 , Size: 4]
	SoftObjectPath SubtitleFontName;//[Offset: 0xc0 , Size: 24]
	AdditionalFonts(ObjectProperty)[] AdditionalFonts;//[Offset: 0xd8 , Size: 12]
	AdditionalFontNames(StrProperty)[] AdditionalFontNames;//[Offset: 0xec , Size: 12]
	class Console* ConsoleClass;//[Offset: 0xf8 , Size: 4]
	SoftClassPath ConsoleClassName;//[Offset: 0x100 , Size: 24]
	class GameViewportClient* GameViewportClientClass;//[Offset: 0x118 , Size: 4]
	SoftClassPath GameViewportClientClassName;//[Offset: 0x120 , Size: 24]
	class LocalPlayer* LocalPlayerClass;//[Offset: 0x138 , Size: 4]
	SoftClassPath LocalPlayerClassName;//[Offset: 0x140 , Size: 24]
	class WorldSettings* WorldSettingsClass;//[Offset: 0x158 , Size: 4]
	SoftClassPath WorldSettingsClassName;//[Offset: 0x160 , Size: 24]
	SoftClassPath NavigationSystemClassName;//[Offset: 0x178 , Size: 24]
	class NavigationSystem* NavigationSystemClass;//[Offset: 0x190 , Size: 4]
	SoftClassPath AvoidanceManagerClassName;//[Offset: 0x198 , Size: 24]
	class AvoidanceManager* AvoidanceManagerClass;//[Offset: 0x1b0 , Size: 4]
	class PhysicsCollisionHandler* PhysicsCollisionHandlerClass;//[Offset: 0x1b4 , Size: 4]
	SoftClassPath PhysicsCollisionHandlerClassName;//[Offset: 0x1b8 , Size: 24]
	SoftClassPath GameUserSettingsClassName;//[Offset: 0x1d0 , Size: 24]
	class GameUserSettings* GameUserSettingsClass;//[Offset: 0x1e8 , Size: 4]
	SoftClassPath AIControllerClassName;//[Offset: 0x1f0 , Size: 24]
	GameUserSettings* GameUserSettings;//[Offset: 0x208 , Size: 4]
	class LevelScriptActor* LevelScriptActorClass;//[Offset: 0x20c , Size: 4]
	SoftClassPath LevelScriptActorClassName;//[Offset: 0x210 , Size: 24]
	SoftClassPath DefaultBlueprintBaseClassName;//[Offset: 0x228 , Size: 24]
	SoftClassPath GameSingletonClassName;//[Offset: 0x240 , Size: 24]
	Object* GameSingleton;//[Offset: 0x258 , Size: 4]
	SoftClassPath AssetManagerClassName;//[Offset: 0x260 , Size: 24]
	AssetManager* AssetManager;//[Offset: 0x278 , Size: 4]
	Texture2D* DefaultTexture;//[Offset: 0x27c , Size: 4]
	SoftObjectPath DefaultTextureName;//[Offset: 0x280 , Size: 24]
	Texture* DefaultDiffuseTexture;//[Offset: 0x298 , Size: 4]
	SoftObjectPath DefaultDiffuseTextureName;//[Offset: 0x2a0 , Size: 24]
	Texture2D* DefaultBSPVertexTexture;//[Offset: 0x2b8 , Size: 4]
	SoftObjectPath DefaultBSPVertexTextureName;//[Offset: 0x2c0 , Size: 24]
	Texture2D* HighFrequencyNoiseTexture;//[Offset: 0x2d8 , Size: 4]
	SoftObjectPath HighFrequencyNoiseTextureName;//[Offset: 0x2e0 , Size: 24]
	Texture2D* DefaultBokehTexture;//[Offset: 0x2f8 , Size: 4]
	SoftObjectPath DefaultBokehTextureName;//[Offset: 0x300 , Size: 24]
	Texture2D* DefaultBloomKernelTexture;//[Offset: 0x318 , Size: 4]
	SoftObjectPath DefaultBloomKernelTextureName;//[Offset: 0x320 , Size: 24]
	Material* WireframeMaterial;//[Offset: 0x338 , Size: 4]
	FString WireframeMaterialName;//[Offset: 0x33c , Size: 12]
	Material* DebugMeshMaterial;//[Offset: 0x348 , Size: 4]
	SoftObjectPath DebugMeshMaterialName;//[Offset: 0x350 , Size: 24]
	Material* LevelColorationLitMaterial;//[Offset: 0x368 , Size: 4]
	FString LevelColorationLitMaterialName;//[Offset: 0x36c , Size: 12]
	Material* LevelColorationUnlitMaterial;//[Offset: 0x378 , Size: 4]
	FString LevelColorationUnlitMaterialName;//[Offset: 0x37c , Size: 12]
	Material* LightingTexelDensityMaterial;//[Offset: 0x388 , Size: 4]
	FString LightingTexelDensityName;//[Offset: 0x38c , Size: 12]
	Material* ShadedLevelColorationLitMaterial;//[Offset: 0x398 , Size: 4]
	FString ShadedLevelColorationLitMaterialName;//[Offset: 0x39c , Size: 12]
	Material* ShadedLevelColorationUnlitMaterial;//[Offset: 0x3a8 , Size: 4]
	FString ShadedLevelColorationUnlitMaterialName;//[Offset: 0x3ac , Size: 12]
	Material* RemoveSurfaceMaterial;//[Offset: 0x3b8 , Size: 4]
	SoftObjectPath RemoveSurfaceMaterialName;//[Offset: 0x3c0 , Size: 24]
	Material* VertexColorMaterial;//[Offset: 0x3d8 , Size: 4]
	FString VertexColorMaterialName;//[Offset: 0x3dc , Size: 12]
	Material* VertexColorViewModeMaterial_ColorOnly;//[Offset: 0x3e8 , Size: 4]
	FString VertexColorViewModeMaterialName_ColorOnly;//[Offset: 0x3ec , Size: 12]
	Material* VertexColorViewModeMaterial_AlphaAsColor;//[Offset: 0x3f8 , Size: 4]
	FString VertexColorViewModeMaterialName_AlphaAsColor;//[Offset: 0x3fc , Size: 12]
	Material* VertexColorViewModeMaterial_RedOnly;//[Offset: 0x408 , Size: 4]
	FString VertexColorViewModeMaterialName_RedOnly;//[Offset: 0x40c , Size: 12]
	Material* VertexColorViewModeMaterial_GreenOnly;//[Offset: 0x418 , Size: 4]
	FString VertexColorViewModeMaterialName_GreenOnly;//[Offset: 0x41c , Size: 12]
	Material* VertexColorViewModeMaterial_BlueOnly;//[Offset: 0x428 , Size: 4]
	FString VertexColorViewModeMaterialName_BlueOnly;//[Offset: 0x42c , Size: 12]
	SoftObjectPath DebugEditorMaterialName;//[Offset: 0x438 , Size: 24]
	Material* ConstraintLimitMaterial;//[Offset: 0x450 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialX;//[Offset: 0x454 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialXAxis;//[Offset: 0x458 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialY;//[Offset: 0x45c , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialYAxis;//[Offset: 0x460 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZ;//[Offset: 0x464 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialZAxis;//[Offset: 0x468 , Size: 4]
	MaterialInstanceDynamic* ConstraintLimitMaterialPrismatic;//[Offset: 0x46c , Size: 4]
	Material* InvalidLightmapSettingsMaterial;//[Offset: 0x470 , Size: 4]
	SoftObjectPath InvalidLightmapSettingsMaterialName;//[Offset: 0x478 , Size: 24]
	Material* PreviewShadowsIndicatorMaterial;//[Offset: 0x490 , Size: 4]
	SoftObjectPath PreviewShadowsIndicatorMaterialName;//[Offset: 0x498 , Size: 24]
	Material* ArrowMaterial;//[Offset: 0x4b0 , Size: 4]
	SoftObjectPath ArrowMaterialName;//[Offset: 0x4b8 , Size: 24]
	Material* OutlineMaterial;//[Offset: 0x4d0 , Size: 4]
	SoftObjectPath OutlineMaterialName;//[Offset: 0x4d8 , Size: 24]
	Material* DyeingColorMaterial;//[Offset: 0x4f0 , Size: 4]
	SoftObjectPath DyeingColorMaterialName;//[Offset: 0x4f8 , Size: 24]
	LinearColor LightingOnlyBrightness;//[Offset: 0x510 , Size: 16]
	ShaderComplexityColors(StructProperty)[] ShaderComplexityColors;//[Offset: 0x520 , Size: 12]
	QuadComplexityColors(StructProperty)[] QuadComplexityColors;//[Offset: 0x52c , Size: 12]
	LightComplexityColors(StructProperty)[] LightComplexityColors;//[Offset: 0x538 , Size: 12]
	StationaryLightOverlapColors(StructProperty)[] StationaryLightOverlapColors;//[Offset: 0x544 , Size: 12]
	LODColorationColors(StructProperty)[] LODColorationColors;//[Offset: 0x550 , Size: 12]
	HLODColorationColors(StructProperty)[] HLODColorationColors;//[Offset: 0x55c , Size: 12]
	StreamingAccuracyColors(StructProperty)[] StreamingAccuracyColors;//[Offset: 0x568 , Size: 12]
	float MaxPixelShaderAdditiveComplexityCount;//[Offset: 0x574 , Size: 4]
	float MaxES2PixelShaderAdditiveComplexityCount;//[Offset: 0x578 , Size: 4]
	float MinLightMapDensity;//[Offset: 0x57c , Size: 4]
	float IdealLightMapDensity;//[Offset: 0x580 , Size: 4]
	float MaxLightMapDensity;//[Offset: 0x584 , Size: 4]
	bool bRenderLightMapDensityGrayscale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x588 , Size: 1]
	float RenderLightMapDensityGrayscaleScale;//[Offset: 0x58c , Size: 4]
	float RenderLightMapDensityColorScale;//[Offset: 0x590 , Size: 4]
	LinearColor LightMapDensityVertexMappedColor;//[Offset: 0x594 , Size: 16]
	LinearColor LightMapDensitySelectedColor;//[Offset: 0x5a4 , Size: 16]
	StatColorMappings(StructProperty)[] StatColorMappings;//[Offset: 0x5b4 , Size: 12]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x5c0 , Size: 4]
	SoftObjectPath DefaultPhysMaterialName;//[Offset: 0x5c8 , Size: 24]
	ActiveGameNameRedirects(StructProperty)[] ActiveGameNameRedirects;//[Offset: 0x5e0 , Size: 12]
	ActiveClassRedirects(StructProperty)[] ActiveClassRedirects;//[Offset: 0x5ec , Size: 12]
	ActivePluginRedirects(StructProperty)[] ActivePluginRedirects;//[Offset: 0x5f8 , Size: 12]
	ActiveStructRedirects(StructProperty)[] ActiveStructRedirects;//[Offset: 0x604 , Size: 12]
	Texture2D* PreIntegratedSkinBRDFTexture;//[Offset: 0x610 , Size: 4]
	SoftObjectPath PreIntegratedSkinBRDFTextureName;//[Offset: 0x618 , Size: 24]
	Texture2D* MiniFontTexture;//[Offset: 0x630 , Size: 4]
	SoftObjectPath MiniFontTextureName;//[Offset: 0x638 , Size: 24]
	Texture* WeightMapPlaceholderTexture;//[Offset: 0x650 , Size: 4]
	SoftObjectPath WeightMapPlaceholderTextureName;//[Offset: 0x658 , Size: 24]
	Texture2D* LightMapDensityTexture;//[Offset: 0x670 , Size: 4]
	SoftObjectPath LightMapDensityTextureName;//[Offset: 0x678 , Size: 24]
	GameViewportClient* GameViewport;//[Offset: 0x694 , Size: 4]
	DeferredCommands(StrProperty)[] DeferredCommands;//[Offset: 0x698 , Size: 12]
	int TickCycles;//[Offset: 0x6a4 , Size: 4]
	int GameCycles;//[Offset: 0x6a8 , Size: 4]
	int ClientCycles;//[Offset: 0x6ac , Size: 4]
	float NearClipPlane;//[Offset: 0x6b0 , Size: 4]
	bool bHardwareSurveyEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6b4 , Size: 1]
	bool bSubtitlesEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6b4 , Size: 1]
	bool bSubtitlesForcedOff;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6b4 , Size: 1]
	int MaximumLoopIterationCount;//[Offset: 0x6b8 , Size: 4]
	bool bCanBlueprintsTickByDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6bc , Size: 1]
	bool bOptimizeAnimBlueprintMemberVariableAccess;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6bc , Size: 1]
	bool bAllowMultiThreadedAnimationUpdate;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6bc , Size: 1]
	bool bEnableEditorPSysRealtimeLOD;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6bc , Size: 1]
	bool bSmoothFrameRate;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x6bc , Size: 1]
	bool bUseFixedFrameRate;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x6bc , Size: 1]
	float FixedFrameRate;//[Offset: 0x6c0 , Size: 4]
	FloatRange SmoothedFrameRateRange;//[Offset: 0x6c4 , Size: 16]
	bool bCheckForMultiplePawnsSpawnedInAFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6d4 , Size: 1]
	int NumPawnsAllowedToBeSpawnedInAFrame;//[Offset: 0x6d8 , Size: 4]
	bool bShouldGenerateLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6dc , Size: 1]
	Color C_WorldBox;//[Offset: 0x6e0 , Size: 4]
	Color C_BrushWire;//[Offset: 0x6e4 , Size: 4]
	Color C_AddWire;//[Offset: 0x6e8 , Size: 4]
	Color C_SubtractWire;//[Offset: 0x6ec , Size: 4]
	Color C_SemiSolidWire;//[Offset: 0x6f0 , Size: 4]
	Color C_NonSolidWire;//[Offset: 0x6f4 , Size: 4]
	Color C_WireBackground;//[Offset: 0x6f8 , Size: 4]
	Color C_ScaleBoxHi;//[Offset: 0x6fc , Size: 4]
	Color C_VolumeCollision;//[Offset: 0x700 , Size: 4]
	Color C_BSPCollision;//[Offset: 0x704 , Size: 4]
	Color C_OrthoBackground;//[Offset: 0x708 , Size: 4]
	Color C_Volume;//[Offset: 0x70c , Size: 4]
	Color C_BrushShape;//[Offset: 0x710 , Size: 4]
	float StreamingDistanceFactor;//[Offset: 0x714 , Size: 4]
	DirectoryPath GameScreenshotSaveDirectory;//[Offset: 0x718 , Size: 12]
	byte TransitionType;//[Offset: 0x724 , Size: 1]
	FString TransitionDescription;//[Offset: 0x728 , Size: 12]
	FString TransitionGameMode;//[Offset: 0x734 , Size: 12]
	float MeshLODRange;//[Offset: 0x740 , Size: 4]
	bool bAllowMatureLanguage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x744 , Size: 1]
	float CameraRotationThreshold;//[Offset: 0x748 , Size: 4]
	float CameraTranslationThreshold;//[Offset: 0x74c , Size: 4]
	float PrimitiveProbablyVisibleTime;//[Offset: 0x750 , Size: 4]
	float MaxOcclusionPixelsFraction;//[Offset: 0x754 , Size: 4]
	bool bPauseOnLossOfFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x758 , Size: 1]
	int MaxParticleResize;//[Offset: 0x75c , Size: 4]
	int MaxParticleResizeWarn;//[Offset: 0x760 , Size: 4]
	PendingDroppedNotes(StructProperty)[] PendingDroppedNotes;//[Offset: 0x764 , Size: 12]
	RigidBodyErrorCorrection PhysicErrorCorrection;//[Offset: 0x770 , Size: 28]
	float NetClientTicksPerSecond;//[Offset: 0x78c , Size: 4]
	float DisplayGamma;//[Offset: 0x790 , Size: 4]
	float MinDesiredFrameRate;//[Offset: 0x794 , Size: 4]
	int ShaderPrecompileProgress;//[Offset: 0x798 , Size: 4]
	LinearColor DefaultSelectedMaterialColor;//[Offset: 0x79c , Size: 16]
	LinearColor SelectedMaterialColor;//[Offset: 0x7ac , Size: 16]
	LinearColor SelectionOutlineColor;//[Offset: 0x7bc , Size: 16]
	LinearColor SubduedSelectionOutlineColor;//[Offset: 0x7cc , Size: 16]
	LinearColor SelectedMaterialColorOverride;//[Offset: 0x7dc , Size: 16]
	bool bIsOverridingSelectedColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7ec , Size: 1]
	bool bEnableOnScreenDebugMessages;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ed , Size: 1]
	bool bEnableOnScreenDebugMessagesDisplay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7ed , Size: 1]
	bool bSuppressMapWarnings;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7ed , Size: 1]
	bool bDisableAILogging;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7ed , Size: 1]
	uint32 bEnableVisualLogRecordingOnStart;//[Offset: 0x7f0 , Size: 4]
	int ScreenSaverInhibitorSemaphore;//[Offset: 0x7f8 , Size: 4]
	bool bLockReadOnlyLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7fc , Size: 1]
	FString ParticleEventManagerClassPath;//[Offset: 0x800 , Size: 12]
	float SelectionHighlightIntensity;//[Offset: 0x818 , Size: 4]
	float SelectionMeshSectionHighlightIntensity;//[Offset: 0x81c , Size: 4]
	float BSPSelectionHighlightIntensity;//[Offset: 0x820 , Size: 4]
	float HoverHighlightIntensity;//[Offset: 0x824 , Size: 4]
	float SelectionHighlightIntensityBillboards;//[Offset: 0x828 , Size: 4]
	NetDriverDefinitions(StructProperty)[] NetDriverDefinitions;//[Offset: 0x96c , Size: 12]
	ServerActors(StrProperty)[] ServerActors;//[Offset: 0x978 , Size: 12]
	RuntimeServerActors(StrProperty)[] RuntimeServerActors;//[Offset: 0x984 , Size: 12]
	bool bStartedLoadMapMovie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b4 , Size: 1]
	int NextWorldContextHandle;//[Offset: 0x9c4 , Size: 4]

--------------------------------
Class: Font.Object
	enum FontCacheType;//[Offset: 0x20 , Size: 1]
	Characters(StructProperty)[] Characters;//[Offset: 0x24 , Size: 12]
	Textures(ObjectProperty)[] Textures;//[Offset: 0x30 , Size: 12]
	int IsRemapped;//[Offset: 0x3c , Size: 4]
	float EmScale;//[Offset: 0x40 , Size: 4]
	float Ascent;//[Offset: 0x44 , Size: 4]
	float Descent;//[Offset: 0x48 , Size: 4]
	float Leading;//[Offset: 0x4c , Size: 4]
	int Kerning;//[Offset: 0x50 , Size: 4]
	FontImportOptionsData ImportOptions;//[Offset: 0x54 , Size: 144]
	int NumCharacters;//[Offset: 0xe4 , Size: 4]
	MaxCharHeight(IntProperty)[] MaxCharHeight;//[Offset: 0xe8 , Size: 12]
	float ScalingFactor;//[Offset: 0xf4 , Size: 4]
	int LegacyFontSize;//[Offset: 0xf8 , Size: 4]
	FName LegacyFontName;//[Offset: 0x100 , Size: 8]
	CompositeFont CompositeFont;//[Offset: 0x108 , Size: 24]

--------------------------------
Class: FontImportOptionsData
	FString FontName;//[Offset: 0x0 , Size: 12]
	float Height;//[Offset: 0xc , Size: 4]
	bool bEnableAntialiasing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bEnableBold;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bEnableItalic;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bEnableUnderline;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]
	bool bAlphaOnly;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x10 , Size: 1]
	byte CharacterSet;//[Offset: 0x11 , Size: 1]
	FString Chars;//[Offset: 0x14 , Size: 12]
	FString UnicodeRange;//[Offset: 0x20 , Size: 12]
	FString CharsFilePath;//[Offset: 0x2c , Size: 12]
	FString CharsFileWildcard;//[Offset: 0x38 , Size: 12]
	bool bCreatePrintableOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bIncludeASCIIRange;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	LinearColor ForegroundColor;//[Offset: 0x48 , Size: 16]
	bool bEnableDropShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]
	int TexturePageWidth;//[Offset: 0x5c , Size: 4]
	int TexturePageMaxHeight;//[Offset: 0x60 , Size: 4]
	int XPadding;//[Offset: 0x64 , Size: 4]
	int YPadding;//[Offset: 0x68 , Size: 4]
	int ExtendBoxTop;//[Offset: 0x6c , Size: 4]
	int ExtendBoxBottom;//[Offset: 0x70 , Size: 4]
	int ExtendBoxRight;//[Offset: 0x74 , Size: 4]
	int ExtendBoxLeft;//[Offset: 0x78 , Size: 4]
	bool bEnableLegacyMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	int Kerning;//[Offset: 0x80 , Size: 4]
	bool bUseDistanceFieldAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84 , Size: 1]
	int DistanceFieldScaleFactor;//[Offset: 0x88 , Size: 4]
	float DistanceFieldScanRadiusScale;//[Offset: 0x8c , Size: 4]

--------------------------------
Class: CompositeFont
	Typeface DefaultTypeface;//[Offset: 0x0 , Size: 12]
	SubTypefaces(StructProperty)[] SubTypefaces;//[Offset: 0xc , Size: 12]

--------------------------------
Class: Typeface
	Fonts(StructProperty)[] Fonts;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: Console.Object
	LocalPlayer* ConsoleTargetPlayer;//[Offset: 0x24 , Size: 4]
	Texture2D* DefaultTexture_Black;//[Offset: 0x28 , Size: 4]
	Texture2D* DefaultTexture_White;//[Offset: 0x2c , Size: 4]
	HistoryBuffer(StrProperty)[] HistoryBuffer;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: LocalPlayer.Player.Object
	GameViewportClient* ViewportClient;//[Offset: 0x38 , Size: 4]
	byte AspectRatioAxisConstraint;//[Offset: 0x58 , Size: 1]
	class PlayerController* PendingLevelPlayerControllerClass;//[Offset: 0x5c , Size: 4]
	bool bSentSplitJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	int ControllerId;//[Offset: 0xa0 , Size: 4]

--------------------------------
Class: GameViewportClient.ScriptViewportClient.Object
	Console* ViewportConsole;//[Offset: 0x24 , Size: 4]
	DebugProperties(StructProperty)[] DebugProperties;//[Offset: 0x28 , Size: 12]
	World* World;//[Offset: 0x58 , Size: 4]
	GameInstance* GameInstance;//[Offset: 0x5c , Size: 4]
	function SSSwapControllers();// 0x199c3f8
	function ShowTitleSafeArea();// 0x16d3ec4
	function SetConsoleTarget();// 0x18d1054

--------------------------------
Class: ScriptViewportClient.Object

--------------------------------
Class: GameUserSettings.Object
	bool bUseVSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	uint32 ResolutionSizeX;//[Offset: 0x60 , Size: 4]
	uint32 ResolutionSizeY;//[Offset: 0x64 , Size: 4]
	uint32 LastUserConfirmedResolutionSizeX;//[Offset: 0x68 , Size: 4]
	uint32 LastUserConfirmedResolutionSizeY;//[Offset: 0x6c , Size: 4]
	int WindowPosX;//[Offset: 0x70 , Size: 4]
	int WindowPosY;//[Offset: 0x74 , Size: 4]
	int FullscreenMode;//[Offset: 0x78 , Size: 4]
	int LastConfirmedFullscreenMode;//[Offset: 0x7c , Size: 4]
	int PreferredFullscreenMode;//[Offset: 0x80 , Size: 4]
	uint32 Version;//[Offset: 0x84 , Size: 4]
	int AudioQualityLevel;//[Offset: 0x88 , Size: 4]
	float FrameRateLimit;//[Offset: 0x8c , Size: 4]
	int DesiredScreenWidth;//[Offset: 0x94 , Size: 4]
	bool bUseDesiredScreenHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	int DesiredScreenHeight;//[Offset: 0x9c , Size: 4]
	float LastRecommendedScreenWidth;//[Offset: 0xa0 , Size: 4]
	float LastRecommendedScreenHeight;//[Offset: 0xa4 , Size: 4]
	float LastCPUBenchmarkResult;//[Offset: 0xa8 , Size: 4]
	float LastGPUBenchmarkResult;//[Offset: 0xac , Size: 4]
	LastCPUBenchmarkSteps(FloatProperty)[] LastCPUBenchmarkSteps;//[Offset: 0xb0 , Size: 12]
	LastGPUBenchmarkSteps(FloatProperty)[] LastGPUBenchmarkSteps;//[Offset: 0xbc , Size: 12]
	float LastGPUBenchmarkMultiplier;//[Offset: 0xc8 , Size: 4]
	bool bUseHDRDisplayOutput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	int HDRDisplayOutputNits;//[Offset: 0xd0 , Size: 4]
	delegate OnGameUserSettingsUINeedsUpdate;//[Offset: 0xd4 , Size: 12]
	function ValidateSettings();// 0x1790b84
	function SupportsHDRDisplayOutput();// 0x36a8834
	function SetVSyncEnabled();// 0x36a87b4
	function SetVisualEffectQuality();// 0x1b6afd8
	function SetViewDistanceQuality();// 0x36a873c
	function SetToDefaults();// 0x16b8b74
	function SetTextureQuality();// 0x36a86c4
	function SetShadowQuality();// 0x36a864c
	function SetScreenResolution();// 0x36a85dc
	function SetResolutionScaleValueEx();// 0x36a8564
	function SetResolutionScaleValue();// 0x36a84ec
	function SetResolutionScaleNormalized();// 0x36a8474
	function SetPostProcessingQuality();// 0x36a83fc
	function SetOverallScalabilityLevel();// 0x18d1054
	function SetFullscreenMode();// 0x36a8384
	function SetFrameRateLimit();// 0x36a830c
	function SetFoliageQuality();// 0x36a8294
	function SetBenchmarkFallbackValues();// 0x36a8280
	function SetAudioQualityLevel();// 0x36a8208
	function SetAntiAliasingQuality();// 0x36a8190
	function SaveSettings();// 0x17e2208
	function RunHardwareBenchmark();// 0x36a8088
	function RevertVideoMode();// 0x36a8074
	function ResetToCurrentSettings();// 0x1735f78
	function LoadSettings();// 0x36697a0
	function IsVSyncEnabled();// 0x36a804c
	function IsVSyncDirty();// 0x36a8024
	function IsScreenResolutionDirty();// 0x36a7ffc
	function IsHDREnabled();// 0x36a7fd4
	function IsFullscreenModeDirty();// 0x36a7fac
	function IsDirty();// 0x1738b28
	function GetVisualEffectQuality();// 0x36a7f84
	function GetViewDistanceQuality();// 0x16b84c8
	function GetTextureQuality();// 0x36a7f5c
	function GetShadowQuality();// 0x36a7f34
	function GetScreenResolution();// 0x36a7eec
	function GetResolutionScaleInformationEx();// 0x36a7d58
	function GetResolutionScaleInformation();// 0x36a7bc4
	function GetRecommendedResolutionScale();// 0x16d8110
	function GetPreferredFullscreenMode();// 0x36a7b9c
	function GetPostProcessingQuality();// 0x36a7b74
	function GetOverallScalabilityLevel();// 0x36a7b4c
	function GetLastConfirmedScreenResolution();// 0x36a7b04
	function GetLastConfirmedFullscreenMode();// 0x36a7adc
	function GetGameUserSettings();// 0x36a7ab4
	function GetFullscreenMode();// 0x36a7a8c
	function GetFrameRateLimit();// 0x36a7a64
	function GetFoliageQuality();// 0x36a7a3c
	function GetDesktopResolution();// 0x36a79f4
	function GetDefaultWindowPosition();// 0x36a79b4
	function GetDefaultWindowMode();// 0x1843b78
	function GetDefaultResolutionScale();// 0x16d80e0
	function GetDefaultResolution();// 0x36a7974
	function GetCurrentHDRDisplayNits();// 0x36a794c
	function GetAudioQualityLevel();// 0x36a7930
	function GetAntiAliasingQuality();// 0x36a7908
	function EnableHDRDisplayOutput();// 0x36a7840
	function ConfirmVideoMode();// 0x36a782c
	function ApplySettings();// 0x36a77a4
	function ApplyResolutionSettings();// 0x36a7724
	function ApplyNonResolutionSettings();// 0x16d3ec4
	function ApplyHardwareBenchmarkResults();// 0x18ec054

--------------------------------
Class: Material.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50 , Size: 4]
	ColorMaterialInput DiffuseColor;//[Offset: 0x58 , Size: 56]
	ColorMaterialInput SpecularColor;//[Offset: 0x90 , Size: 56]
	ColorMaterialInput BaseColor;//[Offset: 0xc8 , Size: 56]
	ScalarMaterialInput Metallic;//[Offset: 0x100 , Size: 56]
	ScalarMaterialInput Specular;//[Offset: 0x138 , Size: 56]
	ScalarMaterialInput Roughness;//[Offset: 0x170 , Size: 56]
	VectorMaterialInput Normal;//[Offset: 0x1a8 , Size: 64]
	ColorMaterialInput EmissiveColor;//[Offset: 0x1e8 , Size: 56]
	ScalarMaterialInput Opacity;//[Offset: 0x220 , Size: 56]
	ScalarMaterialInput OpacityMask;//[Offset: 0x258 , Size: 56]
	byte MaterialDomain;//[Offset: 0x290 , Size: 1]
	byte BlendMode;//[Offset: 0x291 , Size: 1]
	byte DecalBlendMode;//[Offset: 0x292 , Size: 1]
	byte MaterialDecalResponse;//[Offset: 0x293 , Size: 1]
	byte ShadingModel;//[Offset: 0x294 , Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x298 , Size: 4]
	float VertexOffsetAlongNormal;//[Offset: 0x29c , Size: 4]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2a0 , Size: 1]
	VectorMaterialInput WorldPositionOffset;//[Offset: 0x2a8 , Size: 64]
	VectorMaterialInput WorldDisplacement;//[Offset: 0x2e8 , Size: 64]
	ScalarMaterialInput TessellationMultiplier;//[Offset: 0x328 , Size: 56]
	ColorMaterialInput SubsurfaceColor;//[Offset: 0x360 , Size: 56]
	ScalarMaterialInput ClearCoat;//[Offset: 0x398 , Size: 56]
	ScalarMaterialInput ClearCoatRoughness;//[Offset: 0x3d0 , Size: 56]
	ScalarMaterialInput AmbientOcclusion;//[Offset: 0x408 , Size: 56]
	ScalarMaterialInput Refraction;//[Offset: 0x440 , Size: 56]
	Vector2MaterialInput CustomizedUVs;//[Offset: 0x478 , Size: 64]
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x678 , Size: 56]
	ScalarMaterialInput PixelDepthOffset;//[Offset: 0x6b0 , Size: 56]
	Vector4MaterialInput CustomizedVertexColor;//[Offset: 0x6f0 , Size: 80]
	bool bEnableSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x740 , Size: 1]
	bool bEnableMobileSeparateTranslucency;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x740 , Size: 1]
	bool bEnableResponsiveAA;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x740 , Size: 1]
	bool bScreenSpaceReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x740 , Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x740 , Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x740 , Size: 1]
	bool DitherOpacityMask;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x740 , Size: 1]
	bool bAllowNegativeEmissiveColor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x740 , Size: 1]
	int NumCustomizedUVs;//[Offset: 0x744 , Size: 4]
	byte TranslucencyLightingMode;//[Offset: 0x748 , Size: 1]
	float TranslucencyDirectionalLightingIntensity;//[Offset: 0x74c , Size: 4]
	bool AllowTranslucentCustomDepthWrites;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x750 , Size: 1]
	float TranslucentShadowDensityScale;//[Offset: 0x754 , Size: 4]
	float TranslucentSelfShadowDensityScale;//[Offset: 0x758 , Size: 4]
	float TranslucentSelfShadowSecondDensityScale;//[Offset: 0x75c , Size: 4]
	float TranslucentSelfShadowSecondOpacity;//[Offset: 0x760 , Size: 4]
	float TranslucentBackscatteringExponent;//[Offset: 0x764 , Size: 4]
	LinearColor TranslucentMultipleScatteringExtinction;//[Offset: 0x768 , Size: 16]
	float TranslucentShadowStartOffset;//[Offset: 0x778 , Size: 4]
	bool bDisableDepthTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77c , Size: 1]
	bool bGenerateSphericalParticleNormals;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77c , Size: 1]
	bool bTangentSpaceNormal;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x77c , Size: 1]
	bool bUseEmissiveForDynamicAreaLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x77c , Size: 1]
	bool bBlockGI;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x77c , Size: 1]
	bool bUsedAsSpecialEngineMaterial;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x77c , Size: 1]
	bool bUsedWithSkeletalMesh;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x77c , Size: 1]
	bool bUsedWithGFur;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x77c , Size: 1]
	bool bUsedWithEditorCompositing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77d , Size: 1]
	bool bUsedWithParticleSprites;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77d , Size: 1]
	bool bUsedWithBeamTrails;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x77d , Size: 1]
	bool bUsedWithMeshParticles;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x77d , Size: 1]
	bool bUsedWithNiagaraSprites;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x77d , Size: 1]
	bool bUsedWithNiagaraRibbons;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x77d , Size: 1]
	bool bUsedWithNiagaraMeshParticles;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x77d , Size: 1]
	bool bUsedWithIBL;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x77d , Size: 1]
	bool bUsedWithStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77e , Size: 1]
	bool bUsedWithMorphTargets;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77e , Size: 1]
	bool bUsedWithSplineMeshes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x77e , Size: 1]
	bool bUsedWithInstancedStaticMeshes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x77e , Size: 1]
	bool bUsesDistortion;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x77e , Size: 1]
	bool bUsedWithClothing;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x77e , Size: 1]
	bool bUsedWithUI;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x77e , Size: 1]
	bool bAutomaticallySetUsageInEditor;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x77e , Size: 1]
	bool bFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x77f , Size: 1]
	bool bUseFullPrecision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x77f , Size: 1]
	bool bUseLightmapDirectionality;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x77f , Size: 1]
	bool bUsedWithDynamicInstancing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x77f , Size: 1]
	bool bUseSimplestShader;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x77f , Size: 1]
	bool bBypassSystemMaterialQuality;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x77f , Size: 1]
	bool bBypassMobilePointLight;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x77f , Size: 1]
	bool bUseAsEarlyZ;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x77f , Size: 1]
	bool bUseLightmap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x780 , Size: 1]
	bool bUseIndirectLighting;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x780 , Size: 1]
	bool bShadowOnEmissiveColor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x780 , Size: 1]
	byte ShadowOverride;//[Offset: 0x781 , Size: 1]
	byte SimpleVertexNormalSituation;//[Offset: 0x782 , Size: 1]
	bool bZForceFar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x783 , Size: 1]
	bool bWettable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x783 , Size: 1]
	bool bUseLegacySpecular;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x783 , Size: 1]
	bool bCorrectBlendingColorInHDR;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x783 , Size: 1]
	bool bUseHQForwardReflections;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x783 , Size: 1]
	bool bUsePlanarForwardReflections;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x783 , Size: 1]
	bool bApplyVertexFog;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x783 , Size: 1]
	bool bNormalCurvatureToRoughness;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x783 , Size: 1]
	byte D3D11TessellationMode;//[Offset: 0x784 , Size: 1]
	bool bEnableCrackFreeDisplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x785 , Size: 1]
	bool bEnableAdaptiveTessellation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x785 , Size: 1]
	float MaxDisplacement;//[Offset: 0x788 , Size: 4]
	bool Wireframe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78c , Size: 1]
	bool bOutputVelocityOnBasePass;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78c , Size: 1]
	bool bUnlitOutputAllMTOnBasePass;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78c , Size: 1]
	int EditorX;//[Offset: 0x790 , Size: 4]
	int EditorY;//[Offset: 0x794 , Size: 4]
	int EditorPitch;//[Offset: 0x798 , Size: 4]
	int EditorYaw;//[Offset: 0x79c , Size: 4]
	Expressions(ObjectProperty)[] Expressions;//[Offset: 0x7a0 , Size: 12]
	MaterialFunctionInfos(StructProperty)[] MaterialFunctionInfos;//[Offset: 0x7ac , Size: 12]
	MaterialParameterCollectionInfos(StructProperty)[] MaterialParameterCollectionInfos;//[Offset: 0x7b8 , Size: 12]
	bool bCanMaskedBeAssumedOpaque;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c4 , Size: 1]
	bool bIsMasked;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c4 , Size: 1]
	bool bIsPreviewMaterial;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c4 , Size: 1]
	bool bUseMaterialAttributes;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c4 , Size: 1]
	bool bComputeFogPerPixel;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c4 , Size: 1]
	bool bAllowDevelopmentShaderCompile;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c4 , Size: 1]
	bool bIsMaterialEditorStatsMaterial;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c4 , Size: 1]
	uint32 UsageFlagWarnings;//[Offset: 0x7c8 , Size: 4]
	byte BlendableLocation;//[Offset: 0x7cc , Size: 1]
	int BlendablePriority;//[Offset: 0x7d0 , Size: 4]
	bool BlendableOutputAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4 , Size: 1]
	byte RefractionMode;//[Offset: 0x7d5 , Size: 1]
	float RefractionDepthBias;//[Offset: 0x7d8 , Size: 4]
	Guid stateID;//[Offset: 0x7dc , Size: 16]
	ExpressionTextureReferences(ObjectProperty)[] ExpressionTextureReferences;//[Offset: 0x884 , Size: 12]

--------------------------------
Class: MaterialInterface.Object
	SubsurfaceProfile* SubsurfaceProfile;//[Offset: 0x20 , Size: 4]
	LightmassMaterialInterfaceSettings LightmassSettings;//[Offset: 0x2c , Size: 20]
	TextureStreamingData(StructProperty)[] TextureStreamingData;//[Offset: 0x40 , Size: 12]
	function SetStreamingTextureMipOffset();// 0x3723ef4
	function SetForceMipLevelsToBeResident();// 0x3723d8c
	function GetPhysicalMaterial();// 0x3723d5c
	function GetBaseMaterial();// 0x3723d34

--------------------------------
Class: SubsurfaceProfile.Object
	SubsurfaceProfileStruct Settings;//[Offset: 0x1c , Size: 36]

--------------------------------
Class: SubsurfaceProfileStruct
	float ScatterRadius;//[Offset: 0x0 , Size: 4]
	LinearColor SubsurfaceColor;//[Offset: 0x4 , Size: 16]
	LinearColor FalloffColor;//[Offset: 0x14 , Size: 16]

--------------------------------
Class: LightmassMaterialInterfaceSettings
	bool bCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	float EmissiveBoost;//[Offset: 0x4 , Size: 4]
	float DiffuseBoost;//[Offset: 0x8 , Size: 4]
	float ExportResolutionScale;//[Offset: 0xc , Size: 4]
	bool bOverrideCastShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]
	bool bOverrideEmissiveBoost;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10 , Size: 1]
	bool bOverrideDiffuseBoost;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10 , Size: 1]
	bool bOverrideExportResolutionScale;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10 , Size: 1]

--------------------------------
Class: ColorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Color Constant;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: MaterialInput
	int OutputIndex;//[Offset: 0x0 , Size: 4]
	FString InputName;//[Offset: 0x4 , Size: 12]
	int Mask;//[Offset: 0x10 , Size: 4]
	int MaskR;//[Offset: 0x14 , Size: 4]
	int MaskG;//[Offset: 0x18 , Size: 4]
	int MaskB;//[Offset: 0x1c , Size: 4]
	int MaskA;//[Offset: 0x20 , Size: 4]
	FName ExpressionName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: ScalarMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float Constant;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: VectorMaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Vector Constant;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: Vector2MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float ConstantX;//[Offset: 0x34 , Size: 4]
	float ConstantY;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: MaterialAttributesInput.ExpressionInput
	int PropertyConnectedBitmask;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: ExpressionInput
	int OutputIndex;//[Offset: 0x0 , Size: 4]
	FString InputName;//[Offset: 0x4 , Size: 12]
	int Mask;//[Offset: 0x10 , Size: 4]
	int MaskR;//[Offset: 0x14 , Size: 4]
	int MaskG;//[Offset: 0x18 , Size: 4]
	int MaskB;//[Offset: 0x1c , Size: 4]
	int MaskA;//[Offset: 0x20 , Size: 4]
	FName ExpressionName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: Vector4MaterialInput.MaterialInput
	bool UseConstant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	Vector4 Constant;//[Offset: 0x40 , Size: 16]

--------------------------------
Class: MaterialInstanceDynamic.MaterialInstance.MaterialInterface.Object
	function SetVectorParameterValue();// 0x37235f4
	function SetTextureParameterValue();// 0x3723538
	function SetScalarParameterValue();// 0x3723474
	function K2_InterpolateMaterialInstanceParams();// 0x3723374
	function K2_GetVectorParameterValue();// 0x37232e4
	function K2_GetTextureParameterValue();// 0x3723264
	function K2_GetScalarParameterValue();// 0x37231e4
	function K2_CopyMaterialInstanceParameters();// 0x372316c
	function CopyParameterOverrides();// 0x37230f4
	function CopyInterpParameters();// 0x372307c

--------------------------------
Class: MaterialInstance.MaterialInterface.Object
	PhysicalMaterial* PhysMaterial;//[Offset: 0x50 , Size: 4]
	MaterialInterface* Parent;//[Offset: 0x54 , Size: 4]
	bool bHasStaticPermutationResource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]
	bool bOverrideSubsurfaceProfile;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58 , Size: 1]
	FontParameterValues(StructProperty)[] FontParameterValues;//[Offset: 0x5c , Size: 12]
	ScalarParameterValues(StructProperty)[] ScalarParameterValues;//[Offset: 0x68 , Size: 12]
	TextureParameterValues(StructProperty)[] TextureParameterValues;//[Offset: 0x74 , Size: 12]
	VectorParameterValues(StructProperty)[] VectorParameterValues;//[Offset: 0x80 , Size: 12]
	<DynamicInstancingParameters_Key(StrProperty) , DynamicInstancingParameters(StructProperty)> DynamicInstancingParameters;//[Offset: 0x8c , Size: 60]
	bool bOverrideBaseProperties;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	MaterialInstanceBasePropertyOverrides BasePropertyOverrides;//[Offset: 0xcc , Size: 16]
	PermutationTextureReferences(ObjectProperty)[] PermutationTextureReferences;//[Offset: 0xf0 , Size: 12]

--------------------------------
Class: MaterialInstanceBasePropertyOverrides
	bool bOverride_OpacityMaskClipValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bOverride_BlendMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool bOverride_ShadingModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	bool bOverride_DitheredLODTransition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]
	bool bOverride_CastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool bOverride_TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	float OpacityMaskClipValue;//[Offset: 0x8 , Size: 4]
	byte BlendMode;//[Offset: 0xc , Size: 1]
	byte ShadingModel;//[Offset: 0xd , Size: 1]
	bool TwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe , Size: 1]
	bool DitheredLODTransition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe , Size: 1]
	bool bCastDynamicShadowAsMasked;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xe , Size: 1]

--------------------------------
Class: FloatRange
	FloatRangeBound LowerBound;//[Offset: 0x0 , Size: 8]
	FloatRangeBound UpperBound;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: FloatRangeBound
	byte Type;//[Offset: 0x0 , Size: 1]
	float Value;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: RigidBodyErrorCorrection
	float LinearDeltaThresholdSq;//[Offset: 0x0 , Size: 4]
	float LinearInterpAlpha;//[Offset: 0x4 , Size: 4]
	float LinearRecipFixTime;//[Offset: 0x8 , Size: 4]
	float AngularDeltaThreshold;//[Offset: 0xc , Size: 4]
	float AngularInterpAlpha;//[Offset: 0x10 , Size: 4]
	float AngularRecipFixTime;//[Offset: 0x14 , Size: 4]
	float BodySpeedThresholdSq;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CheckBoxStyleAsset.Object
	CheckBoxStyle CheckBoxStyle;//[Offset: 0x20 , Size: 1448]

--------------------------------
Class: CheckBoxStyle.SlateWidgetStyle
	byte CheckBoxType;//[Offset: 0x4 , Size: 1]
	SlateBrush UncheckedImage;//[Offset: 0x8 , Size: 144]
	SlateBrush UncheckedHoveredImage;//[Offset: 0x98 , Size: 144]
	SlateBrush UncheckedPressedImage;//[Offset: 0x128 , Size: 144]
	SlateBrush CheckedImage;//[Offset: 0x1b8 , Size: 144]
	SlateBrush CheckedHoveredImage;//[Offset: 0x248 , Size: 144]
	SlateBrush CheckedPressedImage;//[Offset: 0x2d8 , Size: 144]
	SlateBrush UndeterminedImage;//[Offset: 0x368 , Size: 144]
	SlateBrush UndeterminedHoveredImage;//[Offset: 0x3f8 , Size: 144]
	SlateBrush UndeterminedPressedImage;//[Offset: 0x488 , Size: 144]
	Margin Padding;//[Offset: 0x518 , Size: 16]
	SlateColor ForegroundColor;//[Offset: 0x528 , Size: 28]
	SlateColor BorderBackgroundColor;//[Offset: 0x544 , Size: 28]
	SlateSound CheckedSlateSound;//[Offset: 0x560 , Size: 24]
	SlateSound UncheckedSlateSound;//[Offset: 0x578 , Size: 24]
	SlateSound HoveredSlateSound;//[Offset: 0x590 , Size: 24]

--------------------------------
Class: ChildConnection.NetConnection.Player.Object
	NetConnection* Parent;//[Offset: 0x294f4 , Size: 4]

--------------------------------
Class: PlatformInterfaceBase.Object
	AllDelegates(StructProperty)[] AllDelegates;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: CloudStorageBase.PlatformInterfaceBase.Object
	LocalCloudFiles(StrProperty)[] LocalCloudFiles;//[Offset: 0x28 , Size: 12]
	bool bSuppressDelegateCalls;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]

--------------------------------
Class: Commandlet.Object
	FString HelpDescription;//[Offset: 0x1c , Size: 12]
	FString HelpUsage;//[Offset: 0x28 , Size: 12]
	FString HelpWebLink;//[Offset: 0x34 , Size: 12]
	HelpParamNames(StrProperty)[] HelpParamNames;//[Offset: 0x40 , Size: 12]
	HelpParamDescriptions(StrProperty)[] HelpParamDescriptions;//[Offset: 0x4c , Size: 12]
	bool IsServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]
	bool IsClient;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58 , Size: 1]
	bool IsEditor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58 , Size: 1]
	bool LogToConsole;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x58 , Size: 1]
	bool ShowErrorCount;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x58 , Size: 1]

--------------------------------
Class: DynamicBlueprintBinding.Object

--------------------------------
Class: ComponentDelegateBinding.DynamicBlueprintBinding.Object
	ComponentDelegateBindings(StructProperty)[] ComponentDelegateBindings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: ConsoleSettings.Object
	int MaxScrollbackSize;//[Offset: 0x1c , Size: 4]
	ManualAutoCompleteList(StructProperty)[] ManualAutoCompleteList;//[Offset: 0x20 , Size: 12]
	AutoCompleteMapPaths(StrProperty)[] AutoCompleteMapPaths;//[Offset: 0x2c , Size: 12]
	float BackgroundOpacityPercentage;//[Offset: 0x38 , Size: 4]
	bool bOrderTopToBottom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	Color InputColor;//[Offset: 0x40 , Size: 4]
	Color HistoryColor;//[Offset: 0x44 , Size: 4]
	Color AutoCompleteCommandColor;//[Offset: 0x48 , Size: 4]
	Color AutoCompleteCVarColor;//[Offset: 0x4c , Size: 4]
	Color AutoCompleteFadedColor;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: ControlChannel.Channel.Object

--------------------------------
Class: ControlRigInterface.Interface.Object

--------------------------------
Class: StreamingSettings.DeveloperSettings.Object
	bool AsyncLoadingThreadEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool WarnIfTimeLimitExceeded;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	float TimeLimitExceededMultiplier;//[Offset: 0x34 , Size: 4]
	float TimeLimitExceededMinTime;//[Offset: 0x38 , Size: 4]
	int MinBulkDataSizeForAsyncLoading;//[Offset: 0x3c , Size: 4]
	bool UseBackgroundLevelStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x40 , Size: 1]
	bool AsyncLoadingUseFullTimeLimit;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x40 , Size: 1]
	float AsyncLoadingTimeLimit;//[Offset: 0x44 , Size: 4]
	float PriorityAsyncLoadingExtraTime;//[Offset: 0x48 , Size: 4]
	float LevelStreamingActorsUpdateTimeLimit;//[Offset: 0x4c , Size: 4]
	int LevelStreamingComponentsRegistrationGranularity;//[Offset: 0x50 , Size: 4]
	float LevelStreamingUnregisterComponentsTimeLimit;//[Offset: 0x54 , Size: 4]
	int LevelStreamingComponentsUnregistrationGranularity;//[Offset: 0x58 , Size: 4]
	bool EventDrivenLoaderEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c , Size: 1]

--------------------------------
Class: GarbageCollectionSettings.DeveloperSettings.Object
	float TimeBetweenPurgingPendingKillObjects;//[Offset: 0x30 , Size: 4]
	bool FlushStreamingOnGC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool AllowParallelGC;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool IncrementalBeginDestroyEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	bool CreateGCClusters;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34 , Size: 1]
	bool MergeGCClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34 , Size: 1]
	bool ActorClusteringEnabled;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34 , Size: 1]
	bool BlueprintClusteringEnabled;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34 , Size: 1]
	bool UseDisregardForGCOnDedicatedServers;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34 , Size: 1]
	int NumRetriesBeforeForcingGC;//[Offset: 0x38 , Size: 4]
	int MinActorNumForCluster;//[Offset: 0x3c , Size: 4]
	int MaxObjectsNotConsideredByGC;//[Offset: 0x40 , Size: 4]
	int SizeOfPermanentObjectPool;//[Offset: 0x44 , Size: 4]
	int MaxObjectsInGame;//[Offset: 0x48 , Size: 4]
	int MaxObjectsInEditor;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: CullDistanceVolume.Volume.Brush.Actor.Object
	CullDistances(StructProperty)[] CullDistances;//[Offset: 0x2ec , Size: 12]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8 , Size: 1]
	bool bEnabledDeviceScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8 , Size: 1]
	float VeryLowScale;//[Offset: 0x2fc , Size: 4]
	float LowScale;//[Offset: 0x300 , Size: 4]
	float MidScale;//[Offset: 0x304 , Size: 4]
	float HighScale;//[Offset: 0x308 , Size: 4]
	bool bEnableStaticMeshMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	bool bEnableCullDistanceOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d , Size: 1]

--------------------------------
Class: CurveEdPresetCurve.Object

--------------------------------
Class: CurveLinearColor.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20 , Size: 84]
	function GetLinearColorValue();// 0x367c50c

--------------------------------
Class: CurveSourceInterface.Interface.Object
	function GetCurveValue();// 0x367ca2c
	function GetCurves();// 0x367c958
	function GetBindingName();// 0x367c910

--------------------------------
Class: CurveTable.Object

--------------------------------
Class: CurveVector.CurveBase.Object
	RichCurve FloatCurves;//[Offset: 0x20 , Size: 84]
	function GetVectorValue();// 0x367d394

--------------------------------
Class: DamageableInterfaceBase.Interface.Object

--------------------------------
Class: DataAsset.Object
	class DataAsset* NativeClass;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: PrimaryDataAsset.DataAsset.Object

--------------------------------
Class: DataTable.Object
	ScriptStruct* RowStruct;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: DataTableFunctionLibrary.BlueprintFunctionLibrary.Object
	function GetDataTableRowNames();// 0x367eb04
	function GetDataTableRowFromName();// 0x367e298
	function EvaluateCurveTableRow();// 0x367e060

--------------------------------
Class: DebugCameraHUD.HUD.Actor.Object

--------------------------------
Class: DebugDrawService.BlueprintFunctionLibrary.Object

--------------------------------
Class: DecalActor.Actor.Object
	DecalComponent* Decal;//[Offset: 0x2c4 , Size: 4]
	function SetDecalMaterial();// 0x367fa0c
	function GetDecalMaterial();// 0x367f9e4
	function CreateDynamicMaterialInstance();// 0x192ce78

--------------------------------
Class: DecalComponent.SceneComponent.ActorComponent.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x260 , Size: 4]
	int SortOrder;//[Offset: 0x264 , Size: 4]
	float FadeScreenSize;//[Offset: 0x268 , Size: 4]
	float FadeStartDelay;//[Offset: 0x26c , Size: 4]
	float FadeDuration;//[Offset: 0x270 , Size: 4]
	bool bDestroyOwnerAfterFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274 , Size: 1]
	Vector DecalSize;//[Offset: 0x278 , Size: 12]
	function SetSortOrder();// 0x3680038
	function SetFadeScreenSize();// 0x367ffc0
	function SetFadeOut();// 0x367feb8
	function SetDecalMaterial();// 0x367fe40
	function GetFadeStartDelay();// 0x367fe18
	function GetFadeDuration();// 0x367fdf0
	function GetDecalMaterial();// 0x367fdc8
	function CreateDynamicMaterialInstance();// 0x367fd98

--------------------------------
Class: FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	float MaxSpeed;//[Offset: 0x124 , Size: 4]
	float Acceleration;//[Offset: 0x128 , Size: 4]
	float Deceleration;//[Offset: 0x12c , Size: 4]
	float TurningBoost;//[Offset: 0x130 , Size: 4]
	bool bPositionCorrected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x134 , Size: 1]

--------------------------------
Class: DemoNetConnection.NetConnection.Player.Object

--------------------------------
Class: PendingNetGame.Object
	NetDriver* NetDriver;//[Offset: 0x20 , Size: 4]
	DemoNetDriver* DemoNetDriver;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: DemoPendingNetGame.PendingNetGame.Object

--------------------------------
Class: DestructibleInterface.Interface.Object

--------------------------------
Class: MaterialShaderQualitySettings.Object
	<ForwardSettingMap_Key(NameProperty) , ForwardSettingMap(ObjectProperty)> ForwardSettingMap;//[Offset: 0x1c , Size: 60]

--------------------------------
Class: ShaderPlatformQualitySettings.Object
	MaterialQualityOverrides QualityOverrides;//[Offset: 0x1c , Size: 6]

--------------------------------
Class: MaterialQualityOverrides
	bool bEnableOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool bForceFullyRough;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	bool bForceNonMetal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]
	bool bForceDisableLMDirectionality;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]
	bool bForceLQReflections;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	enum MobileCSMQuality;//[Offset: 0x5 , Size: 1]

--------------------------------
Class: DialogueSoundWaveProxy.SoundBase.Object

--------------------------------
Class: DialogueVoice.Object
	byte gender;//[Offset: 0x1c , Size: 1]
	byte Plurality;//[Offset: 0x1d , Size: 1]
	Guid LocalizationGUID;//[Offset: 0x20 , Size: 16]

--------------------------------
Class: DialogueWave.Object
	bool bMature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bOverride_SubtitleOverride;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	FString SpokenText;//[Offset: 0x20 , Size: 12]
	FString SubtitleOverride;//[Offset: 0x2c , Size: 12]
	ContextMappings(StructProperty)[] ContextMappings;//[Offset: 0x38 , Size: 12]
	Guid LocalizationGUID;//[Offset: 0x44 , Size: 16]

--------------------------------
Class: Light.Actor.Object
	LightComponent* LightComponent;//[Offset: 0x2c4 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	function ToggleEnabled();// 0x370fb60
	function SetLightFunctionScale();// 0x370faf0
	function SetLightFunctionMaterial();// 0x370fa78
	function SetLightFunctionFadeDistance();// 0x370fa00
	function SetLightColor();// 0x370f984
	function SetEnabled();// 0x370f904
	function SetCastShadows();// 0x370f884
	function SetBrightness();// 0x370f80c
	function SetAffectTranslucentLighting();// 0x370f78c
	function OnRep_bEnabled();// 0x16f99b4
	function IsEnabled();// 0x370f764
	function GetLightColor();// 0x370f720
	function GetBrightness();// 0x370f6f8

--------------------------------
Class: LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Temperature;//[Offset: 0x288 , Size: 4]
	float MaxDrawDistance;//[Offset: 0x28c , Size: 4]
	float MaxDistanceFadeRange;//[Offset: 0x290 , Size: 4]
	bool bUseTemperature;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x294 , Size: 1]
	int ShadowMapChannel;//[Offset: 0x298 , Size: 4]
	float MinRoughness;//[Offset: 0x2a0 , Size: 4]
	float ShadowResolutionScale;//[Offset: 0x2a4 , Size: 4]
	int LightPriority;//[Offset: 0x2a8 , Size: 4]
	float ShadowBias;//[Offset: 0x2ac , Size: 4]
	float ShadowSharpen;//[Offset: 0x2b0 , Size: 4]
	float ContactShadowLength;//[Offset: 0x2b4 , Size: 4]
	bool InverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2b8 , Size: 1]
	bool CastTranslucentShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2b8 , Size: 1]
	bool bCastShadowsFromCinematicObjectsOnly;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2b8 , Size: 1]
	bool bAffectDynamicIndirectLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2b8 , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x2b9 , Size: 1]
	MaterialInterface* LightFunctionMaterial;//[Offset: 0x2bc , Size: 4]
	Vector LightFunctionScale;//[Offset: 0x2c0 , Size: 12]
	TextureLightProfile* IESTexture;//[Offset: 0x2cc , Size: 4]
	bool bUseIESBrightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0 , Size: 1]
	float IESBrightnessScale;//[Offset: 0x2d4 , Size: 4]
	float LightFunctionFadeDistance;//[Offset: 0x2d8 , Size: 4]
	float DisabledBrightness;//[Offset: 0x2dc , Size: 4]
	bool bEnableLightShaftBloom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e0 , Size: 1]
	float BloomScale;//[Offset: 0x2e4 , Size: 4]
	float BloomThreshold;//[Offset: 0x2e8 , Size: 4]
	Color BloomTint;//[Offset: 0x2ec , Size: 4]
	bool bUseRayTracedDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	float RayStartOffsetDepthScale;//[Offset: 0x2f4 , Size: 4]
	function SetVolumetricScatteringIntensity();// 0x3710a30
	function SetTemperature();// 0x37109b8
	function SetShadowBias();// 0x3710940
	function SetLightFunctionScale();// 0x37108d0
	function SetLightFunctionMaterial();// 0x3710858
	function SetLightFunctionFadeDistance();// 0x37107e0
	function SetLightFunctionDisabledBrightness();// 0x3710768
	function SetLightColor();// 0x37106a0
	function SetIntensity();// 0x3710628
	function SetIndirectLightingIntensity();// 0x37105b0
	function SetIESTexture();// 0x3710538
	function SetEnableLightShaftBloom();// 0x37104b8
	function SetBloomTint();// 0x3710448
	function SetBloomThreshold();// 0x37103d0
	function SetBloomScale();// 0x3710358
	function SetAffectTranslucentLighting();// 0x37102d8
	function SetAffectDynamicIndirectLighting();// 0x3710258
	function ForceUpdateShadowState();// 0x3710244

--------------------------------
Class: LightComponentBase.SceneComponent.ActorComponent.Object
	Guid LightGuid;//[Offset: 0x260 , Size: 16]
	float Brightness;//[Offset: 0x270 , Size: 4]
	float Intensity;//[Offset: 0x274 , Size: 4]
	Color LightColor;//[Offset: 0x278 , Size: 4]
	bool bAffectsWorld;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x27c , Size: 1]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x27c , Size: 1]
	bool CastStaticShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x27c , Size: 1]
	bool CastDynamicShadows;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x27c , Size: 1]
	bool bAffectTranslucentLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x27c , Size: 1]
	bool bCastVolumetricShadow;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x27c , Size: 1]
	float IndirectLightingIntensity;//[Offset: 0x280 , Size: 4]
	float VolumetricScatteringIntensity;//[Offset: 0x284 , Size: 4]
	function SetCastVolumetricShadow();// 0x3711b28
	function SetCastShadows();// 0x3711aa8
	function GetLightColor();// 0x3711a64

--------------------------------
Class: TextureLightProfile.Texture2D.Texture.Object
	float Brightness;//[Offset: 0xc8 , Size: 4]
	float TextureMultiplier;//[Offset: 0xcc , Size: 4]

--------------------------------
Class: DirectionalLight.Light.Actor.Object

--------------------------------
Class: DirectionalLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableLightShaftOcclusion;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x359 , Size: 1]
	float OcclusionMaskDarkness;//[Offset: 0x35c , Size: 4]
	float OcclusionDepthRange;//[Offset: 0x360 , Size: 4]
	Vector LightShaftOverrideDirection;//[Offset: 0x364 , Size: 12]
	float WholeSceneDynamicShadowRadius;//[Offset: 0x370 , Size: 4]
	float DynamicShadowDistanceMovableLight;//[Offset: 0x374 , Size: 4]
	float DynamicShadowDistanceStationaryLight;//[Offset: 0x378 , Size: 4]
	int DynamicShadowCascades;//[Offset: 0x37c , Size: 4]
	float CascadeDistributionExponent;//[Offset: 0x380 , Size: 4]
	float CascadeTransitionFraction;//[Offset: 0x384 , Size: 4]
	float ShadowDistanceFadeoutFraction;//[Offset: 0x388 , Size: 4]
	bool bUseIndependentShadowBound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38c , Size: 1]
	float ShadowCenterOffset;//[Offset: 0x390 , Size: 4]
	float ShadowIndependentRadius;//[Offset: 0x394 , Size: 4]
	bool bUseInsetShadowsForMovableObjects;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x398 , Size: 1]
	int FarShadowCascadeCount;//[Offset: 0x39c , Size: 4]
	float FarShadowDistance;//[Offset: 0x3a0 , Size: 4]
	float DistanceFieldShadowDistance;//[Offset: 0x3a4 , Size: 4]
	float LightSourceAngle;//[Offset: 0x3a8 , Size: 4]
	float TraceDistance;//[Offset: 0x3ac , Size: 4]
	LightmassDirectionalLightSettings LightmassSettings;//[Offset: 0x3b0 , Size: 16]
	bool bCastModulatedShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c0 , Size: 1]
	Color ModulatedShadowColor;//[Offset: 0x3c4 , Size: 4]
	ACESParameters(StructProperty)[] ACESParameters;//[Offset: 0x3c8 , Size: 12]
	bool bUsedAsAtmosphereSunLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d4 , Size: 1]
	function SetShadowDistanceFadeoutFraction();// 0x3682588
	function SetOcclusionMaskDarkness();// 0x3682510
	function SetLightShaftOverrideDirection();// 0x36824a0
	function SetEnableLightShaftOcclusion();// 0x3682420
	function SetDynamicShadowDistanceStationaryLight();// 0x36823a8
	function SetDynamicShadowDistanceMovableLight();// 0x3682330
	function SetDynamicShadowCascades();// 0x36822b8
	function SetCascadeTransitionFraction();// 0x3682240
	function SetCascadeDistributionExponent();// 0x36821c8

--------------------------------
Class: LightmassDirectionalLightSettings.LightmassLightSettings
	float LightSourceAngle;//[Offset: 0xc , Size: 4]

--------------------------------
Class: LightmassLightSettings
	float IndirectLightingSaturation;//[Offset: 0x0 , Size: 4]
	float ShadowExponent;//[Offset: 0x4 , Size: 4]
	bool bUseAreaShadowsForStationaryLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]

--------------------------------
Class: Distribution.Object

--------------------------------
Class: DistributionFloat.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]

--------------------------------
Class: DistributionFloatConstant.DistributionFloat.Distribution.Object
	float Constant;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: DistributionFloatConstantCurve.DistributionFloat.Distribution.Object
	InterpCurveFloat ConstantCurve;//[Offset: 0x24 , Size: 20]

--------------------------------
Class: InterpCurveFloat
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object
	FName ParameterName;//[Offset: 0x28 , Size: 8]
	float MinInput;//[Offset: 0x30 , Size: 4]
	float MaxInput;//[Offset: 0x34 , Size: 4]
	float MinOutput;//[Offset: 0x38 , Size: 4]
	float MaxOutput;//[Offset: 0x3c , Size: 4]
	byte ParamMode;//[Offset: 0x40 , Size: 1]

--------------------------------
Class: DistributionFloatParticleParameter.DistributionFloatParameterBase.DistributionFloatConstant.DistributionFloat.Distribution.Object

--------------------------------
Class: DistributionFloatUniform.DistributionFloat.Distribution.Object
	float Min;//[Offset: 0x24 , Size: 4]
	float Max;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: DistributionFloatUniformCurve.DistributionFloat.Distribution.Object
	InterpCurveVector2D ConstantCurve;//[Offset: 0x24 , Size: 20]

--------------------------------
Class: InterpCurveVector2D
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: DistributionVector.Distribution.Object
	bool bCanBeBaked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	bool bIsDirty;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x20 , Size: 1]
	bool bBakedDataSuccesfully;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x20 , Size: 1]

--------------------------------
Class: DistributionVectorConstant.DistributionVector.Distribution.Object
	Vector Constant;//[Offset: 0x24 , Size: 12]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	byte LockedAxes;//[Offset: 0x31 , Size: 1]

--------------------------------
Class: DistributionVectorConstantCurve.DistributionVector.Distribution.Object
	InterpCurveVector ConstantCurve;//[Offset: 0x24 , Size: 20]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	byte LockedAxes;//[Offset: 0x39 , Size: 1]

--------------------------------
Class: DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object
	FName ParameterName;//[Offset: 0x38 , Size: 8]
	Vector MinInput;//[Offset: 0x40 , Size: 12]
	Vector MaxInput;//[Offset: 0x4c , Size: 12]
	Vector MinOutput;//[Offset: 0x58 , Size: 12]
	Vector MaxOutput;//[Offset: 0x64 , Size: 12]
	byte ParamModes;//[Offset: 0x70 , Size: 1]

--------------------------------
Class: DistributionVectorParticleParameter.DistributionVectorParameterBase.DistributionVectorConstant.DistributionVector.Distribution.Object

--------------------------------
Class: DistributionVectorUniform.DistributionVector.Distribution.Object
	Vector Max;//[Offset: 0x24 , Size: 12]
	Vector Min;//[Offset: 0x30 , Size: 12]
	bool bLockAxes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	byte LockedAxes;//[Offset: 0x3d , Size: 1]
	byte MirrorFlags;//[Offset: 0x3e , Size: 1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x41 , Size: 1]

--------------------------------
Class: DistributionVectorUniformCurve.DistributionVector.Distribution.Object
	InterpCurveTwoVectors ConstantCurve;//[Offset: 0x24 , Size: 20]
	bool bLockAxes1;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bLockAxes2;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	byte LockedAxes;//[Offset: 0x39 , Size: 1]
	byte MirrorFlags;//[Offset: 0x3b , Size: 1]
	bool bUseExtremes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3e , Size: 1]

--------------------------------
Class: InterpCurveTwoVectors
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: DocumentationActor.Actor.Object

--------------------------------
Class: DPICustomScalingRule.Object

--------------------------------
Class: DrawSphereComponent.SphereComponent.ShapeComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: DynamicAtlasTexture2D.Texture2D.Texture.Object

--------------------------------
Class: EdGraph.Object
	class EdGraphSchema* Schema;//[Offset: 0x1c , Size: 4]
	Nodes(ObjectProperty)[] Nodes;//[Offset: 0x20 , Size: 12]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	bool bAllowDeletion;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c , Size: 1]
	bool bAllowRenaming;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c , Size: 1]

--------------------------------
Class: EdGraphSchema.Object

--------------------------------
Class: EdGraphNode_Documentation.EdGraphNode.Object
	FString link;//[Offset: 0x74 , Size: 12]
	FString Excerpt;//[Offset: 0x80 , Size: 12]

--------------------------------
Class: EdGraphPin_Deprecated.Object
	FString PinName;//[Offset: 0x1c , Size: 12]
	FString PinToolTip;//[Offset: 0x28 , Size: 12]
	byte Direction;//[Offset: 0x34 , Size: 1]
	EdGraphPinType PinType;//[Offset: 0x38 , Size: 104]
	FString DefaultValue;//[Offset: 0xa0 , Size: 12]
	FString AutogeneratedDefaultValue;//[Offset: 0xac , Size: 12]
	Object* DefaultObject;//[Offset: 0xb8 , Size: 4]
	FText DefaultTextValue;//[Offset: 0xbc , Size: 12]
	LinkedTo(ObjectProperty)[] LinkedTo;//[Offset: 0xc8 , Size: 12]
	SubPins(ObjectProperty)[] SubPins;//[Offset: 0xd4 , Size: 12]
	EdGraphPin_Deprecated* ParentPin;//[Offset: 0xe0 , Size: 4]
	EdGraphPin_Deprecated* ReferencePassThroughConnection;//[Offset: 0xe4 , Size: 4]

--------------------------------
Class: EdGraphPinType
	FString PinCategory;//[Offset: 0x0 , Size: 12]
	FString PinSubCategory;//[Offset: 0xc , Size: 12]
	Object* PinSubCategoryObject;//[Offset: 0x18 , Size: 8]
	SimpleMemberReference PinSubCategoryMemberReference;//[Offset: 0x20 , Size: 32]
	EdGraphTerminalType PinValueType;//[Offset: 0x40 , Size: 36]
	enum ContainerType;//[Offset: 0x64 , Size: 1]
	bool bIsArray;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65 , Size: 1]
	bool bIsReference;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x65 , Size: 1]
	bool bIsConst;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x65 , Size: 1]
	bool bIsWeakPointer;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x65 , Size: 1]

--------------------------------
Class: SimpleMemberReference
	Object* MemberParent;//[Offset: 0x0 , Size: 4]
	FName MemberName;//[Offset: 0x8 , Size: 8]
	Guid MemberGuid;//[Offset: 0x10 , Size: 16]

--------------------------------
Class: EdGraphTerminalType
	FString TerminalCategory;//[Offset: 0x0 , Size: 12]
	FString TerminalSubCategory;//[Offset: 0xc , Size: 12]
	Object* TerminalSubCategoryObject;//[Offset: 0x18 , Size: 8]
	bool bTerminalIsConst;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bTerminalIsWeakPointer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]

--------------------------------
Class: Emitter.Actor.Object
	ParticleSystemComponent* ParticleSystemComponent;//[Offset: 0x2c4 , Size: 4]
	bool bDestroyOnSystemFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	bool bPostUpdateTickGroup;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8 , Size: 1]
	bool bCurrentlyActive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c8 , Size: 1]
	delegate OnParticleSpawn;//[Offset: 0x2cc , Size: 12]
	delegate OnParticleBurst;//[Offset: 0x2d8 , Size: 12]
	delegate OnParticleDeath;//[Offset: 0x2e4 , Size: 12]
	delegate OnParticleCollide;//[Offset: 0x2f0 , Size: 12]
	function ToggleActive();// 0x3686ef0
	function SetVectorParameter();// 0x3686e30
	function SetTemplate();// 0x16e6f24
	function SetMaterialParameter();// 0x3686d74
	function SetFloatParameter();// 0x3686cb0
	function SetColorParameter();// 0x3686be8
	function SetActorParameter();// 0x3686b2c
	function OnRep_bCurrentlyActive();// 0x16e6e40
	function OnParticleSystemFinished();// 0x16a817c
	function IsActive();// 0x3686b04
	function Deactivate();// 0x3686af0
	function Activate();// 0x3686adc

--------------------------------
Class: EmitterCameraLensEffectBase.Emitter.Actor.Object
	ParticleSystem* PS_CameraEffect;//[Offset: 0x2fc , Size: 4]
	ParticleSystem* PS_CameraEffectNonExtremeContent;//[Offset: 0x300 , Size: 4]
	PlayerCameraManager* BaseCamera;//[Offset: 0x304 , Size: 4]
	Transform RelativeTransform;//[Offset: 0x310 , Size: 48]
	float BaseFOV;//[Offset: 0x340 , Size: 4]
	bool bAllowMultipleInstances;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x344 , Size: 1]
	bool bResetWhenRetriggered;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x344 , Size: 1]
	EmittersToTreatAsSame(ClassProperty)[] EmittersToTreatAsSame;//[Offset: 0x348 , Size: 12]
	float DistFromCamera;//[Offset: 0x354 , Size: 4]

--------------------------------
Class: EndUserSettings.Object
	bool bSendAnonymousUsageDataToEpic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bSendMeanTimeBetweenFailureDataToEpic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	bool bAllowUserIdInUsageData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22 , Size: 1]

--------------------------------
Class: EngineBaseTypes.Object

--------------------------------
Class: HandlerComponentFactory.Object

--------------------------------
Class: EngineHandlerComponentFactory.HandlerComponentFactory.Object

--------------------------------
Class: EngineMessage.LocalMessage.Object
	FString FailedPlaceMessage;//[Offset: 0x1c , Size: 12]
	FString MaxedOutMessage;//[Offset: 0x28 , Size: 12]
	FString EnteredMessage;//[Offset: 0x34 , Size: 12]
	FString LeftMessage;//[Offset: 0x40 , Size: 12]
	FString GlobalNameChange;//[Offset: 0x4c , Size: 12]
	FString SpecEnteredMessage;//[Offset: 0x58 , Size: 12]
	FString NewPlayerMessage;//[Offset: 0x64 , Size: 12]
	FString NewSpecMessage;//[Offset: 0x70 , Size: 12]

--------------------------------
Class: EngineTypes.Object

--------------------------------
Class: ExponentialHeightFog.Info.Actor.Object
	ExponentialHeightFogComponent* Component;//[Offset: 0x2c4 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	function OnRep_bEnabled();// 0x16f99b4

--------------------------------
Class: ExponentialHeightFogComponent.SceneComponent.ActorComponent.Object
	float FogDensity;//[Offset: 0x260 , Size: 4]
	CustomHightFogDensity(StructProperty)[] CustomHightFogDensity;//[Offset: 0x264 , Size: 12]
	bool bUseCustomFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	float CustomFogLow_Height;//[Offset: 0x274 , Size: 4]
	float CustomFogLow_DensityCoefficient;//[Offset: 0x278 , Size: 4]
	LinearColor CustomFogLow_Color;//[Offset: 0x27c , Size: 16]
	float CustomFogHigh_Height;//[Offset: 0x28c , Size: 4]
	float CustomFogHigh_DensityCoefficient;//[Offset: 0x290 , Size: 4]
	LinearColor CustomFogHigh_Color;//[Offset: 0x294 , Size: 16]
	LinearColor FogInscatteringColor;//[Offset: 0x2a4 , Size: 16]
	TextureCube* InscatteringColorCubemap;//[Offset: 0x2b4 , Size: 4]
	float InscatteringColorCubemapAngle;//[Offset: 0x2b8 , Size: 4]
	LinearColor InscatteringTextureTint;//[Offset: 0x2bc , Size: 16]
	float FullyDirectionalInscatteringColorDistance;//[Offset: 0x2cc , Size: 4]
	float NonDirectionalInscatteringColorDistance;//[Offset: 0x2d0 , Size: 4]
	float DirectionalInscatteringExponent;//[Offset: 0x2d4 , Size: 4]
	float DirectionalInscatteringStartDistance;//[Offset: 0x2d8 , Size: 4]
	LinearColor DirectionalInscatteringColor;//[Offset: 0x2dc , Size: 16]
	float FogHeightFalloff;//[Offset: 0x2ec , Size: 4]
	float FogMaxOpacity;//[Offset: 0x2f0 , Size: 4]
	float StartDistance;//[Offset: 0x2f4 , Size: 4]
	float FogCutoffDistance;//[Offset: 0x2f8 , Size: 4]
	bool bEnableVolumetricFog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2fc , Size: 1]
	float VolumetricFogScatteringDistribution;//[Offset: 0x300 , Size: 4]
	Color VolumetricFogAlbedo;//[Offset: 0x304 , Size: 4]
	LinearColor VolumetricFogEmissive;//[Offset: 0x308 , Size: 16]
	float VolumetricFogExtinctionScale;//[Offset: 0x318 , Size: 4]
	float VolumetricFogDistance;//[Offset: 0x31c , Size: 4]
	float VolumetricFogStaticLightingScatteringIntensity;//[Offset: 0x320 , Size: 4]
	bool bOverrideLightColorsWithFogInscatteringColors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	float VolumetricFogStartDistance;//[Offset: 0x328 , Size: 4]
	function SetVolumetricFogStartDistance();// 0x3693ed8
	function SetVolumetricFogScatteringDistribution();// 0x3693e60
	function SetVolumetricFogExtinctionScale();// 0x3693de8
	function SetVolumetricFogEmissive();// 0x3693d6c
	function SetVolumetricFogDistance();// 0x3693cf4
	function SetVolumetricFogAlbedo();// 0x3693c84
	function SetVolumetricFog();// 0x3693c04
	function SetStartDistance();// 0x3693b8c
	function SetNonDirectionalInscatteringColorDistance();// 0x3693b14
	function SetInscatteringTextureTint();// 0x3693a98
	function SetInscatteringColorCubemapAngle();// 0x3693a20
	function SetInscatteringColorCubemap();// 0x36939a8
	function SetFullyDirectionalInscatteringColorDistance();// 0x3693930
	function SetFogMaxOpacity();// 0x36938b8
	function SetFogInscatteringColor();// 0x369383c
	function SetFogHeightFalloff();// 0x36937c4
	function SetFogDensity();// 0x3657688
	function SetFogCutoffDistance();// 0x369374c
	function SetDirectionalInscatteringStartDistance();// 0x36936d4
	function SetDirectionalInscatteringExponent();// 0x369365c
	function SetDirectionalInscatteringColor();// 0x36935e0
	function SetCustomFogInscatteringColor();// 0x3693520
	function SetCustomFogDensityCoefficient();// 0x3693464

--------------------------------
Class: Exporter.Object
	class Object* SupportedClass;//[Offset: 0x1c , Size: 4]
	Object* ExportRootScope;//[Offset: 0x20 , Size: 4]
	FormatExtension(StrProperty)[] FormatExtension;//[Offset: 0x24 , Size: 12]
	FormatDescription(StrProperty)[] FormatDescription;//[Offset: 0x30 , Size: 12]
	int PreferredFormatIndex;//[Offset: 0x3c , Size: 4]
	int TextIndent;//[Offset: 0x40 , Size: 4]
	bool bText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bSelectedOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	bool bForceFileOperations;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x44 , Size: 1]

--------------------------------
Class: FastMergeableActor.Actor.Object

--------------------------------
Class: FontFace.Object
	FString SourceFilename;//[Offset: 0x20 , Size: 12]
	enum Hinting;//[Offset: 0x2c , Size: 1]
	enum LoadingPolicy;//[Offset: 0x2d , Size: 1]
	enum LayoutMethod;//[Offset: 0x2e , Size: 1]

--------------------------------
Class: FontImportOptions.Object
	FontImportOptionsData Data;//[Offset: 0x1c , Size: 144]

--------------------------------
Class: ForceFeedbackAttenuation.Object
	ForceFeedbackAttenuationSettings Attenuation;//[Offset: 0x1c , Size: 124]

--------------------------------
Class: ForceFeedbackAttenuationSettings.BaseAttenuationSettings

--------------------------------
Class: ForceFeedbackComponent.SceneComponent.ActorComponent.Object
	ForceFeedbackEffect* ForceFeedbackEffect;//[Offset: 0x260 , Size: 4]
	bool bAutoDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x264 , Size: 1]
	bool bStopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x264 , Size: 1]
	bool bLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x264 , Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x264 , Size: 1]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x264 , Size: 1]
	float IntensityMultiplier;//[Offset: 0x268 , Size: 4]
	ForceFeedbackAttenuation* AttenuationSettings;//[Offset: 0x26c , Size: 4]
	ForceFeedbackAttenuationSettings AttenuationOverrides;//[Offset: 0x270 , Size: 124]
	delegate OnForceFeedbackFinished;//[Offset: 0x2ec , Size: 12]
	function Stop();// 0x16e6028
	function SetIntensityMultiplier();// 0x3695a08
	function SetForceFeedbackEffect();// 0x3695990
	function Play();// 0x17624f0
	function BP_GetAttenuationSettingsToApply();// 0x3695790
	function AdjustAttenuation();// 0x36955a0

--------------------------------
Class: ForceFeedbackEffect.Object
	ChannelDetails(StructProperty)[] ChannelDetails;//[Offset: 0x1c , Size: 12]
	float Duration;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: GameEngine.Engine.Object
	float MaxDeltaTime;//[Offset: 0xa48 , Size: 4]
	float ServerFlushLogInterval;//[Offset: 0xa4c , Size: 4]
	GameInstance* GameInstance;//[Offset: 0xa50 , Size: 4]

--------------------------------
Class: GameMode.GameModeBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x318 , Size: 8]
	bool bDelayedStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x320 , Size: 1]
	int NumSpectators;//[Offset: 0x324 , Size: 4]
	int NumPlayers;//[Offset: 0x328 , Size: 4]
	int NumBots;//[Offset: 0x32c , Size: 4]
	float MinRespawnDelay;//[Offset: 0x330 , Size: 4]
	int NumTravellingPlayers;//[Offset: 0x334 , Size: 4]
	class LocalMessage* EngineMessageClass;//[Offset: 0x338 , Size: 4]
	InactivePlayerArray(ObjectProperty)[] InactivePlayerArray;//[Offset: 0x33c , Size: 12]
	float InactivePlayerStateLifeSpan;//[Offset: 0x348 , Size: 4]
	bool bHandleDedicatedServerReplays;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c , Size: 1]
	function StartMatch();// 0x3696b0c
	function SetBandwidthLimit();// 0x3696a8c
	function Say();// 0x36969c8
	function RestartGame();// 0x36969ac
	function ReadyToStartMatch();// 0x369697c
	function ReadyToEndMatch();// 0x369694c
	function K2_OnSetMatchState();// 0x206ccd8
	function IsMatchInProgress();// 0x369691c
	function HasMatchEnded();// 0x18479f4
	function GetMatchState();// 0x36968f8
	function EndMatch();// 0x36968dc
	function AbortMatch();// 0x36968c0

--------------------------------
Class: GameplayStatics.BlueprintFunctionLibrary.Object
	function UnloadStreamLevel();// 0x36a4340
	function UnloadAllStreamLevel();// 0x36a42c4
	function SuggestProjectileVelocity_CustomArc();// 0x36a40d4
	function SpawnSoundAttached();// 0x36a3cc0
	function SpawnSoundAtLocation();// 0x36a39bc
	function SpawnSound2D();// 0x36a374c
	function SpawnObject();// 0x36a3690
	function SpawnForceFeedbackAttached();// 0x36a32d4
	function SpawnForceFeedbackAtLocation();// 0x36a3010
	function SpawnEmitterAttached();// 0x36a2d60
	function SpawnEmitterAtLocation();// 0x36a2b84
	function SpawnDialogueAttached();// 0x36a2734
	function SpawnDialogueAtLocation();// 0x36a23dc
	function SpawnDialogue2D();// 0x36a2164
	function SpawnDecalAttached();// 0x36a1ed4
	function SpawnDecalAtLocation();// 0x36a1cf8
	function SetWorldOriginLocation();// 0x36a1c4c
	function SetSubtitlesEnabled();// 0x36a1bd4
	function SetSoundMixClassOverride();// 0x36a19b8
	function SetPlayerControllerID();// 0x36a1904
	function SetGlobalTimeDilation();// 0x36a1850
	function SetGlobalPitchModulation();// 0x36a1758
	function SetGlobalListenerFocusParameters();// 0x36a14b4
	function SetGamePaused();// 0x36a13f0
	function SetBaseSoundMix();// 0x36a133c
	function SaveGameToSlot();// 0x36a11f8
	function RemovePlayer();// 0x36a113c
	function RebaseZeroOriginOntoLocal();// 0x36a106c
	function RebaseLocalOriginOntoZero();// 0x36a0f9c
	function PushSoundMixModifier();// 0x36a0ee8
	function ProjectWorldToScreen();// 0x36a0d7c
	function PopSoundMixModifier();// 0x36a0cc8
	function PlayWorldCameraShake();// 0x36a0aa8
	function PlaySoundAtLocation();// 0x36a07b4
	function PlaySound2D();// 0x36a05a4
	function PlayDialogueAtLocation();// 0x36a02ac
	function PlayDialogue2D();// 0x36a008c
	function ParseOption();// 0x369fe30
	function OpenShaderCodeLibrary();// 0x369fc5c
	function OpenLevel();// 0x369fa20
	function MakeHitResult();// 0x369f480
	function LoadStreamLevel();// 0x369f2a0
	function LoadGameFromSlot();// 0x369f1a0
	function IsGamePaused();// 0x369f128
	function HasOption();// 0x369ef4c
	function HasLaunchOption();// 0x369ee90
	function GrassOverlappingSphereCount();// 0x369ed48
	function GetWorldOriginLocation();// 0x369ecb8
	function GetWorldDeltaSeconds();// 0x369ec40
	function GetUnpausedTimeSeconds();// 0x369ebc8
	function GetTimeSeconds();// 0x369eb50
	function GetSurfaceType();// 0x369eab4
	function GetStreamingLevel();// 0x369e9f8
	function GetRealTimeSeconds();// 0x369e980
	function GetPlayerPawn();// 0x369e8c4
	function GetPlayerControllerID();// 0x369e84c
	function GetPlayerController();// 0x369e790
	function GetPlayerCharacter();// 0x369e6d4
	function GetPlayerCameraManager();// 0x369e618
	function GetPlatformName();// 0x369e560
	function GetPlatformInt();// 0x369e538
	function GetObjectClass();// 0x369e4c0
	function GetKeyValue();// 0x369e2e0
	function GetIntOption();// 0x369e15c
	function GetGlobalTimeDilation();// 0x369e0e4
	function GetGameState();// 0x369e06c
	function GetGameMode();// 0x369dff4
	function GetGameInstance();// 0x369df7c
	function GetCurrentReverbEffect();// 0x369df04
	function GetCurrentLevelName();// 0x369ddb8
	function GetAudioTimeSeconds();// 0x369dd40
	function GetAllActorsWithTag();// 0x369dbec
	function GetAllActorsWithInterface();// 0x369daa0
	function GetAllActorsOfClass();// 0x369d954
	function GetActorArrayBounds();// 0x369d798
	function GetActorArrayAverageLocation();// 0x369d6bc
	function GetAccurateRealTime();// 0x369d5a0
	function FlushLevelStreaming();// 0x369d530
	function FinishSpawningActor();// 0x369d410
	function FindCollisionUV();// 0x369d2e0
	function EnableLiveStreaming();// 0x369d268
	function DoesSaveGameExist();// 0x369d168
	function DeprojectScreenToWorld();// 0x369cff8
	function DeleteGameInSlot();// 0x369cef8
	function DeactivateReverbEffect();// 0x369ce44
	function CreateSound2D();// 0x369cbd4
	function CreateSaveGameObjectFromBlueprint();// 0x369cb5c
	function CreateSaveGameObject();// 0x369cae4
	function CreatePlayer();// 0x369c9dc
	function ClearSoundMixModifiers();// 0x369c96c
	function ClearSoundMixClassOverride();// 0x369c830
	function CancelAsyncLoading();// 0x369c81c
	function BreakHitResult();// 0x369c1e0
	function BlueprintSuggestProjectileVelocity();// 0x369bec4
	function Blueprint_PredictProjectilePath_ByTraceChannel();// 0x369b890
	function Blueprint_PredictProjectilePath_ByObjectType();// 0x369b294
	function Blueprint_PredictProjectilePath_Advanced();// 0x369b034
	function Blueprint_PredictBulletPath_ByTraceChannel();// 0x369aa40
	function BeginSpawningActorFromClass();// 0x369a840
	function BeginSpawningActorFromBlueprint();// 0x369a690
	function BeginDeferredActorSpawnFromClass();// 0x369a4a0
	function AreSubtitlesEnabled();// 0x369a46c
	function AreAnyListenersWithinRange();// 0x369a36c
	function ApplyRadialDamageWithFalloff();// 0x3699f84
	function ApplyRadialDamage();// 0x3699c28
	function ApplyPointDamage();// 0x36999e0
	function ApplyDamage();// 0x3699854
	function ActivateReverbEffect();// 0x3699680

--------------------------------
Class: GameState.GameStateBase.Info.Actor.Object
	FName MatchState;//[Offset: 0x2f8 , Size: 8]
	FName PreviousMatchState;//[Offset: 0x300 , Size: 8]
	int ElapsedTime;//[Offset: 0x308 , Size: 4]
	function OnRep_MatchState();// 0x1891918
	function OnRep_ElapsedTime();// 0x1752180

--------------------------------
Class: SpotLight.Light.Actor.Object
	SpotLightComponent* SpotLightComponent;//[Offset: 0x2cc , Size: 4]
	function SetOuterConeAngle();// 0x3793f68
	function SetInnerConeAngle();// 0x3793ef0

--------------------------------
Class: SpotLightComponent.PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float InnerConeAngle;//[Offset: 0x390 , Size: 4]
	float OuterConeAngle;//[Offset: 0x394 , Size: 4]
	float LightShaftConeAngle;//[Offset: 0x398 , Size: 4]
	function SetOuterConeAngle();// 0x3794410
	function SetInnerConeAngle();// 0x3794398

--------------------------------
Class: PointLightComponent.LightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x35c , Size: 4]
	float AttenuationRadius;//[Offset: 0x360 , Size: 4]
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x364 , Size: 1]
	float LightFalloffExponent;//[Offset: 0x368 , Size: 4]
	float SourceRadius;//[Offset: 0x36c , Size: 4]
	float SoftSourceRadius;//[Offset: 0x370 , Size: 4]
	float SourceLength;//[Offset: 0x374 , Size: 4]
	bool bSimulateRectLight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x378 , Size: 1]
	bool bSimulatePortalLight;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x378 , Size: 1]
	float RectLightSourceWidth;//[Offset: 0x37c , Size: 4]
	float RectLightSourceHeight;//[Offset: 0x380 , Size: 4]
	LightmassPointLightSettings LightmassSettings;//[Offset: 0x384 , Size: 12]
	function SetSourceRadius();// 0x3760fa0
	function SetSourceLength();// 0x3760f28
	function SetSoftSourceRadius();// 0x3760eb0
	function SetSimulateRectLight();// 0x3760e30
	function SetSimulatePortalLight();// 0x3760db0
	function SetRectLightSourceWidth();// 0x3760d38
	function SetRectLightSourceHeight();// 0x3760cc0
	function SetLightFalloffExponent();// 0x3760c48
	function SetAttenuationRadius();// 0x3760bd0

--------------------------------
Class: LightmassPointLightSettings.LightmassLightSettings

--------------------------------
Class: GeneratedMeshAreaLight.SpotLight.Light.Actor.Object

--------------------------------
Class: HapticFeedbackEffect_Base.Object

--------------------------------
Class: HapticFeedbackEffect_Buffer.HapticFeedbackEffect_Base.Object
	Amplitudes(ByteProperty)[] Amplitudes;//[Offset: 0x1c , Size: 12]
	int SampleRate;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: HapticFeedbackEffect_Curve.HapticFeedbackEffect_Base.Object
	HapticFeedbackDetails_Curve HapticDetails;//[Offset: 0x1c , Size: 176]

--------------------------------
Class: HapticFeedbackDetails_Curve
	RuntimeFloatCurve Frequency;//[Offset: 0x0 , Size: 88]
	RuntimeFloatCurve Amplitude;//[Offset: 0x58 , Size: 88]

--------------------------------
Class: HapticFeedbackEffect_SoundWave.HapticFeedbackEffect_Base.Object
	SoundWave* SoundWave;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SoundWave.SoundBase.Object
	int CompressionQuality;//[Offset: 0x6c , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70 , Size: 1]
	bool bStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70 , Size: 1]
	int StreamingPriority;//[Offset: 0x74 , Size: 4]
	bool bMature;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x78 , Size: 1]
	bool bManualWordWrap;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x78 , Size: 1]
	bool bSingleLine;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x78 , Size: 1]
	bool bVirtualizeWhenSilent;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x78 , Size: 1]
	byte SoundGroup;//[Offset: 0x7a , Size: 1]
	FString SpokenText;//[Offset: 0x7c , Size: 12]
	float SubtitlePriority;//[Offset: 0x88 , Size: 4]
	float Volume;//[Offset: 0x8c , Size: 4]
	float Pitch;//[Offset: 0x90 , Size: 4]
	int NumChannels;//[Offset: 0x94 , Size: 4]
	int SampleRate;//[Offset: 0x98 , Size: 4]
	int RawPCMDataSize;//[Offset: 0x9c , Size: 4]
	Subtitles(StructProperty)[] Subtitles;//[Offset: 0xa0 , Size: 12]
	LocalizedSubtitles(StructProperty)[] LocalizedSubtitles;//[Offset: 0xac , Size: 12]
	CurveTable* Curves;//[Offset: 0xb8 , Size: 4]
	CurveTable* InternalCurves;//[Offset: 0xbc , Size: 4]

--------------------------------
Class: InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	PerInstanceSMData(StructProperty)[] PerInstanceSMData;//[Offset: 0x60c , Size: 12]
	int InstancingRandomSeed;//[Offset: 0x618 , Size: 4]
	int InstanceStartCullDistance;//[Offset: 0x61c , Size: 4]
	int InstanceEndCullDistance;//[Offset: 0x620 , Size: 4]
	InstanceReorderTable(IntProperty)[] InstanceReorderTable;//[Offset: 0x624 , Size: 12]
	RemovedInstances(IntProperty)[] RemovedInstances;//[Offset: 0x630 , Size: 12]
	bool UseDynamicInstanceBuffer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c , Size: 1]
	bool KeepInstanceBufferCPUAccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d , Size: 1]
	PhysicsSerializer* PhysicsSerializer;//[Offset: 0x69c , Size: 4]
	int NumPendingLightmaps;//[Offset: 0x6a4 , Size: 4]
	CachedMappings(StructProperty)[] CachedMappings;//[Offset: 0x6a8 , Size: 12]
	function UpdateInstanceTransform();// 0x36b4850
	function SetCullDistances();// 0x36b4794
	function RemoveInstance();// 0x36b470c
	function HideInstance();// 0x36b4630
	function GetInstanceTransform();// 0x36b44c0
	function GetInstancesOverlappingSphere();// 0x36b430c
	function GetInstancesOverlappingBox();// 0x36b4174
	function GetInstanceCount();// 0x36b414c
	function ClearInstances();// 0x36b4130
	function AddInstanceWorldSpace();// 0x36b4050
	function AddInstance();// 0x36b3f60

--------------------------------
Class: PhysicsSerializer.Object

--------------------------------
Class: HierarchicalInstancedStaticMeshComponent.InstancedStaticMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SortedInstances(IntProperty)[] SortedInstances;//[Offset: 0x6bc , Size: 12]
	int NumBuiltInstances;//[Offset: 0x6c8 , Size: 4]
	Box BuiltInstanceBounds;//[Offset: 0x6d0 , Size: 28]
	Box UnbuiltInstanceBounds;//[Offset: 0x6ec , Size: 28]
	UnbuiltInstanceBoundsList(StructProperty)[] UnbuiltInstanceBoundsList;//[Offset: 0x708 , Size: 12]
	UnbuiltInstanceIndexList(IntProperty)[] UnbuiltInstanceIndexList;//[Offset: 0x714 , Size: 12]
	bool bEnableDensityScaling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x720 , Size: 1]
	int OcclusionLayerNumNodes;//[Offset: 0x740 , Size: 4]
	BoxSphereBounds CacheMeshExtendedBounds;//[Offset: 0x744 , Size: 28]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765 , Size: 1]
	int MinInstancesToSplitNode;//[Offset: 0x768 , Size: 4]
	function RemoveInstances();// 0x36aa720

--------------------------------
Class: ImportanceSamplingLibrary.BlueprintFunctionLibrary.Object
	function RandomSobolFloat();// 0x36af58c
	function RandomSobolCell3D();// 0x36af430
	function RandomSobolCell2D();// 0x36af2e0
	function NextSobolFloat();// 0x36af1e0
	function NextSobolCell3D();// 0x36af0cc
	function NextSobolCell2D();// 0x36aefc0
	function MakeImportanceTexture();// 0x36aed7c
	function ImportanceSample();// 0x36aea28
	function BreakImportanceTexture();// 0x36ae858

--------------------------------
Class: ImportantToggleSettingInterface.Interface.Object

--------------------------------
Class: InGameAdManager.PlatformInterfaceBase.Object
	bool bShouldPauseWhileAdOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	ClickedBannerDelegates(DelegateProperty)[] ClickedBannerDelegates;//[Offset: 0x2c , Size: 12]
	ClosedAdDelegates(DelegateProperty)[] ClosedAdDelegates;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: InputActionDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	InputActionDelegateBindings(StructProperty)[] InputActionDelegateBindings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: InputAxisDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	InputAxisDelegateBindings(StructProperty)[] InputAxisDelegateBindings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	InputAxisKeyDelegateBindings(StructProperty)[] InputAxisKeyDelegateBindings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: InputKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	InputKeyDelegateBindings(StructProperty)[] InputKeyDelegateBindings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: InputSettings.Object
	AxisConfig(StructProperty)[] AxisConfig;//[Offset: 0x1c , Size: 12]
	bool bAltEnterTogglesFullscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	bool bF11TogglesFullscreen;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28 , Size: 1]
	bool bUseMouseForTouch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x28 , Size: 1]
	bool bEnableMouseSmoothing;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x28 , Size: 1]
	bool bEnableFOVScaling;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x28 , Size: 1]
	float FOVScale;//[Offset: 0x2c , Size: 4]
	float DoubleClickTime;//[Offset: 0x30 , Size: 4]
	bool bCaptureMouseOnLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	enum DefaultViewportMouseCaptureMode;//[Offset: 0x35 , Size: 1]
	bool bDefaultViewportMouseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36 , Size: 1]
	enum DefaultViewportMouseLockMode;//[Offset: 0x37 , Size: 1]
	ActionMappings(StructProperty)[] ActionMappings;//[Offset: 0x38 , Size: 12]
	AxisMappings(StructProperty)[] AxisMappings;//[Offset: 0x44 , Size: 12]
	bool bAlwaysShowTouchInterface;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]
	bool bShowConsoleOnFourFingerTap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51 , Size: 1]
	SoftObjectPath DefaultTouchInterface;//[Offset: 0x58 , Size: 24]
	Key ConsoleKey;//[Offset: 0x70 , Size: 16]
	ConsoleKeys(StructProperty)[] ConsoleKeys;//[Offset: 0x80 , Size: 12]
	function SaveKeyMappings();// 0x36b3578
	function RemoveAxisMapping();// 0x36b3284
	function RemoveActionMapping();// 0x36b2f88
	function GetInputSettings();// 0x36b2f60
	function GetAxisNames();// 0x36b2e94
	function GetAxisMappingByName();// 0x36b2c3c
	function GetActionNames();// 0x36b2b70
	function GetActionMappingByName();// 0x36b2918
	function ForceRebuildKeymaps();// 0x36b2904
	function AddAxisMapping();// 0x36b2610
	function AddActionMapping();// 0x36b2314

--------------------------------
Class: Key
	FName KeyName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: InputTouchDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object
	InputTouchDelegateBindings(StructProperty)[] InputTouchDelegateBindings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: InputVectorAxisDelegateBinding.InputAxisKeyDelegateBinding.InputDelegateBinding.DynamicBlueprintBinding.Object

--------------------------------
Class: Interface_AssetUserData.Interface.Object

--------------------------------
Class: Interface_CollisionDataProvider.Interface.Object

--------------------------------
Class: Interface_PostProcessVolume.Interface.Object

--------------------------------
Class: InterpData.Object
	float InterpLength;//[Offset: 0x1c , Size: 4]
	float PathBuildTime;//[Offset: 0x20 , Size: 4]
	InterpGroups(ObjectProperty)[] InterpGroups;//[Offset: 0x24 , Size: 12]
	InterpCurveEdSetup* CurveEdSetup;//[Offset: 0x30 , Size: 4]
	float EdSectionStart;//[Offset: 0x34 , Size: 4]
	float EdSectionEnd;//[Offset: 0x38 , Size: 4]
	bool bShouldBakeAndPrune;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	InterpGroupDirector* CachedDirectorGroup;//[Offset: 0x40 , Size: 4]
	AllEventNames(NameProperty)[] AllEventNames;//[Offset: 0x44 , Size: 12]

--------------------------------
Class: InterpGroupDirector.InterpGroup.Object

--------------------------------
Class: InterpFilter.Object
	FString Caption;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: InterpFilter_Classes.InterpFilter.Object

--------------------------------
Class: InterpFilter_Custom.InterpFilter.Object

--------------------------------
Class: InterpGroupCamera.InterpGroup.Object
	CameraAnim* CameraAnimInst;//[Offset: 0x40 , Size: 4]
	float CompressTolerance;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: InterpGroupInstCamera.InterpGroupInst.Object

--------------------------------
Class: InterpGroupInstDirector.InterpGroupInst.Object

--------------------------------
Class: InterpToMovementComponent.MovementComponent.ActorComponent.Object
	float Duration;//[Offset: 0xf4 , Size: 4]
	bool bPauseOnImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xf8 , Size: 1]
	enum BehaviourType;//[Offset: 0xf9 , Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfa , Size: 1]
	delegate OnInterpToReverse;//[Offset: 0xfc , Size: 12]
	delegate OnInterpToStop;//[Offset: 0x108 , Size: 12]
	delegate OnWaitBeginDelegate;//[Offset: 0x114 , Size: 12]
	delegate OnWaitEndDelegate;//[Offset: 0x120 , Size: 12]
	delegate OnResetDelegate;//[Offset: 0x12c , Size: 12]
	float MaxSimulationTimeStep;//[Offset: 0x138 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x13c , Size: 4]
	ControlPoints(StructProperty)[] ControlPoints;//[Offset: 0x140 , Size: 12]
	function StopSimulating();// 0x36b7864
	function RestartMovement();// 0x36b77ec
	function OnInterpToWaitEndDelegate__DelegateSignature();// 0x206ccd8
	function OnInterpToWaitBeginDelegate__DelegateSignature();// 0x206ccd8
	function OnInterpToStopDelegate__DelegateSignature();// 0x206ccd8
	function OnInterpToReverseDelegate__DelegateSignature();// 0x206ccd8
	function OnInterpToResetDelegate__DelegateSignature();// 0x206ccd8
	function FinaliseControlPoints();// 0x36b77d8

--------------------------------
Class: InterpTrackFloatBase.InterpTrack.Object
	InterpCurveFloat FloatTrack;//[Offset: 0x48 , Size: 20]
	float CurveTension;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: InterpTrackAnimControl.InterpTrackFloatBase.InterpTrack.Object
	FName SlotName;//[Offset: 0x60 , Size: 8]
	AnimSeqs(StructProperty)[] AnimSeqs;//[Offset: 0x68 , Size: 12]
	bool bSkipAnimNotifiers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74 , Size: 1]

--------------------------------
Class: InterpTrackVectorBase.InterpTrack.Object
	InterpCurveVector VectorTrack;//[Offset: 0x48 , Size: 20]
	float CurveTension;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: InterpTrackAudioMaster.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackBoolProp.InterpTrack.Object
	BoolTrack(StructProperty)[] BoolTrack;//[Offset: 0x48 , Size: 12]
	FName PropertyName;//[Offset: 0x58 , Size: 8]

--------------------------------
Class: InterpTrackColorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60 , Size: 8]

--------------------------------
Class: InterpTrackColorScale.InterpTrackVectorBase.InterpTrack.Object

--------------------------------
Class: InterpTrackDirector.InterpTrack.Object
	CutTrack(StructProperty)[] CutTrack;//[Offset: 0x48 , Size: 12]
	bool bSimulateCameraCutsOnClients;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]

--------------------------------
Class: InterpTrackEvent.InterpTrack.Object
	EventTrack(StructProperty)[] EventTrack;//[Offset: 0x48 , Size: 12]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54 , Size: 1]
	bool bUseCustomEventName;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54 , Size: 1]

--------------------------------
Class: InterpTrackFade.InterpTrackFloatBase.InterpTrack.Object
	bool bPersistFade;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	bool bFadeAudio;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60 , Size: 1]
	LinearColor FadeColor;//[Offset: 0x64 , Size: 16]

--------------------------------
Class: InterpTrackFloatAnimBPParam.InterpTrackFloatBase.InterpTrack.Object
	class Object* AnimBlueprintClass;//[Offset: 0x60 , Size: 4]
	class AnimInstance* AnimClass;//[Offset: 0x64 , Size: 4]
	FName ParamName;//[Offset: 0x68 , Size: 8]

--------------------------------
Class: InterpTrackFloatMaterialParam.InterpTrackFloatBase.InterpTrack.Object
	TargetMaterials(ObjectProperty)[] TargetMaterials;//[Offset: 0x60 , Size: 12]
	FName ParamName;//[Offset: 0x70 , Size: 8]

--------------------------------
Class: InterpTrackFloatParticleParam.InterpTrackFloatBase.InterpTrack.Object
	FName ParamName;//[Offset: 0x60 , Size: 8]

--------------------------------
Class: InterpTrackFloatProp.InterpTrackFloatBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60 , Size: 8]

--------------------------------
Class: InterpTrackInstAnimControl.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInstAudioMaster.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstProperty.InterpTrackInst.Object
	Property* InterpProperty;//[Offset: 0x1c , Size: 4]
	Object* PropertyOuterObjectInst;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: InterpTrackInstBoolProp.InterpTrackInstProperty.InterpTrackInst.Object
	BoolProperty* BoolProperty;//[Offset: 0x28 , Size: 4]
	bool ResetBool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c , Size: 1]

--------------------------------
Class: InterpTrackInstColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Color ResetColor;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: InterpTrackInstColorScale.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstEvent.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInstFade.InterpTrackInst.Object

--------------------------------
Class: InterpTrackInstFloatAnimBPParam.InterpTrackInst.Object
	AnimInstance* AnimScriptInstance;//[Offset: 0x1c , Size: 4]
	float ResetFloat;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: InterpTrackInstFloatMaterialParam.InterpTrackInst.Object
	MaterialInstances(ObjectProperty)[] MaterialInstances;//[Offset: 0x1c , Size: 12]
	ResetFloats(FloatProperty)[] ResetFloats;//[Offset: 0x28 , Size: 12]
	PrimitiveMaterialRefs(StructProperty)[] PrimitiveMaterialRefs;//[Offset: 0x34 , Size: 12]
	InterpTrackFloatMaterialParam* InstancedTrack;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: InterpTrackInstFloatParticleParam.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInstFloatProp.InterpTrackInstProperty.InterpTrackInst.Object
	float ResetFloat;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: InterpTrackInstLinearColorProp.InterpTrackInstProperty.InterpTrackInst.Object
	LinearColor ResetColor;//[Offset: 0x28 , Size: 16]

--------------------------------
Class: InterpTrackInstParticleReplay.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInstSlomo.InterpTrackInst.Object
	float OldTimeDilation;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: InterpTrackInstSound.InterpTrackInst.Object
	float LastUpdatePosition;//[Offset: 0x1c , Size: 4]
	AudioComponent* PlayAudioComp;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: InterpTrackInstToggle.InterpTrackInst.Object
	byte Action;//[Offset: 0x1c , Size: 1]
	float LastUpdatePosition;//[Offset: 0x20 , Size: 4]
	bool bSavedActiveState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24 , Size: 1]

--------------------------------
Class: InterpTrackInstVectorMaterialParam.InterpTrackInst.Object
	MaterialInstances(ObjectProperty)[] MaterialInstances;//[Offset: 0x1c , Size: 12]
	ResetVectors(StructProperty)[] ResetVectors;//[Offset: 0x28 , Size: 12]
	PrimitiveMaterialRefs(StructProperty)[] PrimitiveMaterialRefs;//[Offset: 0x34 , Size: 12]
	InterpTrackVectorMaterialParam* InstancedTrack;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: InterpTrackVectorMaterialParam.InterpTrackVectorBase.InterpTrack.Object
	TargetMaterials(ObjectProperty)[] TargetMaterials;//[Offset: 0x60 , Size: 12]
	FName ParamName;//[Offset: 0x70 , Size: 8]

--------------------------------
Class: InterpTrackInstVectorProp.InterpTrackInstProperty.InterpTrackInst.Object
	Vector ResetVector;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: InterpTrackInstVisibility.InterpTrackInst.Object
	byte Action;//[Offset: 0x1c , Size: 1]
	float LastUpdatePosition;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: InterpTrackLinearColorBase.InterpTrack.Object
	InterpCurveLinearColor LinearColorTrack;//[Offset: 0x48 , Size: 20]
	float CurveTension;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: InterpCurveLinearColor
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: InterpTrackLinearColorProp.InterpTrackLinearColorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60 , Size: 8]

--------------------------------
Class: InterpTrackMoveAxis.InterpTrackFloatBase.InterpTrack.Object
	byte MoveAxis;//[Offset: 0x60 , Size: 1]
	InterpLookupTrack LookupTrack;//[Offset: 0x64 , Size: 12]

--------------------------------
Class: InterpTrackParticleReplay.InterpTrack.Object
	TrackKeys(StructProperty)[] TrackKeys;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: InterpTrackSlomo.InterpTrackFloatBase.InterpTrack.Object

--------------------------------
Class: InterpTrackSound.InterpTrackVectorBase.InterpTrack.Object
	Sounds(StructProperty)[] Sounds;//[Offset: 0x60 , Size: 12]
	bool bPlayOnReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	bool bContinueSoundOnMatineeEnd;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c , Size: 1]
	bool bSuppressSubtitles;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c , Size: 1]
	bool bTreatAsDialogue;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c , Size: 1]
	bool bAttach;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c , Size: 1]

--------------------------------
Class: InterpTrackToggle.InterpTrack.Object
	ToggleTrack(StructProperty)[] ToggleTrack;//[Offset: 0x48 , Size: 12]
	bool bActivateSystemEachUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bActivateWithJustAttachedFlag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x54 , Size: 1]

--------------------------------
Class: InterpTrackVectorProp.InterpTrackVectorBase.InterpTrack.Object
	FName PropertyName;//[Offset: 0x60 , Size: 8]

--------------------------------
Class: InterpTrackVisibility.InterpTrack.Object
	VisibilityTrack(StructProperty)[] VisibilityTrack;//[Offset: 0x48 , Size: 12]
	bool bFireEventsWhenForwards;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenBackwards;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	bool bFireEventsWhenJumpingForwards;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x54 , Size: 1]

--------------------------------
Class: IntSerialization.Object
	uint16 UnsignedInt16Variable;//[Offset: 0x1c , Size: 2]
	uint32 UnsignedInt32Variable;//[Offset: 0x20 , Size: 4]
	uint64 UnsignedInt64Variable;//[Offset: 0x28 , Size: 8]
	int8 SignedInt8Variable;//[Offset: 0x30 , Size: 1]
	int16 SignedInt16Variable;//[Offset: 0x32 , Size: 2]
	int64 SignedInt64Variable;//[Offset: 0x38 , Size: 8]
	byte UnsignedInt8Variable;//[Offset: 0x40 , Size: 1]
	int SignedInt32Variable;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: KillZVolume.PhysicsVolume.Volume.Brush.Actor.Object

--------------------------------
Class: KismetArrayLibrary.BlueprintFunctionLibrary.Object
	function SetArrayPropertyByName();// 0x36be718
	function FilterArray();// 0x36be578
	function Array_Swap();// 0x36be430
	function Array_Shuffle();// 0x36be37c
	function Array_Set();// 0x36be104
	function Array_Resize();// 0x36be000
	function Array_RemoveItem();// 0x36bde38
	function Array_Remove();// 0x36bdd34
	function Array_Length();// 0x36bdc78
	function Array_LastIndex();// 0x36bdbbc
	function Array_IsValidIndex();// 0x36bdab0
	function Array_Insert();// 0x36bd890
	function Array_Get();// 0x36bd674
	function Array_Find();// 0x36bd4ac
	function Array_Contains();// 0x36bd2dc
	function Array_Clear();// 0x36bd228
	function Array_Append();// 0x36bd0f0
	function Array_AddUnique();// 0x36bcf10
	function Array_Add();// 0x36bcd30

--------------------------------
Class: KismetGuidLibrary.BlueprintFunctionLibrary.Object
	function Parse_StringToGuid();// 0x36bf3f0
	function NotEqual_GuidGuid();// 0x36bf300
	function NewGuid();// 0x36bf2c4
	function IsValid_Guid();// 0x36bf234
	function Invalidate_Guid();// 0x36bf1ac
	function EqualEqual_GuidGuid();// 0x36bf0bc
	function Conv_GuidToString();// 0x36befa4

--------------------------------
Class: KismetInputLibrary.BlueprintFunctionLibrary.Object
	function PointerEvent_TouchForce();// 0x36c4160
	function PointerEvent_IsTouchEvent();// 0x36c3f34
	function PointerEvent_IsMouseButtonDown();// 0x36c3a50
	function PointerEvent_GetWheelDelta();// 0x36c3820
	function PointerEvent_GetUserIndex();// 0x36c35f4
	function PointerEvent_GetTouchpadIndex();// 0x36c33c8
	function PointerEvent_GetScreenSpacePosition();// 0x36c3194
	function PointerEvent_GetPointerIndex();// 0x36c2f68
	function PointerEvent_GetLastScreenSpacePosition();// 0x36c2d34
	function PointerEvent_GetGestureType();// 0x36c2b08
	function PointerEvent_GetGestureDelta();// 0x36c28d4
	function PointerEvent_GetEffectingButton();// 0x36c24dc
	function PointerEvent_GetCursorDelta();// 0x36c22a8
	function Key_IsVectorAxis();// 0x36c2104
	function Key_IsMouseButton();// 0x36c1f60
	function Key_IsModifierKey();// 0x36c1dbc
	function Key_IsKeyboardKey();// 0x36c1c18
	function Key_IsGamepadKey();// 0x36c1a74
	function Key_IsFloatAxis();// 0x36c18d0
	function Key_GetDisplayName();// 0x36c1610
	function InputEvent_IsShiftDown();// 0x36c1568
	function InputEvent_IsRightShiftDown();// 0x36c14c0
	function InputEvent_IsRightControlDown();// 0x36c1418
	function InputEvent_IsRightCommandDown();// 0x36c1370
	function InputEvent_IsRightAltDown();// 0x36c12c8
	function InputEvent_IsRepeat();// 0x36c1220
	function InputEvent_IsLeftShiftDown();// 0x36c1178
	function InputEvent_IsLeftControlDown();// 0x36c10d0
	function InputEvent_IsLeftCommandDown();// 0x36c1028
	function InputEvent_IsLeftAltDown();// 0x36c0f80
	function InputEvent_IsControlDown();// 0x36c0ed8
	function InputEvent_IsCommandDown();// 0x36c0e30
	function InputEvent_IsAltDown();// 0x36c0d88
	function GetUserIndex();// 0x36c0b8c
	function GetKey();// 0x36c07c4
	function GetAnalogValue();// 0x36c05c0
	function EqualEqual_KeyKey();// 0x36c0028
	function EqualEqual_InputChordInputChord();// 0x36bfa38
	function CalibrateTilt();// 0x36bfa24

--------------------------------
Class: KismetInternationalizationLibrary.BlueprintFunctionLibrary.Object
	function SetCurrentLocale();// 0x36c5860
	function SetCurrentLanguageAndLocale();// 0x36c5758
	function SetCurrentLanguage();// 0x36c5650
	function SetCurrentCulture();// 0x36c5548
	function SetCurrentAssetGroupCulture();// 0x36c53f8
	function GetCurrentLocale();// 0x36c5340
	function GetCurrentLanguage();// 0x36c5288
	function GetCurrentCulture();// 0x36c5288
	function GetCurrentAssetGroupCulture();// 0x36c5184
	function ClearCurrentAssetGroupCulture();// 0x36c50c4

--------------------------------
Class: KismetMaterialLibrary.BlueprintFunctionLibrary.Object
	function SetVectorParameterValue();// 0x36c62a8
	function SetScalarParameterValue();// 0x36c6164
	function GetVectorParameterValue();// 0x36c6050
	function GetScalarParameterValue();// 0x36c5f50
	function CreateDynamicMaterialInstance();// 0x36c5e94

--------------------------------
Class: KismetMathLibrary.BlueprintFunctionLibrary.Object
	function Xor_IntInt();// 0x36db834
	function VSizeSquared();// 0x36db7ac
	function VSize2DSquared();// 0x36db730
	function VSize2D();// 0x36db698
	function VSize();// 0x36db5f4
	function VLerp();// 0x36db4cc
	function VInterpTo_Constant();// 0x36db360
	function VInterpTo();// 0x36db1f8
	function VectorSpringInterp();// 0x36daf88
	function Vector2DInterpTo_Constant();// 0x36dae34
	function Vector2DInterpTo();// 0x36dace0
	function VEase();// 0x36daae8
	function UtcNow();// 0x36daab0
	function TransformRotation();// 0x36da980
	function TransformLocation();// 0x36da7a0
	function TransformDirection();// 0x36da5d0
	function Today();// 0x36da570
	function TLerp();// 0x36da360
	function TInterpTo();// 0x36da150
	function TimespanZeroValue();// 0x36ca550
	function TimespanRatio();// 0x36da06c
	function TimespanMinValue();// 0x36da04c
	function TimespanMaxValue();// 0x36da02c
	function TimespanFromString();// 0x36d9e80
	function TEase();// 0x36d9be0
	function Tan();// 0x36d9b5c
	function Subtract_VectorVector();// 0x36d9a90
	function Subtract_VectorInt();// 0x36d99c0
	function Subtract_VectorFloat();// 0x36d98f4
	function Subtract_Vector2DVector2D();// 0x36d9838
	function Subtract_Vector2DFloat();// 0x36d9778
	function Subtract_TimespanTimespan();// 0x36d9558
	function Subtract_IntInt();// 0x36d96c0
	function Subtract_FloatFloat();// 0x36d9604
	function Subtract_DateTimeTimespan();// 0x36d9558
	function Subtract_DateTimeDateTime();// 0x36d9558
	function Subtract_ByteByte();// 0x36d949c
	function Square();// 0x36d9424
	function Sqrt();// 0x36d9378
	function Sin();// 0x36d9300
	function SignOfInteger();// 0x36d9280
	function SignOfFloat();// 0x36d91ec
	function SetRandomStreamSeed();// 0x36d9120
	function SelectVector();// 0x36d8bd8
	function SelectTransform();// 0x36d8f70
	function SelectString();// 0x36d8d0c
	function SelectRotator();// 0x36d8bd8
	function SelectObject();// 0x36d89b0
	function SelectInt();// 0x36d89b0
	function SelectFloat();// 0x36d89b0
	function SelectColor();// 0x36d8ab8
	function SelectClass();// 0x36d89b0
	function SeedRandomStream();// 0x36d892c
	function Round();// 0x36d88a0
	function RotatorFromAxisAndAngle();// 0x36d87d4
	function RotateAngleAxis();// 0x36d86bc
	function RLerp();// 0x36d855c
	function RInterpTo_Constant();// 0x36d83f4
	function RInterpTo();// 0x36d828c
	function RGBToHSV_Vector();// 0x36d81b4
	function RGBToHSV();// 0x36d7fc8
	function ResetVectorSpringState();// 0x36d7f20
	function ResetRandomStream();// 0x36d7e9c
	function ResetFloatSpringState();// 0x36d7e18
	function REase();// 0x36d7bd0
	function RandomUnitVectorInEllipticalConeInRadiansFromStream();// 0x36d7a54
	function RandomUnitVectorInEllipticalConeInRadians();// 0x36d7940
	function RandomUnitVectorInEllipticalConeInDegreesFromStream();// 0x36d77ac
	function RandomUnitVectorInEllipticalConeInDegrees();// 0x36d7688
	function RandomUnitVectorInConeInRadiansFromStream();// 0x36d7554
	function RandomUnitVectorInConeInRadians();// 0x36d7480
	function RandomUnitVectorInConeInDegreesFromStream();// 0x36d733c
	function RandomUnitVectorInConeInDegrees();// 0x36d7258
	function RandomUnitVectorFromStream();// 0x36d71bc
	function RandomUnitVector();// 0x36d717c
	function RandomRotatorFromStream();// 0x36d7090
	function RandomRotator();// 0x36d7000
	function RandomPointInBoundingBox();// 0x36d6ec8
	function RandomIntegerInRangeFromStream();// 0x36d6db4
	function RandomIntegerInRange();// 0x36d6cb0
	function RandomIntegerFromStream();// 0x36d6be0
	function RandomInteger();// 0x36d6b28
	function RandomFloatInRangeFromStream();// 0x36d6a14
	function RandomFloatInRange();// 0x36d6930
	function RandomFloatFromStream();// 0x36d68a4
	function RandomFloat();// 0x36d6868
	function RandomBoolWithWeightFromStream();// 0x36d6798
	function RandomBoolWithWeight();// 0x36d6720
	function RandomBoolFromStream();// 0x36d6694
	function RandomBool();// 0x36d6640
	function RadiansToDegrees();// 0x36d65c0
	function ProjectVectorOnToVector();// 0x36d6494
	function ProjectVectorOnToPlane();// 0x36d63a8
	function ProjectPointOnToPlane();// 0x36d626c
	function PointsAreCoplanar();// 0x36d6158
	function Percent_IntInt();// 0x36d6088
	function Percent_FloatFloat();// 0x36d5ec8
	function Percent_ByteByte();// 0x36d5df8
	function Or_IntInt();// 0x36d5d3c
	function Now();// 0x36d5d04
	function NotEqual_VectorVector();// 0x36d5bc4
	function NotEqual_Vector2DVector2D();// 0x36d5aa0
	function NotEqual_TimespanTimespan();// 0x36d562c
	function NotEqual_RotatorRotator();// 0x36d5870
	function NotEqual_ObjectObject();// 0x36d556c
	function NotEqual_NameName();// 0x36d57a8
	function NotEqual_IntInt();// 0x36d556c
	function NotEqual_FloatFloat();// 0x36d56e0
	function NotEqual_DateTimeDateTime();// 0x36d562c
	function NotEqual_ClassClass();// 0x36d556c
	function NotEqual_ByteByte();// 0x36d54a8
	function NotEqual_BoolBool();// 0x36c796c
	function Not_PreBool();// 0x36d5428
	function Not_Int();// 0x36d53b0
	function NormalizeToRange();// 0x36d52b0
	function NormalizedDeltaRotator();// 0x36d51e0
	function NormalizeAxis();// 0x36d5168
	function Normal2D();// 0x36d5094
	function Normal();// 0x36d4f78
	function NegateVector();// 0x36d4ef0
	function NegateRotator();// 0x36d4e60
	function NearlyEqual_TransformTransform();// 0x36d4c30
	function NearlyEqual_FloatFloat();// 0x36d4b1c
	function MultiplyMultiply_FloatFloat();// 0x36d4a60
	function MultiplyByPi();// 0x36d49e0
	function Multiply_VectorVector();// 0x36d4914
	function Multiply_VectorInt();// 0x36d45f4
	function Multiply_VectorFloat();// 0x36d4528
	function Multiply_Vector2DVector2D();// 0x36d4858
	function Multiply_Vector2DFloat();// 0x36d4798
	function Multiply_TimespanFloat();// 0x36d46c4
	function Multiply_RotatorInt();// 0x36d45f4
	function Multiply_RotatorFloat();// 0x36d4528
	function Multiply_LinearColorLinearColor();// 0x36d4470
	function Multiply_LinearColorFloat();// 0x36d43b4
	function Multiply_IntInt();// 0x36d42f8
	function Multiply_IntFloat();// 0x36d4238
	function Multiply_FloatFloat();// 0x36d417c
	function Multiply_ByteByte();// 0x36d40c0
	function MirrorVectorByNormal();// 0x36d3fe4
	function MinOfIntArray();// 0x36d3e70
	function MinOfFloatArray();// 0x36d3cfc
	function MinOfByteArray();// 0x36d3b88
	function MinimumAreaRectangle();// 0x36d3888
	function Min();// 0x36d37cc
	function MaxOfIntArray();// 0x36d3658
	function MaxOfFloatArray();// 0x36d34e4
	function MaxOfByteArray();// 0x36d3370
	function Max();// 0x36d32b4
	function MapRangeUnclamped();// 0x36d3128
	function MapRangeClamped();// 0x36d2f9c
	function MakeVector2D();// 0x36d2ee4
	function MakeVector();// 0x36d2de8
	function MakeTransform();// 0x36d2cbc
	function MakeTimespan2();// 0x36d2b24
	function MakeTimespan();// 0x36d298c
	function MakeRotFromZY();// 0x36d2890
	function MakeRotFromZX();// 0x36d2794
	function MakeRotFromZ();// 0x36d26ec
	function MakeRotFromYZ();// 0x36d25f0
	function MakeRotFromYX();// 0x36d24f4
	function MakeRotFromY();// 0x36d244c
	function MakeRotFromXZ();// 0x36d2350
	function MakeRotFromXY();// 0x36d2254
	function MakeRotFromX();// 0x36d21ac
	function MakeRotator();// 0x36d20ac
	function MakeRotationFromAxes();// 0x36d1f98
	function MakeRandomStream();// 0x36d1f18
	function MakePulsatingValue();// 0x36d1e18
	function MakePlaneFromPointAndNormal();// 0x36d1d48
	function MakeDateTime();// 0x36d1b20
	function MakeColor();// 0x36d19e0
	function MakeBox2D();// 0x36d192c
	function MakeBox();// 0x36d1868
	function Loge();// 0x36d17f0
	function Log();// 0x36d1734
	function LinePlaneIntersection_OriginNormal();// 0x36d1518
	function LinePlaneIntersection();// 0x36d1338
	function LinearColorLerpUsingHSV();// 0x36d1220
	function LinearColorLerp();// 0x36d111c
	function LessLess_VectorRotator();// 0x36d1040
	function LessEqual_TimespanTimespan();// 0x36d0df8
	function LessEqual_IntInt();// 0x36d0f80
	function LessEqual_FloatFloat();// 0x36d0eb8
	function LessEqual_DateTimeDateTime();// 0x36d0df8
	function LessEqual_ByteByte();// 0x36d0d34
	function Less_TimespanTimespan();// 0x36d0aec
	function Less_IntInt();// 0x36d0c74
	function Less_FloatFloat();// 0x36d0bac
	function Less_DateTimeDateTime();// 0x36d0aec
	function Less_ByteByte();// 0x36d0a28
	function Lerp();// 0x36d0920
	function IsPointInBoxWithTransform();// 0x36d07c0
	function IsPointInBox();// 0x36d06c0
	function IsMorning();// 0x36d062c
	function IsLeapYear();// 0x36d05b4
	function IsAfternoon();// 0x36d0520
	function InvertTransform();// 0x36d0300
	function InverseTransformRotation();// 0x36d01d0
	function InverseTransformLocation();// 0x36cffa0
	function InverseTransformDirection();// 0x36cfdc0
	function InverseLerp();// 0x36cfcb4
	function InRange_IntInt();// 0x36cfb14
	function InRange_FloatFloat();// 0x36cf974
	function Hypotenuse();// 0x36cf8b8
	function HSVToRGB_Vector();// 0x36cf7e0
	function HSVToRGB();// 0x36cf684
	function GridSnap_Float();// 0x36cf58c
	function GreaterGreater_VectorRotator();// 0x36cf4b0
	function GreaterEqual_TimespanTimespan();// 0x36cf268
	function GreaterEqual_IntInt();// 0x36cf3f0
	function GreaterEqual_FloatFloat();// 0x36cf328
	function GreaterEqual_DateTimeDateTime();// 0x36cf268
	function GreaterEqual_ByteByte();// 0x36cf1a4
	function Greater_TimespanTimespan();// 0x36cef5c
	function Greater_IntInt();// 0x36cf0e4
	function Greater_FloatFloat();// 0x36cf01c
	function Greater_DateTimeDateTime();// 0x36cef5c
	function Greater_ByteByte();// 0x36cee98
	function GetYear();// 0x36cee1c
	function GetYawPitchFromVector();// 0x36ced00
	function GetVectorArrayAverage();// 0x36cec24
	function GetUpVector();// 0x36ceba0
	function GetTotalSeconds();// 0x36ceb18
	function GetTotalMinutes();// 0x36cea90
	function GetTotalMilliseconds();// 0x36cea08
	function GetTotalHours();// 0x36ce980
	function GetTotalDays();// 0x36ce8f8
	function GetTimeOfDay();// 0x36ce874
	function GetTAU();// 0x36ce854
	function GetSeconds();// 0x36ce7cc
	function GetSecond();// 0x36ce7cc
	function GetRightVector();// 0x36ce748
	function GetReflectionVector();// 0x36ce678
	function GetPointDistanceToSegment();// 0x36ce560
	function GetPointDistanceToLine();// 0x36ce448
	function GetPI();// 0x36ce428
	function GetMonth();// 0x36ce3ac
	function GetMinutes();// 0x36ce324
	function GetMinute();// 0x36ce324
	function GetMinElement();// 0x36ce298
	function GetMilliseconds();// 0x36ce208
	function GetMillisecond();// 0x36ce184
	function GetMaxElement();// 0x36ce0f8
	function GetHours();// 0x36cdff4
	function GetHour12();// 0x36ce07c
	function GetHour();// 0x36cdff4
	function GetForwardVector();// 0x36cdf70
	function GetDuration();// 0x36cdef4
	function GetDirectionUnitVector();// 0x36cdda0
	function GetDays();// 0x36cdd24
	function GetDayOfYear();// 0x36cdca8
	function GetDay();// 0x36cdc2c
	function GetDate();// 0x36cdba0
	function GetAzimuthAndElevation();// 0x36cd9e0
	function GetAxes();// 0x36cd86c
	function FTruncVector();// 0x36cd7cc
	function FTrunc();// 0x36cd754
	function FromSeconds();// 0x36cd6d4
	function FromMinutes();// 0x36cd654
	function FromMilliseconds();// 0x36cd5d4
	function FromHours();// 0x36cd554
	function FromDays();// 0x36cd4d4
	function Fraction();// 0x36cd454
	function FMod();// 0x36cd344
	function FMin();// 0x36cd280
	function FMax();// 0x36cd1bc
	function FloatSpringInterp();// 0x36ccf88
	function FixedTurn();// 0x36cce88
	function FInterpTo_Constant();// 0x36ccd44
	function FInterpTo();// 0x36ccc00
	function FInterpEaseInOut();// 0x36ccabc
	function FindNearestPointsOnLineSegments();// 0x36cc8c0
	function FindLookAtRotation();// 0x36cc794
	function FindClosestPointOnSegment();// 0x36cc664
	function FindClosestPointOnLine();// 0x36cc550
	function FFloor();// 0x36cc4d0
	function FClamp();// 0x36cc3bc
	function FCeil();// 0x36cc33c
	function Exp();// 0x36cc2c4
	function EqualEqual_VectorVector();// 0x36cc184
	function EqualEqual_Vector2DVector2D();// 0x36cc060
	function EqualEqual_TransformTransform();// 0x36cbef0
	function EqualEqual_TimespanTimespan();// 0x36cba6c
	function EqualEqual_RotatorRotator();// 0x36cbcb8
	function EqualEqual_ObjectObject();// 0x36cb9ac
	function EqualEqual_NameName();// 0x36cbbec
	function EqualEqual_IntInt();// 0x36cb9ac
	function EqualEqual_FloatFloat();// 0x36cbb24
	function EqualEqual_DateTimeDateTime();// 0x36cba6c
	function EqualEqual_ClassClass();// 0x36cb9ac
	function EqualEqual_ByteByte();// 0x36cb8e8
	function EqualEqual_BoolBool();// 0x36cb814
	function Ease();// 0x36cb638
	function DotProduct2D();// 0x36cb57c
	function Dot_VectorVector();// 0x36cb4b0
	function Divide_VectorVector();// 0x36cb3a4
	function Divide_VectorInt();// 0x36cb2a0
	function Divide_VectorFloat();// 0x36cb1a0
	function Divide_Vector2DVector2D();// 0x36cb0a8
	function Divide_Vector2DFloat();// 0x36cafb0
	function Divide_TimespanFloat();// 0x36caedc
	function Divide_IntInt();// 0x36cae0c
	function Divide_FloatFloat();// 0x36cac50
	function Divide_ByteByte();// 0x36cab80
	function DegTan();// 0x36caaf8
	function DegSin();// 0x36caa70
	function DegreesToRadians();// 0x36ca9f0
	function DegCos();// 0x36ca968
	function DegAtan2();// 0x36ca89c
	function DegAtan();// 0x36ca814
	function DegAsin();// 0x36ca768
	function DegAcos();// 0x36ca6bc
	function DaysInYear();// 0x36ca644
	function DaysInMonth();// 0x36ca570
	function DateTimeMinValue();// 0x36ca550
	function DateTimeMaxValue();// 0x36ca528
	function DateTimeFromString();// 0x36ca37c
	function DateTimeFromIsoString();// 0x36ca1a8
	function CrossProduct2D();// 0x36ca0ec
	function Cross_VectorVector();// 0x36ca008
	function CreateVectorFromYawPitch();// 0x36c9ef8
	function Cos();// 0x36c9e80
	function ConvertTransformToRelative();// 0x36c9d00
	function Conv_VectorToVector2D();// 0x36c9c94
	function Conv_VectorToTransform();// 0x36c9be0
	function Conv_VectorToRotator();// 0x36c9b4c
	function Conv_VectorToLinearColor();// 0x36c9ac4
	function Conv_Vector2DToVector();// 0x36c9a10
	function Conv_RotatorToVector();// 0x36c9980
	function Conv_LinearColorToVector();// 0x36c9914
	function Conv_LinearColorToColor();// 0x36c9890
	function Conv_IntVectorToVector();// 0x36c97f0
	function Conv_IntToIntVector();// 0x36c9680
	function Conv_IntToFloat();// 0x36c9778
	function Conv_IntToByte();// 0x16ff1c4
	function Conv_IntToBool();// 0x36c96fc
	function Conv_FloatToVector();// 0x36c9680
	function Conv_FloatToLinearColor();// 0x36c95fc
	function Conv_ColorToLinearColor();// 0x36c957c
	function Conv_ByteToInt();// 0x1700fc0
	function Conv_ByteToFloat();// 0x36c9500
	function Conv_BoolToInt();// 0x36c9484
	function Conv_BoolToFloat();// 0x36c93fc
	function Conv_BoolToByte();// 0x36c9380
	function ComposeTransforms();// 0x36c9200
	function ComposeRotators();// 0x36c9128
	function ClassIsChildOf();// 0x36c906c
	function ClampVectorSize();// 0x36c8f58
	function ClampAxis();// 0x36c8ee0
	function ClampAngle();// 0x36c8de0
	function Clamp();// 0x36c8cd8
	function CInterpTo();// 0x36c8b78
	function BreakVector2D();// 0x36c8a60
	function BreakVector();// 0x36c88f0
	function BreakTransform();// 0x36c86e0
	function BreakTimespan2();// 0x36c84b4
	function BreakTimespan();// 0x36c8290
	function BreakRotIntoAxes();// 0x36c8118
	function BreakRotator();// 0x36c7fa8
	function BreakRandomStream();// 0x36c7ecc
	function BreakDateTime();// 0x36c7c00
	function BreakColor();// 0x36c7a38
	function BooleanXOR();// 0x36c796c
	function BooleanOR();// 0x36c78ac
	function BooleanNOR();// 0x36c77e8
	function BooleanNAND();// 0x36c7714
	function BooleanAND();// 0x36c7648
	function BMin();// 0x36c7588
	function BMax();// 0x36c74c8
	function Atan2();// 0x36c740c
	function Atan();// 0x36c7394
	function Asin();// 0x36c72f8
	function And_IntInt();// 0x36c723c
	function Add_VectorVector();// 0x36c7170
	function Add_VectorInt();// 0x36c70a0
	function Add_VectorFloat();// 0x36c6fd4
	function Add_Vector2DVector2D();// 0x36c6f18
	function Add_Vector2DFloat();// 0x36c6e58
	function Add_TimespanTimespan();// 0x36c6ce8
	function Add_IntInt();// 0x1765a70
	function Add_FloatFloat();// 0x36c6d9c
	function Add_DateTimeTimespan();// 0x36c6ce8
	function Add_ByteByte();// 0x36c6c2c
	function Acos();// 0x36c6b90
	function Abs_Int();// 0x36c6b14
	function Abs();// 0x36c6a9c

--------------------------------
Class: KismetNodeHelperLibrary.BlueprintFunctionLibrary.Object
	function MarkBit();// 0x36e3a24
	function HasUnmarkedBit();// 0x36e3968
	function HasMarkedBit();// 0x36e38ac
	function GetValidValue();// 0x36e37f0
	function GetUnmarkedBit();// 0x36e36a4
	function GetRandomUnmarkedBit();// 0x36e35a4
	function GetFirstUnmarkedBit();// 0x36e34a4
	function GetEnumeratorValueFromIndex();// 0x36e33e8
	function GetEnumeratorUserFriendlyName();// 0x36e32a4
	function GetEnumeratorName();// 0x36e31e0
	function ClearBit();// 0x36e3118
	function ClearAllBits();// 0x36e3098
	function BitIsMarked();// 0x36e2fdc

--------------------------------
Class: KismetRenderingLibrary.BlueprintFunctionLibrary.Object
	function RenderTargetCreateStaticTexture2DEditorOnly();// 0x36e52b0
	function ReleaseRenderTarget2D();// 0x36e5240
	function MakeSkinWeightInfo();// 0x36e4f94
	function ExportTexture2D();// 0x36e4dd4
	function ExportRenderTarget();// 0x36e4c14
	function EndDrawCanvasToRenderTarget();// 0x36e4b4c
	function DrawMaterialToRenderTarget();// 0x36e4a54
	function CreateRenderTarget2D();// 0x36e4910
	function ConvertRenderTargetToTexture2DEditorOnly();// 0x36e4818
	function ClearRenderTarget2D();// 0x36e4720
	function BreakSkinWeightInfo();// 0x36e4370
	function BeginDrawCanvasToRenderTarget();// 0x36e41b4

--------------------------------
Class: KismetStringLibrary.BlueprintFunctionLibrary.Object
	function TrimTrailing();// 0x36eb9b0
	function Trim();// 0x36eb874
	function ToUpper();// 0x36eb738
	function ToLower();// 0x36eb5fc
	function TimeSecondsToString();// 0x36eb4fc
	function StartsWith();// 0x36eb378
	function Split();// 0x36eb07c
	function RightPad();// 0x36eaefc
	function RightChop();// 0x36ead7c
	function Right();// 0x36eabfc
	function Reverse();// 0x36eaac0
	function ReplaceInline();// 0x36ea8a4
	function Replace();// 0x36ea618
	function ParseIntoArray();// 0x36ea36c
	function NotEqual_StrStr();// 0x36ea22c
	function NotEqual_StriStri();// 0x36ea0ec
	function Mid();// 0x36e9568
	function MatchesWildcard();// 0x36e9f68
	function Len();// 0x36e9eac
	function LeftPad();// 0x36e9d2c
	function LeftChop();// 0x36e9bac
	function Left();// 0x36e9a2c
	function JoinStringArray();// 0x36e97e8
	function IsNumeric();// 0x36e972c
	function GetSubstring();// 0x36e9568
	function GetCharacterAsNumber();// 0x36e9468
	function GetCharacterArrayFromString();// 0x36e928c
	function FindSubstring();// 0x36e9064
	function EqualEqual_StrStr();// 0x36e8f24
	function EqualEqual_StriStri();// 0x36e8de4
	function EndsWith();// 0x36e8c60
	function CullArray();// 0x36e8aa8
	function Conv_VectorToString();// 0x36e89ac
	function Conv_Vector2dToString();// 0x36e88b0
	function Conv_TransformToString();// 0x36e8750
	function Conv_StringToVector2D();// 0x36e85ec
	function Conv_StringToVector();// 0x36e8490
	function Conv_StringToRotator();// 0x36e8334
	function Conv_StringToName();// 0x36e8270
	function Conv_StringToInt();// 0x36e81b4
	function Conv_StringToFloat();// 0x36e80f4
	function Conv_StringToColor();// 0x36e7f98
	function Conv_RotatorToString();// 0x36e7e9c
	function Conv_ObjectToString();// 0x36e7d9c
	function Conv_NameToString();// 0x2ca9974
	function Conv_IntVectorToString();// 0x36e7ca0
	function Conv_IntToString();// 0x36e7ba0
	function Conv_FloatToString();// 0x36e7aa0
	function Conv_ColorToString();// 0x36e799c
	function Conv_ByteToString();// 0x36e789c
	function Conv_BoolToString();// 0x36e7794
	function Contains();// 0x36e75b8
	function Concat_StrStr();// 0x36e73f8
	function BuildString_Vector2d();// 0x36e7170
	function BuildString_Vector();// 0x36e6ee4
	function BuildString_Rotator();// 0x36e6c58
	function BuildString_Object();// 0x36e69cc
	function BuildString_Name();// 0x36e673c
	function BuildString_IntVector();// 0x36e64b0
	function BuildString_Int();// 0x36e6224
	function BuildString_Float();// 0x36e5f98
	function BuildString_Color();// 0x36e5d0c
	function BuildString_Bool();// 0x36e5a74

--------------------------------
Class: KismetStringTableLibrary.BlueprintFunctionLibrary.Object
	function IsRegisteredTableId();// 0x36ed82c
	function IsRegisteredTableEntry();// 0x36ed728
	function GetTableNamespace();// 0x36ed624
	function GetTableEntrySourceString();// 0x36ed49c
	function GetTableEntryMetaData();// 0x36ed2c0
	function GetRegisteredStringTables();// 0x36ed208
	function GetMetaDataIdsFromStringTableEntry();// 0x36ed080
	function GetKeysFromStringTable();// 0x36ecee0

--------------------------------
Class: KismetSystemLibrary.BlueprintFunctionLibrary.Object
	function UnregisterForRemoteNotifications();// 0x3702488
	function UnloadPrimaryAssetList();// 0x37023c4
	function UnloadPrimaryAsset();// 0x3702350
	function StackTrace();// 0x3702338
	function SphereTraceSingleForObjects();// 0x3701e20
	function SphereTraceSingleByProfile();// 0x370195c
	function SphereTraceSingle();// 0x37014a0
	function SphereTraceMultiForObjects();// 0x3700f58
	function SphereTraceMultiByProfile();// 0x3700a58
	function SphereTraceMulti();// 0x3700564
	function SphereOverlapComponents();// 0x3700250
	function SphereOverlapActors();// 0x36fff3c
	function ShowPlatformSpecificLeaderboardScreen();// 0x36ffe88
	function ShowPlatformSpecificAchievementsScreen();// 0x36ffe18
	function ShowInterstitialAd();// 0x36ffe04
	function ShowAdBanner();// 0x36ffd48
	function SetWindowTitle();// 0x36ffbac
	function SetVolumeButtonsHandledBySystem();// 0x36ffb34
	function SetVectorPropertyByName();// 0x36ffa28
	function SetUserActivity();// 0x36ff960
	function SetTransformPropertyByName();// 0x36ff800
	function SetTextPropertyByName();// 0x36ff5d8
	function SetSuppressViewportTransitionMessage();// 0x36ff51c
	function SetStructurePropertyByName();// 0x36fe8b8
	function SetStringPropertyByName();// 0x36ff3d8
	function SetSoftObjectPropertyByName();// 0x36ff264
	function SetSoftClassPropertyByName();// 0x36ff0f0
	function SetRotatorPropertyByName();// 0x36fefe4
	function SetObjectPropertyByName();// 0x36feee4
	function SetNamePropertyByName();// 0x36fedd0
	function SetLinearColorPropertyByName();// 0x36fecc4
	function SetIntPropertyByName();// 0x36febc4
	function SetInterfacePropertyByName();// 0x36feab0
	function SetFloatPropertyByName();// 0x36fe9b0
	function SetCollisionProfileNameProperty();// 0x36fe8b8
	function SetClassPropertyByName();// 0x36fe7b8
	function SetBytePropertyByName();// 0x36fe6b8
	function SetBoolPropertyByName();// 0x36fe5b0
	function RetriggerableDelay();// 0x36fe480
	function ResetGamepadAssignmentToController();// 0x36fe410
	function ResetGamepadAssignments();// 0x36fe3fc
	function RegisterForRemoteNotifications();// 0x36fe3e8
	function QuitGame();// 0x36fe2e8
	function PrintWarning();// 0x36fe234
	function PrintText();// 0x36fde20
	function PrintString();// 0x36fdbfc
	function PrintShippingString();// 0x36fd9d8
	function OnAssetLoaded__DelegateSignature();// 0x206ccd8
	function OnAssetClassLoaded__DelegateSignature();// 0x206ccd8
	function NotEqual_SoftObjectReference();// 0x36fd82c
	function NotEqual_SoftClassReference();// 0x36fd82c
	function NotEqual_PrimaryAssetType();// 0x2caadf8
	function NotEqual_PrimaryAssetId();// 0x36fd750
	function MoveComponentTo();// 0x36fd420
	function MakeSoftObjectPath();// 0x36fd314
	function MakeLiteralText();// 0x36fcf50
	function MakeLiteralString();// 0x36fcdbc
	function MakeLiteralName();// 0x36fcd48
	function MakeLiteralInt();// 0x36fccd4
	function MakeLiteralFloat();// 0x36fccd4
	function MakeLiteralByte();// 0x36fcc60
	function MakeLiteralBool();// 0x36c9380
	function LoadInterstitialAd();// 0x36fcbf0
	function LoadAssetClass();// 0x36fc950
	function LoadAsset();// 0x36fc6b0
	function LineTraceSingleForObjects();// 0x36fc1dc
	function LineTraceSingleByProfile();// 0x36fbd58
	function LineTraceSingle();// 0x36fb8d8
	function LineTraceMultiForObjects();// 0x36fb3d8
	function LineTraceMultiByProfile();// 0x36faf1c
	function LineTraceMulti();// 0x36faa6c
	function LaunchUrl();// 0x36fa9b8
	function K2_UnPauseTimerHandle();// 0x36fa900
	function K2_UnPauseTimerDelegate();// 0x36fa864
	function K2_UnPauseTimer();// 0x36fa6cc
	function K2_TimerExistsHandle();// 0x36fa60c
	function K2_TimerExistsDelegate();// 0x36fa568
	function K2_TimerExists();// 0x36fa3c8
	function K2_SetTimerDelegate();// 0x36fa288
	function K2_SetTimer();// 0x36fa048
	function K2_PauseTimerHandle();// 0x36f9f90
	function K2_PauseTimerDelegate();// 0x36f9ef4
	function K2_PauseTimer();// 0x36f9d5c
	function K2_IsValidTimerHandle();// 0x36f9ce0
	function K2_IsTimerPausedHandle();// 0x36f9c20
	function K2_IsTimerPausedDelegate();// 0x36f9b7c
	function K2_IsTimerPaused();// 0x36f99dc
	function K2_IsTimerActiveHandle();// 0x36f991c
	function K2_IsTimerActiveDelegate();// 0x36f9878
	function K2_IsTimerActive();// 0x36f96d8
	function K2_InvalidateTimerHandle();// 0x36f9644
	function K2_GetTimerRemainingTimeHandle();// 0x36f9584
	function K2_GetTimerRemainingTimeDelegate();// 0x36f94e0
	function K2_GetTimerRemainingTime();// 0x36f933c
	function K2_GetTimerElapsedTimeHandle();// 0x36f927c
	function K2_GetTimerElapsedTimeDelegate();// 0x36f91d8
	function K2_GetTimerElapsedTime();// 0x36f9034
	function K2_ClearTimerHandle();// 0x36f8f7c
	function K2_ClearTimerDelegate();// 0x36f8ee0
	function K2_ClearTimer();// 0x36f8d48
	function K2_ClearAndInvalidateTimerHandle();// 0x36f8c80
	function IsValidSoftObjectReference();// 0x36f8b90
	function IsValidSoftClassReference();// 0x36f8b90
	function IsValidPrimaryAssetType();// 0x2caa504
	function IsValidPrimaryAssetId();// 0x36f8b14
	function IsValidClass();// 0x36f8a70
	function IsValid();// 0x36f8a70
	function IsStandalone();// 0x36f89f8
	function IsServer();// 0x36f8980
	function IsPackagedForDistribution();// 0x1843b78
	function IsLoggedIn();// 0x36f8908
	function IsInterstitialAdRequested();// 0x36f88e0
	function IsInterstitialAdAvailable();// 0x36f88b8
	function IsDedicatedServer();// 0x36f8840
	function IsControllerAssignedToGamepad();// 0x36f87c8
	function HideAdBanner();// 0x36f87b4
	function GetVolumeButtonsHandledBySystem();// 0x36f878c
	function GetUniqueDeviceId();// 0x36f86d4
	function GetSupportedFullscreenResolutions();// 0x36f8608
	function GetSoftObjectReferenceFromPrimaryAssetId();// 0x36f8518
	function GetSoftClassReferenceFromPrimaryAssetId();// 0x36f8428
	function GetRenderingMaterialQualityLevel();// 0x36f8400
	function GetRenderingDetailMode();// 0x36f83d8
	function GetPrimaryAssetsWithBundleState();// 0x36f80f8
	function GetPrimaryAssetIdList();// 0x36f7fec
	function GetPrimaryAssetIdFromSoftObjectReference();// 0x36f7e60
	function GetPrimaryAssetIdFromSoftClassReference();// 0x36f7e60
	function GetPrimaryAssetIdFromObject();// 0x36f7ddc
	function GetPrimaryAssetIdFromClass();// 0x36f7d58
	function GetPreferredLanguages();// 0x36f7c04
	function GetPlatformUserName();// 0x36f7b4c
	function GetPathName();// 0x36f7a4c
	function GetObjectName();// 0x36e7d9c
	function GetObjectFromPrimaryAssetId();// 0x36f79d0
	function GetMinYResolutionForUI();// 0x36f79a8
	function GetMinYResolutionFor3DView();// 0x36f7980
	function GetLocalCurrencySymbol();// 0x36f78c8
	function GetLocalCurrencyCode();// 0x36f78c8
	function GetGameTimeInSeconds();// 0x369eb50
	function GetGameName();// 0x36f7810
	function GetGameBundleId();// 0x36f7758
	function GetEngineVersion();// 0x36f76a0
	function GetDisplayName();// 0x36f75a0
	function GetDeviceId();// 0x1b76b50
	function GetDefaultLocale();// 0x36f74e8
	function GetDefaultLanguage();// 0x36f7430
	function GetCurrentBundleState();// 0x36f72c4
	function GetConvenientWindowedResolutions();// 0x36f71f8
	function GetConsoleVariableIntValue();// 0x36f713c
	function GetConsoleVariableFloatValue();// 0x36f707c
	function GetConsoleVariableBoolValue();// 0x36f6fc0
	function GetComponentBounds();// 0x36f6e54
	function GetCommandLine();// 0x36f6d9c
	function GetClassFromPrimaryAssetId();// 0x36f6d20
	function GetClassDisplayName();// 0x36f6c20
	function GetAdIDCount();// 0x36f6bf8
	function GetActorListFromComponentList();// 0x36f6a58
	function GetActorBounds();// 0x36f6944
	function ForceCloseAdBanner();// 0x36f6930
	function FlushPersistentDebugLines();// 0x18441b8
	function FlushDebugStrings();// 0x18441b8
	function ExecuteConsoleCommand();// 0x36f67f4
	function EqualEqual_SoftObjectReference();// 0x36f6648
	function EqualEqual_SoftClassReference();// 0x36f6648
	function EqualEqual_PrimaryAssetType();// 0x2ca9514
	function EqualEqual_PrimaryAssetId();// 0x36f656c
	function DrawDebugString();// 0x36f634c
	function DrawDebugSphere();// 0x36f612c
	function DrawDebugPoint();// 0x36f5f94
	function DrawDebugPlane();// 0x36f5db0
	function DrawDebugLine();// 0x36f5bd0
	function DrawDebugFrustum();// 0x36f59e0
	function DrawDebugFloatHistoryTransform();// 0x36f5740
	function DrawDebugFloatHistoryLocation();// 0x36f54f4
	function DrawDebugCylinder();// 0x36f5284
	function DrawDebugCoordinateSystem();// 0x36f50b0
	function DrawDebugConeInDegrees();// 0x36f4db0
	function DrawDebugCone();// 0x36f4db0
	function DrawDebugCircle();// 0x36f4a88
	function DrawDebugCapsule();// 0x36f4814
	function DrawDebugCamera();// 0x36f4718
	function DrawDebugBox();// 0x36f44dc
	function DrawDebugArrow();// 0x36f42ac
	function DoesImplementInterface();// 0x36f41f0
	function Delay();// 0x36f40c0
	function CreateCopyForUndoBuffer();// 0x36f4050
	function Conv_SoftObjectReferenceToString();// 0x36f3df0
	function Conv_SoftObjectReferenceToObject();// 0x36f3f60
	function Conv_SoftClassReferenceToString();// 0x36f3df0
	function Conv_SoftClassReferenceToClass();// 0x36f3d00
	function Conv_PrimaryAssetTypeToString();// 0x2ca9974
	function Conv_PrimaryAssetIdToString();// 0x36f3bec
	function Conv_ObjectToSoftObjectReference();// 0x36f3b10
	function Conv_InterfaceToObject();// 0x36f3a84
	function Conv_ClassToSoftClassReference();// 0x36f3998
	function ControlScreensaver();// 0x36f3920
	function ComponentOverlapComponents();// 0x36f35f0
	function ComponentOverlapActors();// 0x36f32c0
	function CollectGarbage();// 0x36f32ac
	function CapsuleTraceSingleForObjects();// 0x36f2d4c
	function CapsuleTraceSingleByProfile();// 0x36f2840
	function CapsuleTraceSingle();// 0x36f2344
	function CapsuleTraceMultiForObjects();// 0x36f1dc4
	function CapsuleTraceMultiByProfile();// 0x36f187c
	function CapsuleTraceMulti();// 0x36f1344
	function CapsuleOverlapComponents();// 0x36f0fe8
	function CapsuleOverlapActors();// 0x36f0c8c
	function CanLaunchURL();// 0x36f0bd0
	function BreakSoftObjectPath();// 0x36f09d4
	function BoxTraceSingleForObjects();// 0x36f0430
	function BoxTraceSingleByProfile();// 0x36efed4
	function BoxTraceSingle();// 0x36ef988
	function BoxTraceMultiForObjects();// 0x36ef3b4
	function BoxTraceMultiByProfile();// 0x36eee28
	function BoxTraceMulti();// 0x36ee8ac
	function BoxOverlapComponents();// 0x36ee59c
	function BoxOverlapActors();// 0x36ee28c
	function AddFloatHistorySample();// 0x36ee0b0

--------------------------------
Class: KismetTextLibrary.BlueprintFunctionLibrary.Object
	function TextTrimTrailing();// 0x370c488
	function TextTrimPrecedingAndTrailing();// 0x370c1c8
	function TextTrimPreceding();// 0x370bf08
	function TextToUpper();// 0x370bc48
	function TextToLower();// 0x370b988
	function TextIsTransient();// 0x370b7e4
	function TextIsFromStringTable();// 0x370b640
	function TextIsEmpty();// 0x370b49c
	function TextIsCultureInvariant();// 0x370b2f8
	function TextFromStringTable();// 0x370b0d4
	function StringTableIdAndKeyFromText();// 0x370ad3c
	function NotEqual_TextText();// 0x370aa2c
	function NotEqual_IgnoreCase_TextText();// 0x370a71c
	function GetEmptyText();// 0x370a5c8
	function Format();// 0x370a11c
	function FindTextInLocalizationTable();// 0x3709e70
	function EqualEqual_TextText();// 0x3709b60
	function EqualEqual_IgnoreCase_TextText();// 0x3709850
	function Conv_VectorToText();// 0x37096b8
	function Conv_Vector2dToText();// 0x3709520
	function Conv_TransformToText();// 0x3709320
	function Conv_TextToString();// 0x37090f8
	function Conv_StringToText();// 0x3708f20
	function Conv_RotatorToText();// 0x3708d88
	function Conv_ObjectToText();// 0x3708bec
	function Conv_NameToText();// 0x3708a4c
	function Conv_IntToText();// 0x37087d4
	function Conv_FloatToText();// 0x3708488
	function Conv_ColorToText();// 0x37082e8
	function Conv_ByteToText();// 0x370814c
	function Conv_BoolToText();// 0x3707fa8
	function AsTimeZoneTime_DateTime();// 0x3707d7c
	function AsTimeZoneDateTime_DateTime();// 0x3707b50
	function AsTimeZoneDate_DateTime();// 0x3707924
	function AsTimespan_Timespan();// 0x370777c
	function AsTime_DateTime();// 0x37075d4
	function AsPercent_Float();// 0x3707288
	function AsDateTime_DateTime();// 0x37070e0
	function AsDate_DateTime();// 0x3706f38
	function AsCurrencyBase();// 0x3706d1c
	function AsCurrency_Integer();// 0x370694c
	function AsCurrency_Float();// 0x370657c

--------------------------------
Class: Layer.Object
	FName LayerName;//[Offset: 0x20 , Size: 8]
	bool bIsVisible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	ActorStats(StructProperty)[] ActorStats;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: LevelBounds.Actor.Object
	bool bAutoUpdateBounds;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]

--------------------------------
Class: LevelScriptBlueprint.Blueprint.BlueprintCore.Object

--------------------------------
Class: LevelStreaming.Object
	FName PackageName;//[Offset: 0x20 , Size: 8]
	World* WorldAsset;//[Offset: 0x28 , Size: 40]
	FName PackageNameToLoad;//[Offset: 0x50 , Size: 8]
	LODPackageNames(NameProperty)[] LODPackageNames;//[Offset: 0x58 , Size: 12]
	Transform LevelTransform;//[Offset: 0x70 , Size: 48]
	bool bShouldBeVisibleInEditor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa0 , Size: 1]
	bool bLocked;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa0 , Size: 1]
	bool bShouldBeLoaded;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa0 , Size: 1]
	bool bShouldBeVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa0 , Size: 1]
	bool bIsStatic;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa1 , Size: 1]
	bool bShouldBlockOnLoad;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa1 , Size: 1]
	int LevelLODIndex;//[Offset: 0xa4 , Size: 4]
	bool bDisableDistanceStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	bool bDrawOnLevelStatusMap;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa8 , Size: 1]
	Color DrawColor;//[Offset: 0xac , Size: 4]
	LinearColor LevelColor;//[Offset: 0xb0 , Size: 16]
	EditorStreamingVolumes(ObjectProperty)[] EditorStreamingVolumes;//[Offset: 0xc0 , Size: 12]
	float MinTimeBetweenVolumeUnloadRequests;//[Offset: 0xcc , Size: 4]
	Keywords(StrProperty)[] Keywords;//[Offset: 0xd4 , Size: 12]
	delegate OnLevelLoaded;//[Offset: 0xe0 , Size: 12]
	delegate OnLevelUnloaded;//[Offset: 0xec , Size: 12]
	delegate OnLevelShown;//[Offset: 0xf8 , Size: 12]
	delegate OnLevelHidden;//[Offset: 0x104 , Size: 12]
	Level* LoadedLevel;//[Offset: 0x110 , Size: 4]
	Level* PendingUnloadLevel;//[Offset: 0x114 , Size: 4]
	UnloadingLevels(ObjectProperty)[] UnloadingLevels;//[Offset: 0x118 , Size: 12]
	function IsStreamingStatePending();// 0x370ea6c
	function IsLevelVisible();// 0x370ea44
	function IsLevelLoaded();// 0x370ea20
	function GetWorldAssetPackageFName();// 0x370e9e0
	function GetLevelScriptActor();// 0x370e9b8
	function CreateInstance();// 0x370e858

--------------------------------
Class: LevelStreamingAlwaysLoaded.LevelStreaming.Object

--------------------------------
Class: LevelStreamingKismet.LevelStreaming.Object
	bool bInitiallyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x138 , Size: 1]
	bool bInitiallyVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x138 , Size: 1]
	function LoadLevelInstance();// 0x370f110

--------------------------------
Class: LevelStreamingPersistent.LevelStreaming.Object

--------------------------------
Class: LevelStreamingVolume.Volume.Brush.Actor.Object
	StreamingLevelNames(NameProperty)[] StreamingLevelNames;//[Offset: 0x2ec , Size: 12]
	bool bEditorPreVisOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f8 , Size: 1]
	bool bDisabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2f8 , Size: 1]
	byte StreamingUsage;//[Offset: 0x2f9 , Size: 1]

--------------------------------
Class: LightmappedSurfaceCollection.Object
	Model* SourceModel;//[Offset: 0x1c , Size: 4]
	Surfaces(IntProperty)[] Surfaces;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: LightMapTexture2D.Texture2D.Texture.Object

--------------------------------
Class: LightmassCharacterIndirectDetailVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassImportanceVolume.Volume.Brush.Actor.Object

--------------------------------
Class: LightmassPortal.Actor.Object
	LightmassPortalComponent* PortalComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: LightmassPortalComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x260 , Size: 4]

--------------------------------
Class: LightmassPrimitiveSettingsObject.Object
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x1c , Size: 24]

--------------------------------
Class: LODActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c4 , Size: 4]
	SubActors(ObjectProperty)[] SubActors;//[Offset: 0x2c8 , Size: 12]
	float LODDrawDistance;//[Offset: 0x2d4 , Size: 4]
	int LODLevel;//[Offset: 0x2d8 , Size: 4]
	SubObjects(ObjectProperty)[] SubObjects;//[Offset: 0x2dc , Size: 12]

--------------------------------
Class: MaterialBillboardComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Elements(StructProperty)[] Elements;//[Offset: 0x54c , Size: 12]
	function SetElements();// 0x3714178
	function AddElement();// 0x3713f94

--------------------------------
Class: MaterialExpression.Object
	Material* Material;//[Offset: 0x1c , Size: 4]
	MaterialFunction* Function;//[Offset: 0x20 , Size: 4]
	FString Desc;//[Offset: 0x24 , Size: 12]
	Color BorderColor;//[Offset: 0x30 , Size: 4]
	bool bRealtimePreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x34 , Size: 1]
	bool bNeedToUpdatePreview;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x34 , Size: 1]
	bool bIsParameterExpression;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x34 , Size: 1]
	bool bCommentBubbleVisible;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x34 , Size: 1]
	bool bShowOutputNameOnPin;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x34 , Size: 1]
	bool bShowMaskColorsOnPin;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x34 , Size: 1]
	bool bHidePreviewWindow;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x34 , Size: 1]
	bool bCollapsed;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x34 , Size: 1]
	bool bShaderInputData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x35 , Size: 1]
	bool bShowInputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x35 , Size: 1]
	bool bShowOutputs;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x35 , Size: 1]
	Outputs(StructProperty)[] Outputs;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: MaterialFunction.Object
	Guid stateID;//[Offset: 0x1c , Size: 16]
	FString Description;//[Offset: 0x2c , Size: 12]
	bool bExposeToLibrary;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	FunctionExpressions(ObjectProperty)[] FunctionExpressions;//[Offset: 0x3c , Size: 12]
	bool bReentrantFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: MaterialExpressionAbs.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionActorPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAdd.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	float ConstA;//[Offset: 0xa8 , Size: 4]
	float ConstB;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionTextureBase.MaterialExpression.Object
	Texture* Texture;//[Offset: 0x44 , Size: 4]
	byte SamplerType;//[Offset: 0x48 , Size: 1]
	bool IsDefaultMeshpaintTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x49 , Size: 1]

--------------------------------
Class: MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x50 , Size: 48]
	ExpressionInput TextureObject;//[Offset: 0x80 , Size: 48]
	ExpressionInput MipValue;//[Offset: 0xb0 , Size: 48]
	ExpressionInput CoordinatesDX;//[Offset: 0xe0 , Size: 48]
	ExpressionInput CoordinatesDY;//[Offset: 0x110 , Size: 48]
	byte MipValueMode;//[Offset: 0x140 , Size: 1]
	byte SamplerSource;//[Offset: 0x141 , Size: 1]
	uint32 ConstCoordinate;//[Offset: 0x144 , Size: 4]
	int ConstMipValue;//[Offset: 0x148 , Size: 4]

--------------------------------
Class: MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x150 , Size: 8]
	Guid ExpressionGUID;//[Offset: 0x158 , Size: 16]
	FName Group;//[Offset: 0x168 , Size: 8]

--------------------------------
Class: MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAntialiasedTextureMask.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	float Threshold;//[Offset: 0x170 , Size: 4]
	byte Channel;//[Offset: 0x174 , Size: 1]

--------------------------------
Class: MaterialExpressionAppendVector.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionArccosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionArccosineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionArcsine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionArcsineFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionArctangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionArctangent2.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x48 , Size: 48]
	ExpressionInput X;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionArctangent2Fast.MaterialExpression.Object
	ExpressionInput Y;//[Offset: 0x48 , Size: 48]
	ExpressionInput X;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionArctangentFast.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionAtmosphericFogColor.MaterialExpression.Object
	ExpressionInput WorldPosition;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionAtmosphericLightColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionAtmosphericLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCustomOutput.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionBentNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionBlackBody.MaterialExpression.Object
	ExpressionInput temp;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionBlendMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput A;//[Offset: 0x48 , Size: 56]
	MaterialAttributesInput B;//[Offset: 0x80 , Size: 56]
	ExpressionInput alpha;//[Offset: 0xb8 , Size: 48]
	byte PixelAttributeBlendType;//[Offset: 0xe8 , Size: 1]
	byte VertexAttributeBlendType;//[Offset: 0xe9 , Size: 1]

--------------------------------
Class: MaterialExpressionBreakMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x48 , Size: 56]

--------------------------------
Class: MaterialExpressionBumpOffset.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x48 , Size: 48]
	ExpressionInput Height;//[Offset: 0x78 , Size: 48]
	ExpressionInput HeightRatioInput;//[Offset: 0xa8 , Size: 48]
	float HeightRatio;//[Offset: 0xd8 , Size: 4]
	float ReferencePlane;//[Offset: 0xdc , Size: 4]
	uint32 ConstCoordinate;//[Offset: 0xe0 , Size: 4]

--------------------------------
Class: MaterialExpressionCameraPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCameraVectorWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionCeil.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionClamp.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	ExpressionInput Min;//[Offset: 0x78 , Size: 48]
	ExpressionInput Max;//[Offset: 0xa8 , Size: 48]
	byte ClampMode;//[Offset: 0xd8 , Size: 1]
	float MinDefault;//[Offset: 0xdc , Size: 4]
	float MaxDefault;//[Offset: 0xe0 , Size: 4]

--------------------------------
Class: MaterialExpressionClearCoatNormalCustomOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionCollectionParameter.MaterialExpression.Object
	MaterialParameterCollection* Collection;//[Offset: 0x44 , Size: 4]
	FName ParameterName;//[Offset: 0x48 , Size: 8]
	Guid ParameterId;//[Offset: 0x50 , Size: 16]

--------------------------------
Class: MaterialParameterCollection.Object
	Guid stateID;//[Offset: 0x1c , Size: 16]
	ScalarParameters(StructProperty)[] ScalarParameters;//[Offset: 0x2c , Size: 12]
	VectorParameters(StructProperty)[] VectorParameters;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: MaterialExpressionComment.MaterialExpression.Object
	int SizeX;//[Offset: 0x44 , Size: 4]
	int SizeY;//[Offset: 0x48 , Size: 4]
	FString Text;//[Offset: 0x4c , Size: 12]
	LinearColor CommentColor;//[Offset: 0x58 , Size: 16]
	int FontSize;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: MaterialExpressionComponentMask.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	bool R;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78 , Size: 1]
	bool G;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x78 , Size: 1]
	bool B;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x78 , Size: 1]
	bool A;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x78 , Size: 1]

--------------------------------
Class: MaterialExpressionConstant.MaterialExpression.Object
	float R;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: MaterialExpressionConstant2Vector.MaterialExpression.Object
	float R;//[Offset: 0x44 , Size: 4]
	float G;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: MaterialExpressionConstant3Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x44 , Size: 16]

--------------------------------
Class: MaterialExpressionConstant4Vector.MaterialExpression.Object
	LinearColor Constant;//[Offset: 0x44 , Size: 16]

--------------------------------
Class: MaterialExpressionConstantBiasScale.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	float Bias;//[Offset: 0x78 , Size: 4]
	float Scale;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: MaterialExpressionCosine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	float Period;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: MaterialExpressionCrossProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionCustom.MaterialExpression.Object
	FString Code;//[Offset: 0x44 , Size: 12]
	byte OutputType;//[Offset: 0x50 , Size: 1]
	FString Description;//[Offset: 0x54 , Size: 12]
	Inputs(StructProperty)[] Inputs;//[Offset: 0x60 , Size: 12]

--------------------------------
Class: MaterialExpressionDDX.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionDDY.MaterialExpression.Object
	ExpressionInput Value;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionDecalDerivative.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalLifetimeOpacity.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDecalMipmapLevel.MaterialExpression.Object
	ExpressionInput TextureSize;//[Offset: 0x48 , Size: 48]
	float ConstWidth;//[Offset: 0x78 , Size: 4]
	float ConstHeight;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: MaterialExpressionDepthFade.MaterialExpression.Object
	ExpressionInput InOpacity;//[Offset: 0x48 , Size: 48]
	ExpressionInput FadeDistance;//[Offset: 0x78 , Size: 48]
	float OpacityDefault;//[Offset: 0xa8 , Size: 4]
	float FadeDistanceDefault;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionDepthOfFieldFunction.MaterialExpression.Object
	byte FunctionValue;//[Offset: 0x44 , Size: 1]
	ExpressionInput Depth;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionDeriveNormalZ.MaterialExpression.Object
	ExpressionInput InXY;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionDesaturation.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	ExpressionInput Fraction;//[Offset: 0x78 , Size: 48]
	LinearColor LuminanceFactors;//[Offset: 0xa8 , Size: 16]

--------------------------------
Class: MaterialExpressionDistance.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionDistanceCullFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionDistanceFieldGradient.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionDistanceToNearestSurface.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionDivide.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	float ConstA;//[Offset: 0xa8 , Size: 4]
	float ConstB;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionDotProduct.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionDynamicInstancingParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x48 , Size: 8]
	LinearColor DefaultValue;//[Offset: 0x50 , Size: 16]
	int ParameterIndex;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: MaterialExpressionDynamicParameter.MaterialExpression.Object
	ParamNames(StrProperty)[] ParamNames;//[Offset: 0x44 , Size: 12]
	LinearColor DefaultValue;//[Offset: 0x50 , Size: 16]

--------------------------------
Class: MaterialExpressionEyeAdaptation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionFeatureLevelSwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x48 , Size: 48]
	ExpressionInput Inputs;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionFloor.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionFmod.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionFontSample.MaterialExpression.Object
	Font* Font;//[Offset: 0x44 , Size: 4]
	int FontTexturePage;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: MaterialExpressionFontSampleParameter.MaterialExpressionFontSample.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x50 , Size: 8]
	Guid ExpressionGUID;//[Offset: 0x58 , Size: 16]
	FName Group;//[Offset: 0x68 , Size: 8]

--------------------------------
Class: MaterialExpressionFrac.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionFresnel.MaterialExpression.Object
	ExpressionInput ExponentIn;//[Offset: 0x48 , Size: 48]
	float Exponent;//[Offset: 0x78 , Size: 4]
	ExpressionInput BaseReflectFractionIn;//[Offset: 0x80 , Size: 48]
	float BaseReflectFraction;//[Offset: 0xb0 , Size: 4]
	ExpressionInput Normal;//[Offset: 0xb8 , Size: 48]

--------------------------------
Class: MaterialExpressionFunctionInput.MaterialExpression.Object
	ExpressionInput Preview;//[Offset: 0x48 , Size: 48]
	FString InputName;//[Offset: 0x78 , Size: 12]
	FString Description;//[Offset: 0x84 , Size: 12]
	Guid ID;//[Offset: 0x90 , Size: 16]
	byte InputType;//[Offset: 0xa0 , Size: 1]
	Vector4 PreviewValue;//[Offset: 0xb0 , Size: 16]
	bool bUsePreviewValueAsDefault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc0 , Size: 1]
	int SortPriority;//[Offset: 0xc4 , Size: 4]
	bool bCompilingFunctionPreview;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8 , Size: 1]

--------------------------------
Class: MaterialExpressionFunctionOutput.MaterialExpression.Object
	FString OutputName;//[Offset: 0x44 , Size: 12]
	FString Description;//[Offset: 0x50 , Size: 12]
	int SortPriority;//[Offset: 0x5c , Size: 4]
	ExpressionInput A;//[Offset: 0x60 , Size: 48]
	bool bLastPreviewed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	Guid ID;//[Offset: 0x94 , Size: 16]

--------------------------------
Class: MaterialExpressionGetMaterialAttributes.MaterialExpression.Object
	MaterialAttributesInput MaterialAttributes;//[Offset: 0x48 , Size: 56]
	AttributeGetTypes(StructProperty)[] AttributeGetTypes;//[Offset: 0x80 , Size: 12]

--------------------------------
Class: MaterialExpressionGIReplace.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x48 , Size: 48]
	ExpressionInput StaticIndirect;//[Offset: 0x78 , Size: 48]
	ExpressionInput DynamicIndirect;//[Offset: 0xa8 , Size: 48]

--------------------------------
Class: MaterialExpressionIf.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	ExpressionInput AGreaterThanB;//[Offset: 0xa8 , Size: 48]
	ExpressionInput AEqualsB;//[Offset: 0xd8 , Size: 48]
	ExpressionInput ALessThanB;//[Offset: 0x108 , Size: 48]
	float EqualsThreshold;//[Offset: 0x138 , Size: 4]
	float ConstB;//[Offset: 0x13c , Size: 4]
	float ConstAEqualsB;//[Offset: 0x140 , Size: 4]

--------------------------------
Class: MaterialExpressionLightmapUVs.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLightmassReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x48 , Size: 48]
	ExpressionInput Lightmass;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionLightVector.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionLinearInterpolate.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	ExpressionInput alpha;//[Offset: 0xa8 , Size: 48]
	float ConstA;//[Offset: 0xd8 , Size: 4]
	float ConstB;//[Offset: 0xdc , Size: 4]
	float ConstAlpha;//[Offset: 0xe0 , Size: 4]

--------------------------------
Class: MaterialExpressionLogarithm10.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionLogarithm2.MaterialExpression.Object
	ExpressionInput X;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionMakeMaterialAttributes.MaterialExpression.Object
	ExpressionInput BaseColor;//[Offset: 0x48 , Size: 48]
	ExpressionInput Metallic;//[Offset: 0x78 , Size: 48]
	ExpressionInput Specular;//[Offset: 0xa8 , Size: 48]
	ExpressionInput Roughness;//[Offset: 0xd8 , Size: 48]
	ExpressionInput EmissiveColor;//[Offset: 0x108 , Size: 48]
	ExpressionInput Opacity;//[Offset: 0x138 , Size: 48]
	ExpressionInput OpacityMask;//[Offset: 0x168 , Size: 48]
	ExpressionInput Normal;//[Offset: 0x198 , Size: 48]
	ExpressionInput WorldPositionOffset;//[Offset: 0x1c8 , Size: 48]
	ExpressionInput WorldDisplacement;//[Offset: 0x1f8 , Size: 48]
	ExpressionInput TessellationMultiplier;//[Offset: 0x228 , Size: 48]
	ExpressionInput SubsurfaceColor;//[Offset: 0x258 , Size: 48]
	ExpressionInput ClearCoat;//[Offset: 0x288 , Size: 48]
	ExpressionInput ClearCoatRoughness;//[Offset: 0x2b8 , Size: 48]
	ExpressionInput AmbientOcclusion;//[Offset: 0x2e8 , Size: 48]
	ExpressionInput Refraction;//[Offset: 0x318 , Size: 48]
	ExpressionInput CustomizedUVs;//[Offset: 0x348 , Size: 48]
	ExpressionInput PixelDepthOffset;//[Offset: 0x4c8 , Size: 48]
	ExpressionInput CustomizedVertexColor;//[Offset: 0x4f8 , Size: 48]

--------------------------------
Class: MaterialExpressionMaterialFunctionCall.MaterialExpression.Object
	MaterialFunction* MaterialFunction;//[Offset: 0x44 , Size: 4]
	FunctionInputs(StructProperty)[] FunctionInputs;//[Offset: 0x48 , Size: 12]
	FunctionOutputs(StructProperty)[] FunctionOutputs;//[Offset: 0x54 , Size: 12]

--------------------------------
Class: MaterialExpressionMaterialProxyReplace.MaterialExpression.Object
	ExpressionInput Realtime;//[Offset: 0x48 , Size: 48]
	ExpressionInput MaterialProxy;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionMax.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	float ConstA;//[Offset: 0xa8 , Size: 4]
	float ConstB;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionMin.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	float ConstA;//[Offset: 0xa8 , Size: 4]
	float ConstB;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionMultiply.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	float ConstA;//[Offset: 0xa8 , Size: 4]
	float ConstB;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48 , Size: 48]
	ExpressionInput FilterWidth;//[Offset: 0x78 , Size: 48]
	float Scale;//[Offset: 0xa8 , Size: 4]
	int quality;//[Offset: 0xac , Size: 4]
	byte NoiseFunction;//[Offset: 0xb0 , Size: 1]
	bool bTurbulence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1 , Size: 1]
	int Levels;//[Offset: 0xb4 , Size: 4]
	float OutputMin;//[Offset: 0xb8 , Size: 4]
	float OutputMax;//[Offset: 0xbc , Size: 4]
	float LevelScale;//[Offset: 0xc0 , Size: 4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4 , Size: 1]
	uint32 RepeatSize;//[Offset: 0xc8 , Size: 4]

--------------------------------
Class: MaterialExpressionNormalize.MaterialExpression.Object
	ExpressionInput VectorInput;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionObjectBounds.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectOrientation.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectPositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionObjectRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionOneMinus.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionPanner.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x48 , Size: 48]
	ExpressionInput Time;//[Offset: 0x78 , Size: 48]
	ExpressionInput Speed;//[Offset: 0xa8 , Size: 48]
	float SpeedX;//[Offset: 0xd8 , Size: 4]
	float SpeedY;//[Offset: 0xdc , Size: 4]
	uint32 ConstCoordinate;//[Offset: 0xe0 , Size: 4]
	bool bFractionalPart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]

--------------------------------
Class: MaterialExpressionParameter.MaterialExpression.Object
	FName ParameterName;//[Offset: 0x48 , Size: 8]
	Guid ExpressionGUID;//[Offset: 0x50 , Size: 16]
	FName Group;//[Offset: 0x60 , Size: 8]

--------------------------------
Class: MaterialExpressionParticleColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleDirection.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMacroUV.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleMotionBlurFade.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticlePositionWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRadius.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleRelativeTime.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSpeed.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionParticleSubUV.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14d , Size: 1]

--------------------------------
Class: MaterialExpressionPerInstanceFadeAmount.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPerInstanceRandom.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelDepth.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPixelNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPower.MaterialExpression.Object
	ExpressionInput Base;//[Offset: 0x48 , Size: 48]
	ExpressionInput Exponent;//[Offset: 0x78 , Size: 48]
	float ConstExponent;//[Offset: 0xa8 , Size: 4]

--------------------------------
Class: MaterialExpressionPrecomputedAOMask.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedNormal.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreSkinnedPosition.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionPreviousFrameSwitch.MaterialExpression.Object
	ExpressionInput CurrentFrame;//[Offset: 0x48 , Size: 48]
	ExpressionInput PreviousFrame;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionQualitySwitch.MaterialExpression.Object
	ExpressionInput Default;//[Offset: 0x48 , Size: 48]
	ExpressionInput Inputs;//[Offset: 0x78 , Size: 48]

--------------------------------
Class: MaterialExpressionReflectionVectorWS.MaterialExpression.Object
	ExpressionInput CustomWorldNormal;//[Offset: 0x48 , Size: 48]
	bool bNormalizeCustomWorldNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x78 , Size: 1]

--------------------------------
Class: MaterialExpressionReroute.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionRotateAboutAxis.MaterialExpression.Object
	ExpressionInput NormalizedRotationAxis;//[Offset: 0x48 , Size: 48]
	ExpressionInput RotationAngle;//[Offset: 0x78 , Size: 48]
	ExpressionInput PivotPoint;//[Offset: 0xa8 , Size: 48]
	ExpressionInput Position;//[Offset: 0xd8 , Size: 48]
	float Period;//[Offset: 0x108 , Size: 4]

--------------------------------
Class: MaterialExpressionRotator.MaterialExpression.Object
	ExpressionInput Coordinate;//[Offset: 0x48 , Size: 48]
	ExpressionInput Time;//[Offset: 0x78 , Size: 48]
	float CenterX;//[Offset: 0xa8 , Size: 4]
	float CenterY;//[Offset: 0xac , Size: 4]
	float Speed;//[Offset: 0xb0 , Size: 4]
	uint32 ConstCoordinate;//[Offset: 0xb4 , Size: 4]

--------------------------------
Class: MaterialExpressionRound.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionSaturate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionScalarParameter.MaterialExpressionParameter.MaterialExpression.Object
	float DefaultValue;//[Offset: 0x68 , Size: 4]
	float SliderMin;//[Offset: 0x6c , Size: 4]
	float SliderMax;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: MaterialExpressionSceneColor.MaterialExpression.Object
	byte InputMode;//[Offset: 0x44 , Size: 1]
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	ExpressionInput OffsetFraction;//[Offset: 0x78 , Size: 48]
	Vector2D ConstInput;//[Offset: 0xa8 , Size: 8]

--------------------------------
Class: MaterialExpressionSceneDepth.MaterialExpression.Object
	byte InputMode;//[Offset: 0x44 , Size: 1]
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	ExpressionInput Coordinates;//[Offset: 0x78 , Size: 48]
	Vector2D ConstInput;//[Offset: 0xa8 , Size: 8]

--------------------------------
Class: MaterialExpressionSceneTexelSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionSceneTexture.MaterialExpression.Object
	ExpressionInput Coordinates;//[Offset: 0x48 , Size: 48]
	byte SceneTextureId;//[Offset: 0x78 , Size: 1]
	bool bClampUVs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79 , Size: 1]
	bool bFiltered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a , Size: 1]

--------------------------------
Class: MaterialExpressionScreenPosition.MaterialExpression.Object
	byte Mapping;//[Offset: 0x44 , Size: 1]

--------------------------------
Class: MaterialExpressionSetMaterialAttributes.MaterialExpression.Object
	Inputs(StructProperty)[] Inputs;//[Offset: 0x44 , Size: 12]
	AttributeSetTypes(StructProperty)[] AttributeSetTypes;//[Offset: 0x50 , Size: 12]

--------------------------------
Class: MaterialExpressionSign.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionSine.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	float Period;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: MaterialExpressionSobol.MaterialExpression.Object
	ExpressionInput Cell;//[Offset: 0x48 , Size: 48]
	ExpressionInput Index;//[Offset: 0x78 , Size: 48]
	ExpressionInput Seed;//[Offset: 0xa8 , Size: 48]
	uint32 ConstIndex;//[Offset: 0xd8 , Size: 4]
	Vector2D ConstSeed;//[Offset: 0xdc , Size: 8]

--------------------------------
Class: MaterialExpressionSpeedTree.MaterialExpression.Object
	byte GeometryType;//[Offset: 0x44 , Size: 1]
	byte WindType;//[Offset: 0x45 , Size: 1]
	byte LODType;//[Offset: 0x46 , Size: 1]
	float BillboardThreshold;//[Offset: 0x48 , Size: 4]
	bool bAccurateWindVelocities;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]

--------------------------------
Class: MaterialExpressionSphereMask.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	ExpressionInput Radius;//[Offset: 0xa8 , Size: 48]
	ExpressionInput Hardness;//[Offset: 0xd8 , Size: 48]
	float AttenuationRadius;//[Offset: 0x108 , Size: 4]
	float HardnessPercent;//[Offset: 0x10c , Size: 4]

--------------------------------
Class: MaterialExpressionSphericalParticleOpacity.MaterialExpression.Object
	ExpressionInput Density;//[Offset: 0x48 , Size: 48]
	float ConstantDensity;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: MaterialExpressionSquareRoot.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionStaticBool.MaterialExpression.Object
	bool Value;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]

--------------------------------
Class: MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68 , Size: 1]

--------------------------------
Class: MaterialExpressionStaticComponentMaskParameter.MaterialExpressionParameter.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x68 , Size: 48]
	bool DefaultR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x98 , Size: 1]
	bool DefaultG;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x98 , Size: 1]
	bool DefaultB;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x98 , Size: 1]
	bool DefaultA;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x98 , Size: 1]

--------------------------------
Class: MaterialExpressionStaticSwitch.MaterialExpression.Object
	bool DefaultValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	ExpressionInput Value;//[Offset: 0xa8 , Size: 48]

--------------------------------
Class: MaterialExpressionStaticSwitchParameter.MaterialExpressionStaticBoolParameter.MaterialExpressionParameter.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x70 , Size: 48]
	ExpressionInput B;//[Offset: 0xa0 , Size: 48]

--------------------------------
Class: MaterialExpressionSubtract.MaterialExpression.Object
	ExpressionInput A;//[Offset: 0x48 , Size: 48]
	ExpressionInput B;//[Offset: 0x78 , Size: 48]
	float ConstA;//[Offset: 0xa8 , Size: 4]
	float ConstB;//[Offset: 0xac , Size: 4]

--------------------------------
Class: MaterialExpressionTangent.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	float Period;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: MaterialExpressionTangentOutput.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionTemporalSobol.MaterialExpression.Object
	ExpressionInput Index;//[Offset: 0x48 , Size: 48]
	ExpressionInput Seed;//[Offset: 0x78 , Size: 48]
	uint32 ConstIndex;//[Offset: 0xa8 , Size: 4]
	Vector2D ConstSeed;//[Offset: 0xac , Size: 8]

--------------------------------
Class: MaterialExpressionTextureCoordinate.MaterialExpression.Object
	int CoordinateIndex;//[Offset: 0x44 , Size: 4]
	float UTiling;//[Offset: 0x48 , Size: 4]
	float VTiling;//[Offset: 0x4c , Size: 4]
	bool UnMirrorU;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool UnMirrorV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]

--------------------------------
Class: MaterialExpressionTextureObject.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureObjectParameter.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureProperty.MaterialExpression.Object
	ExpressionInput TextureObject;//[Offset: 0x48 , Size: 48]
	byte Property;//[Offset: 0x78 , Size: 1]

--------------------------------
Class: MaterialExpressionTextureSampleParameterCube.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionTextureSampleParameterSubUV.MaterialExpressionTextureSampleParameter2D.MaterialExpressionTextureSampleParameter.MaterialExpressionTextureSample.MaterialExpressionTextureBase.MaterialExpression.Object
	bool bBlend;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x170 , Size: 1]

--------------------------------
Class: MaterialExpressionTime.MaterialExpression.Object
	bool bIgnorePause;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bOverride_Period;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]
	float Period;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: MaterialExpressionTransform.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	byte TransformSourceType;//[Offset: 0x78 , Size: 1]
	byte TransformType;//[Offset: 0x79 , Size: 1]

--------------------------------
Class: MaterialExpressionTransformPosition.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]
	byte TransformSourceType;//[Offset: 0x78 , Size: 1]
	byte TransformType;//[Offset: 0x79 , Size: 1]

--------------------------------
Class: MaterialExpressionTruncate.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionTwoSidedSign.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVectorNoise.MaterialExpression.Object
	ExpressionInput Position;//[Offset: 0x48 , Size: 48]
	byte NoiseFunction;//[Offset: 0x78 , Size: 1]
	int quality;//[Offset: 0x7c , Size: 4]
	bool bTiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80 , Size: 1]
	uint32 TileSize;//[Offset: 0x84 , Size: 4]

--------------------------------
Class: MaterialExpressionVectorParameter.MaterialExpressionParameter.MaterialExpression.Object
	LinearColor DefaultValue;//[Offset: 0x68 , Size: 16]

--------------------------------
Class: MaterialExpressionVertexColor.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionVertexInterpolator.MaterialExpressionCustomOutput.MaterialExpression.Object
	ExpressionInput Input;//[Offset: 0x48 , Size: 48]

--------------------------------
Class: MaterialExpressionVertexNormalWS.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionViewProperty.MaterialExpression.Object
	byte Property;//[Offset: 0x44 , Size: 1]

--------------------------------
Class: MaterialExpressionViewSize.MaterialExpression.Object

--------------------------------
Class: MaterialExpressionWorldPosition.MaterialExpression.Object
	byte WorldPositionShaderOffset;//[Offset: 0x44 , Size: 1]

--------------------------------
Class: MaterialInstanceActor.Actor.Object
	TargetActors(ObjectProperty)[] TargetActors;//[Offset: 0x2c4 , Size: 12]

--------------------------------
Class: MaterialInstanceConstant.MaterialInstance.MaterialInterface.Object

--------------------------------
Class: MaterialParameterCollectionInstance.Object
	MaterialParameterCollection* Collection;//[Offset: 0x20 , Size: 4]
	World* World;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: MatineeActor.Actor.Object
	InterpData* MatineeData;//[Offset: 0x2c4 , Size: 4]
	FName MatineeControllerName;//[Offset: 0x2c8 , Size: 8]
	float PlayRate;//[Offset: 0x2d0 , Size: 4]
	bool bPlayOnLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	bool bForceStartPos;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2d4 , Size: 1]
	float ForceStartPosition;//[Offset: 0x2d8 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2dc , Size: 1]
	bool bRewindOnPlay;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2dc , Size: 1]
	bool bNoResetOnRewind;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2dc , Size: 1]
	bool bRewindIfAlreadyPlaying;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2dc , Size: 1]
	bool bDisableRadioFilter;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x2dc , Size: 1]
	bool bClientSideOnly;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x2dc , Size: 1]
	bool bSkipUpdateIfNotVisible;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x2dc , Size: 1]
	bool bIsSkippable;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x2dc , Size: 1]
	int PreferredSplitScreenNum;//[Offset: 0x2e0 , Size: 4]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2e4 , Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2e4 , Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2e4 , Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x2e4 , Size: 1]
	GroupActorInfos(StructProperty)[] GroupActorInfos;//[Offset: 0x2e8 , Size: 12]
	bool bShouldShowGore;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f4 , Size: 1]
	GroupInst(ObjectProperty)[] GroupInst;//[Offset: 0x2f8 , Size: 12]
	CameraCuts(StructProperty)[] CameraCuts;//[Offset: 0x304 , Size: 12]
	bool bIsPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x310 , Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x310 , Size: 1]
	bool bPaused;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x310 , Size: 1]
	bool bPendingStop;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x310 , Size: 1]
	float InterpPosition;//[Offset: 0x314 , Size: 4]
	byte ReplicationForceIsPlaying;//[Offset: 0x31c , Size: 1]
	delegate OnPlay;//[Offset: 0x320 , Size: 12]
	delegate OnStop;//[Offset: 0x32c , Size: 12]
	delegate OnPause;//[Offset: 0x338 , Size: 12]
	function Stop();// 0x16a8160
	function SetPosition();// 0x3725840
	function SetLoopingState();// 0x37257b8
	function Reverse();// 0x16fae60
	function Play();// 0x16e6e40
	function Pause();// 0x17231a0
	function EnableGroupByName();// 0x3725610
	function ChangePlaybackDirection();// 0x1723214

--------------------------------
Class: MatineeActorCameraAnim.MatineeActor.Actor.Object
	CameraAnim* CameraAnim;//[Offset: 0x350 , Size: 4]

--------------------------------
Class: MatineeAnimInterface.Interface.Object

--------------------------------
Class: MatineeInterface.Interface.Object

--------------------------------
Class: MeshMergeCullingVolume.Volume.Brush.Actor.Object

--------------------------------
Class: MeshSimplificationSettings.DeveloperSettings.Object
	FName MeshReductionModuleName;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: MeshVertexPainterKismetLibrary.BlueprintFunctionLibrary.Object
	function RemovePaintedVertices();// 0x37287a8
	function PaintVerticesSingleColor();// 0x3728698
	function PaintVerticesLerpAlongAxis();// 0x37284ec

--------------------------------
Class: MicroTransactionBase.PlatformInterfaceBase.Object
	AvailableProducts(StructProperty)[] AvailableProducts;//[Offset: 0x28 , Size: 12]
	FString LastError;//[Offset: 0x34 , Size: 12]
	FString LastErrorSolution;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: ModelComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	BodySetup* ModelBodySetup;//[Offset: 0x558 , Size: 4]

--------------------------------
Class: MorphTarget.Object
	SkeletalMesh* BaseSkelMesh;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: NavAgentInterface.Interface.Object

--------------------------------
Class: NavArea_Default.NavArea.Object

--------------------------------
Class: NavArea_LowHeight.NavArea.Object

--------------------------------
Class: NavArea_Null.NavArea.Object

--------------------------------
Class: NavArea_Obstacle.NavArea.Object

--------------------------------
Class: NavAreaMeta.NavArea.Object

--------------------------------
Class: NavAreaMeta_SwitchByAgent.NavAreaMeta.NavArea.Object
	class NavArea* Agent0Area;//[Offset: 0x34 , Size: 4]
	class NavArea* Agent1Area;//[Offset: 0x38 , Size: 4]
	class NavArea* Agent2Area;//[Offset: 0x3c , Size: 4]
	class NavArea* Agent3Area;//[Offset: 0x40 , Size: 4]
	class NavArea* Agent4Area;//[Offset: 0x44 , Size: 4]
	class NavArea* Agent5Area;//[Offset: 0x48 , Size: 4]
	class NavArea* Agent6Area;//[Offset: 0x4c , Size: 4]
	class NavArea* Agent7Area;//[Offset: 0x50 , Size: 4]
	class NavArea* Agent8Area;//[Offset: 0x54 , Size: 4]
	class NavArea* Agent9Area;//[Offset: 0x58 , Size: 4]
	class NavArea* Agent10Area;//[Offset: 0x5c , Size: 4]
	class NavArea* Agent11Area;//[Offset: 0x60 , Size: 4]
	class NavArea* Agent12Area;//[Offset: 0x64 , Size: 4]
	class NavArea* Agent13Area;//[Offset: 0x68 , Size: 4]
	class NavArea* Agent14Area;//[Offset: 0x6c , Size: 4]
	class NavArea* Agent15Area;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: NavEdgeProviderInterface.Interface.Object

--------------------------------
Class: NavigationDataChunk.Object
	FName NavigationDataName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: NavigationGraph.NavigationData.Actor.Object

--------------------------------
Class: NavigationGraphNode.Actor.Object

--------------------------------
Class: NavigationGraphNodeComponent.SceneComponent.ActorComponent.Object
	NavGraphNode Node;//[Offset: 0x260 , Size: 16]
	NavigationGraphNodeComponent* NextNodeComponent;//[Offset: 0x270 , Size: 4]
	NavigationGraphNodeComponent* PrevNodeComponent;//[Offset: 0x274 , Size: 4]

--------------------------------
Class: NavGraphNode
	Object* Owner;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: NavigationInvokerComponent.ActorComponent.Object
	float TileGenerationRadius;//[Offset: 0xbc , Size: 4]
	float TileRemovalRadius;//[Offset: 0xc0 , Size: 4]

--------------------------------
Class: NavigationPath.Object
	delegate PathUpdatedNotifier;//[Offset: 0x1c , Size: 12]
	PathPoints(StructProperty)[] PathPoints;//[Offset: 0x28 , Size: 12]
	byte RecalculateOnInvalidation;//[Offset: 0x34 , Size: 1]
	function IsValid();// 0x372c60c
	function IsStringPulled();// 0x180fad8
	function IsPartial();// 0x372c5e4
	function GetPathLength();// 0x372c5bc
	function GetPathCost();// 0x372c594
	function GetDebugString();// 0x372c4d4
	function EnableRecalculationOnInvalidation();// 0x372c454
	function EnableDebugDrawing();// 0x372c384

--------------------------------
Class: NavigationPathGenerator.Interface.Object

--------------------------------
Class: NavigationQueryFilter.Object
	Areas(StructProperty)[] Areas;//[Offset: 0x1c , Size: 12]
	NavigationFilterFlags IncludeFlags;//[Offset: 0x28 , Size: 4]
	NavigationFilterFlags ExcludeFlags;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: NavigationFilterFlags
	bool bNavFlag0;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bNavFlag1;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bNavFlag2;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]
	bool bNavFlag3;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x0 , Size: 1]
	bool bNavFlag4;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x0 , Size: 1]
	bool bNavFlag5;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x0 , Size: 1]
	bool bNavFlag6;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x0 , Size: 1]
	bool bNavFlag7;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x0 , Size: 1]
	bool bNavFlag8;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1 , Size: 1]
	bool bNavFlag9;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1 , Size: 1]
	bool bNavFlag10;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1 , Size: 1]
	bool bNavFlag11;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1 , Size: 1]
	bool bNavFlag12;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1 , Size: 1]
	bool bNavFlag13;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1 , Size: 1]
	bool bNavFlag14;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1 , Size: 1]
	bool bNavFlag15;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1 , Size: 1]

--------------------------------
Class: NavigationTestingActor.Actor.Object
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2cc , Size: 4]
	NavigationInvokerComponent* InvokerComponent;//[Offset: 0x2d0 , Size: 4]
	bool bActAsNavigationInvoker;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d4 , Size: 1]
	NavAgentProperties NavAgentProps;//[Offset: 0x2d8 , Size: 24]
	Vector QueryingExtent;//[Offset: 0x2f0 , Size: 12]
	NavigationData* MyNavData;//[Offset: 0x2fc , Size: 4]
	Vector ProjectedLocation;//[Offset: 0x300 , Size: 12]
	IntVector ProjectedTile;//[Offset: 0x30c , Size: 12]
	int ProjectedPloyId;//[Offset: 0x318 , Size: 4]
	bool bProjectedLocationValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31c , Size: 1]
	bool bSearchStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x31c , Size: 1]
	bool bUseHierarchicalPathfinding;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x31c , Size: 1]
	bool bGatherDetailedInfo;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x31c , Size: 1]
	bool bDrawDistanceToWall;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x31c , Size: 1]
	bool bShowNodePool;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x31c , Size: 1]
	bool bShowBestPath;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x31c , Size: 1]
	bool bShowDiffWithPreviousStep;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x31c , Size: 1]
	bool bShouldBeVisibleInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x31d , Size: 1]
	byte CostDisplayMode;//[Offset: 0x31e , Size: 1]
	Vector2D TextCanvasOffset;//[Offset: 0x320 , Size: 8]
	bool bPathExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x328 , Size: 1]
	bool bPathIsPartial;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x328 , Size: 1]
	bool bPathSearchOutOfNodes;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x328 , Size: 1]
	float PathfindingTime;//[Offset: 0x32c , Size: 4]
	float PathCost;//[Offset: 0x330 , Size: 4]
	int PathfindingSteps;//[Offset: 0x334 , Size: 4]
	NavigationTestingActor* OtherActor;//[Offset: 0x338 , Size: 4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x33c , Size: 4]
	int ShowStepIndex;//[Offset: 0x340 , Size: 4]
	float OffsetFromCornersDistance;//[Offset: 0x344 , Size: 4]

--------------------------------
Class: NavigationTypes.Object

--------------------------------
Class: NavLinkComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Links(StructProperty)[] Links;//[Offset: 0x550 , Size: 12]

--------------------------------
Class: NavRelevantComponent.ActorComponent.Object
	bool bAttachToOwnersRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc , Size: 1]
	Object* CachedNavParent;//[Offset: 0xe0 , Size: 4]
	function SetNavigationRelevancy();// 0x37326e4

--------------------------------
Class: NavLinkCustomComponent.NavRelevantComponent.ActorComponent.Object
	uint32 NavLinkUserId;//[Offset: 0xe8 , Size: 4]
	class NavArea* EnabledAreaClass;//[Offset: 0xec , Size: 4]
	class NavArea* DisabledAreaClass;//[Offset: 0xf0 , Size: 4]
	Vector LinkRelativeStart;//[Offset: 0xf4 , Size: 12]
	Vector LinkRelativeEnd;//[Offset: 0x100 , Size: 12]
	byte LinkDirection;//[Offset: 0x10c , Size: 1]
	bool bLinkEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10d , Size: 1]
	bool bNotifyWhenEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x10d , Size: 1]
	bool bNotifyWhenDisabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x10d , Size: 1]
	bool bCreateBoxObstacle;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x10d , Size: 1]
	Vector ObstacleOffset;//[Offset: 0x110 , Size: 12]
	Vector ObstacleExtent;//[Offset: 0x11c , Size: 12]
	class NavArea* ObstacleAreaClass;//[Offset: 0x128 , Size: 4]
	float BroadcastRadius;//[Offset: 0x12c , Size: 4]
	float BroadcastInterval;//[Offset: 0x130 , Size: 4]
	byte BroadcastChannel;//[Offset: 0x134 , Size: 1]

--------------------------------
Class: NavLinkCustomInterface.Interface.Object

--------------------------------
Class: NavLinkDefinition.Object
	Links(StructProperty)[] Links;//[Offset: 0x1c , Size: 12]
	SegmentLinks(StructProperty)[] SegmentLinks;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: NavLinkHostInterface.Interface.Object

--------------------------------
Class: NavLinkProxy.Actor.Object
	PointLinks(StructProperty)[] PointLinks;//[Offset: 0x2cc , Size: 12]
	SegmentLinks(StructProperty)[] SegmentLinks;//[Offset: 0x2d8 , Size: 12]
	NavLinkCustomComponent* SmartLinkComp;//[Offset: 0x2e4 , Size: 4]
	bool bSmartLinkIsRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	delegate OnSmartLinkReached;//[Offset: 0x2ec , Size: 12]
	function SetSmartLinkEnabled();// 0x3730ed8
	function ResumePathFollowing();// 0x3730e60
	function ReceiveSmartLinkReached();// 0x206ccd8
	function IsSmartLinkEnabled();// 0x3730e38
	function HasMovingAgents();// 0x3730e10

--------------------------------
Class: NavLinkRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavLinkTrivial.NavLinkDefinition.Object

--------------------------------
Class: NavMeshBoundsVolume.Volume.Brush.Actor.Object
	NavAgentSelector SupportedAgents;//[Offset: 0x2ec , Size: 4]

--------------------------------
Class: NavMeshLocalUpdateVolume.Volume.Brush.Actor.Object

--------------------------------
Class: NavMeshRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NavModifierComponent.NavRelevantComponent.ActorComponent.Object
	class NavArea* AreaClass;//[Offset: 0xe4 , Size: 4]
	Vector FailsafeExtent;//[Offset: 0xe8 , Size: 12]
	function SetAreaClass();// 0x3731b18

--------------------------------
Class: NavModifierVolume.Volume.Brush.Actor.Object
	class NavArea* AreaClass;//[Offset: 0x2f0 , Size: 4]
	function SetAreaClass();// 0x3731e14

--------------------------------
Class: NavNodeInterface.Interface.Object

--------------------------------
Class: NavPathObserverInterface.Interface.Object

--------------------------------
Class: NavRelevantInterface.Interface.Object

--------------------------------
Class: NavTestRenderingComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: NetworkPredictionInterface.Interface.Object

--------------------------------
Class: NetworkSettings.DeveloperSettings.Object
	bool bVerifyPeer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bEnableMultiplayerWorldOriginRebasing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	int MaxRepArraySize;//[Offset: 0x34 , Size: 4]
	int MaxRepArrayMemory;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: NodeMappingContainer.Object
	<NodeMapping_Key(NameProperty) , NodeMapping(StructProperty)> NodeMapping;//[Offset: 0x1c , Size: 60]
	Blueprint* SourceAsset;//[Offset: 0x58 , Size: 40]

--------------------------------
Class: NodeMappingProviderInterface.Interface.Object

--------------------------------
Class: Note.Actor.Object

--------------------------------
Class: ObjectLibrary.Object
	class Object* ObjectBaseClass;//[Offset: 0x1c , Size: 4]
	bool bHasBlueprintClasses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	Objects(ObjectProperty)[] Objects;//[Offset: 0x24 , Size: 12]
	WeakObjects(WeakObjectProperty)[] WeakObjects;//[Offset: 0x30 , Size: 12]
	bool bUseWeakReferences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	bool bIsFullyLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d , Size: 1]

--------------------------------
Class: ObjectPoolInterface.Interface.Object
	function OnRespawned();// 0x1755084
	function OnRecycled();// 0x1755068

--------------------------------
Class: ObjectReferencer.Object
	ReferencedObjects(ObjectProperty)[] ReferencedObjects;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: OnlineBlueprintCallProxyBase.Object
	function Activate();// 0x199c3f8

--------------------------------
Class: OnlineEngineInterface.Object

--------------------------------
Class: PackageMapClient.PackageMap.Object

--------------------------------
Class: PainCausingVolume.PhysicsVolume.Volume.Brush.Actor.Object
	bool bPainCausing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2f9 , Size: 1]
	float DamagePerSec;//[Offset: 0x2fc , Size: 4]
	class DamageType* DamageType;//[Offset: 0x300 , Size: 4]
	float PainInterval;//[Offset: 0x304 , Size: 4]
	bool bEntryPain;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x308 , Size: 1]
	bool BACKUP_bPainCausing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x308 , Size: 1]
	Controller* DamageInstigator;//[Offset: 0x30c , Size: 4]

--------------------------------
Class: ParticleEmitter.Object
	FName EmitterName;//[Offset: 0x20 , Size: 8]
	int SubUVDataOffset;//[Offset: 0x28 , Size: 4]
	byte EmitterRenderMode;//[Offset: 0x2c , Size: 1]
	LODLevels(ObjectProperty)[] LODLevels;//[Offset: 0x30 , Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]
	int PeakActiveParticles;//[Offset: 0x40 , Size: 4]
	int InitialAllocationCount;//[Offset: 0x44 , Size: 4]
	float MediumDetailSpawnRateScale;//[Offset: 0x48 , Size: 4]
	float QualityLevelSpawnRateScale;//[Offset: 0x4c , Size: 4]
	byte DetailMode;//[Offset: 0x50 , Size: 1]
	bool bIsSoloing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x51 , Size: 1]
	bool bCookedOut;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x51 , Size: 1]
	bool bDisabledLODsKeepEmitterAlive;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x51 , Size: 1]
	bool bDisableWhenInsignficant;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x51 , Size: 1]
	enum SignificanceLevel;//[Offset: 0x52 , Size: 1]
	bool bSupportParticleDynamicInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x53 , Size: 1]

--------------------------------
Class: ParticleLODLevel.Object
	int Level;//[Offset: 0x1c , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x20 , Size: 1]
	ParticleModuleRequired* RequiredModule;//[Offset: 0x24 , Size: 4]
	Modules(ObjectProperty)[] Modules;//[Offset: 0x28 , Size: 12]
	ParticleModuleTypeDataBase* TypeDataModule;//[Offset: 0x34 , Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x38 , Size: 4]
	ParticleModuleEventGenerator* EventGenerator;//[Offset: 0x3c , Size: 4]
	SpawningModules(ObjectProperty)[] SpawningModules;//[Offset: 0x40 , Size: 12]
	SpawnModules(ObjectProperty)[] SpawnModules;//[Offset: 0x4c , Size: 12]
	UpdateModules(ObjectProperty)[] UpdateModules;//[Offset: 0x58 , Size: 12]
	OrbitModules(ObjectProperty)[] OrbitModules;//[Offset: 0x64 , Size: 12]
	EventReceiverModules(ObjectProperty)[] EventReceiverModules;//[Offset: 0x70 , Size: 12]
	bool ConvertedModules;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	int PeakActiveParticles;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: ParticleModuleRequired.ParticleModule.Object
	MaterialInterface* Material;//[Offset: 0x20 , Size: 4]
	Vector EmitterOrigin;//[Offset: 0x24 , Size: 12]
	Rotator EmitterRotation;//[Offset: 0x30 , Size: 12]
	byte ScreenAlignment;//[Offset: 0x3c , Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x40 , Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x44 , Size: 4]
	bool bUseLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	bool bKillOnDeactivate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48 , Size: 1]
	bool bKillOnCompleted;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48 , Size: 1]
	byte SortMode;//[Offset: 0x49 , Size: 1]
	bool bUseLegacyEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4a , Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4a , Size: 1]
	float EmitterDuration;//[Offset: 0x4c , Size: 4]
	float EmitterDurationLow;//[Offset: 0x50 , Size: 4]
	bool bEmitterDurationUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x54 , Size: 1]
	bool bDurationRecalcEachLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]
	int EmitterLoops;//[Offset: 0x58 , Size: 4]
	RawDistributionFloat SpawnRate;//[Offset: 0x5c , Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x84 , Size: 1]
	BurstList(StructProperty)[] BurstList;//[Offset: 0x88 , Size: 12]
	float EmitterDelay;//[Offset: 0x94 , Size: 4]
	float EmitterDelayLow;//[Offset: 0x98 , Size: 4]
	bool bEmitterDelayUseRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bDelayFirstLoopOnly;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c , Size: 1]
	byte InterpolationMethod;//[Offset: 0x9d , Size: 1]
	int SubImages_Horizontal;//[Offset: 0xa0 , Size: 4]
	int SubImages_Vertical;//[Offset: 0xa4 , Size: 4]
	bool bScaleUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	float RandomImageTime;//[Offset: 0xac , Size: 4]
	int RandomImageChanges;//[Offset: 0xb0 , Size: 4]
	bool bOverrideSystemMacroUV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4 , Size: 1]
	Vector MacroUVPosition;//[Offset: 0xb8 , Size: 12]
	float MacroUVRadius;//[Offset: 0xc4 , Size: 4]
	bool bUseMaxDrawCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc8 , Size: 1]
	int MaxDrawCount;//[Offset: 0xcc , Size: 4]
	enum UVFlippingMode;//[Offset: 0xd0 , Size: 1]
	Texture2D* CutoutTexture;//[Offset: 0xd4 , Size: 4]
	byte BoundingMode;//[Offset: 0xd8 , Size: 1]
	byte OpacitySourceMode;//[Offset: 0xd9 , Size: 1]
	float AlphaThreshold;//[Offset: 0xdc , Size: 4]
	byte EmitterNormalsMode;//[Offset: 0xe0 , Size: 1]
	Vector NormalsSphereCenter;//[Offset: 0xe4 , Size: 12]
	Vector NormalsCylinderDirection;//[Offset: 0xf0 , Size: 12]
	bool bOrbitModuleAffectsVelocityAlignment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc , Size: 1]
	NamedMaterialOverrides(NameProperty)[] NamedMaterialOverrides;//[Offset: 0x100 , Size: 12]
	MobileDerivedDataCache(ByteProperty)[] MobileDerivedDataCache;//[Offset: 0x10c , Size: 12]

--------------------------------
Class: ParticleModule.Object
	bool bSpawnModule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1c , Size: 1]
	bool bUpdateModule;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1c , Size: 1]
	bool bFinalUpdateModule;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1c , Size: 1]
	bool bUpdateForGPUEmitter;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1c , Size: 1]
	bool bCurvesAsColor;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1c , Size: 1]
	bool b3DDrawMode;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1c , Size: 1]
	bool bSupported3DDrawMode;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1c , Size: 1]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1c , Size: 1]
	bool bEditable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d , Size: 1]
	bool LODDuplicate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1d , Size: 1]
	bool bSupportsRandomSeed;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1d , Size: 1]
	bool bRequiresLoopingNotification;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1d , Size: 1]
	byte LODValidity;//[Offset: 0x1e , Size: 1]

--------------------------------
Class: RawDistributionFloat.RawDistribution
	float MinValue;//[Offset: 0x1c , Size: 4]
	float MaxValue;//[Offset: 0x20 , Size: 4]
	DistributionFloat* Distribution;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: RawDistribution
	DistributionLookupTable Table;//[Offset: 0x0 , Size: 28]

--------------------------------
Class: DistributionLookupTable
	byte Op;//[Offset: 0x0 , Size: 1]
	byte EntryCount;//[Offset: 0x1 , Size: 1]
	byte EntryStride;//[Offset: 0x2 , Size: 1]
	byte SubEntryStride;//[Offset: 0x3 , Size: 1]
	float TimeScale;//[Offset: 0x4 , Size: 4]
	float TimeBias;//[Offset: 0x8 , Size: 4]
	Values(FloatProperty)[] Values;//[Offset: 0xc , Size: 12]
	byte LockFlag;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: ParticleModuleTypeDataBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSpawn.ParticleModuleSpawnBase.ParticleModule.Object
	RawDistributionFloat Rate;//[Offset: 0x20 , Size: 40]
	RawDistributionFloat RateScale;//[Offset: 0x48 , Size: 40]
	byte ParticleBurstMethod;//[Offset: 0x70 , Size: 1]
	BurstList(StructProperty)[] BurstList;//[Offset: 0x74 , Size: 12]
	RawDistributionFloat BurstScale;//[Offset: 0x80 , Size: 40]
	bool bApplyGlobalSpawnRateScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]

--------------------------------
Class: ParticleModuleSpawnBase.ParticleModule.Object
	bool bProcessSpawnRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	bool bProcessBurstList;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleEventGenerator.ParticleModuleEventBase.ParticleModule.Object
	Events(StructProperty)[] Events;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: ParticleModuleEventBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAccelerationBase.ParticleModule.Object
	bool bAlwaysInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleAcceleration.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector Acceleration;//[Offset: 0x20 , Size: 64]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]

--------------------------------
Class: RawDistributionVector.RawDistribution
	float MinValue;//[Offset: 0x1c , Size: 4]
	float MaxValue;//[Offset: 0x20 , Size: 4]
	Vector MinValueVec;//[Offset: 0x24 , Size: 12]
	Vector MaxValueVec;//[Offset: 0x30 , Size: 12]
	DistributionVector* Distribution;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: ParticleModuleAccelerationConstant.ParticleModuleAccelerationBase.ParticleModule.Object
	Vector Acceleration;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: ParticleModuleAccelerationDrag.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragCoefficient;//[Offset: 0x20 , Size: 4]
	RawDistributionFloat DragCoefficientRaw;//[Offset: 0x24 , Size: 40]

--------------------------------
Class: ParticleModuleAccelerationDragScaleOverLife.ParticleModuleAccelerationBase.ParticleModule.Object
	DistributionFloat* DragScale;//[Offset: 0x20 , Size: 4]
	RawDistributionFloat DragScaleRaw;//[Offset: 0x24 , Size: 40]

--------------------------------
Class: ParticleModuleAccelerationOverLifetime.ParticleModuleAccelerationBase.ParticleModule.Object
	RawDistributionVector AccelOverLife;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: ParticleModuleAttractorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleAttractorLine.ParticleModuleAttractorBase.ParticleModule.Object
	Vector EndPoint0;//[Offset: 0x20 , Size: 12]
	Vector EndPoint1;//[Offset: 0x2c , Size: 12]
	RawDistributionFloat Range;//[Offset: 0x38 , Size: 40]
	RawDistributionFloat Strength;//[Offset: 0x60 , Size: 40]

--------------------------------
Class: ParticleModuleAttractorParticle.ParticleModuleAttractorBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x20 , Size: 8]
	RawDistributionFloat Range;//[Offset: 0x28 , Size: 40]
	bool bStrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	RawDistributionFloat Strength;//[Offset: 0x54 , Size: 40]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	byte SelectionMethod;//[Offset: 0x7d , Size: 1]
	bool bRenewSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e , Size: 1]
	bool bInheritSourceVel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e , Size: 1]
	int LastSelIndex;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: ParticleModuleAttractorPoint.ParticleModuleAttractorBase.ParticleModule.Object
	RawDistributionVector Position;//[Offset: 0x20 , Size: 64]
	RawDistributionFloat Range;//[Offset: 0x60 , Size: 40]
	RawDistributionFloat Strength;//[Offset: 0x88 , Size: 40]
	bool StrengthByDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0 , Size: 1]
	bool bAffectBaseVelocity;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb0 , Size: 1]
	bool bOverrideVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb0 , Size: 1]
	bool bUseWorldSpacePosition;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xb0 , Size: 1]
	bool Positive_X;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xb0 , Size: 1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xb0 , Size: 1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xb0 , Size: 1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xb0 , Size: 1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb1 , Size: 1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb1 , Size: 1]

--------------------------------
Class: ParticleModuleAttractorPointGravity.ParticleModuleAttractorBase.ParticleModule.Object
	Vector Position;//[Offset: 0x20 , Size: 12]
	float Radius;//[Offset: 0x2c , Size: 4]
	DistributionFloat* Strength;//[Offset: 0x30 , Size: 4]
	RawDistributionFloat StrengthRaw;//[Offset: 0x34 , Size: 40]

--------------------------------
Class: ParticleModuleBeamBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleBeamModifier.ParticleModuleBeamBase.ParticleModule.Object
	byte ModifierType;//[Offset: 0x1f , Size: 1]
	BeamModifierOptions PositionOptions;//[Offset: 0x20 , Size: 4]
	RawDistributionVector Position;//[Offset: 0x24 , Size: 64]
	BeamModifierOptions TangentOptions;//[Offset: 0x64 , Size: 4]
	RawDistributionVector Tangent;//[Offset: 0x68 , Size: 64]
	bool bAbsoluteTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa8 , Size: 1]
	BeamModifierOptions StrengthOptions;//[Offset: 0xac , Size: 4]
	RawDistributionFloat Strength;//[Offset: 0xb0 , Size: 40]

--------------------------------
Class: BeamModifierOptions
	bool bModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bLock;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: ParticleModuleBeamNoise.ParticleModuleBeamBase.ParticleModule.Object
	bool bLowFreq_Enabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	int Frequency;//[Offset: 0x20 , Size: 4]
	int Frequency_LowRange;//[Offset: 0x24 , Size: 4]
	RawDistributionVector NoiseRange;//[Offset: 0x28 , Size: 64]
	RawDistributionFloat NoiseRangeScale;//[Offset: 0x68 , Size: 40]
	bool bNRScaleEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x90 , Size: 1]
	RawDistributionVector NoiseSpeed;//[Offset: 0x94 , Size: 64]
	bool bSmooth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd4 , Size: 1]
	float NoiseLockRadius;//[Offset: 0xd8 , Size: 4]
	bool bNoiseLock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc , Size: 1]
	bool bOscillate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xdc , Size: 1]
	float NoiseLockTime;//[Offset: 0xe0 , Size: 4]
	float NoiseTension;//[Offset: 0xe4 , Size: 4]
	bool bUseNoiseTangents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe8 , Size: 1]
	RawDistributionFloat NoiseTangentStrength;//[Offset: 0xec , Size: 40]
	int NoiseTessellation;//[Offset: 0x114 , Size: 4]
	bool bTargetNoise;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x118 , Size: 1]
	float FrequencyDistance;//[Offset: 0x11c , Size: 4]
	bool bApplyNoiseScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x120 , Size: 1]
	RawDistributionFloat NoiseScale;//[Offset: 0x124 , Size: 40]

--------------------------------
Class: ParticleModuleBeamSource.ParticleModuleBeamBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x1f , Size: 1]
	FName SourceName;//[Offset: 0x20 , Size: 8]
	bool bSourceAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	RawDistributionVector Source;//[Offset: 0x2c , Size: 64]
	bool bLockSource;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	byte SourceTangentMethod;//[Offset: 0x6d , Size: 1]
	RawDistributionVector SourceTangent;//[Offset: 0x70 , Size: 64]
	bool bLockSourceTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb0 , Size: 1]
	RawDistributionFloat SourceStrength;//[Offset: 0xb4 , Size: 40]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xdc , Size: 1]

--------------------------------
Class: ParticleModuleBeamTarget.ParticleModuleBeamBase.ParticleModule.Object
	byte TargetMethod;//[Offset: 0x1f , Size: 1]
	FName TargetName;//[Offset: 0x20 , Size: 8]
	RawDistributionVector Target;//[Offset: 0x28 , Size: 64]
	bool bTargetAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x68 , Size: 1]
	bool bLockTarget;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x68 , Size: 1]
	byte TargetTangentMethod;//[Offset: 0x69 , Size: 1]
	RawDistributionVector TargetTangent;//[Offset: 0x6c , Size: 64]
	bool bLockTargetTangent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac , Size: 1]
	RawDistributionFloat TargetStrength;//[Offset: 0xb0 , Size: 40]
	bool bLockTargetStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xd8 , Size: 1]
	float LockRadius;//[Offset: 0xdc , Size: 4]

--------------------------------
Class: ParticleModuleCameraBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCameraOffset.ParticleModuleCameraBase.ParticleModule.Object
	RawDistributionFloat CameraOffset;//[Offset: 0x20 , Size: 40]
	bool bSpawnTimeOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	byte UpdateMethod;//[Offset: 0x49 , Size: 1]

--------------------------------
Class: ParticleModuleCollisionBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleCollision.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionVector DampingFactor;//[Offset: 0x20 , Size: 64]
	RawDistributionVector DampingFactorRotation;//[Offset: 0x60 , Size: 64]
	RawDistributionFloat MaxCollisions;//[Offset: 0xa0 , Size: 40]
	byte CollisionCompletionOption;//[Offset: 0xc8 , Size: 1]
	CollisionTypes(ByteProperty)[] CollisionTypes;//[Offset: 0xcc , Size: 12]
	bool bApplyPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xe0 , Size: 1]
	bool bIgnoreTriggerVolumes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xe0 , Size: 1]
	RawDistributionFloat ParticleMass;//[Offset: 0xe4 , Size: 40]
	float DirScalar;//[Offset: 0x10c , Size: 4]
	bool bPawnsDoNotDecrementCount;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x110 , Size: 1]
	bool bOnlyVerticalNormalsDecrementCount;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x110 , Size: 1]
	float VerticalFudgeFactor;//[Offset: 0x114 , Size: 4]
	RawDistributionFloat DelayAmount;//[Offset: 0x118 , Size: 40]
	bool bDropDetail;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x140 , Size: 1]
	bool bCollideOnlyIfVisible;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x140 , Size: 1]
	bool bIgnoreSourceActor;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x140 , Size: 1]
	float MaxCollisionDistance;//[Offset: 0x144 , Size: 4]

--------------------------------
Class: ParticleModuleCollisionGPU.ParticleModuleCollisionBase.ParticleModule.Object
	RawDistributionFloat Resilience;//[Offset: 0x20 , Size: 40]
	RawDistributionFloat ResilienceScaleOverLife;//[Offset: 0x48 , Size: 40]
	float Friction;//[Offset: 0x70 , Size: 4]
	float RandomSpread;//[Offset: 0x74 , Size: 4]
	float RandomDistribution;//[Offset: 0x78 , Size: 4]
	float RadiusScale;//[Offset: 0x7c , Size: 4]
	float RadiusBias;//[Offset: 0x80 , Size: 4]
	byte Response;//[Offset: 0x84 , Size: 1]
	byte CollisionMode;//[Offset: 0x85 , Size: 1]

--------------------------------
Class: ParticleModuleCollisionHeight.ParticleModuleCollisionBase.ParticleModule.Object
	CollisionTypes(ByteProperty)[] CollisionTypes;//[Offset: 0x20 , Size: 12]
	uint32 CollisionStep;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: ParticleModuleColorBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector StartColor;//[Offset: 0x20 , Size: 64]
	RawDistributionFloat StartAlpha;//[Offset: 0x60 , Size: 40]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]

--------------------------------
Class: ParticleModuleColor_Seeded.ParticleModuleColor.ParticleModuleColorBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x90 , Size: 24]

--------------------------------
Class: ParticleRandomSeedInfo
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	bool bGetSeedFromInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bInstanceSeedIsIndex;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bResetSeedOnEmitterLooping;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	bool bRandomlySelectSeedArray;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x8 , Size: 1]
	RandomSeeds(IntProperty)[] RandomSeeds;//[Offset: 0xc , Size: 12]

--------------------------------
Class: ParticleModuleColorOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorOverLife;//[Offset: 0x20 , Size: 64]
	RawDistributionFloat AlphaOverLife;//[Offset: 0x60 , Size: 40]
	bool bClampAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]

--------------------------------
Class: ParticleModuleColorScaleOverLife.ParticleModuleColorBase.ParticleModule.Object
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x20 , Size: 64]
	RawDistributionFloat AlphaScaleOverLife;//[Offset: 0x60 , Size: 40]
	bool bEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	byte EventGeneratorType;//[Offset: 0x1f , Size: 1]
	FName EventName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: ParticleModuleEventReceiverKillParticles.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	bool bStopSpawning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]

--------------------------------
Class: ParticleModuleEventReceiverSpawn.ParticleModuleEventReceiverBase.ParticleModuleEventBase.ParticleModule.Object
	RawDistributionFloat SpawnCount;//[Offset: 0x28 , Size: 40]
	bool bUseParticleTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool bUsePSysLocation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]
	bool bInheritVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50 , Size: 1]
	RawDistributionVector InheritVelocityScale;//[Offset: 0x54 , Size: 64]
	PhysicalMaterials(ObjectProperty)[] PhysicalMaterials;//[Offset: 0x94 , Size: 12]
	bool bBanPhysicalMaterials;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0 , Size: 1]

--------------------------------
Class: ParticleModuleEventSendToGame.Object

--------------------------------
Class: ParticleModuleKillBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleKillBox.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionVector LowerLeftCorner;//[Offset: 0x20 , Size: 64]
	RawDistributionVector UpperRightCorner;//[Offset: 0x60 , Size: 64]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa0 , Size: 1]
	bool bKillInside;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa0 , Size: 1]
	bool bAxisAlignedAndFixedSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa0 , Size: 1]

--------------------------------
Class: ParticleModuleKillHeight.ParticleModuleKillBase.ParticleModule.Object
	RawDistributionFloat Height;//[Offset: 0x20 , Size: 40]
	bool bAbsolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]
	bool bFloor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x48 , Size: 1]
	bool bApplyPSysScale;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ParticleModuleLifetimeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	RawDistributionFloat LifeTime;//[Offset: 0x20 , Size: 40]

--------------------------------
Class: ParticleModuleLifetime_Seeded.ParticleModuleLifetime.ParticleModuleLifetimeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48 , Size: 24]

--------------------------------
Class: ParticleModuleLightBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	bool bUseInverseSquaredFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f , Size: 1]
	bool bAffectsTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	bool bPreviewLightRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21 , Size: 1]
	float SpawnFraction;//[Offset: 0x24 , Size: 4]
	RawDistributionVector ColorScaleOverLife;//[Offset: 0x28 , Size: 64]
	RawDistributionFloat BrightnessOverLife;//[Offset: 0x68 , Size: 40]
	RawDistributionFloat RadiusScale;//[Offset: 0x90 , Size: 40]
	RawDistributionFloat LightExponent;//[Offset: 0xb8 , Size: 40]
	LightingChannels LightingChannels;//[Offset: 0xe0 , Size: 1]
	float VolumetricScatteringIntensity;//[Offset: 0xe4 , Size: 4]
	bool bHighQualityLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	bool bShadowCastingLights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe9 , Size: 1]

--------------------------------
Class: ParticleModuleLight_Seeded.ParticleModuleLight.ParticleModuleLightBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xf0 , Size: 24]

--------------------------------
Class: ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartLocation;//[Offset: 0x20 , Size: 64]
	float DistributeOverNPoints;//[Offset: 0x60 , Size: 4]
	float DistributeThreshold;//[Offset: 0x64 , Size: 4]

--------------------------------
Class: ParticleModuleLocation_Seeded.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x68 , Size: 24]

--------------------------------
Class: ParticleModuleLocationBoneSocket.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x1f , Size: 1]
	Vector UniversalOffset;//[Offset: 0x20 , Size: 12]
	SourceLocations(StructProperty)[] SourceLocations;//[Offset: 0x2c , Size: 12]
	byte SelectionMethod;//[Offset: 0x38 , Size: 1]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x39 , Size: 1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x39 , Size: 1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x39 , Size: 1]
	float InheritVelocityScale;//[Offset: 0x3c , Size: 4]
	FName SkelMeshActorParamName;//[Offset: 0x40 , Size: 8]
	int NumPreSelectedIndices;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: ParticleModuleLocationDirect.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector Location;//[Offset: 0x20 , Size: 64]
	RawDistributionVector LocationOffset;//[Offset: 0x60 , Size: 64]
	RawDistributionVector ScaleFactor;//[Offset: 0xa0 , Size: 64]
	RawDistributionVector Direction;//[Offset: 0xe0 , Size: 64]

--------------------------------
Class: ParticleModuleLocationEmitter.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x20 , Size: 8]
	byte SelectionMethod;//[Offset: 0x28 , Size: 1]
	bool InheritSourceVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x29 , Size: 1]
	float InheritSourceVelocityScale;//[Offset: 0x2c , Size: 4]
	bool bInheritSourceRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	float InheritSourceRotationScale;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: ParticleModuleLocationEmitterDirect.ParticleModuleLocationBase.ParticleModule.Object
	FName EmitterName;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool Positive_X;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	bool Positive_Y;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f , Size: 1]
	bool Positive_Z;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f , Size: 1]
	bool Negative_X;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x1f , Size: 1]
	bool Negative_Y;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x1f , Size: 1]
	bool Negative_Z;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x1f , Size: 1]
	bool SurfaceOnly;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x1f , Size: 1]
	bool Velocity;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x1f , Size: 1]
	RawDistributionFloat VelocityScale;//[Offset: 0x20 , Size: 40]
	RawDistributionVector StartLocation;//[Offset: 0x48 , Size: 64]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	bool RadialVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x88 , Size: 1]
	RawDistributionFloat StartRadius;//[Offset: 0x8c , Size: 40]
	RawDistributionFloat StartHeight;//[Offset: 0xb4 , Size: 40]
	byte HeightAxis;//[Offset: 0xdc , Size: 1]

--------------------------------
Class: ParticleModuleLocationPrimitiveCylinder_Seeded.ParticleModuleLocationPrimitiveCylinder.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xe0 , Size: 24]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionFloat StartRadius;//[Offset: 0x88 , Size: 40]

--------------------------------
Class: ParticleModuleLocationPrimitiveSphere_Seeded.ParticleModuleLocationPrimitiveSphere.ParticleModuleLocationPrimitiveBase.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0xb0 , Size: 24]

--------------------------------
Class: ParticleModuleLocationPrimitiveTriangle.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector StartOffset;//[Offset: 0x20 , Size: 64]
	RawDistributionFloat Height;//[Offset: 0x60 , Size: 40]
	RawDistributionFloat Angle;//[Offset: 0x88 , Size: 40]
	RawDistributionFloat Thickness;//[Offset: 0xb0 , Size: 40]

--------------------------------
Class: ParticleModuleLocationSkelVertSurface.ParticleModuleLocationBase.ParticleModule.Object
	byte SourceType;//[Offset: 0x1f , Size: 1]
	Vector UniversalOffset;//[Offset: 0x20 , Size: 12]
	bool bUpdatePositionEachFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]
	bool bOrientMeshEmitters;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c , Size: 1]
	bool bInheritBoneVelocity;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x2c , Size: 1]
	float InheritVelocityScale;//[Offset: 0x30 , Size: 4]
	FName SkelMeshActorParamName;//[Offset: 0x38 , Size: 8]
	ValidAssociatedBones(NameProperty)[] ValidAssociatedBones;//[Offset: 0x40 , Size: 12]
	bool bEnforceNormalCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	Vector NormalToCompare;//[Offset: 0x50 , Size: 12]
	float NormalCheckToleranceDegrees;//[Offset: 0x5c , Size: 4]
	float NormalCheckTolerance;//[Offset: 0x60 , Size: 4]
	ValidMaterialIndices(IntProperty)[] ValidMaterialIndices;//[Offset: 0x64 , Size: 12]
	bool bInheritVertexColor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x70 , Size: 1]
	bool bInheritUV;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x70 , Size: 1]
	uint32 InheritUVChannel;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleLocationWorldOffset_Seeded.ParticleModuleLocationWorldOffset.ParticleModuleLocation.ParticleModuleLocationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x68 , Size: 24]

--------------------------------
Class: ParticleModuleMaterialBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshMaterial.ParticleModuleMaterialBase.ParticleModule.Object
	MeshMaterials(ObjectProperty)[] MeshMaterials;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: ParticleModuleRotationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionVector StartRotation;//[Offset: 0x20 , Size: 64]
	bool bInheritParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]

--------------------------------
Class: ParticleModuleMeshRotation_Seeded.ParticleModuleMeshRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x68 , Size: 24]

--------------------------------
Class: ParticleModuleRotationRateBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector StartRotationRate;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: ParticleModuleMeshRotationRate_Seeded.ParticleModuleMeshRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60 , Size: 24]

--------------------------------
Class: ParticleModuleMeshRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: ParticleModuleMeshRotationRateOverLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionVector RotRate;//[Offset: 0x20 , Size: 64]
	bool bScaleRotRate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]

--------------------------------
Class: ParticleModuleOrbitBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleOrbit.ParticleModuleOrbitBase.ParticleModule.Object
	byte ChainMode;//[Offset: 0x20 , Size: 1]
	RawDistributionVector OffsetAmount;//[Offset: 0x24 , Size: 64]
	OrbitOptions OffsetOptions;//[Offset: 0x64 , Size: 4]
	RawDistributionVector RotationAmount;//[Offset: 0x68 , Size: 64]
	OrbitOptions RotationOptions;//[Offset: 0xa8 , Size: 4]
	RawDistributionVector RotationRateAmount;//[Offset: 0xac , Size: 64]
	OrbitOptions RotationRateOptions;//[Offset: 0xec , Size: 4]

--------------------------------
Class: OrbitOptions
	bool bProcessDuringSpawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bProcessDuringUpdate;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x0 , Size: 1]

--------------------------------
Class: ParticleModuleOrientationBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleOrientationAxisLock.ParticleModuleOrientationBase.ParticleModule.Object
	byte LockAxisFlags;//[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleParameterBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	DynamicParams(StructProperty)[] DynamicParams;//[Offset: 0x20 , Size: 12]
	int UpdateFlags;//[Offset: 0x2c , Size: 4]
	bool bUsesVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]

--------------------------------
Class: ParticleModuleParameterDynamic_Seeded.ParticleModuleParameterDynamic.ParticleModuleParameterBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x38 , Size: 24]

--------------------------------
Class: ParticleModulePivotOffset.ParticleModuleLocationBase.ParticleModule.Object
	Vector2D PivotOffset;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat StartRotation;//[Offset: 0x20 , Size: 40]

--------------------------------
Class: ParticleModuleRotation_Seeded.ParticleModuleRotation.ParticleModuleRotationBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48 , Size: 24]

--------------------------------
Class: ParticleModuleRotationOverLifetime.ParticleModuleRotationBase.ParticleModule.Object
	RawDistributionFloat RotationOverLife;//[Offset: 0x20 , Size: 40]
	bool Scale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat StartRotationRate;//[Offset: 0x20 , Size: 40]

--------------------------------
Class: ParticleModuleRotationRate_Seeded.ParticleModuleRotationRate.ParticleModuleRotationRateBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x48 , Size: 24]

--------------------------------
Class: ParticleModuleRotationRateMultiplyLife.ParticleModuleRotationRateBase.ParticleModule.Object
	RawDistributionFloat LifeMultiplier;//[Offset: 0x20 , Size: 40]

--------------------------------
Class: ParticleModuleSizeBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector StartSize;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: ParticleModuleSize_Seeded.ParticleModuleSize.ParticleModuleSizeBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x60 , Size: 24]

--------------------------------
Class: ParticleModuleSizeMultiplyLife.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector LifeMultiplier;//[Offset: 0x20 , Size: 64]
	bool MultiplyX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	bool MultiplyY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60 , Size: 1]
	bool MultiplyZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60 , Size: 1]

--------------------------------
Class: ParticleModuleSizeScale.ParticleModuleSizeBase.ParticleModule.Object
	RawDistributionVector SizeScale;//[Offset: 0x20 , Size: 64]
	bool EnableX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	bool EnableY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x60 , Size: 1]
	bool EnableZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x60 , Size: 1]

--------------------------------
Class: ParticleModuleSizeScaleBySpeed.ParticleModuleSizeBase.ParticleModule.Object
	Vector2D SpeedScale;//[Offset: 0x20 , Size: 8]
	Vector2D MaxScale;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: ParticleModuleSourceMovement.ParticleModuleLocationBase.ParticleModule.Object
	RawDistributionVector SourceMovementScale;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: ParticleModuleSpawnPerUnit.ParticleModuleSpawnBase.ParticleModule.Object
	float UnitScalar;//[Offset: 0x20 , Size: 4]
	RawDistributionFloat SpawnPerUnit;//[Offset: 0x24 , Size: 40]
	bool bIgnoreSpawnRateWhenMoving;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]
	float MovementTolerance;//[Offset: 0x50 , Size: 4]
	float MaxFrameDistance;//[Offset: 0x54 , Size: 4]
	bool bIgnoreMovementAlongX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x58 , Size: 1]
	bool bIgnoreMovementAlongY;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x58 , Size: 1]
	bool bIgnoreMovementAlongZ;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x58 , Size: 1]

--------------------------------
Class: ParticleModuleSubUVBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	SubUVAnimation* Animation;//[Offset: 0x20 , Size: 4]
	RawDistributionFloat SubImageIndex;//[Offset: 0x24 , Size: 40]
	bool bUseRealTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4c , Size: 1]

--------------------------------
Class: SubUVAnimation.Object
	Texture2D* SubUVTexture;//[Offset: 0x1c , Size: 4]
	int SubImages_Horizontal;//[Offset: 0x20 , Size: 4]
	int SubImages_Vertical;//[Offset: 0x24 , Size: 4]
	byte BoundingMode;//[Offset: 0x28 , Size: 1]
	byte OpacitySourceMode;//[Offset: 0x29 , Size: 1]
	float AlphaThreshold;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: ParticleModuleSubUVMovie.ParticleModuleSubUV.ParticleModuleSubUVBase.ParticleModule.Object
	bool bUseEmitterTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4d , Size: 1]
	RawDistributionFloat FrameRate;//[Offset: 0x50 , Size: 40]
	int StartingFrame;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: ParticleModuleTrailBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleTrailSource.ParticleModuleTrailBase.ParticleModule.Object
	byte SourceMethod;//[Offset: 0x1f , Size: 1]
	FName SourceName;//[Offset: 0x20 , Size: 8]
	RawDistributionFloat SourceStrength;//[Offset: 0x28 , Size: 40]
	bool bLockSourceStength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	int SourceOffsetCount;//[Offset: 0x54 , Size: 4]
	SourceOffsetDefaults(StructProperty)[] SourceOffsetDefaults;//[Offset: 0x58 , Size: 12]
	byte SelectionMethod;//[Offset: 0x64 , Size: 1]
	bool bInheritRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x65 , Size: 1]

--------------------------------
Class: ParticleModuleTypeDataAnimTrail.ParticleModuleTypeDataBase.ParticleModule.Object
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f , Size: 1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f , Size: 1]
	float TilingDistance;//[Offset: 0x20 , Size: 4]
	float DistanceTessellationStepSize;//[Offset: 0x24 , Size: 4]
	float TangentTessellationStepSize;//[Offset: 0x28 , Size: 4]
	float WidthTessellationStepSize;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: ParticleModuleTypeDataBeam2.ParticleModuleTypeDataBase.ParticleModule.Object
	byte BeamMethod;//[Offset: 0x1f , Size: 1]
	int TextureTile;//[Offset: 0x20 , Size: 4]
	float TextureTileDistance;//[Offset: 0x24 , Size: 4]
	int Sheets;//[Offset: 0x28 , Size: 4]
	int MaxBeamCount;//[Offset: 0x2c , Size: 4]
	float Speed;//[Offset: 0x30 , Size: 4]
	int InterpolationPoints;//[Offset: 0x34 , Size: 4]
	bool bAlwaysOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	int UpVectorStepSize;//[Offset: 0x3c , Size: 4]
	FName BranchParentName;//[Offset: 0x40 , Size: 8]
	RawDistributionFloat Distance;//[Offset: 0x48 , Size: 40]
	byte TaperMethod;//[Offset: 0x70 , Size: 1]
	RawDistributionFloat TaperFactor;//[Offset: 0x74 , Size: 40]
	RawDistributionFloat TaperScale;//[Offset: 0x9c , Size: 40]
	bool RenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc4 , Size: 1]
	bool RenderDirectLine;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc4 , Size: 1]
	bool RenderLines;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xc4 , Size: 1]
	bool RenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xc4 , Size: 1]

--------------------------------
Class: ParticleModuleTypeDataGpu.ParticleModuleTypeDataBase.ParticleModule.Object
	GPUSpriteEmitterInfo EmitterInfo;//[Offset: 0x20 , Size: 560]
	GPUSpriteResourceData ResourceData;//[Offset: 0x250 , Size: 352]
	float CameraMotionBlurAmount;//[Offset: 0x3b0 , Size: 4]
	bool bClearExistingParticlesOnInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3b4 , Size: 1]

--------------------------------
Class: GPUSpriteEmitterInfo
	ParticleModuleRequired* RequiredModule;//[Offset: 0x0 , Size: 4]
	ParticleModuleSpawn* SpawnModule;//[Offset: 0x4 , Size: 4]
	ParticleModuleSpawnPerUnit* SpawnPerUnitModule;//[Offset: 0x8 , Size: 4]
	SpawnModules(ObjectProperty)[] SpawnModules;//[Offset: 0xc , Size: 12]
	GPUSpriteLocalVectorFieldInfo LocalVectorField;//[Offset: 0x20 , Size: 112]
	FloatDistribution VectorFieldScale;//[Offset: 0x90 , Size: 28]
	FloatDistribution DragCoefficient;//[Offset: 0xac , Size: 28]
	FloatDistribution PointAttractorStrength;//[Offset: 0xc8 , Size: 28]
	FloatDistribution Resilience;//[Offset: 0xe4 , Size: 28]
	Vector ConstantAcceleration;//[Offset: 0x100 , Size: 12]
	Vector PointAttractorPosition;//[Offset: 0x10c , Size: 12]
	float PointAttractorRadiusSq;//[Offset: 0x118 , Size: 4]
	Vector OrbitOffsetBase;//[Offset: 0x11c , Size: 12]
	Vector OrbitOffsetRange;//[Offset: 0x128 , Size: 12]
	Vector2D InvMaxSize;//[Offset: 0x134 , Size: 8]
	float InvRotationRateScale;//[Offset: 0x13c , Size: 4]
	float MaxLifetime;//[Offset: 0x140 , Size: 4]
	int MaxParticleCount;//[Offset: 0x144 , Size: 4]
	byte ScreenAlignment;//[Offset: 0x148 , Size: 1]
	byte LockAxisFlag;//[Offset: 0x149 , Size: 1]
	bool bEnableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14a , Size: 1]
	byte CollisionMode;//[Offset: 0x14b , Size: 1]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x14c , Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x150 , Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x154 , Size: 4]
	RawDistributionVector DynamicColor;//[Offset: 0x158 , Size: 64]
	RawDistributionFloat DynamicAlpha;//[Offset: 0x198 , Size: 40]
	RawDistributionVector DynamicColorScale;//[Offset: 0x1c0 , Size: 64]
	RawDistributionFloat DynamicAlphaScale;//[Offset: 0x200 , Size: 40]

--------------------------------
Class: GPUSpriteLocalVectorFieldInfo
	VectorField* Field;//[Offset: 0x0 , Size: 4]
	Transform Transform;//[Offset: 0x10 , Size: 48]
	Rotator MinInitialRotation;//[Offset: 0x40 , Size: 12]
	Rotator MaxInitialRotation;//[Offset: 0x4c , Size: 12]
	Rotator RotationRate;//[Offset: 0x58 , Size: 12]
	float Intensity;//[Offset: 0x64 , Size: 4]
	float Tightness;//[Offset: 0x68 , Size: 4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x6c , Size: 1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x6c , Size: 1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x6c , Size: 1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x6c , Size: 1]

--------------------------------
Class: VectorField.Object
	Box Bounds;//[Offset: 0x1c , Size: 28]
	float Intensity;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: FloatDistribution
	DistributionLookupTable Table;//[Offset: 0x0 , Size: 28]

--------------------------------
Class: GPUSpriteResourceData
	QuantizedColorSamples(StructProperty)[] QuantizedColorSamples;//[Offset: 0x0 , Size: 12]
	QuantizedMiscSamples(StructProperty)[] QuantizedMiscSamples;//[Offset: 0xc , Size: 12]
	QuantizedSimulationAttrSamples(StructProperty)[] QuantizedSimulationAttrSamples;//[Offset: 0x18 , Size: 12]
	Vector4 ColorScale;//[Offset: 0x30 , Size: 16]
	Vector4 ColorBias;//[Offset: 0x40 , Size: 16]
	Vector4 MiscScale;//[Offset: 0x50 , Size: 16]
	Vector4 MiscBias;//[Offset: 0x60 , Size: 16]
	Vector4 SimulationAttrCurveScale;//[Offset: 0x70 , Size: 16]
	Vector4 SimulationAttrCurveBias;//[Offset: 0x80 , Size: 16]
	Vector4 SubImageSize;//[Offset: 0x90 , Size: 16]
	Vector4 SizeBySpeed;//[Offset: 0xa0 , Size: 16]
	Vector ConstantAcceleration;//[Offset: 0xb0 , Size: 12]
	Vector OrbitOffsetBase;//[Offset: 0xbc , Size: 12]
	Vector OrbitOffsetRange;//[Offset: 0xc8 , Size: 12]
	Vector OrbitFrequencyBase;//[Offset: 0xd4 , Size: 12]
	Vector OrbitFrequencyRange;//[Offset: 0xe0 , Size: 12]
	Vector OrbitPhaseBase;//[Offset: 0xec , Size: 12]
	Vector OrbitPhaseRange;//[Offset: 0xf8 , Size: 12]
	float GlobalVectorFieldScale;//[Offset: 0x104 , Size: 4]
	float GlobalVectorFieldTightness;//[Offset: 0x108 , Size: 4]
	float PerParticleVectorFieldScale;//[Offset: 0x10c , Size: 4]
	float PerParticleVectorFieldBias;//[Offset: 0x110 , Size: 4]
	float DragCoefficientScale;//[Offset: 0x114 , Size: 4]
	float DragCoefficientBias;//[Offset: 0x118 , Size: 4]
	float ResilienceScale;//[Offset: 0x11c , Size: 4]
	float ResilienceBias;//[Offset: 0x120 , Size: 4]
	float CollisionRadiusScale;//[Offset: 0x124 , Size: 4]
	float CollisionRadiusBias;//[Offset: 0x128 , Size: 4]
	float CollisionTimeBias;//[Offset: 0x12c , Size: 4]
	float CollisionRandomSpread;//[Offset: 0x130 , Size: 4]
	float CollisionRandomDistribution;//[Offset: 0x134 , Size: 4]
	float OneMinusFriction;//[Offset: 0x138 , Size: 4]
	float RotationRateScale;//[Offset: 0x13c , Size: 4]
	float CameraMotionBlurAmount;//[Offset: 0x140 , Size: 4]
	byte ScreenAlignment;//[Offset: 0x144 , Size: 1]
	byte LockAxisFlag;//[Offset: 0x145 , Size: 1]
	Vector2D PivotOffset;//[Offset: 0x148 , Size: 8]
	bool bRemoveHMDRoll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x150 , Size: 1]
	float MinFacingCameraBlendDistance;//[Offset: 0x154 , Size: 4]
	float MaxFacingCameraBlendDistance;//[Offset: 0x158 , Size: 4]

--------------------------------
Class: ParticleModuleTypeDataMesh.ParticleModuleTypeDataBase.ParticleModule.Object
	StaticMesh* Mesh;//[Offset: 0x20 , Size: 4]
	bool CastShadows;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x24 , Size: 1]
	bool DoCollisions;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x24 , Size: 1]
	byte MeshAlignment;//[Offset: 0x25 , Size: 1]
	bool bOverrideMaterial;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26 , Size: 1]
	bool bOverrideDefaultMotionBlurSettings;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26 , Size: 1]
	bool bEnableMotionBlur;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x26 , Size: 1]
	float Pitch;//[Offset: 0x28 , Size: 4]
	float Roll;//[Offset: 0x2c , Size: 4]
	float Yaw;//[Offset: 0x30 , Size: 4]
	RawDistributionVector RollPitchYawRange;//[Offset: 0x34 , Size: 64]
	byte AxisLockOption;//[Offset: 0x7c , Size: 1]
	bool bCameraFacing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d , Size: 1]
	byte CameraFacingUpAxisOption;//[Offset: 0x7e , Size: 1]
	byte CameraFacingOption;//[Offset: 0x7f , Size: 1]
	bool bApplyParticleRotationAsSpin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x80 , Size: 1]
	bool bFaceCameraDirectionRatherThanPosition;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x80 , Size: 1]
	bool bCollisionsConsiderPartilceSize;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x80 , Size: 1]

--------------------------------
Class: ParticleModuleTypeDataRibbon.ParticleModuleTypeDataBase.ParticleModule.Object
	int MaxTessellationBetweenParticles;//[Offset: 0x20 , Size: 4]
	int SheetsPerTrail;//[Offset: 0x24 , Size: 4]
	int MaxTrailCount;//[Offset: 0x28 , Size: 4]
	int MaxParticleInTrailCount;//[Offset: 0x2c , Size: 4]
	bool bDeadTrailsOnDeactivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bDeadTrailsOnSourceLoss;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	bool bClipSourceSegement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30 , Size: 1]
	bool bEnablePreviousTangentRecalculation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x30 , Size: 1]
	bool bTangentRecalculationEveryFrame;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x30 , Size: 1]
	bool bSpawnInitialParticle;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x30 , Size: 1]
	byte RenderAxis;//[Offset: 0x31 , Size: 1]
	float TangentSpawningScalar;//[Offset: 0x34 , Size: 4]
	bool bRenderGeometry;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bRenderSpawnPoints;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	bool bRenderTangents;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x38 , Size: 1]
	bool bRenderTessellation;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x38 , Size: 1]
	float TilingDistance;//[Offset: 0x3c , Size: 4]
	float DistanceTessellationStepSize;//[Offset: 0x40 , Size: 4]
	bool bEnableTangentDiffInterpScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	float TangentTessellationScalar;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: ParticleModuleVectorFieldBase.ParticleModule.Object

--------------------------------
Class: ParticleModuleVectorFieldGlobal.ParticleModuleVectorFieldBase.ParticleModule.Object
	bool bOverrideGlobalVectorFieldTightness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	float GlobalVectorFieldScale;//[Offset: 0x20 , Size: 4]
	float GlobalVectorFieldTightness;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: ParticleModuleVectorFieldLocal.ParticleModuleVectorFieldBase.ParticleModule.Object
	VectorField* VectorField;//[Offset: 0x20 , Size: 4]
	Vector RelativeTranslation;//[Offset: 0x24 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x30 , Size: 12]
	Vector RelativeScale3D;//[Offset: 0x3c , Size: 12]
	float Intensity;//[Offset: 0x48 , Size: 4]
	float Tightness;//[Offset: 0x4c , Size: 4]
	bool bIgnoreComponentTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool bTileX;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]
	bool bTileY;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50 , Size: 1]
	bool bTileZ;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50 , Size: 1]
	bool bUseFixDT;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x50 , Size: 1]

--------------------------------
Class: ParticleModuleVectorFieldRotation.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector MinInitialRotation;//[Offset: 0x20 , Size: 12]
	Vector MaxInitialRotation;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: ParticleModuleVectorFieldRotationRate.ParticleModuleVectorFieldBase.ParticleModule.Object
	Vector RotationRate;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: ParticleModuleVectorFieldScale.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScale;//[Offset: 0x20 , Size: 4]
	RawDistributionFloat VectorFieldScaleRaw;//[Offset: 0x24 , Size: 40]

--------------------------------
Class: ParticleModuleVectorFieldScaleOverLife.ParticleModuleVectorFieldBase.ParticleModule.Object
	DistributionFloat* VectorFieldScaleOverLife;//[Offset: 0x20 , Size: 4]
	RawDistributionFloat VectorFieldScaleOverLifeRaw;//[Offset: 0x24 , Size: 40]

--------------------------------
Class: ParticleModuleVelocityBase.ParticleModule.Object
	bool bInWorldSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f , Size: 1]
	bool bApplyOwnerScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f , Size: 1]

--------------------------------
Class: ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector StartVelocity;//[Offset: 0x20 , Size: 64]
	RawDistributionFloat StartVelocityRadial;//[Offset: 0x60 , Size: 40]

--------------------------------
Class: ParticleModuleVelocity_Seeded.ParticleModuleVelocity.ParticleModuleVelocityBase.ParticleModule.Object
	ParticleRandomSeedInfo RandomSeedInfo;//[Offset: 0x88 , Size: 24]

--------------------------------
Class: ParticleModuleVelocityCone.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionFloat Angle;//[Offset: 0x20 , Size: 40]
	RawDistributionFloat Velocity;//[Offset: 0x48 , Size: 40]
	Vector Direction;//[Offset: 0x70 , Size: 12]

--------------------------------
Class: ParticleModuleVelocityInheritParent.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector Scale;//[Offset: 0x20 , Size: 64]

--------------------------------
Class: ParticleModuleVelocityOverLifetime.ParticleModuleVelocityBase.ParticleModule.Object
	RawDistributionVector VelOverLife;//[Offset: 0x20 , Size: 64]
	bool Absolute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]

--------------------------------
Class: ParticleSpriteEmitter.ParticleEmitter.Object

--------------------------------
Class: ParticleSystemReplay.Object
	int ClipIDNumber;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: PawnNoiseEmitterComponent.ActorComponent.Object
	bool bAIPerceptionSystemCompatibilityMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc , Size: 1]
	Vector LastRemoteNoisePosition;//[Offset: 0xc0 , Size: 12]
	float NoiseLifetime;//[Offset: 0xcc , Size: 4]
	float LastRemoteNoiseVolume;//[Offset: 0xd0 , Size: 4]
	float LastRemoteNoiseTime;//[Offset: 0xd4 , Size: 4]
	float LastLocalNoiseVolume;//[Offset: 0xd8 , Size: 4]
	float LastLocalNoiseTime;//[Offset: 0xdc , Size: 4]
	function MakeNoise();// 0x3748c28

--------------------------------
Class: PhysicalAnimationComponent.ActorComponent.Object
	float StrengthMultiplyer;//[Offset: 0xbc , Size: 4]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0xc0 , Size: 4]
	function SetStrengthMultiplyer();// 0x37496b4
	function SetSkeletalMeshComponent();// 0x374963c
	function GetBodyTargetTransform();// 0x3749590
	function ApplyPhysicalAnimationSettingsBelow();// 0x3749440
	function ApplyPhysicalAnimationSettings();// 0x3749340
	function ApplyPhysicalAnimationProfileBelow();// 0x37491d8

--------------------------------
Class: SkeletalBodySetup.BodySetup.Object
	PhysicalAnimationData(StructProperty)[] PhysicalAnimationData;//[Offset: 0x2a4 , Size: 12]

--------------------------------
Class: RigidBodyBase.Actor.Object

--------------------------------
Class: PhysicsConstraintActor.RigidBodyBase.Actor.Object
	PhysicsConstraintComponent* ConstraintComp;//[Offset: 0x2c4 , Size: 4]
	Actor* ConstraintActor1;//[Offset: 0x2c8 , Size: 4]
	Actor* ConstraintActor2;//[Offset: 0x2cc , Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2d0 , Size: 1]

--------------------------------
Class: PhysicsConstraintComponent.SceneComponent.ActorComponent.Object
	Actor* ConstraintActor1;//[Offset: 0x260 , Size: 4]
	ConstrainComponentPropName ComponentName1;//[Offset: 0x268 , Size: 8]
	Actor* ConstraintActor2;//[Offset: 0x270 , Size: 4]
	ConstrainComponentPropName ComponentName2;//[Offset: 0x278 , Size: 8]
	PhysicsConstraintTemplate* ConstraintSetup;//[Offset: 0x290 , Size: 4]
	delegate OnConstraintBroken;//[Offset: 0x294 , Size: 12]
	ConstraintInstance ConstraintInstance;//[Offset: 0x2a0 , Size: 416]
	function SetOrientationDriveTwistAndSwing();// 0x374bb08
	function SetOrientationDriveSLERP();// 0x374ba88
	function SetLinearZLimit();// 0x374b9cc
	function SetLinearYLimit();// 0x374b910
	function SetLinearXLimit();// 0x374b854
	function SetLinearVelocityTarget();// 0x374b7d0
	function SetLinearVelocityDrive();// 0x374b6b0
	function SetLinearPositionTarget();// 0x374b62c
	function SetLinearPositionDrive();// 0x374b50c
	function SetLinearDriveParams();// 0x374b40c
	function SetLinearBreakable();// 0x374b344
	function SetDisableCollision();// 0x374b2c4
	function SetConstraintReferencePosition();// 0x374b1fc
	function SetConstraintReferenceOrientation();// 0x374b0e0
	function SetConstraintReferenceFrame();// 0x374afc0
	function SetConstrainedComponents();// 0x374ae60
	function SetAngularVelocityTarget();// 0x374addc
	function SetAngularVelocityDriveTwistAndSwing();// 0x374ad0c
	function SetAngularVelocityDriveSLERP();// 0x374ac8c
	function SetAngularVelocityDrive();// 0x374abbc
	function SetAngularTwistLimit();// 0x374ab00
	function SetAngularSwing2Limit();// 0x374aa44
	function SetAngularSwing1Limit();// 0x374a988
	function SetAngularOrientationTarget();// 0x374a904
	function SetAngularOrientationDrive();// 0x374a834
	function SetAngularDriveParams();// 0x374a734
	function SetAngularDriveMode();// 0x374a6bc
	function SetAngularBreakable();// 0x374a5f4
	function IsBroken();// 0x374a5cc
	function GetCurrentTwist();// 0x374a5a4
	function GetCurrentSwing2();// 0x374a57c
	function GetCurrentSwing1();// 0x374a554
	function GetConstraintForce();// 0x374a47c
	function BreakConstraint();// 0x374a468

--------------------------------
Class: ConstrainComponentPropName
	FName ComponentName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: PhysicsConstraintTemplate.Object
	ConstraintInstance DefaultInstance;//[Offset: 0x20 , Size: 416]
	ProfileHandles(StructProperty)[] ProfileHandles;//[Offset: 0x1c0 , Size: 12]
	ConstraintProfileProperties DefaultProfile;//[Offset: 0x1cc , Size: 260]

--------------------------------
Class: ConstraintInstance
	FName JointName;//[Offset: 0x10 , Size: 8]
	FName ConstraintBone1;//[Offset: 0x18 , Size: 8]
	FName ConstraintBone2;//[Offset: 0x20 , Size: 8]
	Vector Pos1;//[Offset: 0x28 , Size: 12]
	Vector PriAxis1;//[Offset: 0x34 , Size: 12]
	Vector SecAxis1;//[Offset: 0x40 , Size: 12]
	Vector Pos2;//[Offset: 0x4c , Size: 12]
	Vector PriAxis2;//[Offset: 0x58 , Size: 12]
	Vector SecAxis2;//[Offset: 0x64 , Size: 12]
	Rotator AngularRotationOffset;//[Offset: 0x70 , Size: 12]
	bool bScaleLinearLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	ConstraintProfileProperties ProfileInstance;//[Offset: 0x84 , Size: 260]

--------------------------------
Class: ConstraintProfileProperties
	float ProjectionLinearTolerance;//[Offset: 0x0 , Size: 4]
	float ProjectionAngularTolerance;//[Offset: 0x4 , Size: 4]
	float LinearBreakThreshold;//[Offset: 0x8 , Size: 4]
	float AngularBreakThreshold;//[Offset: 0xc , Size: 4]
	LinearConstraint LinearLimit;//[Offset: 0x10 , Size: 28]
	ConeConstraint ConeLimit;//[Offset: 0x2c , Size: 32]
	TwistConstraint TwistLimit;//[Offset: 0x4c , Size: 28]
	LinearDriveConstraint LinearDrive;//[Offset: 0x68 , Size: 76]
	AngularDriveConstraint AngularDrive;//[Offset: 0xb4 , Size: 76]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x100 , Size: 1]
	bool bParentDominates;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x100 , Size: 1]
	bool bEnableProjection;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x100 , Size: 1]
	bool bAngularBreakable;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x100 , Size: 1]
	bool bLinearBreakable;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x100 , Size: 1]

--------------------------------
Class: LinearConstraint.ConstraintBaseParams
	float Limit;//[Offset: 0x14 , Size: 4]
	byte XMotion;//[Offset: 0x18 , Size: 1]
	byte YMotion;//[Offset: 0x19 , Size: 1]
	byte ZMotion;//[Offset: 0x1a , Size: 1]

--------------------------------
Class: ConstraintBaseParams
	float Stiffness;//[Offset: 0x0 , Size: 4]
	float Damping;//[Offset: 0x4 , Size: 4]
	float Restitution;//[Offset: 0x8 , Size: 4]
	float ContactDistance;//[Offset: 0xc , Size: 4]
	bool bSoftConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10 , Size: 1]

--------------------------------
Class: ConeConstraint.ConstraintBaseParams
	float Swing1LimitDegrees;//[Offset: 0x14 , Size: 4]
	float Swing2LimitDegrees;//[Offset: 0x18 , Size: 4]
	byte Swing1Motion;//[Offset: 0x1c , Size: 1]
	byte Swing2Motion;//[Offset: 0x1d , Size: 1]

--------------------------------
Class: TwistConstraint.ConstraintBaseParams
	float TwistLimitDegrees;//[Offset: 0x14 , Size: 4]
	byte TwistMotion;//[Offset: 0x18 , Size: 1]

--------------------------------
Class: LinearDriveConstraint
	Vector PositionTarget;//[Offset: 0x0 , Size: 12]
	Vector VelocityTarget;//[Offset: 0xc , Size: 12]
	ConstraintDrive XDrive;//[Offset: 0x18 , Size: 16]
	ConstraintDrive YDrive;//[Offset: 0x28 , Size: 16]
	ConstraintDrive ZDrive;//[Offset: 0x38 , Size: 16]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: ConstraintDrive
	float Stiffness;//[Offset: 0x0 , Size: 4]
	float Damping;//[Offset: 0x4 , Size: 4]
	float MaxForce;//[Offset: 0x8 , Size: 4]
	bool bEnablePositionDrive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xc , Size: 1]
	bool bEnableVelocityDrive;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xc , Size: 1]

--------------------------------
Class: AngularDriveConstraint
	ConstraintDrive TwistDrive;//[Offset: 0x0 , Size: 16]
	ConstraintDrive SwingDrive;//[Offset: 0x10 , Size: 16]
	ConstraintDrive SlerpDrive;//[Offset: 0x20 , Size: 16]
	Rotator OrientationTarget;//[Offset: 0x30 , Size: 12]
	Vector AngularVelocityTarget;//[Offset: 0x3c , Size: 12]
	byte AngularDriveMode;//[Offset: 0x48 , Size: 1]

--------------------------------
Class: PhysicsHandleComponent.ActorComponent.Object
	PrimitiveComponent* GrabbedComponent;//[Offset: 0xbc , Size: 4]
	bool bSoftAngularConstraint;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xcc , Size: 1]
	bool bSoftLinearConstraint;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xcc , Size: 1]
	bool bInterpolateTarget;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xcc , Size: 1]
	float LinearDamping;//[Offset: 0xd0 , Size: 4]
	float LinearStiffness;//[Offset: 0xd4 , Size: 4]
	float AngularDamping;//[Offset: 0xd8 , Size: 4]
	float AngularStiffness;//[Offset: 0xdc , Size: 4]
	float InterpolationSpeed;//[Offset: 0x140 , Size: 4]
	function SetTargetRotation();// 0x374d4e8
	function SetTargetLocationAndRotation();// 0x374d428
	function SetTargetLocation();// 0x374d3b8
	function SetLinearStiffness();// 0x374d340
	function SetLinearDamping();// 0x374d2c8
	function SetInterpolationSpeed();// 0x374d250
	function SetAngularStiffness();// 0x374d1d8
	function SetAngularDamping();// 0x374d160
	function ReleaseComponent();// 0x1698f30
	function GrabComponentAtLocationWithRotation();// 0x374d010
	function GrabComponentAtLocation();// 0x374cf04
	function GrabComponent();// 0x374cda8
	function GetTargetLocationAndRotation();// 0x374ccd0
	function GetGrabbedComponent();// 0x374cca8

--------------------------------
Class: PhysicsSpringComponent.SceneComponent.ActorComponent.Object
	float SpringStiffness;//[Offset: 0x260 , Size: 4]
	float SpringDamping;//[Offset: 0x264 , Size: 4]
	float SpringLengthAtRest;//[Offset: 0x268 , Size: 4]
	float SpringRadius;//[Offset: 0x26c , Size: 4]
	byte SpringChannel;//[Offset: 0x270 , Size: 1]
	bool bIgnoreSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271 , Size: 1]
	float SpringCompression;//[Offset: 0x274 , Size: 4]
	function GetSpringRestingPoint();// 0x374e1c8
	function GetSpringDirection();// 0x374e180
	function GetSpringCurrentEndPoint();// 0x374e138
	function GetNormalizedCompressionScalar();// 0x374e110

--------------------------------
Class: PhysicsThruster.RigidBodyBase.Actor.Object
	PhysicsThrusterComponent* ThrusterComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: PhysicsThrusterComponent.SceneComponent.ActorComponent.Object
	float ThrustStrength;//[Offset: 0x260 , Size: 4]

--------------------------------
Class: SceneCapture.Actor.Object
	StaticMeshComponent* meshComp;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: PixelProjectedReflection.SceneCapture.Actor.Object
	PixelProjectedReflectionComponent* PixelProjectedReflectionComponent;//[Offset: 0x2c8 , Size: 4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	function OnInterpToggle();// 0x374e92c

--------------------------------
Class: PixelProjectedReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2c4 , Size: 4]
	float NormalDistortionStrength;//[Offset: 0x2c8 , Size: 4]
	float SkyDistanceFadeoutStart;//[Offset: 0x2cc , Size: 4]
	float SkyDistanceFadeoutEnd;//[Offset: 0x2d0 , Size: 4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x2d4 , Size: 4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2d8 , Size: 4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2dc , Size: 4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2e0 , Size: 4]
	float AngleFromPlaneFadeStart;//[Offset: 0x2e4 , Size: 4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x2e8 , Size: 4]

--------------------------------
Class: SceneCaptureComponent.SceneComponent.ActorComponent.Object
	enum PrimitiveRenderMode;//[Offset: 0x25d , Size: 1]
	HiddenComponents(WeakObjectProperty)[] HiddenComponents;//[Offset: 0x260 , Size: 12]
	HiddenActors(ObjectProperty)[] HiddenActors;//[Offset: 0x26c , Size: 12]
	ShowOnlyComponents(WeakObjectProperty)[] ShowOnlyComponents;//[Offset: 0x278 , Size: 12]
	ShowOnlyActors(ObjectProperty)[] ShowOnlyActors;//[Offset: 0x284 , Size: 12]
	bool bCaptureEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x290 , Size: 1]
	bool bCaptureOnMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x291 , Size: 1]
	bool bAlwaysPersistRenderingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x292 , Size: 1]
	float LODDistanceFactor;//[Offset: 0x294 , Size: 4]
	float MaxViewDistanceOverride;//[Offset: 0x298 , Size: 4]
	int CaptureSortPriority;//[Offset: 0x29c , Size: 4]
	ShowFlagSettings(StructProperty)[] ShowFlagSettings;//[Offset: 0x2a0 , Size: 12]
	function ShowOnlyComponent();// 0x3774ea8
	function ShowOnlyActorComponents();// 0x3774e30
	function SetCaptureSortPriority();// 0x3774db8
	function RemoveShowOnlyComponent();// 0x3774d40
	function RemoveShowOnlyActorComponents();// 0x3774cc8
	function HideComponent();// 0x3774c50
	function HideActorComponents();// 0x3774bd8
	function ClearShowOnlyComponents();// 0x3774b60
	function ClearHiddenComponents();// 0x3774b4c

--------------------------------
Class: PlanarReflection.SceneCapture.Actor.Object
	PlanarReflectionComponent* PlanarReflectionComponent;//[Offset: 0x2c8 , Size: 4]
	bool bShowPreviewPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	function OnInterpToggle();// 0x374e92c

--------------------------------
Class: PlanarReflectionComponent.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	BoxComponent* PreviewBox;//[Offset: 0x2c4 , Size: 4]
	float NormalDistortionStrength;//[Offset: 0x2c8 , Size: 4]
	float PrefilterRoughnessY;//[Offset: 0x2cc , Size: 4]
	float PrefilterRoughnessDistanceY;//[Offset: 0x2d0 , Size: 4]
	int ScreenPercentage;//[Offset: 0x2d4 , Size: 4]
	float ExtraFOV;//[Offset: 0x2d8 , Size: 4]
	float DistanceFromPlaneFadeStart;//[Offset: 0x2dc , Size: 4]
	float DistanceFromPlaneFadeEnd;//[Offset: 0x2e0 , Size: 4]
	float DistanceFromPlaneFadeoutStart;//[Offset: 0x2e4 , Size: 4]
	float DistanceFromPlaneFadeoutEnd;//[Offset: 0x2e8 , Size: 4]
	float AngleFromPlaneFadeStart;//[Offset: 0x2ec , Size: 4]
	float AngleFromPlaneFadeEnd;//[Offset: 0x2f0 , Size: 4]
	bool bRenderSceneTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	bool bBlurHorizontal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f5 , Size: 1]
	float PrefilterRoughnessX;//[Offset: 0x2f8 , Size: 4]
	float PrefilterRoughnessDistanceX;//[Offset: 0x2fc , Size: 4]

--------------------------------
Class: PlaneReflectionCapture.ReflectionCapture.Actor.Object

--------------------------------
Class: PlaneReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadiusScale;//[Offset: 0x2c0 , Size: 4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x2c4 , Size: 4]
	BoxComponent* PreviewCaptureBox;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: PlatformEventsComponent.ActorComponent.Object
	delegate PlatformChangedToLaptopModeDelegate;//[Offset: 0xbc , Size: 12]
	delegate PlatformChangedToTabletModeDelegate;//[Offset: 0xc8 , Size: 12]
	function SupportsConvertibleLaptops();// 0x374f49c
	function PlatformEventDelegate__DelegateSignature();// 0x206ccd8
	function IsInTabletMode();// 0x374f474
	function IsInLaptopMode();// 0x374f44c

--------------------------------
Class: PlatformInterfaceWebResponse.Object
	FString OriginalURL;//[Offset: 0x1c , Size: 12]
	int ResponseCode;//[Offset: 0x28 , Size: 4]
	int Tag;//[Offset: 0x2c , Size: 4]
	FString StringResponse;//[Offset: 0x30 , Size: 12]
	BinaryResponse(ByteProperty)[] BinaryResponse;//[Offset: 0x3c , Size: 12]
	function GetNumHeaders();// 0x3648968
	function GetHeaderValue();// 0x374fdf0
	function GetHeader();// 0x374fc40

--------------------------------
Class: PlayerStart.NavigationObjectBase.Actor.Object
	FName PlayerStartTag;//[Offset: 0x2d8 , Size: 8]

--------------------------------
Class: PlayerStartPIE.PlayerStart.NavigationObjectBase.Actor.Object

--------------------------------
Class: PluginCommandlet.Commandlet.Object

--------------------------------
Class: PointLight.Light.Actor.Object
	PointLightComponent* PointLightComponent;//[Offset: 0x2cc , Size: 4]
	function SetRadius();// 0x376088c
	function SetLightFalloffExponent();// 0x3760814

--------------------------------
Class: Polys.Object

--------------------------------
Class: PoseableMeshComponent.SkinnedMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	function SetBoneTransformByName();// 0x3761e00
	function SetBoneScaleByName();// 0x3761cf8
	function SetBoneRotationByName();// 0x3761bf0
	function SetBoneLocationByName();// 0x3761ae8
	function ResetBoneTransformByName();// 0x3761a70
	function GetBoneTransformByName();// 0x376197c
	function GetBoneScaleByName();// 0x37618a0
	function GetBoneRotationByName();// 0x37617c4
	function GetBoneLocationByName();// 0x37616e8
	function CopyPoseFromSkeletalComponent();// 0x3761670

--------------------------------
Class: PoseAsset.AnimationAsset.Object
	PoseDataContainer PoseContainer;//[Offset: 0x5c , Size: 108]
	bool bAdditivePose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]
	int BasePoseIndex;//[Offset: 0xcc , Size: 4]
	FName RetargetSource;//[Offset: 0xd0 , Size: 8]

--------------------------------
Class: PoseDataContainer
	PoseNames(StructProperty)[] PoseNames;//[Offset: 0x0 , Size: 12]
	Poses(StructProperty)[] Poses;//[Offset: 0xc , Size: 12]
	Tracks(NameProperty)[] Tracks;//[Offset: 0x18 , Size: 12]
	<TrackMap_Key(NameProperty) , TrackMap(IntProperty)> TrackMap;//[Offset: 0x24 , Size: 60]
	Curves(StructProperty)[] Curves;//[Offset: 0x60 , Size: 12]

--------------------------------
Class: PoseWatch.Object
	EdGraphNode* Node;//[Offset: 0x1c , Size: 4]
	Color PoseWatchColour;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PostProcessComponent.SceneComponent.ActorComponent.Object
	PostProcessSettings Settings;//[Offset: 0x270 , Size: 1232]
	float Priority;//[Offset: 0x740 , Size: 4]
	float BlendRadius;//[Offset: 0x744 , Size: 4]
	float BlendWeight;//[Offset: 0x748 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74c , Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74c , Size: 1]
	function AddOrUpdateBlendable();// 0x37629a0

--------------------------------
Class: PostProcessVolume.Volume.Brush.Actor.Object
	PostProcessSettings Settings;//[Offset: 0x2f0 , Size: 1232]
	float Priority;//[Offset: 0x7c0 , Size: 4]
	float BlendRadius;//[Offset: 0x7c4 , Size: 4]
	float BlendWeight;//[Offset: 0x7c8 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc , Size: 1]
	bool bUnbound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7cc , Size: 1]
	function AddOrUpdateBlendable();// 0x3762d74

--------------------------------
Class: PrecomputedVisibilityOverrideVolume.Volume.Brush.Actor.Object
	OverrideVisibleActors(ObjectProperty)[] OverrideVisibleActors;//[Offset: 0x2ec , Size: 12]
	OverrideInvisibleActors(ObjectProperty)[] OverrideInvisibleActors;//[Offset: 0x2f8 , Size: 12]
	OverrideInvisibleLevels(NameProperty)[] OverrideInvisibleLevels;//[Offset: 0x304 , Size: 12]

--------------------------------
Class: PrecomputedVisibilityVolume.Volume.Brush.Actor.Object

--------------------------------
Class: PreviewCollectionInterface.Interface.Object

--------------------------------
Class: PreviewMeshCollection.DataAsset.Object
	Skeleton* Skeleton;//[Offset: 0x24 , Size: 4]
	SkeletalMeshes(StructProperty)[] SkeletalMeshes;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: PrimaryAssetLabel.PrimaryDataAsset.DataAsset.Object
	PrimaryAssetRules Rules;//[Offset: 0x20 , Size: 16]
	bool bLabelAssetsInMyDirectory;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bIsRuntimeLabel;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	ExplicitAssets(SoftObjectProperty)[] ExplicitAssets;//[Offset: 0x34 , Size: 12]
	ExplicitBlueprints(SoftClassProperty)[] ExplicitBlueprints;//[Offset: 0x40 , Size: 12]
	CollectionReference AssetCollection;//[Offset: 0x50 , Size: 8]

--------------------------------
Class: PrimaryAssetRules
	int Priority;//[Offset: 0x0 , Size: 4]
	bool bApplyRecursively;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	int ChunkId;//[Offset: 0x8 , Size: 4]
	enum CookRule;//[Offset: 0xc , Size: 1]

--------------------------------
Class: CollectionReference
	FName CollectionName;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	float InitialSpeed;//[Offset: 0xf4 , Size: 4]
	float MaxSpeed;//[Offset: 0xf8 , Size: 4]
	bool bRotationFollowsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xfc , Size: 1]
	bool bShouldBounce;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xfc , Size: 1]
	bool bInitialVelocityInLocalSpace;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xfc , Size: 1]
	bool bForceSubStepping;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xfc , Size: 1]
	bool bIsHomingProjectile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xfc , Size: 1]
	bool bBounceAngleAffectsFriction;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xfc , Size: 1]
	bool bIsSliding;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xfc , Size: 1]
	float PreviousHitTime;//[Offset: 0x100 , Size: 4]
	Vector PreviousHitNormal;//[Offset: 0x104 , Size: 12]
	float ProjectileGravityScale;//[Offset: 0x110 , Size: 4]
	float Buoyancy;//[Offset: 0x114 , Size: 4]
	float Bounciness;//[Offset: 0x118 , Size: 4]
	float Friction;//[Offset: 0x11c , Size: 4]
	float BounceVelocityStopSimulatingThreshold;//[Offset: 0x120 , Size: 4]
	delegate OnProjectileBounce;//[Offset: 0x124 , Size: 12]
	delegate OnProjectileStop;//[Offset: 0x130 , Size: 12]
	float HomingAccelerationMagnitude;//[Offset: 0x13c , Size: 4]
	SceneComponent* HomingTargetComponent;//[Offset: 0x140 , Size: 8]
	float MaxSimulationTimeStep;//[Offset: 0x148 , Size: 4]
	int MaxSimulationIterations;//[Offset: 0x14c , Size: 4]
	function StopSimulating();// 0x376b59c
	function SetVelocityInLocalSpace();// 0x376b524
	function OnProjectileStopDelegate__DelegateSignature();// 0x206ccd8
	function OnProjectileBounceDelegate__DelegateSignature();// 0x206ccd8
	function LimitVelocity();// 0x376b490

--------------------------------
Class: RadialForceActor.RigidBodyBase.Actor.Object
	RadialForceComponent* ForceComponent;//[Offset: 0x2c4 , Size: 4]
	function ToggleForce();// 0x16fae60
	function FireImpulse();// 0x16f99b4
	function EnableForce();// 0x16e6e40
	function DisableForce();// 0x16a8160

--------------------------------
Class: RadialForceComponent.SceneComponent.ActorComponent.Object
	float Radius;//[Offset: 0x260 , Size: 4]
	byte Falloff;//[Offset: 0x264 , Size: 1]
	float ImpulseStrength;//[Offset: 0x268 , Size: 4]
	bool bImpulseVelChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x26c , Size: 1]
	bool bIgnoreOwningActor;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x26c , Size: 1]
	float ForceStrength;//[Offset: 0x270 , Size: 4]
	float DestructibleDamage;//[Offset: 0x274 , Size: 4]
	ObjectTypesToAffect(ByteProperty)[] ObjectTypesToAffect;//[Offset: 0x278 , Size: 12]
	function RemoveObjectTypeToAffect();// 0x376be84
	function FireImpulse();// 0x16b7c50
	function AddObjectTypeToAffect();// 0x376bdfc

--------------------------------
Class: RecastFilter_UseDefaultArea.NavigationQueryFilter.Object

--------------------------------
Class: RecastNavMesh.NavigationData.Actor.Object
	bool bDrawTriangleEdges;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f8 , Size: 1]
	bool bDrawPolyEdges;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f8 , Size: 1]
	bool bDrawFilledPolys;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f8 , Size: 1]
	bool bDrawNavMeshEdges;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f8 , Size: 1]
	bool bDrawTileBounds;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f8 , Size: 1]
	bool bDrawPathCollidingGeometry;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f8 , Size: 1]
	bool bDrawTileLabels;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f8 , Size: 1]
	bool bDrawPolygonLabels;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f8 , Size: 1]
	bool bDrawDefaultPolygonCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3f9 , Size: 1]
	bool bDrawLabelsOnPathNodes;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3f9 , Size: 1]
	bool bDrawNavLinks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x3f9 , Size: 1]
	bool bDrawFailedNavLinks;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x3f9 , Size: 1]
	bool bDrawClusters;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x3f9 , Size: 1]
	bool bDrawOctree;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x3f9 , Size: 1]
	bool bDistinctlyDrawTilesBeingBuilt;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x3f9 , Size: 1]
	bool bDrawNavMesh;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3f9 , Size: 1]
	float DrawOffset;//[Offset: 0x3fc , Size: 4]
	bool bFixedTilePoolSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400 , Size: 1]
	int TilePoolSize;//[Offset: 0x404 , Size: 4]
	float TileSizeUU;//[Offset: 0x408 , Size: 4]
	float CellSize;//[Offset: 0x40c , Size: 4]
	float CellHeight;//[Offset: 0x410 , Size: 4]
	float AgentRadius;//[Offset: 0x414 , Size: 4]
	float AgentHeight;//[Offset: 0x418 , Size: 4]
	float AgentMaxHeight;//[Offset: 0x41c , Size: 4]
	float AgentMaxSlope;//[Offset: 0x420 , Size: 4]
	float AgentMaxStepHeight;//[Offset: 0x424 , Size: 4]
	float MinRegionArea;//[Offset: 0x428 , Size: 4]
	float MergeRegionSize;//[Offset: 0x42c , Size: 4]
	float MaxSimplificationError;//[Offset: 0x430 , Size: 4]
	int MaxSimultaneousTileGenerationJobsCount;//[Offset: 0x434 , Size: 4]
	int TileNumberHardLimit;//[Offset: 0x438 , Size: 4]
	int PolyRefTileBits;//[Offset: 0x43c , Size: 4]
	int PolyRefNavPolyBits;//[Offset: 0x440 , Size: 4]
	int PolyRefSaltBits;//[Offset: 0x444 , Size: 4]
	float DefaultDrawDistance;//[Offset: 0x448 , Size: 4]
	float DefaultMaxSearchNodes;//[Offset: 0x44c , Size: 4]
	float DefaultMaxHierarchicalSearchNodes;//[Offset: 0x450 , Size: 4]
	bool bWithoutLayerCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x454 , Size: 1]
	byte WithoutLayerCachePartitioning;//[Offset: 0x455 , Size: 1]
	byte RegionPartitioning;//[Offset: 0x456 , Size: 1]
	byte LayerPartitioning;//[Offset: 0x457 , Size: 1]
	int RegionChunkSplits;//[Offset: 0x458 , Size: 4]
	int LayerChunkSplits;//[Offset: 0x45c , Size: 4]
	bool bSortNavigationAreasByCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x460 , Size: 1]
	bool bPerformVoxelFiltering;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x460 , Size: 1]
	bool bMarkLowHeightAreas;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x460 , Size: 1]
	bool bDoFullyAsyncNavDataGathering;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x460 , Size: 1]
	bool bUseBetterOffsetsFromCorners;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x460 , Size: 1]
	bool bStoreEmptyTileLayers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x460 , Size: 1]
	bool bUseVirtualFilters;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x460 , Size: 1]
	bool bAllowNavLinkAsPathEnd;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x460 , Size: 1]
	bool bOnlySavedOnDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x461 , Size: 1]
	bool bUseVoxelCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x462 , Size: 1]
	float TileSetUpdateInterval;//[Offset: 0x464 , Size: 4]
	float HeuristicScale;//[Offset: 0x468 , Size: 4]
	float VerticalDeviationFromGroundCompensation;//[Offset: 0x46c , Size: 4]

--------------------------------
Class: RecastNavMeshDataChunk.NavigationDataChunk.Object

--------------------------------
Class: RegionObjectInterface.Interface.Object

--------------------------------
Class: RendererSettings.DeveloperSettings.Object
	bool bMobileHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bMobileDisableVertexFog;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]
	bool bMobileVTFLandscape;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x30 , Size: 1]
	int MaxMobileCascades;//[Offset: 0x34 , Size: 4]
	byte MobileMSAASampleCount;//[Offset: 0x38 , Size: 1]
	float CharacterDiffuseScale;//[Offset: 0x3c , Size: 4]
	float CharacterDiffuseOffset;//[Offset: 0x40 , Size: 4]
	float CharacterDiffusePower;//[Offset: 0x44 , Size: 4]
	float CharacterMinShadowFactor;//[Offset: 0x48 , Size: 4]
	float StaticMeshDiffuseScale;//[Offset: 0x4c , Size: 4]
	float StaticMeshDiffuseOffset;//[Offset: 0x50 , Size: 4]
	float StaticMeshDiffusePower;//[Offset: 0x54 , Size: 4]
	float StaticMeshMinShadowFactor;//[Offset: 0x58 , Size: 4]
	bool bDiscardUnusedQualityLevels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x5c , Size: 1]
	float GlobalStaticMeshCullingScreenSize;//[Offset: 0x60 , Size: 4]
	bool bOcclusionCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x64 , Size: 1]
	float MinScreenRadiusForLights;//[Offset: 0x68 , Size: 4]
	float MinScreenRadiusForEarlyZPass;//[Offset: 0x6c , Size: 4]
	float MinScreenRadiusForCSMdepth;//[Offset: 0x70 , Size: 4]
	bool bPrecomputedVisibilityWarning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x74 , Size: 1]
	bool bTextureStreaming;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x74 , Size: 1]
	bool bUseDXT5NormalMaps;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x74 , Size: 1]
	bool bClearCoatEnableSecondNormal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x74 , Size: 1]
	int ReflectionCaptureResolution;//[Offset: 0x78 , Size: 4]
	bool ReflectionEnvironmentLightmapMixBasedOnRoughness;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	bool bForwardShading;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c , Size: 1]
	bool bVertexFoggingForOpaque;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c , Size: 1]
	bool bAllowStaticLighting;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c , Size: 1]
	bool bUseNormalMapsForStaticLighting;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c , Size: 1]
	bool bGenerateMeshDistanceFields;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c , Size: 1]
	bool bEightBitMeshDistanceFields;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c , Size: 1]
	bool bGenerateLandscapeGIData;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c , Size: 1]
	bool bCompressMeshDistanceFields;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d , Size: 1]
	float TessellationAdaptivePixelsPerTriangle;//[Offset: 0x80 , Size: 4]
	bool bSeparateTranslucency;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x84 , Size: 1]
	byte TranslucentSortPolicy;//[Offset: 0x85 , Size: 1]
	Vector TranslucentSortAxis;//[Offset: 0x88 , Size: 12]
	byte CustomDepthStencil;//[Offset: 0x94 , Size: 1]
	bool bCustomDepthTaaJitter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x95 , Size: 1]
	bool bEnableAlphaChannelInPostProcessing;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x95 , Size: 1]
	bool bDefaultFeatureBloom;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x95 , Size: 1]
	bool bDefaultFeatureAmbientOcclusion;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x95 , Size: 1]
	bool bDefaultFeatureAmbientOcclusionStaticFraction;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x95 , Size: 1]
	bool bDefaultFeatureAutoExposure;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x95 , Size: 1]
	byte DefaultFeatureAutoExposure;//[Offset: 0x96 , Size: 1]
	bool bDefaultFeatureMotionBlur;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x97 , Size: 1]
	bool bDefaultFeatureLensFlare;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x97 , Size: 1]
	byte DefaultFeatureAntiAliasing;//[Offset: 0x98 , Size: 1]
	bool bRenderUnbuiltPreviewShadowsInGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x99 , Size: 1]
	bool bStencilForLODDither;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x99 , Size: 1]
	byte EarlyZPass;//[Offset: 0x9a , Size: 1]
	bool bEarlyZPassMovable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9b , Size: 1]
	bool bEarlyZPassOnlyMaterialMasking;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9b , Size: 1]
	bool bDBuffer;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9b , Size: 1]
	byte ClearSceneMethod;//[Offset: 0x9c , Size: 1]
	bool bBasePassOutputsVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9d , Size: 1]
	bool bSelectiveBasePassOutputs;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9d , Size: 1]
	bool bDefaultParticleCutouts;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9d , Size: 1]
	bool bGlobalClipPlane;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9d , Size: 1]
	byte GBufferFormat;//[Offset: 0x9e , Size: 1]
	bool bUseGPUMorphTargets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9f , Size: 1]
	bool bNvidiaAftermathEnabled;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9f , Size: 1]
	bool bInstancedStereo;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9f , Size: 1]
	bool bMultiView;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9f , Size: 1]
	bool bMobileMultiView;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9f , Size: 1]
	bool bMobileMultiViewDirect;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9f , Size: 1]
	bool bMonoscopicFarField;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x9f , Size: 1]
	bool bDebugCanvasInLayer;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x9f , Size: 1]
	float WireframeCullThreshold;//[Offset: 0xa0 , Size: 4]
	bool bSupportStationarySkylight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa4 , Size: 1]
	bool bSupportLowQualityLightmaps;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa4 , Size: 1]
	bool bSupportPointLightWholeSceneShadows;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa4 , Size: 1]
	bool bSupportAtmosphericFog;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0xa4 , Size: 1]
	bool bSupportSkinCacheShaders;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0xa4 , Size: 1]
	bool bMobileEnableStaticAndCSMShadowReceivers;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0xa4 , Size: 1]
	bool bMobileAllowDistanceFieldShadows;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0xa4 , Size: 1]
	bool bMobileAllowMovableDirectionalLights;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0xa4 , Size: 1]
	uint32 MobileNumDynamicPointLights;//[Offset: 0xa8 , Size: 4]
	bool bMobileAllowMovableSpotlights;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xac , Size: 1]
	float SkinCacheSceneMemoryLimitInMB;//[Offset: 0xb0 , Size: 4]
	bool bGPUSkinLimit2BoneInfluences;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xb4 , Size: 1]
	bool bSupportDepthOnlyIndexBuffers;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xb4 , Size: 1]
	bool bSupportReversedIndexBuffers;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xb4 , Size: 1]

--------------------------------
Class: RendererOverrideSettings.DeveloperSettings.Object
	bool bSupportAllShaderPermutations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]
	bool bForceRecomputeTangents;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x30 , Size: 1]

--------------------------------
Class: Rig.Object
	TransformBases(StructProperty)[] TransformBases;//[Offset: 0x1c , Size: 12]
	Nodes(StructProperty)[] Nodes;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: RotatingMovementComponent.MovementComponent.ActorComponent.Object
	Rotator RotationRate;//[Offset: 0xf4 , Size: 12]
	Vector PivotTranslation;//[Offset: 0x100 , Size: 12]
	bool bRotationInLocalSpace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x10c , Size: 1]

--------------------------------
Class: RVOAvoidanceInterface.Interface.Object

--------------------------------
Class: SaveGame.Object

--------------------------------
Class: Scene.Object

--------------------------------
Class: SceneCapture2D.SceneCapture.Actor.Object
	SceneCaptureComponent2D* CaptureComponent2D;//[Offset: 0x2c8 , Size: 4]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x2cc , Size: 4]
	function OnInterpToggle();// 0x374e92c

--------------------------------
Class: SceneCaptureComponent2D.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	byte ProjectionType;//[Offset: 0x2c4 , Size: 1]
	float FOVAngle;//[Offset: 0x2c8 , Size: 4]
	float OrthoWidth;//[Offset: 0x2cc , Size: 4]
	TextureRenderTarget2D* TextureTarget;//[Offset: 0x2d0 , Size: 4]
	byte CaptureSource;//[Offset: 0x2d4 , Size: 1]
	byte CompositeMode;//[Offset: 0x2d5 , Size: 1]
	PostProcessSettings PostProcessSettings;//[Offset: 0x2e0 , Size: 1232]
	float PostProcessBlendWeight;//[Offset: 0x7b0 , Size: 4]
	bool bUseCustomProjectionMatrix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b4 , Size: 1]
	Matrix CustomProjectionMatrix;//[Offset: 0x7c0 , Size: 64]
	bool bEnableClipPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x800 , Size: 1]
	Vector ClipPlaneBase;//[Offset: 0x804 , Size: 12]
	Vector ClipPlaneNormal;//[Offset: 0x810 , Size: 12]
	bool bCameraCutThisFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x81c , Size: 1]
	function CaptureScene();// 0x3775580
	function AddOrUpdateBlendable();// 0x3775450

--------------------------------
Class: Matrix
	Plane XPlane;//[Offset: 0x0 , Size: 16]
	Plane YPlane;//[Offset: 0x10 , Size: 16]
	Plane ZPlane;//[Offset: 0x20 , Size: 16]
	Plane WPlane;//[Offset: 0x30 , Size: 16]

--------------------------------
Class: SceneCaptureComponentCube.SceneCaptureComponent.SceneComponent.ActorComponent.Object
	TextureRenderTargetCube* TextureTarget;//[Offset: 0x2c4 , Size: 4]
	function CaptureScene();// 0x3775870

--------------------------------
Class: TextureRenderTargetCube.TextureRenderTarget.Texture.Object
	int SizeX;//[Offset: 0x98 , Size: 4]
	LinearColor ClearColor;//[Offset: 0x9c , Size: 16]
	byte OverrideFormat;//[Offset: 0xac , Size: 1]
	bool bHDR;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xad , Size: 1]
	bool bForceLinearGamma;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xad , Size: 1]

--------------------------------
Class: SceneCaptureCube.SceneCapture.Actor.Object
	SceneCaptureComponentCube* CaptureComponentCube;//[Offset: 0x2c8 , Size: 4]
	DrawFrustumComponent* DrawFrustum;//[Offset: 0x2cc , Size: 4]
	function OnInterpToggle();// 0x374e92c

--------------------------------
Class: Selection.Object

--------------------------------
Class: ShadowMapTexture2D.Texture2D.Texture.Object
	byte ShadowmapFlags;//[Offset: 0xc8 , Size: 1]

--------------------------------
Class: SkeletalMeshActor.Actor.Object
	bool bShouldDoAnimNotifies;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	bool bWakeOnLevelStart;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x2c8 , Size: 1]
	SkeletalMeshComponent* SkeletalMeshComponent;//[Offset: 0x2cc , Size: 4]
	SkeletalMesh* ReplicatedMesh;//[Offset: 0x2d0 , Size: 4]
	PhysicsAsset* ReplicatedPhysAsset;//[Offset: 0x2d4 , Size: 4]
	MaterialInterface* ReplicatedMaterial0;//[Offset: 0x2d8 , Size: 4]
	MaterialInterface* ReplicatedMaterial1;//[Offset: 0x2dc , Size: 4]
	function OnRep_ReplicatedPhysAsset();// 0x16a8160
	function OnRep_ReplicatedMesh();// 0x16e6e40
	function OnRep_ReplicatedMaterial1();// 0x17231a0
	function OnRep_ReplicatedMaterial0();// 0x16fae60

--------------------------------
Class: SkeletalMeshReductionSettings.Object
	Settings(StructProperty)[] Settings;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: SkeletalMeshSocket.Object
	FName SocketName;//[Offset: 0x20 , Size: 8]
	FName BoneName;//[Offset: 0x28 , Size: 8]
	Vector RelativeLocation;//[Offset: 0x30 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x3c , Size: 12]
	Vector RelativeScale;//[Offset: 0x48 , Size: 12]
	bool bForceAlwaysAnimated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	function InitializeSocketFromLocation();// 0x3781878
	function GetSocketLocation();// 0x37817e8

--------------------------------
Class: SkyLight.Info.Actor.Object
	SkyLightComponent* LightComponent;//[Offset: 0x2c4 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c8 , Size: 1]
	function OnRep_bEnabled();// 0x16f99b4

--------------------------------
Class: SkyLightComponent.LightComponentBase.SceneComponent.ActorComponent.Object
	byte SourceType;//[Offset: 0x288 , Size: 1]
	TextureCube* Cubemap;//[Offset: 0x28c , Size: 4]
	float SourceCubemapAngle;//[Offset: 0x290 , Size: 4]
	int CubemapResolution;//[Offset: 0x294 , Size: 4]
	float SkyDistanceThreshold;//[Offset: 0x298 , Size: 4]
	bool bCaptureEmissiveOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29c , Size: 1]
	bool bLowerHemisphereIsBlack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29d , Size: 1]
	LinearColor LowerHemisphereColor;//[Offset: 0x2a0 , Size: 16]
	float OcclusionMaxDistance;//[Offset: 0x2b0 , Size: 4]
	float Contrast;//[Offset: 0x2b4 , Size: 4]
	float OcclusionExponent;//[Offset: 0x2b8 , Size: 4]
	float MinOcclusion;//[Offset: 0x2bc , Size: 4]
	Color OcclusionTint;//[Offset: 0x2c0 , Size: 4]
	byte OcclusionCombineMode;//[Offset: 0x2c4 , Size: 1]
	TextureCube* BlendDestinationCubemap;//[Offset: 0x368 , Size: 4]
	function SetVolumetricScatteringIntensity();// 0x3784fbc
	function SetOcclusionTint();// 0x3784f38
	function SetOcclusionExponent();// 0x3784ec0
	function SetOcclusionContrast();// 0x3784e48
	function SetMinOcclusion();// 0x3784dd0
	function SetLightColor();// 0x3784d54
	function SetIntensity();// 0x3784cdc
	function SetIndirectLightingIntensity();// 0x3784c64
	function SetCubemapBlend();// 0x3784b64
	function SetCubemap();// 0x3784aec
	function RecaptureSky();// 0x3784ad8

--------------------------------
Class: SlateBrushAsset.Object
	SlateBrush Brush;//[Offset: 0x20 , Size: 144]

--------------------------------
Class: SlateTextureAtlasInterface.Interface.Object

--------------------------------
Class: SmokeTestCommandlet.Commandlet.Object

--------------------------------
Class: SoundCue.SoundBase.Object
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x6c , Size: 1]
	SoundNode* FirstNode;//[Offset: 0x70 , Size: 4]
	float VolumeMultiplier;//[Offset: 0x74 , Size: 4]
	float PitchMultiplier;//[Offset: 0x78 , Size: 4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x7c , Size: 532]
	float SubtitlePriority;//[Offset: 0x290 , Size: 4]

--------------------------------
Class: SoundNode.Object
	ChildNodes(ObjectProperty)[] ChildNodes;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: SoundEffectPreset.Object

--------------------------------
Class: SoundEffectSourcePreset.SoundEffectPreset.Object

--------------------------------
Class: SoundEffectSubmixPreset.SoundEffectPreset.Object

--------------------------------
Class: SoundGroups.Object
	SoundGroupProfiles(StructProperty)[] SoundGroupProfiles;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: SoundNodeAssetReferencer.SoundNode.Object

--------------------------------
Class: SoundNodeAttenuation.SoundNode.Object
	SoundAttenuation* AttenuationSettings;//[Offset: 0x28 , Size: 4]
	SoundAttenuationSettings AttenuationOverrides;//[Offset: 0x2c , Size: 532]
	bool bOverrideAttenuation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x240 , Size: 1]

--------------------------------
Class: SoundNodeBranch.SoundNode.Object
	FName BoolParameterName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: SoundNodeConcatenator.SoundNode.Object
	InputVolume(FloatProperty)[] InputVolume;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: SoundNodeDelay.SoundNode.Object
	float DelayMin;//[Offset: 0x28 , Size: 4]
	float DelayMax;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: SoundNodeDialoguePlayer.SoundNode.Object
	DialogueWaveParameter DialogueWaveParameter;//[Offset: 0x28 , Size: 20]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3c , Size: 1]

--------------------------------
Class: DialogueWaveParameter
	DialogueWave* DialogueWave;//[Offset: 0x0 , Size: 4]
	DialogueContext Context;//[Offset: 0x4 , Size: 16]

--------------------------------
Class: DialogueContext
	DialogueVoice* Speaker;//[Offset: 0x0 , Size: 4]
	Targets(ObjectProperty)[] Targets;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: SoundNodeDistanceCrossFade.SoundNode.Object
	CrossFadeInput(StructProperty)[] CrossFadeInput;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: SoundNodeDoppler.SoundNode.Object
	float DopplerIntensity;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: SoundNodeEnveloper.SoundNode.Object
	float LoopStart;//[Offset: 0x28 , Size: 4]
	float LoopEnd;//[Offset: 0x2c , Size: 4]
	float DurationAfterLoop;//[Offset: 0x30 , Size: 4]
	int LoopCount;//[Offset: 0x34 , Size: 4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38 , Size: 1]
	DistributionFloatConstantCurve* VolumeInterpCurve;//[Offset: 0x3c , Size: 4]
	DistributionFloatConstantCurve* PitchInterpCurve;//[Offset: 0x40 , Size: 4]
	RuntimeFloatCurve VolumeCurve;//[Offset: 0x44 , Size: 88]
	RuntimeFloatCurve PitchCurve;//[Offset: 0x9c , Size: 88]
	float PitchMin;//[Offset: 0xf4 , Size: 4]
	float PitchMax;//[Offset: 0xf8 , Size: 4]
	float VolumeMin;//[Offset: 0xfc , Size: 4]
	float VolumeMax;//[Offset: 0x100 , Size: 4]

--------------------------------
Class: SoundNodeGroupControl.SoundNode.Object
	GroupSizes(IntProperty)[] GroupSizes;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: SoundNodeLooping.SoundNode.Object
	int LoopCount;//[Offset: 0x28 , Size: 4]
	bool bLoopIndefinitely;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x2c , Size: 1]

--------------------------------
Class: SoundNodeMature.SoundNode.Object

--------------------------------
Class: SoundNodeMixer.SoundNode.Object
	InputVolume(FloatProperty)[] InputVolume;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: SoundNodeModulator.SoundNode.Object
	float PitchMin;//[Offset: 0x28 , Size: 4]
	float PitchMax;//[Offset: 0x2c , Size: 4]
	float VolumeMin;//[Offset: 0x30 , Size: 4]
	float VolumeMax;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: SoundNodeModulatorContinuous.SoundNode.Object
	ModulatorContinuousParams PitchModulationParams;//[Offset: 0x28 , Size: 32]
	ModulatorContinuousParams VolumeModulationParams;//[Offset: 0x48 , Size: 32]

--------------------------------
Class: ModulatorContinuousParams
	FName ParameterName;//[Offset: 0x0 , Size: 8]
	float Default;//[Offset: 0x8 , Size: 4]
	float MinInput;//[Offset: 0xc , Size: 4]
	float MaxInput;//[Offset: 0x10 , Size: 4]
	float MinOutput;//[Offset: 0x14 , Size: 4]
	float MaxOutput;//[Offset: 0x18 , Size: 4]
	byte ParamMode;//[Offset: 0x1c , Size: 1]

--------------------------------
Class: SoundNodeOscillator.SoundNode.Object
	bool bModulateVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x28 , Size: 1]
	bool bModulatePitch;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x28 , Size: 1]
	float AmplitudeMin;//[Offset: 0x2c , Size: 4]
	float AmplitudeMax;//[Offset: 0x30 , Size: 4]
	float FrequencyMin;//[Offset: 0x34 , Size: 4]
	float FrequencyMax;//[Offset: 0x38 , Size: 4]
	float OffsetMin;//[Offset: 0x3c , Size: 4]
	float OffsetMax;//[Offset: 0x40 , Size: 4]
	float CenterMin;//[Offset: 0x44 , Size: 4]
	float CenterMax;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: SoundNodeParamCrossFade.SoundNodeDistanceCrossFade.SoundNode.Object
	FName ParamName;//[Offset: 0x38 , Size: 8]

--------------------------------
Class: SoundNodeQualityLevel.SoundNode.Object

--------------------------------
Class: SoundNodeRandom.SoundNode.Object
	Weights(FloatProperty)[] Weights;//[Offset: 0x28 , Size: 12]
	int PreselectAtLevelLoad;//[Offset: 0x34 , Size: 4]
	bool bRandomizeWithoutReplacement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38 , Size: 1]
	HasBeenUsed(BoolProperty)[] HasBeenUsed;//[Offset: 0x3c , Size: 12]
	int NumRandomUsed;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: SoundNodeSoundClass.SoundNode.Object
	SoundClass* SoundClassOverride;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: SoundNodeSwitch.SoundNode.Object
	FName IntParameterName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: SoundNodeWaveParam.SoundNode.Object
	FName WaveParameterName;//[Offset: 0x28 , Size: 8]

--------------------------------
Class: SoundNodeWavePlayer.SoundNodeAssetReferencer.SoundNode.Object
	SoundWave* SoundWaveAssetPtr;//[Offset: 0x28 , Size: 40]
	SoundWave* SoundWave;//[Offset: 0x50 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x54 , Size: 1]

--------------------------------
Class: SoundSourceBus.SoundWave.SoundBase.Object
	enum SourceBusChannels;//[Offset: 0x1cc , Size: 1]
	float SourceBusDuration;//[Offset: 0x1d0 , Size: 4]
	bool bAutoDeactivateWhenSilent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d4 , Size: 1]

--------------------------------
Class: SoundWaveProcedural.SoundWave.SoundBase.Object

--------------------------------
Class: SpectatorPawnMovement.FloatingPawnMovement.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x135 , Size: 1]

--------------------------------
Class: SphereReflectionCapture.ReflectionCapture.Actor.Object
	DrawSphereComponent* DrawCaptureRadius;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: SphereReflectionCaptureComponent.ReflectionCaptureComponent.SceneComponent.ActorComponent.Object
	float InfluenceRadius;//[Offset: 0x2c0 , Size: 4]
	float CaptureDistanceScale;//[Offset: 0x2c4 , Size: 4]
	DrawSphereComponent* PreviewInfluenceRadius;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: SplineComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineCurves SplineCurves;//[Offset: 0x54c , Size: 80]
	InterpCurveVector SplineInfo;//[Offset: 0x59c , Size: 20]
	InterpCurveQuat SplineRotInfo;//[Offset: 0x5b0 , Size: 20]
	InterpCurveVector SplineScaleInfo;//[Offset: 0x5c4 , Size: 20]
	InterpCurveFloat SplineReparamTable;//[Offset: 0x5d8 , Size: 20]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec , Size: 1]
	int ReparamStepsPerSegment;//[Offset: 0x5f0 , Size: 4]
	float Duration;//[Offset: 0x5f4 , Size: 4]
	bool bStationaryEndpoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8 , Size: 1]
	bool bSplineHasBeenEdited;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f9 , Size: 1]
	bool bModifiedByConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fa , Size: 1]
	bool bInputSplinePointsToConstructionScript;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fb , Size: 1]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc , Size: 1]
	bool bClosedLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd , Size: 1]
	bool bLoopPositionOverride;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe , Size: 1]
	float LoopPosition;//[Offset: 0x600 , Size: 4]
	Vector DefaultUpVector;//[Offset: 0x604 , Size: 12]
	function UpdateSpline();// 0x3790594
	function SetWorldLocationAtSplinePoint();// 0x37904c0
	function SetUpVectorAtSplinePoint();// 0x3790360
	function SetUnselectedSplineSegmentColor();// 0x378fbb8
	function SetTangentsAtSplinePoint();// 0x37901ac
	function SetTangentAtSplinePoint();// 0x379004c
	function SetSplineWorldPoints();// 0x378ff78
	function SetSplinePointType();// 0x378fe70
	function SetSplinePoints();// 0x378fd10
	function SetSplineLocalPoints();// 0x378fc3c
	function SetSelectedSplineSegmentColor();// 0x378fbb8
	function SetLocationAtSplinePoint();// 0x378fa58
	function SetDrawDebug();// 0x378f9d8
	function SetDefaultUpVector();// 0x378f90c
	function SetClosedLoopAtPosition();// 0x378f7f8
	function SetClosedLoop();// 0x378f728
	function RemoveSplinePoint();// 0x378f664
	function IsClosedLoop();// 0x378f63c
	function GetWorldTangentAtDistanceAlongSpline();// 0x378f5a8
	function GetWorldRotationAtTime();// 0x378f4c4
	function GetWorldRotationAtDistanceAlongSpline();// 0x378f430
	function GetWorldLocationAtTime();// 0x378f34c
	function GetWorldLocationAtSplinePoint();// 0x378f2b8
	function GetWorldLocationAtDistanceAlongSpline();// 0x378f224
	function GetWorldDirectionAtTime();// 0x378f140
	function GetWorldDirectionAtDistanceAlongSpline();// 0x378f0ac
	function GetUpVectorAtTime();// 0x378ef88
	function GetUpVectorAtSplinePoint();// 0x378eeb4
	function GetUpVectorAtDistanceAlongSpline();// 0x378ede0
	function GetTransformAtTime();// 0x378ec54
	function GetTransformAtSplinePoint();// 0x378eb18
	function GetTransformAtDistanceAlongSpline();// 0x378e9dc
	function GetTangentAtTime();// 0x378e8b8
	function GetTangentAtSplinePoint();// 0x378d6bc
	function GetTangentAtDistanceAlongSpline();// 0x378e7e4
	function GetSplinePointType();// 0x378e764
	function GetSplineLength();// 0x378e73c
	function GetScaleAtTime();// 0x378e660
	function GetScaleAtSplinePoint();// 0x378e5d0
	function GetScaleAtDistanceAlongSpline();// 0x378e540
	function GetRotationAtTime();// 0x378e41c
	function GetRotationAtSplinePoint();// 0x378e348
	function GetRotationAtDistanceAlongSpline();// 0x378e274
	function GetRollAtTime();// 0x378e164
	function GetRollAtSplinePoint();// 0x378e0a0
	function GetRollAtDistanceAlongSpline();// 0x378dfdc
	function GetRightVectorAtTime();// 0x378deb8
	function GetRightVectorAtSplinePoint();// 0x378dde4
	function GetRightVectorAtDistanceAlongSpline();// 0x378dd10
	function GetNumberOfSplinePoints();// 0x378dce8
	function GetLocationAtTime();// 0x378dbc4
	function GetLocationAtSplinePoint();// 0x378daf0
	function GetLocationAtDistanceAlongSpline();// 0x378da1c
	function GetLocationAndTangentAtSplinePoint();// 0x378d8b4
	function GetLocalLocationAndTangentAtSplinePoint();// 0x378d790
	function GetLeaveTangentAtSplinePoint();// 0x378d6bc
	function GetInputKeyAtDistanceAlongSpline();// 0x378d63c
	function GetDistanceAlongSplineAtSplinePoint();// 0x378d5bc
	function GetDirectionAtTime();// 0x378d498
	function GetDirectionAtSplinePoint();// 0x378d3c4
	function GetDirectionAtDistanceAlongSpline();// 0x378d2f0
	function GetDefaultUpVector();// 0x378d260
	function GetArriveTangentAtSplinePoint();// 0x378d18c
	function FindUpVectorClosestToWorldLocation();// 0x378d0a8
	function FindTransformClosestToWorldLocation();// 0x378cf5c
	function FindTangentClosestToWorldLocation();// 0x378ce78
	function FindScaleClosestToWorldLocation();// 0x378cddc
	function FindRotationClosestToWorldLocation();// 0x378ccf8
	function FindRollClosestToWorldLocation();// 0x378cc24
	function FindRightVectorClosestToWorldLocation();// 0x378cb40
	function FindLocationClosestToWorldLocation();// 0x378ca5c
	function FindInputKeyClosestToWorldLocation();// 0x378c9d0
	function FindDirectionClosestToWorldLocation();// 0x378c8ec
	function ClearSplinePoints();// 0x378c86c
	function AddSplineWorldPoint();// 0x378c7e0
	function AddSplinePointAtIndex();// 0x378c680
	function AddSplinePoint();// 0x378c568
	function AddSplineLocalPoint();// 0x378c4dc
	function AddPoints();// 0x378c3c0
	function AddPoint();// 0x378c2b8

--------------------------------
Class: SplineCurves
	InterpCurveVector Position;//[Offset: 0x0 , Size: 20]
	InterpCurveQuat Rotation;//[Offset: 0x14 , Size: 20]
	InterpCurveVector Scale;//[Offset: 0x28 , Size: 20]
	InterpCurveFloat ReparamTable;//[Offset: 0x3c , Size: 20]

--------------------------------
Class: InterpCurveQuat
	Points(StructProperty)[] Points;//[Offset: 0x0 , Size: 12]
	bool bIsLooped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float LoopKeyOffset;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: SplineMeshActor.Actor.Object
	SplineMeshComponent* SplineMeshComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: SplineMeshComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	SplineMeshParams SplineParams;//[Offset: 0x610 , Size: 88]
	Vector SplineUpDir;//[Offset: 0x668 , Size: 12]
	bool bAllowSplineEditingPerInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x674 , Size: 1]
	bool bSmoothInterpRollScale;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x674 , Size: 1]
	byte ForwardAxis;//[Offset: 0x675 , Size: 1]
	float SplineBoundaryMin;//[Offset: 0x678 , Size: 4]
	float SplineBoundaryMax;//[Offset: 0x67c , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x680 , Size: 4]
	Guid CachedMeshBodySetupGuid;//[Offset: 0x684 , Size: 16]
	bool bMeshDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x694 , Size: 1]
	function UpdateMesh();// 0x37934a4
	function SetStartTangent();// 0x37933e0
	function SetStartScale();// 0x3793320
	function SetStartRoll();// 0x379325c
	function SetStartPosition();// 0x3793198
	function SetStartOffset();// 0x37930d8
	function SetStartAndEnd();// 0x3792f38
	function SetSplineUpDir();// 0x3792e64
	function SetForwardAxis();// 0x3792da0
	function SetEndTangent();// 0x3792cdc
	function SetEndScale();// 0x3792c1c
	function SetEndRoll();// 0x3792b58
	function SetEndPosition();// 0x3792a94
	function SetEndOffset();// 0x37929d4
	function SetBoundaryMin();// 0x3792910
	function SetBoundaryMax();// 0x379284c
	function GetStartTangent();// 0x3792804
	function GetStartScale();// 0x37927c4
	function GetStartRoll();// 0x379279c
	function GetStartPosition();// 0x3792754
	function GetStartOffset();// 0x3792714
	function GetSplineUpDir();// 0x37926cc
	function GetForwardAxis();// 0x37926a4
	function GetEndTangent();// 0x379265c
	function GetEndScale();// 0x379261c
	function GetEndRoll();// 0x37925f4
	function GetEndPosition();// 0x37925ac
	function GetEndOffset();// 0x379256c
	function GetBoundaryMin();// 0x3792544
	function GetBoundaryMax();// 0x379251c

--------------------------------
Class: SplineMeshParams
	Vector StartPos;//[Offset: 0x0 , Size: 12]
	Vector StartTangent;//[Offset: 0xc , Size: 12]
	Vector2D StartScale;//[Offset: 0x18 , Size: 8]
	float StartRoll;//[Offset: 0x20 , Size: 4]
	Vector2D StartOffset;//[Offset: 0x24 , Size: 8]
	Vector EndPos;//[Offset: 0x2c , Size: 12]
	Vector EndTangent;//[Offset: 0x38 , Size: 12]
	Vector2D EndScale;//[Offset: 0x44 , Size: 8]
	float EndRoll;//[Offset: 0x4c , Size: 4]
	Vector2D EndOffset;//[Offset: 0x50 , Size: 8]

--------------------------------
Class: SpringArmComponent.SceneComponent.ActorComponent.Object
	float TargetArmLength;//[Offset: 0x260 , Size: 4]
	Vector SocketOffset;//[Offset: 0x264 , Size: 12]
	Vector TargetOffset;//[Offset: 0x270 , Size: 12]
	float ProbeSize;//[Offset: 0x27c , Size: 4]
	byte ProbeChannel;//[Offset: 0x280 , Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x281 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x281 , Size: 1]
	bool bInheritPitch;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x281 , Size: 1]
	bool bInheritYaw;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x281 , Size: 1]
	bool bInheritRoll;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x281 , Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x281 , Size: 1]
	bool bEnableCameraRotationLag;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x281 , Size: 1]
	bool bUseCameraLagSubstepping;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x281 , Size: 1]
	bool bDrawDebugLagMarkers;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282 , Size: 1]
	float CameraLagSpeed;//[Offset: 0x284 , Size: 4]
	float CameraRotationLagSpeed;//[Offset: 0x288 , Size: 4]
	float CameraLagMaxTimeStep;//[Offset: 0x28c , Size: 4]
	float CameraLagMaxDistance;//[Offset: 0x290 , Size: 4]
	function SetActive();// 0x363f6ac
	function GetTargetRotation();// 0x3794668

--------------------------------
Class: StaticMeshActor.Actor.Object
	StaticMeshComponent* StaticMeshComponent;//[Offset: 0x2c4 , Size: 4]
	bool bStaticMeshReplicateMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x2c9 , Size: 1]

--------------------------------
Class: StaticMeshSocket.Object
	FName SocketName;//[Offset: 0x20 , Size: 8]
	Vector RelativeLocation;//[Offset: 0x28 , Size: 12]
	Rotator RelativeRotation;//[Offset: 0x34 , Size: 12]
	Vector RelativeScale;//[Offset: 0x40 , Size: 12]
	FString Tag;//[Offset: 0x4c , Size: 12]

--------------------------------
Class: StereoLayerComponent.SceneComponent.ActorComponent.Object
	bool bLiveTexture;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x25d , Size: 1]
	bool bSupportsDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x25d , Size: 1]
	bool bNoAlphaChannel;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x25d , Size: 1]
	Texture* Texture;//[Offset: 0x260 , Size: 4]
	Texture* LeftTexture;//[Offset: 0x264 , Size: 4]
	bool bQuadPreserveTextureRatio;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x268 , Size: 1]
	Vector2D QuadSize;//[Offset: 0x26c , Size: 8]
	Box2D UVRect;//[Offset: 0x274 , Size: 20]
	float CylinderRadius;//[Offset: 0x288 , Size: 4]
	float CylinderOverlayArc;//[Offset: 0x28c , Size: 4]
	int CylinderHeight;//[Offset: 0x290 , Size: 4]
	byte StereoLayerType;//[Offset: 0x294 , Size: 1]
	byte StereoLayerShape;//[Offset: 0x295 , Size: 1]
	int Priority;//[Offset: 0x298 , Size: 4]
	function SetUVRect();// 0x3796a58
	function SetTexture();// 0x37969e0
	function SetQuadSize();// 0x3796970
	function SetPriority();// 0x37968f8
	function MarkTextureForUpdate();// 0x37968e4
	function GetUVRect();// 0x37968bc
	function GetTexture();// 0x37968a0
	function GetQuadSize();// 0x379687c
	function GetPriority();// 0x3796860

--------------------------------
Class: StereoLayerFunctionLibrary.BlueprintFunctionLibrary.Object
	function ShowSplashScreen();// 0x37971f8
	function SetSplashScreen();// 0x3797068
	function HideSplashScreen();// 0x3797054
	function EnableAutoLoadingSplashScreen();// 0x3796fdc

--------------------------------
Class: StringTable.Object

--------------------------------
Class: TargetPoint.Actor.Object

--------------------------------
Class: TextPropertyTestObject.Object
	FText DefaultedText;//[Offset: 0x1c , Size: 12]
	FText UndefaultedText;//[Offset: 0x28 , Size: 12]
	FText TransientText;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: TextRenderActor.Actor.Object
	TextRenderComponent* TextRender;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: TextRenderComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	FText Text;//[Offset: 0x54c , Size: 12]
	MaterialInterface* TextMaterial;//[Offset: 0x558 , Size: 4]
	Font* Font;//[Offset: 0x55c , Size: 4]
	byte HorizontalAlignment;//[Offset: 0x560 , Size: 1]
	byte VerticalAlignment;//[Offset: 0x561 , Size: 1]
	Color TextRenderColor;//[Offset: 0x564 , Size: 4]
	float XScale;//[Offset: 0x568 , Size: 4]
	float YScale;//[Offset: 0x56c , Size: 4]
	float WorldSize;//[Offset: 0x570 , Size: 4]
	float InvDefaultSize;//[Offset: 0x574 , Size: 4]
	float HorizSpacingAdjust;//[Offset: 0x578 , Size: 4]
	float VertSpacingAdjust;//[Offset: 0x57c , Size: 4]
	bool bAlwaysRenderAsText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x580 , Size: 1]
	function SetYScale();// 0x3799110
	function SetXScale();// 0x3799098
	function SetWorldSize();// 0x3799020
	function SetVertSpacingAdjust();// 0x3798fa8
	function SetVerticalAlignment();// 0x3798f30
	function SetTextRenderColor();// 0x3798ec0
	function SetTextMaterial();// 0x3798e48
	function SetText();// 0x3798d8c
	function SetHorizSpacingAdjust();// 0x3798d14
	function SetHorizontalAlignment();// 0x3798c9c
	function SetFont();// 0x3798c24
	function K2_SetText();// 0x3798a80
	function GetTextWorldSize();// 0x3798a38
	function GetTextLocalSize();// 0x37989f0

--------------------------------
Class: TextTextureAtlas.Object
	TextAtlases(ObjectProperty)[] TextAtlases;//[Offset: 0x34 , Size: 12]

--------------------------------
Class: Texture2DDynamic.Texture.Object
	byte Format;//[Offset: 0x98 , Size: 1]

--------------------------------
Class: TimelineComponent.ActorComponent.Object
	Timeline TheTimeline;//[Offset: 0xc0 , Size: 136]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x148 , Size: 1]
	function Stop();// 0x379c0f8
	function SetVectorCurve();// 0x379c03c
	function SetTimelineLengthMode();// 0x379bfc4
	function SetTimelineLength();// 0x379bf4c
	function SetPlayRate();// 0x1b6af60
	function SetPlaybackPosition();// 0x379be38
	function SetNewTime();// 0x379bdc0
	function SetLooping();// 0x379bd40
	function SetLinearColorCurve();// 0x379bc84
	function SetIgnoreTimeDilation();// 0x379bc04
	function SetFloatCurve();// 0x379bb48
	function ReverseFromEnd();// 0x379bb34
	function Reverse();// 0x379bb20
	function PlayFromStart();// 0x379bb0c
	function Play();// 0x379baf8
	function OnRep_Timeline();// 0x379bae4
	function IsReversing();// 0x379babc
	function IsPlaying();// 0x379ba94
	function IsLooping();// 0x379ba6c
	function GetTimelineLength();// 0x379ba44
	function GetPlayRate();// 0x379ba1c
	function GetPlaybackPosition();// 0x2bdaf7c
	function GetIgnoreTimeDilation();// 0x379b9f4

--------------------------------
Class: Timeline
	byte LengthMode;//[Offset: 0x0 , Size: 1]
	float Length;//[Offset: 0x4 , Size: 4]
	bool bLooping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x8 , Size: 1]
	bool bReversePlayback;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x8 , Size: 1]
	bool bPlaying;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x8 , Size: 1]
	float PlayRate;//[Offset: 0xc , Size: 4]
	float Position;//[Offset: 0x10 , Size: 4]
	Events(StructProperty)[] Events;//[Offset: 0x14 , Size: 12]
	InterpVectors(StructProperty)[] InterpVectors;//[Offset: 0x20 , Size: 12]
	InterpFloats(StructProperty)[] InterpFloats;//[Offset: 0x2c , Size: 12]
	InterpLinearColors(StructProperty)[] InterpLinearColors;//[Offset: 0x38 , Size: 12]
	delegate TimelinePostUpdateFunc;//[Offset: 0x48 , Size: 16]
	delegate TimelineFinishedFunc;//[Offset: 0x58 , Size: 16]
	Object* PropertySetObject;//[Offset: 0x70 , Size: 8]
	FName DirectionPropertyName;//[Offset: 0x78 , Size: 8]
	Property* DirectionProperty;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: TimelineTemplate.Object
	float TimelineLength;//[Offset: 0x1c , Size: 4]
	byte LengthMode;//[Offset: 0x20 , Size: 1]
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]
	bool bLoop;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21 , Size: 1]
	bool bReplicated;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x21 , Size: 1]
	bool bValidatedAsWired;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x21 , Size: 1]
	bool bIgnoreTimeDilation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x21 , Size: 1]
	EventTracks(StructProperty)[] EventTracks;//[Offset: 0x24 , Size: 12]
	FloatTracks(StructProperty)[] FloatTracks;//[Offset: 0x30 , Size: 12]
	VectorTracks(StructProperty)[] VectorTracks;//[Offset: 0x3c , Size: 12]
	LinearColorTracks(StructProperty)[] LinearColorTracks;//[Offset: 0x48 , Size: 12]
	MetaDataArray(StructProperty)[] MetaDataArray;//[Offset: 0x54 , Size: 12]
	Guid TimelineGuid;//[Offset: 0x60 , Size: 16]

--------------------------------
Class: TireType.DataAsset.Object
	float FrictionScale;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: TriggerBase.Actor.Object
	ShapeComponent* CollisionComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: TriggerBox.TriggerBase.Actor.Object

--------------------------------
Class: TriggerCapsule.TriggerBase.Actor.Object

--------------------------------
Class: TriggerSphere.TriggerBase.Actor.Object

--------------------------------
Class: TriggerVolume.Volume.Brush.Actor.Object

--------------------------------
Class: TwitterIntegrationBase.PlatformInterfaceBase.Object
	function TwitterRequest();// 0x379eb10
	function ShowTweetUI();// 0x379e93c
	function Init();// 0x1790b4c
	function GetNumAccounts();// 0x1b50160
	function GetAccountName();// 0x379e82c
	function CanShowTweetUI();// 0x1738b28
	function AuthorizeAccounts();// 0x363f494

--------------------------------
Class: UserDefinedEnum.Enum.Field.Object
	<DisplayNameMap_Key(NameProperty) , DisplayNameMap(TextProperty)> DisplayNameMap;//[Offset: 0x40 , Size: 60]

--------------------------------
Class: UserDefinedStruct.ScriptStruct.Struct.Field.Object
	Guid Guid;//[Offset: 0x64 , Size: 16]

--------------------------------
Class: UserInterfaceSettings.DeveloperSettings.Object
	enum RenderFocusRule;//[Offset: 0x30 , Size: 1]
	<HardwareCursors_Key(ByteProperty) , HardwareCursors(StructProperty)> HardwareCursors;//[Offset: 0x34 , Size: 60]
	<SoftwareCursors_Key(ByteProperty) , SoftwareCursors(StructProperty)> SoftwareCursors;//[Offset: 0x70 , Size: 60]
	SoftClassPath DefaultCursor;//[Offset: 0xb0 , Size: 24]
	SoftClassPath TextEditBeamCursor;//[Offset: 0xc8 , Size: 24]
	SoftClassPath CrosshairsCursor;//[Offset: 0xe0 , Size: 24]
	SoftClassPath HandCursor;//[Offset: 0xf8 , Size: 24]
	SoftClassPath GrabHandCursor;//[Offset: 0x110 , Size: 24]
	SoftClassPath GrabHandClosedCursor;//[Offset: 0x128 , Size: 24]
	SoftClassPath SlashedCircleCursor;//[Offset: 0x140 , Size: 24]
	float ApplicationScale;//[Offset: 0x158 , Size: 4]
	enum UIScaleRule;//[Offset: 0x15c , Size: 1]
	SoftClassPath CustomScalingRuleClass;//[Offset: 0x160 , Size: 24]
	RuntimeFloatCurve UIScaleCurve;//[Offset: 0x178 , Size: 88]
	bool bScreenAdaption;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	bool bLoadWidgetsOnDedicatedServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d1 , Size: 1]
	CursorClasses(ObjectProperty)[] CursorClasses;//[Offset: 0x1d4 , Size: 12]
	class Object* CustomScalingRuleClassInstance;//[Offset: 0x1e0 , Size: 4]
	DPICustomScalingRule* CustomScalingRule;//[Offset: 0x1e4 , Size: 4]

--------------------------------
Class: VectorFieldAnimated.VectorField.Object
	Texture2D* Texture;//[Offset: 0x3c , Size: 4]
	byte ConstructionOp;//[Offset: 0x40 , Size: 1]
	int VolumeSizeX;//[Offset: 0x44 , Size: 4]
	int VolumeSizeY;//[Offset: 0x48 , Size: 4]
	int VolumeSizeZ;//[Offset: 0x4c , Size: 4]
	int SubImagesX;//[Offset: 0x50 , Size: 4]
	int SubImagesY;//[Offset: 0x54 , Size: 4]
	int FrameCount;//[Offset: 0x58 , Size: 4]
	float FramesPerSecond;//[Offset: 0x5c , Size: 4]
	bool bLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x60 , Size: 1]
	VectorFieldStatic* NoiseField;//[Offset: 0x64 , Size: 4]
	float NoiseScale;//[Offset: 0x68 , Size: 4]
	float NoiseMax;//[Offset: 0x6c , Size: 4]

--------------------------------
Class: VectorFieldStatic.VectorField.Object
	int SizeX;//[Offset: 0x3c , Size: 4]
	int SizeY;//[Offset: 0x40 , Size: 4]
	int SizeZ;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: VectorFieldComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	VectorField* VectorField;//[Offset: 0x54c , Size: 4]
	float Intensity;//[Offset: 0x550 , Size: 4]
	float Tightness;//[Offset: 0x554 , Size: 4]
	bool bPreviewVectorField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x558 , Size: 1]
	function SetIntensity();// 0x365c30c

--------------------------------
Class: VectorFieldVolume.Actor.Object
	VectorFieldComponent* VectorFieldComponent;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: VisualLoggerAutomationTests.Object

--------------------------------
Class: VisualLoggerDebugSnapshotInterface.Interface.Object

--------------------------------
Class: VisualLoggerKismetLibrary.BlueprintFunctionLibrary.Object
	function LogText();// 0x37a0860
	function LogLocation();// 0x37a0598
	function LogBox();// 0x37a02b8

--------------------------------
Class: VoiceChannel.Channel.Object

--------------------------------
Class: WindDirectionalSource.Info.Actor.Object
	WindDirectionalSourceComponent* Component;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: WindDirectionalSourceComponent.SceneComponent.ActorComponent.Object
	float Strength;//[Offset: 0x260 , Size: 4]
	float Speed;//[Offset: 0x264 , Size: 4]
	float MinGustAmount;//[Offset: 0x268 , Size: 4]
	float MaxGustAmount;//[Offset: 0x26c , Size: 4]
	float Radius;//[Offset: 0x270 , Size: 4]
	bool bPointWind;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x274 , Size: 1]
	function SetWindType();// 0x37a13f8
	function SetStrength();// 0x37a1380
	function SetSpeed();// 0x37a1308
	function SetRadius();// 0x37a1290
	function SetMinimumGustAmount();// 0x37a1218
	function SetMaximumGustAmount();// 0x37a11a0

--------------------------------
Class: DmgTypeBP_Environmental_C.DamageType.Object

--------------------------------
Class: DecoratorActor.Actor.Object
	int ResID;//[Offset: 0x2d0 , Size: 4]
	int Health;//[Offset: 0x2d4 , Size: 4]
	int TeamID;//[Offset: 0x2d8 , Size: 4]
	int IconID;//[Offset: 0x2dc , Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	function ShowIconInMap();// 0x171cacc
	function SetHealth();// 0x171ca58
	function OnDie();// 0x171ca3c
	function OnBPRespawned();// 0x16f99b4
	function IsDead();// 0x171ca14
	function HideIconInMap();// 0x171ca00
	function GetActorResId();// 0x171c9e4
	function EatEffectMulticast();// 0x171c920
	function Client_OnEatEffect();// 0x206ccd8

--------------------------------
Class: ActivityActorBase.DecoratorActor.Actor.Object
	FString ActorName;//[Offset: 0x2e4 , Size: 12]
	bool bActived;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f0 , Size: 1]
	bool bButtonShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f1 , Size: 1]
	Character* ClientMainCharacter;//[Offset: 0x2f4 , Size: 8]
	Character* CurActiveCharacter;//[Offset: 0x2fc , Size: 8]
	MeshComponent* Mesh;//[Offset: 0x304 , Size: 4]
	ShapeComponent* ShapeCollision;//[Offset: 0x308 , Size: 4]
	bool bActivityEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	FString ActivityName;//[Offset: 0x310 , Size: 12]
	int SkillIndex;//[Offset: 0x31c , Size: 4]
	enum SkillEntry;//[Offset: 0x320 , Size: 1]
	AnimMontage* SoftAnimMontage;//[Offset: 0x328 , Size: 40]
	int ButtonShowTextID;//[Offset: 0x350 , Size: 4]
	FString ButtonShowAdditionalTextString;//[Offset: 0x354 , Size: 12]
	Object* ButtonShowPic;//[Offset: 0x360 , Size: 40]
	int ButtonShowConsumeItemID;//[Offset: 0x388 , Size: 4]
	bool bButtonShowWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38c , Size: 1]
	delegate OnActorReset;//[Offset: 0x390 , Size: 12]
	function UpdateButtonInfo();// 0x1695ae0
	function TriggerSkillEvent();// 0x1695a60
	function SetEnable();// 0x16959e0
	function RPC_Client_ShowInteractiveButton();// 0x1695914
	function OnEndOverlap();// 0x16957cc
	function OnBeginOverlap();// 0x16955d0
	function LocalStartActive();// 0x1695548
	function LocalReset();// 0x16954c8
	function LocalInterruptActive();// 0x1695440
	function LocalActiveFinished();// 0x16953b8
	function GetMesh();// 0x169539c
	function GetMainCharacter();// 0x169536c
	function GetActivedCharacter();// 0x1695340
	function ClientClickButton();// 0x169526c
	function BPUpdateButtonInfo();// 0x206ccd8
	function BPStartActive();// 0x1695148
	function BPReset();// 0x16950c8
	function BPInterruptActive();// 0x1694fa4
	function BPClientClickButtonFailed();// 0x206ccd8
	function BPActiveFinished();// 0x1694e80
	function AllowShowButton();// 0x1694da4
	function AllowInteractive();// 0x1694cc8
	function AllowClickButton();// 0x1694bec

--------------------------------
Class: ActivityActorInterface.Interface.Object
	function IsAllowInteractive();// 0x16966e0
	function HasActivityActor();// 0x1696658
	function GetCurActivityActor();// 0x1696628
	function DeleteActivityActor();// 0x16965a8
	function AddActivityActor();// 0x1696528

--------------------------------
Class: ActivityInteractiveActor.ActivityActorBase.DecoratorActor.Actor.Object
	float CoolDownTime;//[Offset: 0x39c , Size: 4]
	int ConsumeItemType;//[Offset: 0x3a0 , Size: 4]
	int ConsumeItemID;//[Offset: 0x3a4 , Size: 4]
	int ConsumeItemNum;//[Offset: 0x3a8 , Size: 4]
	bool bShouldOccupy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ac , Size: 1]
	float OccupiedStateTimeout;//[Offset: 0x3b0 , Size: 4]
	bool bIsCoolingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b4 , Size: 1]
	bool bIsOccupied;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b5 , Size: 1]
	delegate OnOccupyDelegate;//[Offset: 0x3c8 , Size: 12]
	delegate OnCoolDownDelegate;//[Offset: 0x3d4 , Size: 12]
	function UpdateButtonInfo();// 0x1695ae0
	function TriggerSkillEvent();// 0x1695a60
	function StartOccupied();// 0x1697324
	function StartCoolDown();// 0x1697310
	function OnRep_bIsOccupied();// 0x16972fc
	function OnRep_bIsCoolingDown();// 0x16972e8
	function OnOccupyFinished();// 0x16972d4
	function OnHandleSkillEndEvent();// 0x16971d4
	function OnCoolDownFinished();// 0x16971c0
	function LocalStartActive();// 0x1695548
	function LocalReset();// 0x16954c8
	function LocalInterruptActive();// 0x1695440
	function LocalActiveFinished();// 0x16953b8
	function IsOccupied();// 0x1697198
	function IsCoolingDown();// 0x1697170
	function IsConsumeItemEnough();// 0x1697148
	function GetMainCharacter();// 0x169536c
	function GetConsumeItemNum();// 0x1697120
	function GetConsumeItemID();// 0x16970f8
	function GetConsumeItemCurCount();// 0x16970d0
	function BPAllowShowButton();// 0x1696ff4
	function BPAllowInteractive();// 0x1696f6c
	function AllowShowButton();// 0x1694da4
	function AllowInteractive();// 0x1694cc8
	function AllowClickButton();// 0x1694bec

--------------------------------
Class: ActivityUtils.BlueprintFunctionLibrary.Object
	function RemoveParticleComponent();// 0x16986b0
	function PlayAudioEvent();// 0x1698588
	function IsAllowInteractiveState();// 0x1698510
	function GetSoftRefObj();// 0x169843c
	function GetBPUtils();// 0x1698414
	function CreateParticleComponent();// 0x16982bc
	function CollectionSoundAsset();// 0x1698118
	function CollectionParticleAsset();// 0x1697f74
	function AsyncLoadSoundAsset();// 0x1697e20
	function AsyncLoadParticleAsset();// 0x1697c9c

--------------------------------
Class: ActivityBPUtils.Object
	DisableInteractiveState(EnumProperty)[] DisableInteractiveState;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: ActorAttributeComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc , Size: 12]
	function UpdateAttribute();// 0x1698f4c
	function InitializeFollow();// 0x1698f30
	function Initialize();// 0x1698eb0

--------------------------------
Class: ActorCacheMgr.Actor.Object
	<DataMap_Key(ClassProperty) , DataMap(ObjectProperty)> DataMap;//[Offset: 0x2c4 , Size: 60]
	function GetActor();// 0x16993e0
	function AddToPool();// 0x169931c

--------------------------------
Class: ActorCachePool.Object

--------------------------------
Class: Visual.Object

--------------------------------
Class: Widget.Visual.Object
	PanelSlot* Slot;//[Offset: 0x1c , Size: 4]
	delegate bIsEnabledDelegate;//[Offset: 0x20 , Size: 16]
	FText ToolTipText;//[Offset: 0x30 , Size: 12]
	delegate ToolTipTextDelegate;//[Offset: 0x40 , Size: 16]
	Widget* ToolTipWidget;//[Offset: 0x50 , Size: 4]
	delegate ToolTipWidgetDelegate;//[Offset: 0x58 , Size: 16]
	delegate VisibilityDelegate;//[Offset: 0x68 , Size: 16]
	WidgetTransform RenderTransform;//[Offset: 0x78 , Size: 28]
	Vector2D RenderTransformPivot;//[Offset: 0x94 , Size: 8]
	bool bIsVariable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x9c , Size: 1]
	bool bCreatedByConstructionScript;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x9c , Size: 1]
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x9c , Size: 1]
	bool bOverride_Cursor;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x9c , Size: 1]
	bool bIsVolatile;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x9c , Size: 1]
	bool bWriteSceneZBuffer;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x9c , Size: 1]
	byte UsedLayerPolicy;//[Offset: 0x9d , Size: 1]
	byte PreservedLayerNum;//[Offset: 0x9e , Size: 1]
	byte Cursor;//[Offset: 0x9f , Size: 1]
	enum Clipping;//[Offset: 0xa0 , Size: 1]
	enum Visibility;//[Offset: 0xa1 , Size: 1]
	WidgetNavigation* Navigation;//[Offset: 0xa4 , Size: 4]
	NativeBindings(ObjectProperty)[] NativeBindings;//[Offset: 0xc0 , Size: 12]
	function SetVisibility();// 0x2bf43f4
	function SetUserFocus();// 0x2bf437c
	function SetToolTipText();// 0x2bf41d8
	function SetToolTip();// 0x2bf4160
	function SetRenderTranslation();// 0x2bf40f0
	function SetRenderTransformPivot();// 0x2bf4080
	function SetRenderTransform();// 0x2bf3fa8
	function SetRenderShear();// 0x2bf3f38
	function SetRenderScale();// 0x2bf3ec8
	function SetRenderAngle();// 0x2bf3e50
	function SetNavigationRule();// 0x2bf3d48
	function SetKeyboardFocus();// 0x2bf3d34
	function SetIsEnabled();// 0x16b80f4
	function SetCursor();// 0x2bf3cbc
	function SetClipping();// 0x2bf3c44
	function SetAllNavigationRules();// 0x2bf3b88
	function ResetCursor();// 0x2bf3b74
	function RemoveFromParent();// 0x1790b68
	function OnReply__DelegateSignature();// 0x206ccd8
	function OnPointerEvent__DelegateSignature();// 0x206ccd8
	function IsVisible();// 0x2bf3b4c
	function IsHovered();// 0x2bf3b24
	function InvalidateLayoutAndVolatility();// 0x2bf3b10
	function HasUserFocusedDescendants();// 0x2bf3a90
	function HasUserFocus();// 0x2bf3a10
	function HasMouseCapture();// 0x2bf39e8
	function HasKeyboardFocus();// 0x2bf39c0
	function HasFocusedDescendants();// 0x2bf3998
	function HasAnyUserFocus();// 0x2bf3970
	function GetWidget__DelegateSignature();// 0x206ccd8
	function GetVisibility();// 0x2bf3948
	function GetText__DelegateSignature();// 0x206ccd8
	function GetSlateVisibility__DelegateSignature();// 0x206ccd8
	function GetSlateColor__DelegateSignature();// 0x206ccd8
	function GetSlateBrush__DelegateSignature();// 0x206ccd8
	function GetParent();// 0x2bf3920
	function GetOwningPlayer();// 0x2bef5cc
	function GetMouseCursor__DelegateSignature();// 0x206ccd8
	function GetLinearColor__DelegateSignature();// 0x206ccd8
	function GetIsEnabled();// 0x2bf38f8
	function GetInt32__DelegateSignature();// 0x206ccd8
	function GetFloat__DelegateSignature();// 0x206ccd8
	function GetDesiredSize();// 0x2bf38b8
	function GetClipping();// 0x2bf3890
	function GetCheckBoxState__DelegateSignature();// 0x206ccd8
	function GetCachedGeometry();// 0x2bf3860
	function GetCachedAllottedGeometry();// 0x2bf3830
	function GetBool__DelegateSignature();// 0x206ccd8
	function GenerateWidgetForString__DelegateSignature();// 0x206ccd8
	function GenerateWidgetForObject__DelegateSignature();// 0x206ccd8
	function ForceVolatile();// 0x2bf37b0
	function ForceLayoutPrepass();// 0x2bf379c

--------------------------------
Class: PanelSlot.Visual.Object
	PanelWidget* Parent;//[Offset: 0x1c , Size: 4]
	Widget* content;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PanelWidget.Widget.Visual.Object
	Slots(ObjectProperty)[] Slots;//[Offset: 0xcc , Size: 12]
	function RemoveChildAt();// 0x2bdb0cc
	function RemoveChild();// 0x2bdb04c
	function HasChild();// 0x2bdafcc
	function HasAnyChildren();// 0x2bdafa4
	function GetChildrenCount();// 0x2bdaf7c
	function GetChildIndex();// 0x2bdaefc
	function GetChildAt();// 0x2bdae7c
	function ClearChildren();// 0x2bdae68
	function AddChild();// 0x2bdade8

--------------------------------
Class: WidgetTransform
	Vector2D Translation;//[Offset: 0x0 , Size: 8]
	Vector2D Scale;//[Offset: 0x8 , Size: 8]
	Vector2D Shear;//[Offset: 0x10 , Size: 8]
	float Angle;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: WidgetNavigation.Object
	WidgetNavigationData Up;//[Offset: 0x20 , Size: 24]
	WidgetNavigationData Down;//[Offset: 0x38 , Size: 24]
	WidgetNavigationData Left;//[Offset: 0x50 , Size: 24]
	WidgetNavigationData Right;//[Offset: 0x68 , Size: 24]
	WidgetNavigationData Next;//[Offset: 0x80 , Size: 24]
	WidgetNavigationData Previous;//[Offset: 0x98 , Size: 24]

--------------------------------
Class: WidgetNavigationData
	enum Rule;//[Offset: 0x0 , Size: 1]
	FName WidgetToFocus;//[Offset: 0x8 , Size: 8]
	Widget* Widget;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: UserWidget.Widget.Visual.Object
	LinearColor ColorAndOpacity;//[Offset: 0xd0 , Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0xe0 , Size: 16]
	SlateColor ForegroundColor;//[Offset: 0xf0 , Size: 28]
	delegate ForegroundColorDelegate;//[Offset: 0x110 , Size: 16]
	Margin Padding;//[Offset: 0x120 , Size: 16]
	ActiveSequencePlayers(ObjectProperty)[] ActiveSequencePlayers;//[Offset: 0x130 , Size: 12]
	StoppedSequencePlayers(ObjectProperty)[] StoppedSequencePlayers;//[Offset: 0x13c , Size: 12]
	NamedSlotBindings(StructProperty)[] NamedSlotBindings;//[Offset: 0x148 , Size: 12]
	WidgetTree* WidgetTree;//[Offset: 0x154 , Size: 4]
	int Priority;//[Offset: 0x158 , Size: 4]
	bool bSupportsKeyboardFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x15c , Size: 1]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x15c , Size: 1]
	bool bStopAction;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x15c , Size: 1]
	bool bCanEverTick;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x15c , Size: 1]
	bool bCanEverPaint;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x15c , Size: 1]
	bool bCookedWidgetTree;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x15c , Size: 1]
	bool needAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15d , Size: 1]
	bool isAutoLoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15e , Size: 1]
	autoPlayNameList(NameProperty)[] autoPlayNameList;//[Offset: 0x160 , Size: 12]
	InputComponent* InputComponent;//[Offset: 0x16c , Size: 4]
	function UnregisterInputComponent();// 0x2bf0b20
	function Tick();// 0x206ccd8
	function StopListeningForInputAction();// 0x2bf0a54
	function StopListeningForAllInputActions();// 0x2bf0a40
	function StopAnimation();// 0x2bf09c8
	function SetPositionInViewport();// 0x2bf0908
	function SetPlaybackSpeed();// 0x2bf084c
	function SetPadding();// 0x2bf07c4
	function SetOwningPlayer();// 0x2bf074c
	function SetOwningLocalPlayer();// 0x2bf06d4
	function SetNumLoopsToPlay();// 0x2bf0618
	function SetInputActionPriority();// 0x2bf05a0
	function SetInputActionBlocking();// 0x2bf0520
	function SetForegroundColor();// 0x2bf0200
	function SetDesiredSizeInViewport();// 0x2bf0188
	function SetColorAndOpacity();// 0x2bf010c
	function SetAnchorsInViewport();// 0x2bf0084
	function SetAlignmentInViewport();// 0x2bf0014
	function ReverseAnimation();// 0x2beff9c
	function RemoveFromViewport();// 0x2beff88
	function RegisterInputComponent();// 0x2beff74
	function PreConstruct();// 0x206ccd8
	function PlaySound();// 0x2befefc
	function PlayAnimationTo();// 0x2befd28
	function PlayAnimation();// 0x2befb98
	function PauseAnimation();// 0x2befb18
	function OnTouchStarted();// 0x206ccd8
	function OnTouchMoved();// 0x206ccd8
	function OnTouchGesture();// 0x206ccd8
	function OnTouchEnded();// 0x206ccd8
	function OnRemovedFromFocusPath();// 0x206ccd8
	function OnPreviewMouseButtonDown();// 0x206ccd8
	function OnPreviewKeyDown();// 0x206ccd8
	function OnPaint();// 0x206ccd8
	function OnMouseWheel();// 0x206ccd8
	function OnMouseMove();// 0x206ccd8
	function OnMouseLeave();// 0x206ccd8
	function OnMouseEnter();// 0x206ccd8
	function OnMouseCaptureLost();// 0x206ccd8
	function OnMouseButtonUp();// 0x206ccd8
	function OnMouseButtonDown();// 0x206ccd8
	function OnMouseButtonDoubleClick();// 0x206ccd8
	function OnMotionDetected();// 0x206ccd8
	function OnKeyUp();// 0x206ccd8
	function OnKeyDown();// 0x206ccd8
	function OnKeyChar();// 0x206ccd8
	function OnFocusReceived();// 0x206ccd8
	function OnFocusLost();// 0x206ccd8
	function OnDrop();// 0x206ccd8
	function OnDragOver();// 0x206ccd8
	function OnDragLeave();// 0x206ccd8
	function OnDragEnter();// 0x206ccd8
	function OnDragDetected();// 0x206ccd8
	function OnDragCancelled();// 0x206ccd8
	function OnAnimationStarted();// 0x2befa98
	function OnAnimationFinished();// 0x2befa18
	function OnAnalogValueChanged();// 0x206ccd8
	function OnAddedToFocusPath();// 0x206ccd8
	function ListenForInputAction();// 0x2bef888
	function IsPlayingAnimation();// 0x2bef860
	function IsListeningForInputAction();// 0x2bef7e0
	function IsInViewport();// 0x2bef57c
	function IsInteractable();// 0x206ccd8
	function IsAnyAnimationPlaying();// 0x2bef7b8
	function IsAnimationPlayingForward();// 0x2bef738
	function IsAnimationPlaying();// 0x2bef6b8
	function GetWidgetFromName();// 0x2bef624
	function GetOwningPlayerPawn();// 0x2bef5fc
	function GetOwningPlayer();// 0x2bef5cc
	function GetOwningLocalPlayer();// 0x2bef5a4
	function GetIsVisible();// 0x2bef57c
	function GetAnimationCurrentTime();// 0x2bef4fc
	function GetAnchorsInViewport();// 0x2bef4b8
	function GetAlignmentInViewport();// 0x2bef478
	function Destruct();// 0x206ccd8
	function Construct();// 0x206ccd8
	function AddToViewport();// 0x2bef400
	function AddToPlayerScreen();// 0x2bef380

--------------------------------
Class: WidgetTree.Object
	Widget* RootWidget;//[Offset: 0x1c , Size: 4]
	AllWidgets(ObjectProperty)[] AllWidgets;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: UAEUserWidget.UserWidget.Widget.Visual.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1b8 , Size: 4]
	LogicManagerBase* OwningLogicManager;//[Offset: 0x1bc , Size: 4]
	UAEWidgetContainer* OwningWidgetContainer;//[Offset: 0x1c0 , Size: 4]
	UAEUserWidget* ParentWidget;//[Offset: 0x1c4 , Size: 4]
	Params(ObjectProperty)[] Params;//[Offset: 0x240 , Size: 12]
	delegate widgetSizeNofity;//[Offset: 0x254 , Size: 12]
	UserWidgetState DefaultUserWidgetState;//[Offset: 0x260 , Size: 32]
	UserWidgetState CurrentUserWidgetState;//[Offset: 0x280 , Size: 32]
	float TickRate;//[Offset: 0x2a0 , Size: 4]
	bool bReceiveOnClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4 , Size: 1]
	bool bReceiveOnRightClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a5 , Size: 1]
	bool bReceiveOnDoubleClickedEvent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a6 , Size: 1]
	bool bAutoSetScreenPosOnMouseEnter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a7 , Size: 1]
	Vector2D ScreenPos;//[Offset: 0x2a8 , Size: 8]
	Vector2D LastMouseEventScreenPos;//[Offset: 0x2b0 , Size: 8]
	enum FadingStatus;//[Offset: 0x2c0 , Size: 1]
	float CurrentOpacity;//[Offset: 0x2c4 , Size: 4]
	float FadingInTime;//[Offset: 0x2c8 , Size: 4]
	float FadingOutTime;//[Offset: 0x2cc , Size: 4]
	bool bNoFadeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0 , Size: 1]
	bool bNoFadeOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1 , Size: 1]
	bool bShouldCollapse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d2 , Size: 1]
	bool bRegistUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d3 , Size: 1]
	FString UIMsgPrefix;//[Offset: 0x2d4 , Size: 12]
	UIMsgFunctionList(StrProperty)[] UIMsgFunctionList;//[Offset: 0x2e0 , Size: 12]
	function Visible();// 0x38d45fc
	function UnRegistFromGameFrontendHUD();// 0x38d45e8
	function SynchronizeBlueprintProperties();// 0x206ccd8
	function Show();// 0x38d45d4
	function SetParentWidget();// 0x38d455c
	function SetOnWidgetShow();// 0x38d44c0
	function SetOnWidgetHide();// 0x38d4424
	function SetOnClearUIStack();// 0x38d4388
	function SetAdapation();// 0x38d4240
	function RegistToGameFrontendHUD();// 0x38d41c8
	function Register();// 0x38d4104
	function ReceiveShow();// 0x206ccd8
	function ReceiveHide();// 0x206ccd8
	function ReceivedMountWidget();// 0x1c742f4
	function ReceivedInitWidget();// 0x206ccd8
	function ReCachedUIMsgFunction();// 0x38d40f0
	function PushOpenedUIStack();// 0x38d403c
	function PopOpenedUIStack();// 0x38d3f88
	function OnWidgetShow__DelegateSignature();// 0x206ccd8
	function OnWidgetHide__DelegateSignature();// 0x206ccd8
	function OnRightClicked();// 0x206ccd8
	function OnFadeOutFinished();// 0x372995c
	function OnFadeInFinished();// 0x38d3f6c
	function OnDoubleClicked();// 0x206ccd8
	function OnClicked();// 0x206ccd8
	function OnClearUIStack__DelegateSignature();// 0x206ccd8
	function IntCompare();// 0x38d3e64
	function InitCustomWidget();// 0x17c9e20
	function Hide();// 0x38d3e50
	function HandleUIMessageBattle();// 0x38d3d94
	function HandleUIMessage();// 0x38d3cd8
	function HandleAEUIFunction();// 0x38d3bd8
	function GetWidgetsByName();// 0x38d3a44
	function GetParentWidget();// 0x38d3a1c
	function GetOwningPlayer();// 0x2bef5cc
	function GetOwningLogicManager();// 0x38d39f4
	function GetOwningFrontendHUD();// 0x38d39cc
	function GetImgDynamicMaterial();// 0x38d394c
	function GetChildWidget();// 0x38d3888
	function GetAdapation();// 0x38d3860
	function FloatCompare();// 0x38d3758
	function DynamicAddUIMsgToCache();// 0x38d3658
	function DestroyWidget();// 0x38d3644
	function ClearOpenedUIStack();// 0x38d3630
	function ClearFunctionCacheByMsgName();// 0x38d3574
	function ClearFunctionCache();// 0x38d3560
	function ClearClassWidgetTree();// 0x38d354c
	function BindCustomUserEvent();// 0x17c9970

--------------------------------
Class: FrontendHUD.Object
	GameInstance* GameInstance;//[Offset: 0x2c , Size: 4]
	FString FrontendUtilsClassName;//[Offset: 0x34 , Size: 12]
	FrontendUtils* Utils;//[Offset: 0x40 , Size: 4]
	LogicManagerList(ObjectProperty)[] LogicManagerList;//[Offset: 0x44 , Size: 12]
	<LogicManagerMap_Key(StrProperty) , LogicManagerMap(WeakObjectProperty)> LogicManagerMap;//[Offset: 0x50 , Size: 60]
	int UnusedWidgetMinCount;//[Offset: 0x98 , Size: 4]
	int UnusedWidgetMaxCount;//[Offset: 0x9c , Size: 4]
	int UnusedWidgetKeepTime;//[Offset: 0xa0 , Size: 4]
	float MaxLowLevelMemoryLimit;//[Offset: 0xa4 , Size: 4]
	float MaxMiddleMemoryLimit;//[Offset: 0xa8 , Size: 4]
	float MaxGCArrayObjectSize;//[Offset: 0xac , Size: 4]
	FName CurrentGameStatus;//[Offset: 0xb0 , Size: 8]
	FName LastGameStatus;//[Offset: 0xb8 , Size: 8]
	bool InComBatStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	FName PendingGameStatus;//[Offset: 0xc8 , Size: 8]
	FString LatestGameStatusURL;//[Offset: 0xd0 , Size: 12]
	delegate OnPostSwitchGameStatusStartEvent;//[Offset: 0xdc , Size: 12]
	delegate OnPostSwitchGameStatusEvent;//[Offset: 0xe8 , Size: 12]
	delegate OnPreSwitchGameStatusEvent;//[Offset: 0xf4 , Size: 12]
	delegate OnPreSwitchGameStatusEndEvent;//[Offset: 0x100 , Size: 12]
	delegate OnCreateLogicManagerListEvent;//[Offset: 0x10c , Size: 12]
	delegate OnSetGameStatusEvent;//[Offset: 0x118 , Size: 12]
	delegate OnAddLuaLogicManagerEvent;//[Offset: 0x124 , Size: 12]
	delegate OnRemoveLuaLogicManagerEvent;//[Offset: 0x130 , Size: 12]
	World* CurrentGameStatusWorld;//[Offset: 0x13c , Size: 4]
	function SwitchGameStatus();// 0x38cfc2c
	function OnPreLoadMap();// 0x38cfb68
	function OnPostLoadMapWithWorld();// 0x38cfae8
	function OnGameViewportClientCreated();// 0x16ad21c
	function GetWorld();// 0x38cfab8
	function GetUtils();// 0x38cfa90
	function GetPlayerController();// 0x38cfa68
	function GetLogicManagerByName();// 0x38cf908
	function GetLogicManager();// 0x38cf888
	function GetGameViewportClient();// 0x38cf860
	function GetGameMode();// 0x38cf838
	function EnableGuiTest();// 0x38cf7b8
	function DynamicAddUIMsgToCache();// 0x38cf634
	function ClearLogicManagerByName();// 0x38cf4dc

--------------------------------
Class: FrontendUtils.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x1c , Size: 4]
	delegate SceneCameraSwitchedDelegate;//[Offset: 0x20 , Size: 12]
	FName CurrentSceneCameraName;//[Offset: 0x30 , Size: 8]
	SceneCameraList(ObjectProperty)[] SceneCameraList;//[Offset: 0x38 , Size: 12]
	<SceneCameraMap_Key(NameProperty) , SceneCameraMap(WeakObjectProperty)> SceneCameraMap;//[Offset: 0x44 , Size: 60]
	SceneDirectionalLightList(ObjectProperty)[] SceneDirectionalLightList;//[Offset: 0x80 , Size: 12]
	<SceneDirectionalLightMap_Key(NameProperty) , SceneDirectionalLightMap(WeakObjectProperty)> SceneDirectionalLightMap;//[Offset: 0x8c , Size: 60]
	ScenePointLightList(ObjectProperty)[] ScenePointLightList;//[Offset: 0xc8 , Size: 12]
	<ScenePointLightMap_Key(NameProperty) , ScenePointLightMap(WeakObjectProperty)> ScenePointLightMap;//[Offset: 0xd4 , Size: 60]
	<SceneSkyLightMap_Key(NameProperty) , SceneSkyLightMap(WeakObjectProperty)> SceneSkyLightMap;//[Offset: 0x110 , Size: 60]
	<SceneMatChangeableMeshMap_Key(NameProperty) , SceneMatChangeableMeshMap(WeakObjectProperty)> SceneMatChangeableMeshMap;//[Offset: 0x14c , Size: 60]
	FString GlobalUIEventDispatcherClassName;//[Offset: 0x1e0 , Size: 12]
	class Object* GlobalUIEventDispatcherClass;//[Offset: 0x1ec , Size: 4]
	Object* GlobalUIEventDispatcher;//[Offset: 0x1f0 , Size: 4]
	FString GlobalUIContainerClassName;//[Offset: 0x1f4 , Size: 12]
	GlobalUIContainerNames(NameProperty)[] GlobalUIContainerNames;//[Offset: 0x200 , Size: 12]
	<GlobalUIContainers_Key(NameProperty) , GlobalUIContainers(ObjectProperty)> GlobalUIContainers;//[Offset: 0x20c , Size: 60]
	GlobalPushUIContainers(ObjectProperty)[] GlobalPushUIContainers;//[Offset: 0x248 , Size: 12]
	function SwitchSceneCameraToTransform();// 0x38d1620
	function SwitchSceneCamera();// 0x38d1500
	function SetSceneSkyLightProperty();// 0x38d1330
	function SetScenePointLightProperty();// 0x38d10d0
	function SetSceneDirectionalLightProperty();// 0x38d0eb0
	function RegisterSceneSkyLight();// 0x38d0df0
	function RegisterScenePointLight();// 0x38d0d34
	function RegisterSceneMatChangeableMesh();// 0x38d0c78
	function RegisterSceneDirectionalLight();// 0x38d0bbc
	function RegisterSceneCamera();// 0x38d0b00
	function PopAllPushedUI();// 0x38d0aec
	function OnAllSceneCamerasRegistered();// 0x16b843c
	function IsPushedPanel();// 0x38d0a58
	function GlobalUIEventDispatcher_GetDelegateIsBound();// 0x38d08f8
	function GetUIStackTopSrcTag();// 0x38d0838
	function GetUIStackTopDstTag();// 0x38d0778
	function GetUIStackTop();// 0x38d06b8
	function GetSceneMatChangeableMeshByIdx();// 0x38d0638
	function GetOwningFrontendHUD();// 0x38d0610
	function GetGlobalUIEventDispatcher();// 0x38d05e8
	function GetGlobalUIContainer();// 0x38d0568
	function EnableLobbyMainLight();// 0x38d04e8
	function ClearAllSceneCameras();// 0x38d04d4

--------------------------------
Class: LogicManagerBase.Object
	FrontendHUD* OwningFrontendHUD;//[Offset: 0x28 , Size: 4]
	bool bPersistentUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]
	bool bDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x35 , Size: 1]
	bool bKeepDynamicWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36 , Size: 1]
	bool bUseNewHandleUIMessage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37 , Size: 1]
	int iUIControlState;//[Offset: 0x38 , Size: 4]
	int DefaultSceneCameraIndex;//[Offset: 0x3c , Size: 4]
	GameStatusList(NameProperty)[] GameStatusList;//[Offset: 0x4c , Size: 12]
	WidgetUClassList(ClassProperty)[] WidgetUClassList;//[Offset: 0x7c , Size: 12]
	WidgetList(ObjectProperty)[] WidgetList;//[Offset: 0x88 , Size: 12]
	DelayMessage_Obj(ObjectProperty)[] DelayMessage_Obj;//[Offset: 0xa4 , Size: 12]
	function SetEnableRemoveDynamicWidgets();// 0x38d2548
	function IsEnableRemoveDynamicWidgets();// 0x38d2520
	function GetWidgetList();// 0x38d2460
	function GetWidgetByName();// 0x38d239c
	function GetWidgetByClass();// 0x38d231c
	function GetOwningFrontendHUD();// 0x36a7908
	function GetDefaultSceneCamera();// 0x36a7a3c
	function DispatchUIMessage();// 0x38d213c

--------------------------------
Class: UAEWidgetContainer.UAEUserWidget.UserWidget.Widget.Visual.Object
	WidgetList(ObjectProperty)[] WidgetList;//[Offset: 0x2f4 , Size: 12]
	function RemoveWidgetInternal();// 0x1768994
	function RemoveWidget();// 0x38d57c8
	function AddWidgetWithZOrderInternal();// 0x1783210
	function AddWidgetWithZOrder();// 0x38d570c
	function AddWidgetInternal();// 0x18c2a2c
	function AddWidget();// 0x38d5694

--------------------------------
Class: UserWidgetState
	FString WidgetName;//[Offset: 0x0 , Size: 12]
	FName ContainerName;//[Offset: 0x10 , Size: 8]
	int ZOrder;//[Offset: 0x18 , Size: 4]
	UAEUserWidget* Widget;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ActorPositionWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	CanvasPanelSlot* MyCanvasPanelSlot;//[Offset: 0x2f4 , Size: 4]
	TextBlock* TextBlockDist;//[Offset: 0x2f8 , Size: 4]
	Actor* AttachedActor;//[Offset: 0x2fc , Size: 4]
	Vector4 Limit;//[Offset: 0x300 , Size: 16]
	Vector2D UIOffset;//[Offset: 0x310 , Size: 8]
	Vector LocOffset;//[Offset: 0x318 , Size: 12]
	float AlphaBegin;//[Offset: 0x324 , Size: 4]
	float AlphaEnd;//[Offset: 0x328 , Size: 4]
	float AlphaStep;//[Offset: 0x32c , Size: 4]
	float AlphaBeginDistance;//[Offset: 0x330 , Size: 4]
	float AlphaEndDistance;//[Offset: 0x334 , Size: 4]
	float ScaleBegin;//[Offset: 0x338 , Size: 4]
	float ScaleEnd;//[Offset: 0x33c , Size: 4]
	float ScaleStep;//[Offset: 0x340 , Size: 4]
	float ScaleBeginDistance;//[Offset: 0x344 , Size: 4]
	float ScaleEndDistance;//[Offset: 0x348 , Size: 4]
	float MaxShowDistance;//[Offset: 0x34c , Size: 4]
	int TargetDistance;//[Offset: 0x350 , Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x360 , Size: 4]
	function SetCurrentWidgetVisible();// 0x206ccd8
	function DetachFromActor();// 0x1699920
	function AttachToActor();// 0x16998a8

--------------------------------
Class: CanvasPanelSlot.PanelSlot.Visual.Object
	AnchorData LayoutData;//[Offset: 0x24 , Size: 40]
	bool bAutoSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	bool bSupportNotch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4d , Size: 1]
	int ZOrder;//[Offset: 0x50 , Size: 4]
	function SetZOrder();// 0x2bcddc0
	function SetSupportNotch();// 0x2bcdd40
	function SetSize();// 0x2bcdcd0
	function SetPosition();// 0x2bcdc60
	function SetOffsets();// 0x2bcdbd8
	function SetMinimum();// 0x2bcdb68
	function SetMaximum();// 0x2bcdaf8
	function SetLayout();// 0x2bcda60
	function SetAutoSize();// 0x2bcd9e0
	function SetAnchors();// 0x2bcd958
	function SetAlignment();// 0x2bcd8e8
	function GetZOrder();// 0x2bcd8c0
	function GetSize();// 0x2bcd880
	function GetPosition();// 0x2bcd840
	function GetOffsets();// 0x2bcd7fc
	function GetLayout();// 0x2bcd7a8
	function GetAutoSize();// 0x2bcd780
	function GetAnchors();// 0x2bcd73c
	function GetAlignment();// 0x2bcd6fc
	function GeSupportNotch();// 0x2bcd6d4

--------------------------------
Class: AnchorData
	Margin Offsets;//[Offset: 0x0 , Size: 16]
	Anchors Anchors;//[Offset: 0x10 , Size: 16]
	Vector2D Alignment;//[Offset: 0x20 , Size: 8]

--------------------------------
Class: Anchors
	Vector2D Minimum;//[Offset: 0x0 , Size: 8]
	Vector2D Maximum;//[Offset: 0x8 , Size: 8]

--------------------------------
Class: TextBlock.TextLayoutWidget.Widget.Visual.Object
	FText Text;//[Offset: 0xf0 , Size: 12]
	delegate TextDelegate;//[Offset: 0x100 , Size: 16]
	SlateColor ColorAndOpacity;//[Offset: 0x110 , Size: 28]
	delegate ColorAndOpacityDelegate;//[Offset: 0x130 , Size: 16]
	SlateFontInfo Font;//[Offset: 0x140 , Size: 64]
	Vector2D ShadowOffset;//[Offset: 0x180 , Size: 8]
	LinearColor ShadowColorAndOpacity;//[Offset: 0x188 , Size: 16]
	delegate ShadowColorAndOpacityDelegate;//[Offset: 0x198 , Size: 16]
	float MinDesiredWidth;//[Offset: 0x1a8 , Size: 4]
	bool AutoEllipsisText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ac , Size: 1]
	bool bWrapWithInvalidationPanel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ad , Size: 1]
	function SetVerticalJustification();// 0x2be450c
	function SetText();// 0x2be425c
	function SetShadowOffset();// 0x2be41ec
	function SetShadowColorAndOpacity();// 0x2be4170
	function SetOpacity();// 0x2be40f8
	function SetMinDesiredWidth();// 0x2be4080
	function SetJustification();// 0x2be4008
	function SetFont();// 0x2be3cf0
	function SetColorAndOpacity();// 0x2be39d0
	function SetAutoEllipsisText();// 0x2be3948
	function GetText();// 0x2be37ec

--------------------------------
Class: TextLayoutWidget.Widget.Visual.Object
	ShapedTextOptions ShapedTextOptions;//[Offset: 0xcc , Size: 4]
	byte Justification;//[Offset: 0xd0 , Size: 1]
	byte VerticalJustification;//[Offset: 0xd1 , Size: 1]
	bool AutoWrapText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]
	float WrapTextAt;//[Offset: 0xd4 , Size: 4]
	enum WrappingPolicy;//[Offset: 0xd8 , Size: 1]
	Margin Margin;//[Offset: 0xdc , Size: 16]
	float LineHeightPercentage;//[Offset: 0xec , Size: 4]

--------------------------------
Class: SlateFontInfo
	Object* FontObject;//[Offset: 0x0 , Size: 4]
	Object* FontMaterial;//[Offset: 0x4 , Size: 4]
	FontOutlineSettings OutlineSettings;//[Offset: 0x8 , Size: 28]
	FName TypefaceFontName;//[Offset: 0x30 , Size: 8]
	int Size;//[Offset: 0x38 , Size: 4]

--------------------------------
Class: FontOutlineSettings
	int OutlineSize;//[Offset: 0x0 , Size: 4]
	Object* OutlineMaterial;//[Offset: 0x4 , Size: 4]
	LinearColor OutlineColor;//[Offset: 0x8 , Size: 16]
	bool bSeparateFillAlpha;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]

--------------------------------
Class: ShapedTextOptions
	bool bOverride_TextShapingMethod;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x0 , Size: 1]
	bool bOverride_TextFlowDirection;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x0 , Size: 1]
	enum TextShapingMethod;//[Offset: 0x1 , Size: 1]
	enum TextFlowDirection;//[Offset: 0x2 , Size: 1]

--------------------------------
Class: STExtraPlayerController.UAEPlayerController.PlayerController.Controller.Actor.Object
	float FreeCameraStartMinPitchMin;//[Offset: 0x9b4 , Size: 4]
	float FreeCameraStartMinPitchMax;//[Offset: 0x9b8 , Size: 4]
	bool bTrackingKillerEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9bc , Size: 1]
	<TouchIndexSet(IntProperty)> TouchIndexSet;//[Offset: 0x9c0 , Size: 60]
	byte OnFireTouchFingerIndex;//[Offset: 0x9fc , Size: 1]
	enum TouchEndTriggerSkillEntry;//[Offset: 0x9fd , Size: 1]
	FName FeatureActorName;//[Offset: 0xa00 , Size: 8]
	IgnoreCameraMovingIndexArray(ByteProperty)[] IgnoreCameraMovingIndexArray;//[Offset: 0xa08 , Size: 12]
	bool bNeedSetFireTouchFingerIndex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14 , Size: 1]
	byte OnFreeCameraFingerIndex;//[Offset: 0xa15 , Size: 1]
	float FreeCameraSPL_Hor;//[Offset: 0xa18 , Size: 4]
	float FreeCameraSPL_Ver;//[Offset: 0xa1c , Size: 4]
	float FreeCamera_FPP_MIN;//[Offset: 0xa20 , Size: 4]
	float FreeCamera_FPP_MAX;//[Offset: 0xa24 , Size: 4]
	float FreeCamera_FPP_PITCH_MIN;//[Offset: 0xa28 , Size: 4]
	float FreeCamera_FPP_PITCH_MAX;//[Offset: 0xa2c , Size: 4]
	float FreeCamera_FPP_PITCH_MIN_LIMITED;//[Offset: 0xa30 , Size: 4]
	float FreeCamera_FPP_PITCH_MAX_LIMITED;//[Offset: 0xa34 , Size: 4]
	float FreeCameraSPL_Hor_Parachute;//[Offset: 0xa38 , Size: 4]
	float FreeCameraSPL_Ver_Parachute;//[Offset: 0xa3c , Size: 4]
	float RecoverLagDelayTime;//[Offset: 0xa40 , Size: 4]
	Vector2D StartPosition;//[Offset: 0xa44 , Size: 8]
	Vector2D CurFreeCamPosition;//[Offset: 0xa4c , Size: 8]
	Rotator EmoteFreeCamPrevFigureResultDelta;//[Offset: 0xa54 , Size: 12]
	Rotator SelfieFreeCamPrevFigureResultDelta;//[Offset: 0xa60 , Size: 12]
	FString FollowCandidateName;//[Offset: 0xa70 , Size: 12]
	<IsTeammatesAutoFollowing_Key(StrProperty) , IsTeammatesAutoFollowing(BoolProperty)> IsTeammatesAutoFollowing;//[Offset: 0xa7c , Size: 60]
	Rotator FreeCameraStartRotation;//[Offset: 0xab8 , Size: 12]
	Transform FPPModeSpringArmTrans;//[Offset: 0xad0 , Size: 48]
	byte FreeCameraFigerIndex;//[Offset: 0xb00 , Size: 1]
	int WeaponReconnectOpIndex;//[Offset: 0xb04 , Size: 4]
	bool bHasInitUIFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb08 , Size: 1]
	bool isShowVaultEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb0a , Size: 1]
	BattleSceneAvatarDisplayInfoList(StructProperty)[] BattleSceneAvatarDisplayInfoList;//[Offset: 0xb0c , Size: 12]
	LinearColor CrossHairColor;//[Offset: 0xb18 , Size: 16]
	byte AutoAimType;//[Offset: 0xb28 , Size: 1]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb30 , Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb31 , Size: 1]
	bool bIsInResultView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb40 , Size: 1]
	bool bForceHideConcentric;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb41 , Size: 1]
	ScreenAppearToBeRemovedInResult(StrProperty)[] ScreenAppearToBeRemovedInResult;//[Offset: 0xb44 , Size: 12]
	ClientFatalDamageRecords(StructProperty)[] ClientFatalDamageRecords;//[Offset: 0xb50 , Size: 12]
	ClientFatalDamageRecordData ClientFatalDamageLastRecords;//[Offset: 0xb5c , Size: 144]
	SensibilityConfig SensibilityConfig;//[Offset: 0xbec , Size: 172]
	bool bSingleShotWeaponShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc98 , Size: 1]
	bool bShotGunShootMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc99 , Size: 1]
	int UseMotionControlType;//[Offset: 0xc9c , Size: 4]
	delegate OnCharacterNearDeathOrRescueingOtherNotifyDelegate;//[Offset: 0xca0 , Size: 12]
	delegate OnPlayerEnterFlying;//[Offset: 0xcac , Size: 12]
	delegate OnPlayerChangeViewtargetToPlane;//[Offset: 0xcb8 , Size: 12]
	delegate OnPlayerExitFlying;//[Offset: 0xcc4 , Size: 12]
	delegate OnPlayerEnterJumping;//[Offset: 0xcd0 , Size: 12]
	delegate OnPlayerExitJumping;//[Offset: 0xcdc , Size: 12]
	delegate OnPlayerEnterParachute;//[Offset: 0xce8 , Size: 12]
	delegate OnPlayerExitParachute;//[Offset: 0xcf4 , Size: 12]
	delegate OnPlayerEnterWater;//[Offset: 0xd00 , Size: 12]
	delegate OnPlayerExitWater;//[Offset: 0xd0c , Size: 12]
	delegate OnPlayerEnterFighting;//[Offset: 0xd18 , Size: 12]
	delegate OnPlayerExitFighting;//[Offset: 0xd24 , Size: 12]
	delegate OnPlayerEnterFinished;//[Offset: 0xd30 , Size: 12]
	delegate OnPlayerStartReloadWeapon;//[Offset: 0xd3c , Size: 12]
	delegate OnPlayerEndReloadWeapon;//[Offset: 0xd48 , Size: 12]
	delegate OnTeammateHPChangeDelegate;//[Offset: 0xd54 , Size: 12]
	delegate OnCharacterBreathChange;//[Offset: 0xd60 , Size: 12]
	delegate OnTeammateTemperatureChangeDelegate;//[Offset: 0xd6c , Size: 12]
	delegate OnLocalCharacterTemperatureChangeDel;//[Offset: 0xd78 , Size: 12]
	delegate OnCharacterAntidoteChange;//[Offset: 0xd84 , Size: 12]
	delegate OnOneTeamPlayerHPChangeDelegate;//[Offset: 0xd90 , Size: 12]
	delegate OnInitTaskData;//[Offset: 0xd9c , Size: 12]
	delegate OnInitCollectionData;//[Offset: 0xda8 , Size: 12]
	delegate OnPlayerDoEmote;//[Offset: 0xdb4 , Size: 12]
	delegate OnPlayerKilling;//[Offset: 0xdc0 , Size: 12]
	delegate OnPickupItem;//[Offset: 0xdcc , Size: 12]
	delegate OnDropItem;//[Offset: 0xdd8 , Size: 12]
	delegate OnDeathBoxSpawned;//[Offset: 0xde4 , Size: 12]
	delegate OnTaskConditionActived;//[Offset: 0xdf0 , Size: 12]
	delegate OnTaskConditionDeactived;//[Offset: 0xdfc , Size: 12]
	KillOrPutDownMessage KillOrPutDownMessageData;//[Offset: 0xe20 , Size: 68]
	delegate OnStartFireEvent;//[Offset: 0xe64 , Size: 12]
	delegate OnStopFireEvent;//[Offset: 0xe70 , Size: 12]
	delegate OnReleaseFireBtn;//[Offset: 0xe7c , Size: 12]
	delegate OnReleaseScreen;//[Offset: 0xe88 , Size: 12]
	delegate OnFingerMove;//[Offset: 0xe94 , Size: 12]
	delegate OnSwitchCameraModeStart;//[Offset: 0xea0 , Size: 12]
	delegate OnSwitchCameraModeEnd;//[Offset: 0xeac , Size: 12]
	delegate OnPlayerPickUpActor;//[Offset: 0xeb8 , Size: 12]
	delegate OnPlayerPutDownActor;//[Offset: 0xec4 , Size: 12]
	delegate OnPlayerPutDownAllProp;//[Offset: 0xed0 , Size: 12]
	delegate OnSwitchWeapon;//[Offset: 0xedc , Size: 12]
	delegate OnEquipWeaponDel;//[Offset: 0xee8 , Size: 12]
	delegate OnUnequipWeaponDel;//[Offset: 0xef4 , Size: 12]
	delegate OnUseInventoryItem;//[Offset: 0xf00 , Size: 12]
	delegate OnChangeBattleOwnerDel;//[Offset: 0xf0c , Size: 12]
	delegate OnDamageToOther;//[Offset: 0xf18 , Size: 12]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xf24 , Size: 12]
	delegate DelegatePlayerGoldChange;//[Offset: 0xf30 , Size: 12]
	delegate DelegatePlayerLevelChange;//[Offset: 0xf3c , Size: 12]
	delegate OnGameStartCountDownDelegate;//[Offset: 0xf48 , Size: 12]
	delegate OnRank;//[Offset: 0xf54 , Size: 12]
	delegate OnGameStartDelegate;//[Offset: 0xf60 , Size: 12]
	delegate OnPlayerNameChange;//[Offset: 0xf6c , Size: 12]
	delegate OnUseMainSlot;//[Offset: 0xf78 , Size: 12]
	delegate OnBackpackMainSlot;//[Offset: 0xf84 , Size: 12]
	delegate OnRemoveMainSlot;//[Offset: 0xf90 , Size: 12]
	delegate OnRepPlayerState;//[Offset: 0xf9c , Size: 12]
	delegate OnRepTeammateChange;//[Offset: 0xfa8 , Size: 12]
	delegate OnRepTeammateAvatarDisplayInfo;//[Offset: 0xfb4 , Size: 12]
	delegate OnMapMarkChangeDelegate;//[Offset: 0xfc4 , Size: 12]
	delegate OnShowSkillPrompt;//[Offset: 0xfd0 , Size: 12]
	delegate OnStartAutoSprintCountDown;//[Offset: 0xfdc , Size: 12]
	delegate OnShowAutoSprintButton;//[Offset: 0xfe8 , Size: 12]
	delegate OnPlayerChangeWearingDone;//[Offset: 0xff4 , Size: 12]
	delegate OnPlayerChangeWearingAnimFinished;//[Offset: 0x1000 , Size: 12]
	delegate OnPlayerFinalAssistKill;//[Offset: 0x100c , Size: 12]
	delegate OnConsumableAvatarChange;//[Offset: 0x1018 , Size: 12]
	delegate OnEquipmentAvatarChange;//[Offset: 0x1024 , Size: 12]
	delegate OnEquipmentWeaponAvatarChange;//[Offset: 0x1030 , Size: 12]
	delegate OnGameStateChange;//[Offset: 0x103c , Size: 12]
	delegate OnChangeCharacterBeforeDelegate;//[Offset: 0x1048 , Size: 12]
	delegate OnChangeCharacterLogicDelegate;//[Offset: 0x1054 , Size: 12]
	delegate OnInfectionSelectZombieDelegate;//[Offset: 0x1060 , Size: 12]
	delegate OnSetChangeCharacterStateDelegate;//[Offset: 0x106c , Size: 12]
	delegate OnCacheRecvInfectionSelectZombie;//[Offset: 0x1088 , Size: 12]
	delegate OpenSequencerDelegate;//[Offset: 0x1094 , Size: 12]
	STExtraBaseCharacter* tmpAnchorCharacter;//[Offset: 0x10b0 , Size: 4]
	delegate OnInterruptAutoSprintCountDown;//[Offset: 0x10b4 , Size: 12]
	delegate OnAutoSprintActive;//[Offset: 0x10c0 , Size: 12]
	delegate OnTakeDamagedDelegate;//[Offset: 0x10cc , Size: 12]
	delegate OnPostTakeDamageForBP;//[Offset: 0x10ec , Size: 12]
	delegate OnLostConnection;//[Offset: 0x10f8 , Size: 12]
	delegate OnReconnected;//[Offset: 0x1104 , Size: 12]
	delegate OnExitGame;//[Offset: 0x1110 , Size: 12]
	delegate OnSpectatorChange;//[Offset: 0x111c , Size: 12]
	delegate OnCharacterRecoveryHealth;//[Offset: 0x1128 , Size: 12]
	delegate RunOnNextFrameDelegate;//[Offset: 0x1134 , Size: 12]
	NewbieGuideComponent* NewbieComponent;//[Offset: 0x1140 , Size: 4]
	int MaternalZombieWeight;//[Offset: 0x1144 , Size: 4]
	TimeLineSyncComponent* TimeLineSyncComponent;//[Offset: 0x1148 , Size: 4]
	TimeWatchDogComponent* TimeWatchDogComponent;//[Offset: 0x114c , Size: 4]
	PlayerAntiCheatManager* AntiCheatManagerComp;//[Offset: 0x1150 , Size: 4]
	bool bShouldReportAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1154 , Size: 1]
	delegate NewbieShowCurGuide;//[Offset: 0x1328 , Size: 12]
	delegate PlayerControllerEnterFightingStateDelegate;//[Offset: 0x1334 , Size: 12]
	bool EnableAsyncLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1344 , Size: 1]
	bool DisableNewStopFireLogic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1345 , Size: 1]
	bool UseScreenStopFireCheckOnlyInModeTwo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1346 , Size: 1]
	bool EnableDebugRotatoInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1347 , Size: 1]
	bool EnableDebugRotatoInfoTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1348 , Size: 1]
	bool EnableNewUpdateTeamPlayerState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1349 , Size: 1]
	bool EnableNetCullingDistOnVeryLowDevice;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134a , Size: 1]
	float PC_CameraMoveRateX;//[Offset: 0x134c , Size: 4]
	float PC_CameraMoveRateY;//[Offset: 0x1350 , Size: 4]
	float Mobile_CameraMoveRateX;//[Offset: 0x1354 , Size: 4]
	float Mobile_CameraMoveRateY;//[Offset: 0x1358 , Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;//[Offset: 0x135c , Size: 4]
	CurveFloat* CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;//[Offset: 0x1360 , Size: 4]
	bool bUseDisCurve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1364 , Size: 1]
	CommonCameraModeData NormalCameraModeData;//[Offset: 0x1368 , Size: 36]
	CommonCameraModeData NearCameraModeData;//[Offset: 0x138c , Size: 36]
	Vector2D NearCameraModeCameraMoveAdditionalRate;//[Offset: 0x13b0 , Size: 8]
	Vector2D NearCameraModeCameraMoveMaxSpeed;//[Offset: 0x13b8 , Size: 8]
	AimCameraModeData AimCameraModeData;//[Offset: 0x13c0 , Size: 36]
	Vector2D AimCameraModeCameraMoveAdditionalRate;//[Offset: 0x13e4 , Size: 8]
	Vector2D AimCameraModeCameraMoveMaxSpeed;//[Offset: 0x13ec , Size: 8]
	CommonCameraModeData PlaneCameraModeData;//[Offset: 0x13f4 , Size: 36]
	<CameraViewPitchLimitDataMap_Key(ByteProperty) , CameraViewPitchLimitDataMap(StructProperty)> CameraViewPitchLimitDataMap;//[Offset: 0x1418 , Size: 60]
	float MoveCameraMinDistanceThreshold;//[Offset: 0x1454 , Size: 4]
	float MoveCameraMinTimeThreshold;//[Offset: 0x1458 , Size: 4]
	bool ShouldShowPawnDetailInfoOnHUD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145c , Size: 1]
	bool ShouldSpringUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145d , Size: 1]
	Actor* BonfireUIAttachedActor;//[Offset: 0x1464 , Size: 4]
	bool bShowSuperCodeUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1468 , Size: 1]
	byte CurCameraMode;//[Offset: 0x1469 , Size: 1]
	FName AutoScopeAimCompName;//[Offset: 0x1470 , Size: 8]
	float AutoScopeAimTraceDistance;//[Offset: 0x1478 , Size: 4]
	bool bMoveable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147c , Size: 1]
	bool bMoveablePickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147d , Size: 1]
	bool bMoveableAirborne;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147e , Size: 1]
	bool bMoveableLandHard;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x147f , Size: 1]
	float MoveableLandHardTime;//[Offset: 0x1480 , Size: 4]
	float CanMoveCDTime;//[Offset: 0x1484 , Size: 4]
	float CanSprintCDTime;//[Offset: 0x1488 , Size: 4]
	float SwitchPoseCDTime;//[Offset: 0x148c , Size: 4]
	float MovealbeSwitchPoseTime;//[Offset: 0x1490 , Size: 4]
	float AutoSprintRequestCD;//[Offset: 0x1494 , Size: 4]
	bool bCanGetTouchInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1498 , Size: 1]
	Vector CurScreenMoveSpeed;//[Offset: 0x149c , Size: 12]
	float Mobile_CameraMoveAdjustSensitiveValue;//[Offset: 0x14a8 , Size: 4]
	float SpecialDeviceRate;//[Offset: 0x14ac , Size: 4]
	<SpecialDeviceRateConfigs_Key(StrProperty) , SpecialDeviceRateConfigs(FloatProperty)> SpecialDeviceRateConfigs;//[Offset: 0x14b0 , Size: 60]
	bool bIsBattleOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ec , Size: 1]
	bool bIsAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ed , Size: 1]
	bool bIsMeleeAutoAimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14ee , Size: 1]
	STExtraBaseCharacter* STExtraBaseCharacter;//[Offset: 0x14f0 , Size: 4]
	bool CharacterTouchMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f4 , Size: 1]
	bool IsDeadForLogout;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14f5 , Size: 1]
	ServerHitEnemyReplicatedData ServerHitEnemyReplicatedData;//[Offset: 0x14f8 , Size: 8]
	bool bDebugShowYawInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1500 , Size: 1]
	float AccumulateYawInput;//[Offset: 0x1504 , Size: 4]
	float LandAfterJumpPlaneDelayMoveTime;//[Offset: 0x1508 , Size: 4]
	bool bLandAfterJumpPlane;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150c , Size: 1]
	bool bIsLandingOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150d , Size: 1]
	bool bIsNeedCheckPullPercentage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x150e , Size: 1]
	float NoRespondArea;//[Offset: 0x1510 , Size: 4]
	float ComfortableSwipeAddition;//[Offset: 0x1514 , Size: 4]
	bool bIsLeftScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1518 , Size: 1]
	bool bIsRightScreenUseComfortableSwipe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1519 , Size: 1]
	byte sprintOptType;//[Offset: 0x151a , Size: 1]
	float JoystickSprintDisThreshold;//[Offset: 0x151c , Size: 4]
	float JoystickSprintDisThresholdNew;//[Offset: 0x1520 , Size: 4]
	float JoystickSprintBtnHeight;//[Offset: 0x1524 , Size: 4]
	float JoystickSprintAngleThreshold;//[Offset: 0x1528 , Size: 4]
	bool bIsUseDisOrSpeedMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152c , Size: 1]
	byte JoystickOperatingMode;//[Offset: 0x152d , Size: 1]
	float EasyGoStraightAngle;//[Offset: 0x1530 , Size: 4]
	bool bIsTouching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1534 , Size: 1]
	<TouchForceMap_Key(ByteProperty) , TouchForceMap(FloatProperty)> TouchForceMap;//[Offset: 0x1538 , Size: 60]
	float TouchForceFireThreshold;//[Offset: 0x1574 , Size: 4]
	float DoubleClickFireTimeThreshold;//[Offset: 0x1578 , Size: 4]
	float DoubleClickFireDistanceThreshold;//[Offset: 0x157c , Size: 4]
	float DoubleClickCancelDistanceThreshold;//[Offset: 0x1580 , Size: 4]
	int TouchForceWatchFrame;//[Offset: 0x1584 , Size: 4]
	bool bUseTouchForce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1588 , Size: 1]
	float InputTouchRepeatLastTime;//[Offset: 0x158c , Size: 4]
	byte TouchFireType;//[Offset: 0x1590 , Size: 1]
	float TestForce;//[Offset: 0x1594 , Size: 4]
	delegate On3DTouchForceChange;//[Offset: 0x1598 , Size: 12]
	delegate OnDoubleClickCheck;//[Offset: 0x15a4 , Size: 12]
	bool bIsAutoAimOnlyInTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b0 , Size: 1]
	bool bIsAutoAimOnlyOnFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b1 , Size: 1]
	bool bMoveInMiniMap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b2 , Size: 1]
	bool bAutoSprint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15b3 , Size: 1]
	float AutoSprintBtnTime;//[Offset: 0x15b4 , Size: 4]
	float AutoSprintWaitingTime;//[Offset: 0x15b8 , Size: 4]
	float AutoSprintThreshold;//[Offset: 0x15bc , Size: 4]
	float JoystickTriggerSprintDuration;//[Offset: 0x15c0 , Size: 4]
	float InHouseSpringArmLengthModifier;//[Offset: 0x15c4 , Size: 4]
	float InHouseSpringArmLengthModifierChangeSpeed;//[Offset: 0x15c8 , Size: 4]
	bool IsPlayerUnableToDoAutoSprintOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15cc , Size: 1]
	float CurrentCameraFOV;//[Offset: 0x15d0 , Size: 4]
	float MinFovChangeView;//[Offset: 0x15d4 , Size: 4]
	WeaponSystemReconnectReplicateData WeaponSystemReconnectReplicateData;//[Offset: 0x15d8 , Size: 40]
	int GameTipMsgID;//[Offset: 0x1600 , Size: 4]
	FString GameTipParam1;//[Offset: 0x1604 , Size: 12]
	FString GameTipParam2;//[Offset: 0x1610 , Size: 12]
	float AutoSprintCD;//[Offset: 0x1658 , Size: 4]
	<TeamMateStates_Key(UInt32Property) , TeamMateStates(StructProperty)> TeamMateStates;//[Offset: 0x165c , Size: 60]
	<DoubleClickLastTouchInfoMap_Key(ByteProperty) , DoubleClickLastTouchInfoMap(StructProperty)> DoubleClickLastTouchInfoMap;//[Offset: 0x1698 , Size: 60]
	<DoubleClickCurTouchInfoMap_Key(ByteProperty) , DoubleClickCurTouchInfoMap(StructProperty)> DoubleClickCurTouchInfoMap;//[Offset: 0x16d4 , Size: 60]
	Transform FPPCameraLerpStartTransformRelative;//[Offset: 0x1730 , Size: 48]
	CurveFloat* CurveFPPCameraLerp;//[Offset: 0x17f8 , Size: 4]
	CameraComponent* PreActiveCameraCache;//[Offset: 0x17fc , Size: 4]
	CameraComponent* CurrentActiveCameraCache;//[Offset: 0x1800 , Size: 4]
	SpringArmComponent* CurrentActiveSpringArmCache;//[Offset: 0x1804 , Size: 4]
	PlayerTombBox* DeadTombBox;//[Offset: 0x1814 , Size: 4]
	ForbitPickList(StrProperty)[] ForbitPickList;//[Offset: 0x1820 , Size: 12]
	bool bForbitPickupEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1838 , Size: 1]
	int pickupPlayerChoice;//[Offset: 0x183c , Size: 4]
	bool bCanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1840 , Size: 1]
	bool bShouldDisplayHitFinalDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1841 , Size: 1]
	float RescueRemainingSeconds;//[Offset: 0x1844 , Size: 4]
	float RescueTotalSeconds;//[Offset: 0x1848 , Size: 4]
	bool IsCurrentSpectatorFreeView;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184c , Size: 1]
	float FreeViewUpRate;//[Offset: 0x1850 , Size: 4]
	byte MaxTouchMoveDelayFrame;//[Offset: 0x1854 , Size: 1]
	int MaxCacheInputSpeedNum;//[Offset: 0x1858 , Size: 4]
	bool bBleFreeCameraUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185c , Size: 1]
	bool IsCatchUpByMonster;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185d , Size: 1]
	Vector PreMonsterCatchUpPos;//[Offset: 0x1860 , Size: 12]
	TeamateStateUAVChangedCompressData TeammateUAVStateChangeCompressedData;//[Offset: 0x186c , Size: 20]
	bool isPressingBtn_AimAndFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1880 , Size: 1]
	byte CurTouchAimAndFireFingerIndex;//[Offset: 0x1881 , Size: 1]
	bool bOpeningBackpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1882 , Size: 1]
	bool DiedisableInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1883 , Size: 1]
	byte CurAimFireFingerIndex;//[Offset: 0x18c0 , Size: 1]
	STExtraBaseCharacter* closedAimTarget;//[Offset: 0x1928 , Size: 4]
	BackpackComponent* BackpackComponent;//[Offset: 0x19e8 , Size: 4]
	CommonBtnComponent* CommonBtnComponent;//[Offset: 0x19ec , Size: 4]
	ChatComponent* ChatComponent;//[Offset: 0x19f0 , Size: 4]
	GuideComponent* GuideComponent;//[Offset: 0x19f4 , Size: 4]
	QuickSignComponent* QuickSignComponent;//[Offset: 0x19f8 , Size: 4]
	BaseTaskComponent* TaskComponent;//[Offset: 0x19fc , Size: 4]
	bool bEnableDeathPlayback;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a11 , Size: 1]
	ObserveReplicateItems(IntProperty)[] ObserveReplicateItems;//[Offset: 0x1a14 , Size: 12]
	ObservedItemList(StructProperty)[] ObservedItemList;//[Offset: 0x1a3c , Size: 12]
	FiringPlayerList(UInt32Property)[] FiringPlayerList;//[Offset: 0x1ae4 , Size: 12]
	delegate OnAboutToChangeViewTarget;//[Offset: 0x1af0 , Size: 12]
	delegate OnFinishedChangeViewTarget;//[Offset: 0x1afc , Size: 12]
	delegate OnCharacterStatesChange;//[Offset: 0x1b08 , Size: 12]
	FriendObserverDetails(StructProperty)[] FriendObserverDetails;//[Offset: 0x1b14 , Size: 12]
	bool bShowWhoObservingMe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b20 , Size: 1]
	delegate ObservedTargetDieDelegate;//[Offset: 0x1b24 , Size: 12]
	float GotoSpectatingDelayTime;//[Offset: 0x1b34 , Size: 4]
	TotalPlayers(StructProperty)[] TotalPlayers;//[Offset: 0x1b38 , Size: 12]
	TotalPlayerList(StructProperty)[] TotalPlayerList;//[Offset: 0x1b44 , Size: 12]
	TotalPlayerList_SortedByTeamID(StructProperty)[] TotalPlayerList_SortedByTeamID;//[Offset: 0x1b50 , Size: 12]
	NearPlayerList(StructProperty)[] NearPlayerList;//[Offset: 0x1b5c , Size: 12]
	SameTeamPlayerList(StructProperty)[] SameTeamPlayerList;//[Offset: 0x1b68 , Size: 12]
	<TeamInfoMap_Key(IntProperty) , TeamInfoMap(StructProperty)> TeamInfoMap;//[Offset: 0x1b74 , Size: 60]
	ObservedData ObservedData;//[Offset: 0x1bb0 , Size: 72]
	bool bShowClubLogoInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c09 , Size: 1]
	AirDropBoxList(StructProperty)[] AirDropBoxList;//[Offset: 0x1c0c , Size: 12]
	delegate OnToggleOBMapShowHide;//[Offset: 0x1c1c , Size: 12]
	delegate OnInterruptGameButtonShow;//[Offset: 0x1c28 , Size: 12]
	delegate OnToggleOBPlayerList;//[Offset: 0x1c3c , Size: 12]
	delegate OnSwitchToPlayerByNumPressed;//[Offset: 0x1c48 , Size: 12]
	delegate OnSwitchToTeamByNumPressed;//[Offset: 0x1c54 , Size: 12]
	delegate OnToggleOBTeamList;//[Offset: 0x1c60 , Size: 12]
	delegate OnVehicleExitFreeCamera;//[Offset: 0x1c6c , Size: 12]
	delegate OnFreeViewChangedDelegate;//[Offset: 0x1c78 , Size: 12]
	float OBTPPFreeViewArmLengthMax;//[Offset: 0x1c94 , Size: 4]
	float OBTPPFreeViewArmLengthMin;//[Offset: 0x1c98 , Size: 4]
	float fPlayerAliasInfoDistanceLimit;//[Offset: 0x1c9c , Size: 4]
	byte iPlayerAliasInfoCount;//[Offset: 0x1ca0 , Size: 1]
	bool IsCharacterInitFlushStreaming;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca1 , Size: 1]
	bool IsAutoGetCircleInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca2 , Size: 1]
	int FireMode;//[Offset: 0x1ca4 , Size: 4]
	bool bNotMoveFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca8 , Size: 1]
	bool bAlreadyFired;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ca9 , Size: 1]
	bool WallFeedBack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1caa , Size: 1]
	nowNearCharacterList(ObjectProperty)[] nowNearCharacterList;//[Offset: 0x1cac , Size: 12]
	nowNearVehicleList(ObjectProperty)[] nowNearVehicleList;//[Offset: 0x1cb8 , Size: 12]
	nowNearBlowVehicleList(ObjectProperty)[] nowNearBlowVehicleList;//[Offset: 0x1cc4 , Size: 12]
	nowShotWeaponList(ObjectProperty)[] nowShotWeaponList;//[Offset: 0x1cd0 , Size: 12]
	nowOneShotWeaponList(ObjectProperty)[] nowOneShotWeaponList;//[Offset: 0x1cdc , Size: 12]
	nowGrenadeList(ObjectProperty)[] nowGrenadeList;//[Offset: 0x1ce8 , Size: 12]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cf4 , Size: 1]
	delegate triggerVoiceCheckDelegate;//[Offset: 0x1cf8 , Size: 12]
	delegate triggerMoveVoiceCheckDelegate;//[Offset: 0x1d04 , Size: 12]
	delegate triggerShotVoiceCheckDelegate;//[Offset: 0x1d10 , Size: 12]
	delegate triggerVehicleVoiceCheckDelegate;//[Offset: 0x1d1c , Size: 12]
	delegate triggerGlassVoiceCheckDelegate;//[Offset: 0x1d28 , Size: 12]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d35 , Size: 1]
	delegate OnPlayerCanJump;//[Offset: 0x1d38 , Size: 12]
	delegate OnPlayerCannotJump;//[Offset: 0x1d44 , Size: 12]
	bool bCanOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d50 , Size: 1]
	delegate OnPlayerCanOpenParachute;//[Offset: 0x1d54 , Size: 12]
	delegate OnPlayerCannotOpenParachute;//[Offset: 0x1d60 , Size: 12]
	bool bCanCloseParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6c , Size: 1]
	float PlaneFlyHeightFromGameMode;//[Offset: 0x1d70 , Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x1d74 , Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x1d78 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x1d7c , Size: 4]
	float RealTimePawnHeight;//[Offset: 0x1d80 , Size: 4]
	float OB_RotationLagSpeed;//[Offset: 0x1d90 , Size: 4]
	SpawnAndBackpackWeaponReplicatedDataArray(StructProperty)[] SpawnAndBackpackWeaponReplicatedDataArray;//[Offset: 0x1dac , Size: 12]
	OwnerClientCreateWeaponCache OwnerClientCreateWeaponCache;//[Offset: 0x1db8 , Size: 16]
	SpawnAndBackpackWeaponReplicatedDataWithMgr(StructProperty)[] SpawnAndBackpackWeaponReplicatedDataWithMgr;//[Offset: 0x1dc8 , Size: 12]
	Actor* ThePlane;//[Offset: 0x1dd4 , Size: 4]
	float GameAssistantJoyStickOpacity;//[Offset: 0x1de0 , Size: 4]
	bool bClientCheckResetViewTargetToCharacter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1de4 , Size: 1]
	float ClientCheckResetViewTargetToCharacterConfigSeconds;//[Offset: 0x1de8 , Size: 4]
	TargetClientWeaponWaitForReconnectList(ObjectProperty)[] TargetClientWeaponWaitForReconnectList;//[Offset: 0x1dfc , Size: 12]
	class KillerTracker* KillerTrackerTemplate;//[Offset: 0x1e10 , Size: 4]
	FString LastBreathMurder;//[Offset: 0x1e18 , Size: 12]
	bool LastBreathMurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e24 , Size: 1]
	uint64 LastBreathMurderUID;//[Offset: 0x1e28 , Size: 8]
	VehicleUserComponent* VehicleUserComp;//[Offset: 0x1e30 , Size: 4]
	FString murderName;//[Offset: 0x1e34 , Size: 12]
	FString FinalMurderName;//[Offset: 0x1e40 , Size: 12]
	uint64 MurderUID;//[Offset: 0x1e50 , Size: 8]
	bool MurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e58 , Size: 1]
	bool LastBreathMurderIsSameTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e59 , Size: 1]
	bool MurderIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e5a , Size: 1]
	<ImpactEffectCachedListSimulateMap_Key(ClassProperty) , ImpactEffectCachedListSimulateMap(StructProperty)> ImpactEffectCachedListSimulateMap;//[Offset: 0x1e98 , Size: 60]
	<ImpactEffectCachedListLocalMap_Key(ClassProperty) , ImpactEffectCachedListLocalMap(StructProperty)> ImpactEffectCachedListLocalMap;//[Offset: 0x1ed4 , Size: 60]
	float OceanSideDetectDistance;//[Offset: 0x1f18 , Size: 4]
	float OceanSideDetectInterval;//[Offset: 0x1f1c , Size: 4]
	int CurrOBAirDropID;//[Offset: 0x1f20 , Size: 4]
	<EndTouchScreenCommandMap_Key(ByteProperty) , EndTouchScreenCommandMap(StrProperty)> EndTouchScreenCommandMap;//[Offset: 0x1f24 , Size: 60]
	AkAudioEvent* HitVehicleSound;//[Offset: 0x1fec , Size: 4]
	bool bIsPressingFireBtn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ff0 , Size: 1]
	FString ClientActivePlatformProfileName;//[Offset: 0x1ff4 , Size: 12]
	float ZMoveDisCalcThreshold;//[Offset: 0x203c , Size: 4]
	bool bDebugDrawHUDCrossLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2040 , Size: 1]
	StateMachineComponent* NewStateMachineComp;//[Offset: 0x2044 , Size: 4]
	bool ExitFromHelicopterParachuteJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2048 , Size: 1]
	enum ServerStateType;//[Offset: 0x2049 , Size: 1]
	enum ClientStateType;//[Offset: 0x204a , Size: 1]
	bool bRepServerMsgType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x204b , Size: 1]
	enum GameStateMsgType;//[Offset: 0x204c , Size: 1]
	bool bSwitchesInMapsExecuted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2064 , Size: 1]
	bool bIsEnterBattleResultStep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2065 , Size: 1]
	bool bAddPoseStateCheckResponse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2066 , Size: 1]
	float ObservingTime;//[Offset: 0x2068 , Size: 4]
	KillerTracker* tracker;//[Offset: 0x206c , Size: 4]
	bool bEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2080 , Size: 1]
	bool bEnableOBBulletTrackEffectSetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2081 , Size: 1]
	MonsterTreasureBox* CurHUDMonsterTreasureBox;//[Offset: 0x20cc , Size: 4]
	FString DefaultHUDClassPath;//[Offset: 0x20d0 , Size: 12]
	delegate OnClientReportPeerVisualFieldAcotrList;//[Offset: 0x20f0 , Size: 12]
	STExtraPlayerController* DieInstigator;//[Offset: 0x20fc , Size: 4]
	bool IsImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2100 , Size: 1]
	bool IsCharacterDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2101 , Size: 1]
	AvatarCapture* AvatarCaptureInfo;//[Offset: 0x2104 , Size: 4]
	int BOptimizeBulletHit;//[Offset: 0x2108 , Size: 4]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0x210c , Size: 56]
	FootprintActorInfo(StructProperty)[] FootprintActorInfo;//[Offset: 0x2144 , Size: 12]
	int MaxTeamFootprintCount;//[Offset: 0x2150 , Size: 4]
	int MaxOtherFootprintCount;//[Offset: 0x2154 , Size: 4]
	<FootprintActorLookupTable_Key(EnumProperty) , FootprintActorLookupTable(StructProperty)> FootprintActorLookupTable;//[Offset: 0x2158 , Size: 60]
	<TrailMarkActorLookupTable_Key(ClassProperty) , TrailMarkActorLookupTable(StructProperty)> TrailMarkActorLookupTable;//[Offset: 0x2194 , Size: 60]
	IdeaDecalManager* IdeaDecalManager;//[Offset: 0x21d4 , Size: 4]
	BloodDecalMaterials(ObjectProperty)[] BloodDecalMaterials;//[Offset: 0x21d8 , Size: 12]
	<LocalDecalHandleMap_Key(IntProperty) , LocalDecalHandleMap(ObjectProperty)> LocalDecalHandleMap;//[Offset: 0x21e4 , Size: 60]
	SupplySpot* CurrentSupplySpot;//[Offset: 0x2238 , Size: 4]
	EnhancerSpot* CurrentEnhancerSpot;//[Offset: 0x223c , Size: 4]
	PlayerRevivalComponent* PlayerRevivalComp;//[Offset: 0x2240 , Size: 4]
	delegate ClientOnEnterVehicle;//[Offset: 0x22b0 , Size: 12]
	delegate ClientOnLeaveVehicle;//[Offset: 0x22bc , Size: 12]
	delegate ClientOnChangeVehicleSeatCompletedDelegate;//[Offset: 0x22c8 , Size: 12]
	delegate OnVehicleWeaponIsReadyForFireDelegate;//[Offset: 0x22d4 , Size: 12]
	bool bEnableClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e0 , Size: 1]
	bool bClampControllerRelativeYaw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x22e1 , Size: 1]
	float ControllerRelativeYawMin;//[Offset: 0x22e4 , Size: 4]
	float ControllerRelativeYawMax;//[Offset: 0x22e8 , Size: 4]
	RevivalPointActor* CurOperatePlayerRevivalPoint;//[Offset: 0x22f4 , Size: 8]
	int IdCardMarkType;//[Offset: 0x2300 , Size: 4]
	delegate InfectionShowKillNumDelegate;//[Offset: 0x2320 , Size: 12]
	delegate InfectionPlayerPawnInitType;//[Offset: 0x232c , Size: 12]
	float MoveDistanceThreshold;//[Offset: 0x2338 , Size: 4]
	float SpeedRecordTime;//[Offset: 0x233c , Size: 4]
	float SpeedRecordAccTime;//[Offset: 0x2340 , Size: 4]
	delegate OnSelfPawnDeathDelegate;//[Offset: 0x2344 , Size: 12]
	delegate OnChangeToWalkingDead;//[Offset: 0x2350 , Size: 12]
	bool bCanChangeToWalkingDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x235c , Size: 1]
	delegate OnNotifyCanChangeToWalkingDead;//[Offset: 0x2360 , Size: 12]
	delegate OnChangeToWalkingDeadRes;//[Offset: 0x236c , Size: 12]
	bool GMDisableLeftScreenControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2378 , Size: 1]
	bool IsJoystickInLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2379 , Size: 1]
	delegate OnWeakGuidEventDelegate;//[Offset: 0x237c , Size: 12]
	delegate OnStopWeakGuidDelegate;//[Offset: 0x2388 , Size: 12]
	delegate OnEnableGuidActorDelegate;//[Offset: 0x2394 , Size: 12]
	delegate OnInfectionShowTipMsgDelegate;//[Offset: 0x23a0 , Size: 12]
	delegate OnInfectionPlaySoundEventDelegate;//[Offset: 0x23ac , Size: 12]
	class DamageType* GiveupDamageTypeClass;//[Offset: 0x23b8 , Size: 4]
	uint32 LastKillerKey;//[Offset: 0x23bc , Size: 4]
	bool bAAlOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c0 , Size: 1]
	bool bIsBackPackPanelOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c1 , Size: 1]
	bool bUseAntiDataReportFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23cc , Size: 1]
	bool bUseAntiDataReportFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23cd , Size: 1]
	bool bUseAntiDataReportFilterCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23ce , Size: 1]
	float LastReportAntiDataTime;//[Offset: 0x23d0 , Size: 4]
	delegate RefreshPickupFlagStatusDelegate;//[Offset: 0x23d4 , Size: 12]
	delegate OnRevivalAndEnterAirplane;//[Offset: 0x23e0 , Size: 12]
	delegate OnSpawnVehicleServerTimeUpdatedDelegate;//[Offset: 0x23ec , Size: 12]
	bool bDisableTouchMoveInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23f8 , Size: 1]
	delegate OnPlayerControllerStateChangedDelegate;//[Offset: 0x23fc , Size: 12]
	delegate OnPlayerNumOnPlaneChangedDelegate;//[Offset: 0x2408 , Size: 12]
	delegate OnReconnectResetUIByPlayerControllerStateDelegate;//[Offset: 0x2414 , Size: 12]
	delegate OnMemberVoiceDelegate;//[Offset: 0x2420 , Size: 12]
	delegate HideAllUIAfterDeadTipsShowDelegate;//[Offset: 0x242c , Size: 12]
	Actor* InteractiveActor;//[Offset: 0x2438 , Size: 4]
	delegate OnVehicleWarKilledTrackerStartDelegate;//[Offset: 0x243c , Size: 12]
	delegate OnVehicleWarKilledTrackerFinishDelegate;//[Offset: 0x2448 , Size: 12]
	delegate OnVehicleWarVehicleRepawnDelegate;//[Offset: 0x2454 , Size: 12]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x2460 , Size: 12]
	FloatingTextComponent* FloatingTextComp;//[Offset: 0x246c , Size: 4]
	<ParachuteAnimAssetCache_Key(ByteProperty) , ParachuteAnimAssetCache(StructProperty)> ParachuteAnimAssetCache;//[Offset: 0x2484 , Size: 60]
	WeatherConfigComponent* WeatherConfigComponent;//[Offset: 0x24c0 , Size: 4]
	delegate OnIndoorStateChangeDelegate;//[Offset: 0x24c4 , Size: 12]
	function VW_Seat();// 0x1882d10
	function VisualizeItem();// 0x16ad21c
	function ViewVehicle();// 0x1882c0c
	function ViewPlane();// 0x1882bf8
	function VehicleWarOpenSequencerDelegate__DelegateSignature();// 0x206ccd8
	function VehicleWarFireTakeDamagedEvent();// 0x1882b88
	function VehicleResetTo();// 0x1882a88
	function VehicleMoveTo();// 0x1882988
	function UseZombieModeSkill();// 0x1882974
	function UserDropItemOperation();// 0x18828ec
	function UseItem();// 0x1882874
	function UpdateSurfboardUI();// 0x1882860
	function UpdatePoseState();// 0x18827e8
	function UpdateBodyIndoorState();// 0x1882720
	function UnLoadAllCollision();// 0x18826a0
	function TriggerVehicleVoiceCheckFuction();// 0x1882440
	function TriggerShotVoiceCheckFuction();// 0x1882548
	function TriggerMoveVoiceCheckFuction();// 0x1882440
	function TriggerGlassVoiceCheckFuction();// 0x1882384
	function TouchMove();// 0x18822c8
	function TouchEnd();// 0x1882248
	function TouchBegin();// 0x18821d0
	function ToggleVehicleSync();// 0x1702fa4
	function ToggleUserCmdDeltaSendAck();// 0x1702fa4
	function ToggleUserCmdDeltaFlag();// 0x1702fa4
	function ToggleUserCmdDeltaCheckSum();// 0x1702fa4
	function ToggleUserCmdDelta();// 0x1702fa4
	function ToggleServerAcknowledgePossession();// 0x1702fa4
	function ToggleOBTPPFollowFreeView();// 0x18821bc
	function ToggleEnableOBBulletTrackEffectSetting();// 0x188213c
	function ToggleCheatLocation();// 0x1702fa4
	function TestMapMarkClient();// 0x188203c
	function TestLaunchFly();// 0x1881fc4
	function TestInfectionAllCharacter();// 0x1881fb0
	function TeleportAIToLoc();// 0x1881eb0
	function TeamNoAlwaysRelevant();// 0x1881e9c
	function TeamMateUAVStateChanged();// 0x1881dc0
	function TeamMateStateChanged();// 0x1881b98
	function SwitchViewTarget();// 0x16ad21c
	function SwitchToTeamByNumPressed();// 0x1881b84
	function SwitchToPlayerByNumPressed();// 0x1881b70
	function SwitchToDeadBox();// 0x1881b5c
	function SwitchShowUI();// 0x1881b48
	function SwitchPoseStateServer();// 0x1881a4c
	function SwitchPoseStateFailedResponse();// 0x18818fc
	function SwitchPoseStateClient();// 0x1881838
	function SwitchMouseCursorShowState();// 0x1881824
	function SwitchGenerateItem();// 0x18817c8
	function SwitchCameraModeScope();// 0x188170c
	function SwitchCameraModeByOrder();// 0x18816f8
	function SwitchCameraMode();// 0x188159c
	function SwapWeaponByPropSlotOnServer();// 0x1881494
	function StopAbsorb();// 0x1881438
	function StartReadyCountDown();// 0x1881424
	function StartLandOnGroundAfterJumpPlane();// 0x1881410
	function StartInputCameraMoveTest();// 0x18812f8
	function StartGame();// 0x18812e4
	function StartFreeCamera();// 0x188126c
	function StartAirDropSpecified();// 0x18811b0
	function StartAirDropBackupEnter();// 0x18810b0
	function StartAirDrop();// 0x1881038
	function StartAirAttackSpecified();// 0x1880f38
	function StartAirAttack();// 0x1880ec0
	function SpectatorCameraChange_Broadcast();// 0x1880df8
	function SpawnVehicleWithPath();// 0x1880cf8
	function SpawnVehicleInAir();// 0x1880ce4
	function SpawnVehicle();// 0x1880cd0
	function SpawnAllVehicle();// 0x1880c14
	function SpawnAITeam();// 0x1880b14
	function SpawnAI();// 0x1880a9c
	function SoftReconnectRecoverData();// 0x1880a24
	function ShutDownItemGenerate();// 0x18809a4
	function ShowWeaponRecordInfo();// 0x16ad21c
	function ShowVaultEnable();// 0x17f66b8
	function ShowPoints();// 0x1880860
	function ShowOpenSequence();// 0x18807e8
	function ShowMovePath();// 0x1880724
	function ShowGameTips();// 0x188061c
	function ShowFireBtn();// 0x206ccd8
	function ShowBulletShoot();// 0x1880554
	function ShowAllRoles();// 0x16ad21c
	function ShouldForceFPPView();// 0x18804d4
	function SetVirtualStickVisibility();// 0x1880454
	function SetVirtualStickAutoSprintStatus();// 0x18803d4
	function SetViewYawLimit();// 0x1880318
	function SetViewTargetTest();// 0x18802a0
	function SetUAETriggerEnable();// 0x1880220
	function SetTimeSpeedFactor();// 0x173e6cc
	function SetTimeSpeedCheck();// 0x1702fa4
	function SetTeammateForbitPick();// 0x1880110
	function SetStateLeftTime();// 0x1880098
	function SetSpeed();// 0x1880020
	function SetSnowBoradRotationInAir();// 0x187ff20
	function SetSingleThreadUpdateAnim();// 0x187fea0
	function SetServerLevelLoadingMode();// 0x1702fa4
	function SetScopeFingerIndex();// 0x187fdd8
	function SetReconnectZombieWaveDataToClient();// 0x187fc34
	function SetRageLevel();// 0x187fbbc
	function SetPoisonFogEnable();// 0x187fb3c
	function SetPlayerMark();// 0x187fa90
	function SetPlaneEnabled();// 0x187fa10
	function SetPeekFingerIndex();// 0x187f8fc
	function SetParachuteAnimCached();// 0x187f838
	function SetObservingTime();// 0x187f7c0
	function SetNightStatus();// 0x187f748
	function SetMovable();// 0x187f6c8
	function SetMaxHealth();// 0x187f650
	function SetLocalUnPossesTest();// 0x187f580
	function SetLaunchFlyStateOnServer();// 0x187f508
	function SetLaunchFlyState();// 0x187f490
	function SetJoyStickScale();// 0x187f418
	function SetJoystickOperatingMode();// 0x187f35c
	function SetJoyStickOpacity();// 0x187f2e4
	function SetJoyStickInteractionSize();// 0x187f274
	function SetJoyStickCenter();// 0x187f204
	function SetIsSnowy();// 0x187f184
	function SetIsShowBlood();// 0x187f104
	function SetIsRainy();// 0x187f084
	function SetIsCacheReceiveRespawnZombie();// 0x187f004
	function SetIsBlizzard();// 0x187ef84
	function SetInfectResetPlayerInterTime();// 0x187ef0c
	function SetGameStateReconnectInfoToClient();// 0x187ed2c
	function SetGameStateModeUI();// 0x187ebd0
	function SetFuelByPercent();// 0x187eb58
	function SetForbidNightVehicle();// 0x187eae0
	function SetEnterInteractiveActor();// 0x187ea1c
	function SetEnableWingAvatar();// 0x187e99c
	function SetEnableVoiceByPlayerKey();// 0x187e8d8
	function SetDisableTouchMoveInput();// 0x187e858
	function SetCustomJumpPoint();// 0x187e758
	function SetCustomFlightRoute();// 0x187e610
	function SetCurrentCameraFOV();// 0x187e514
	function SetControlRotation();// 0x187e3fc
	function SetCombatHitFeedback();// 0x187e37c
	function SetClientSpawnAndBackpackWeaponReplicatedDataArray();// 0x187e240
	function SetCircleInfoToClient();// 0x187e0c8
	function SetCirCenterFixed();// 0x187dfbc
	function SetBeKickedPlayerName();// 0x187de64
	function SetAutoMoveForward();// 0x187dde4
	function SetAllInfectedAreaLevel();// 0x187dd6c
	function SetAirDropEnable();// 0x187dcec
	function SetAirAttackEnable();// 0x187dc6c
	function ServerUseItem();// 0x187dab0
	function ServerUpdateShovelingState();// 0x187d948
	function ServerTriggerSelectGrenade();// 0x187d894
	function ServerTriggerCharacterEntryEvent();// 0x187d7e0
	function ServerTriggerCharacterCustomEvent();// 0x187d72c
	function ServerTestPaintDecal();// 0x187d578
	function ServerStopFireNew();// 0x187d3e4
	function ServerStopFire();// 0x187d250
	function ServerStartPreBarrel();// 0x187d154
	function ServerStartOnPlaneSurvive();// 0x187ceac
	function ServerStartFireNew();// 0x187ccc8
	function ServerStartFire();// 0x187cb84
	function ServerStartBarrelNew();// 0x187ca88
	function ServerStartBarrel();// 0x187c9d4
	function ServerSetShootType();// 0x187c8d8
	function ServerSetReloadMethod();// 0x187c794
	function ServerSetObsverLocation();// 0x187c6e8
	function ServerSetIsFreeView();// 0x187c620
	function ServerSetFreeCameraRotationOnVehicle();// 0x187c50c
	function ServerSetFreeCamera();// 0x187c460
	function ServerSetControlRotationOnVehicle();// 0x187c34c
	function ServerSetControlRotation();// 0x187c2a0
	function ServerReportWatchGamePlayerInfoButtonClick();// 0x187c134
	function ServerReplicateExplosionEffect();// 0x187bed0
	function ServerRemoteDestroyActor();// 0x187be58
	function ServerRemoteCreateActor();// 0x187bcfc
	function ServerReceiveThePlane();// 0x187bc44
	function ServerReceiveServerStateType();// 0x187baec
	function ServerPickItem();// 0x187b700
	function ServerOpenParachute();// 0x187b6a4
	function ServerObserveKiller();// 0x187b648
	function ServerObserveCharacter();// 0x187b594
	function ServerObserveAirDropBox();// 0x187b4e0
	function ServerNotifyAutoFollowStatus();// 0x187b3d0
	function ServerKickPlayerFromGame();// 0x187b31c
	function ServerJumpFromPlane();// 0x187b2c0
	function ServerInterruptGame();// 0x187b264
	function ServerHearSound();// 0x187b170
	function ServerHandleMsg();// 0x187b0bc
	function ServerHandleHitDataArray();// 0x187af8c
	function ServerGetTotalPlayers();// 0x187af30
	function ServerGetPlayerAliasInfoList();// 0x187aed4
	function ServerGetCircleInfo();// 0x187ae78
	function ServerFight();// 0x187ae1c
	function ServerExitFromHelicopter();// 0x187ad68
	function ServerExitFreeCamera();// 0x187ad0c
	function ServerDropItem();// 0x187aba8
	function ServerDoPickupRevivalFlag();// 0x187ab4c
	function ServerDisuseItem();// 0x187aa30
	function ServerCMD_RPC();// 0x187a93c
	function ServerCMD();// 0x173be14
	function ServerClearTeammatesCache();// 0x187a8e0
	function ServerChangeWeaponScheme();// 0x187a82c
	function SendStringMsg();// 0x187a6e8
	function SendEndTouchScreenUICommand();// 0x187a61c
	function SendDeviceInfo();// 0x187a4a0
	function ScopeOut();// 0x187a48c
	function ScopeIn();// 0x187a478
	function S2C_ResponseSkillPrompt();// 0x187a290
	function S2C_HelpOther();// 0x187a138
	function S2C_BeHelpedByOther();// 0x1879fe0
	function RunOnNextFrameEvent();// 0x1879fcc
	function RunOnNextFrame__DelegateSignature();// 0x206ccd8
	function RPC_UseInteractiveActor();// 0x1879f70
	function RPC_Server_VehicleWarSetPlayerHasLogin();// 0x1879f14
	function RPC_Server_ShootSpecialBullet();// 0x1879d90
	function RPC_Server_ShootSeekAndLockProjectileBullet();// 0x18799b0
	function RPC_Server_ShootProjectileBullet();// 0x1879620
	function RPC_Server_SetPlayerStateChoose();// 0x1879560
	function RPC_Server_SetMicphoneTLogToServer();// 0x187949c
	function RPC_Server_ReqHealth();// 0x1879440
	function RPC_Server_ReportPeerVisualFieldActorList();// 0x187934c
	function RPC_Server_PrintHP();// 0x18792f0
	function RPC_Server_NotifySwapMainWeaponFinished();// 0x18791f4
	function RPC_Server_NotifyServerUseSpot();// 0x1879140
	function RPC_Server_NotifyServerUseEnhancerSpot();// 0x187908c
	function RPC_Server_NotifyServerProjectileBulletImpact();// 0x1878f98
	function RPC_Server_NotifyServerEnemyStep();// 0x1878e44
	function RPC_Server_NotifyServerEnemyShoot();// 0x1878c90
	function RPC_Server_NotifyServerAddOpenedAirDropBoxes();// 0x1878b9c
	function RPC_Server_NotifyBreakWindow();// 0x18787f0
	function RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();// 0x1878794
	function RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeaponWithWeaponMgr();// 0x18785fc
	function RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon();// 0x18784ac
	function RPC_Server_NorifyServerAddFirstOpenedTreasureBoxes();// 0x18783b8
	function RPC_Server_NorifyServerAddFirstOpenedPlayerTombBoxes();// 0x18782c4
	function RPC_Server_NorifyServerAddFirstOpenedAirDropBoxes();// 0x18781d0
	function RPC_Server_ConfirmMisKill();// 0x1878088
	function RPC_Server_ClientHasReactivated();// 0x187802c
	function RPC_Server_ClientHasFinishedRecoverWeapon_New();// 0x1877e94
	function RPC_Server_ClientHasFinishedRecoverWeapon();// 0x1877cfc
	function RPC_Server_ChangeWeaponState();// 0x1877c00
	function RPC_Server_BattleStateTime();// 0x1877b4c
	function RPC_ReviveState_GiveUpRevive();// 0x1877af0
	function RPC_RequireDynamicWeatherInfo();// 0x1877a3c
	function RPC_RemoteCustomEventWithObjects();// 0x1877828
	function RPC_RemoteCustomEventWithObject();// 0x1877664
	function RPC_RemoteCustomEvent();// 0x18774e8
	function RPC_PushDynamicWeatherInfo();// 0x18773e8
	function RPC_OwnerClient_WeaponWarmUpEnd();// 0x1877334
	function RPC_OwnerClient_SwapWeaponByPropSlot();// 0x18771dc
	function RPC_OwnerClient_SetTeammatesYouAttackFirstToClient();// 0x1877080
	function RPC_OwnerClient_SetMurderInfo();// 0x1876e78
	function RPC_OwnerClient_SetLastBreathMurder();// 0x1876c70
	function RPC_OwnerClient_SetCurrentWeaponVisible();// 0x1876ba8
	function RPC_OwnerClient_PlayerEnableAttrModifier();// 0x18769d0
	function RPC_OwnerClient_PlayerConsumeItem();// 0x18768d4
	function RPC_OwnerClient_PlayerAddHealth();// 0x18767d8
	function RPC_OwnerClient_PlayerAddEnergy();// 0x18766dc
	function RPC_OwnerClient_NotifyClientEquipWeaponAttachment();// 0x1876584
	function RPC_OwnerClient_HandleAIShootBulletHit();// 0x187646c
	function RPC_OwnerClient_ClientPlayItemOperationSound();// 0x1876328
	function RPC_GiveUpGame();// 0x18762cc
	function RPC_DrawDebug_Sphere();// 0x187618c
	function RPC_DrawDebug_Line();// 0x1876054
	function RPC_ClientSetVehicleSpawnServerTime();// 0x1875fd4
	function RPC_Client_UISetWidgetVisibility();// 0x1875ecc
	function RPC_Client_UISetWidgetText();// 0x1875cb8
	function RPC_Client_UIOperateWidget();// 0x1875aec
	function RPC_Client_UICustomBehavior();// 0x1875920
	function RPC_Client_SwitchWeapon();// 0x1875754
	function RPC_Client_ShowNewCommonCountDown();// 0x187564c
	function RPC_Client_RemoteDestroyActor();// 0x18755cc
	function RPC_Client_RemoteCreateActor();// 0x1875438
	function RPC_Client_PlayerBulletHitVehicleSound();// 0x1875320
	function RPC_Client_OnDamageNotifyRecord();// 0x1875078
	function RPC_Client_NotifyHealth();// 0x1874fc4
	function RPC_Client_InfectionShowKillNum();// 0x1874f44
	function RPC_Client_DestroyWeapon();// 0x1874de0
	function RPC_Client_ClientDisplayScoreChangeTips();// 0x1874cec
	function RPC_Client_CircleRun();// 0x1874bf0
	function RPC_Client_BeginInteractiveProcess();// 0x1874bd4
	function RPC_Client_AirAttack();// 0x1874a9c
	function RPC_CancelUseInteractiveActor();// 0x1874a40
	function RevivalTemateSuccess();// 0x1874a24
	function RevivalTemateFail();// 0x1874960
	function RetriveMobileContentScaleFactor();// 0x1874938
	function RestoreDefaultInteractionSize();// 0x18748c0
	function RespawnRecoverData();// 0x1874848
	function ResetVehicleEngine();// 0x1874834
	function ResetMissingUIUpdate();// 0x206ccd8
	function RequireNetCullingDistanceByDevice();// 0x18747d8
	function RequireDeviceInfo();// 0x18747bc
	function RequestServerHandleMsg();// 0x1874760
	function RequestPlayerNewbieInfo();// 0x187474c
	function RequestChangeWearInBattle();// 0x18746cc
	function RequestChangeWear();// 0x187464c
	function ReqSwitchPersonPerspective();// 0x1874584
	function ReqRecordEnterIceMountain();// 0x1874528
	function ReqLeaveVehicle();// 0x1874514
	function ReqExchangeVehicleCharacter();// 0x187449c
	function ReqEnterVehicle();// 0x1874424
	function ReqEnterSnowBoard();// 0x1874410
	function ReportWatchGamePlayerInfoButtonClick();// 0x1874398
	function ReportVehicleMoveFlow();// 0x187423c
	function ReportAntiCheatInfo();// 0x1874228
	function Rep_RefreshInteractiveActor();// 0x1874214
	function RemoveTouchMoveFinger();// 0x187419c
	function RemoveAllDoors();// 0x1874188
	function ReleaseFire();// 0x206ccd8
	function ReInitUIAfterReCreatePawn();// 0x1874110
	function ReInitParachuteItem();// 0x18740fc
	function RefreshTopMostUIPanel();// 0x206ccd8
	function RefreshPickupFlagStatusDelegate__DelegateSignature();// 0x206ccd8
	function RecoverStatusAfterReconnecting();// 0x18740e0
	function RecordPathPoint();// 0x18740cc
	function ReceiveClientRestart();// 0x206ccd8
	function ReceiveBackpackComponent();// 0x18740b0
	function PrintStringToScreen();// 0x1873f60
	function PrintMovementLog();// 0x1873ee8
	function PrintDownCollision();// 0x1873ed4
	function PrintAllPickupWarpper();// 0x1873ec0
	function PressGrenade();// 0x206ccd8
	function PressFire();// 0x206ccd8
	function PlayVehicleCameraShake();// 0x1873eac
	function PlayMatinee();// 0x1873e34
	function PlayInteractionEmote();// 0x1873dbc
	function PlayerLiveStateChangedInOB();// 0x1873d00
	function PlayerKillingDelegate__DelegateSignature();// 0x206ccd8
	function PlayerDoEmoteDelegate__DelegateSignature();// 0x206ccd8
	function PlayerControllerToggleDelegate__DelegateSignature();// 0x206ccd8
	function PlayerControllerSelfPawnDeathDelegate__DelegateSignature();// 0x206ccd8
	function PlayerControllerNotifyChangeToWalkingDead__DelegateSignature();// 0x206ccd8
	function PlayerControllerChangeToWalkingDeadRes__DelegateSignature();// 0x206ccd8
	function PlayerControllerChangeToWalkingDead__DelegateSignature();// 0x206ccd8
	function PlayBattleSound();// 0x1873bc0
	function OpenParachute();// 0x1873bac
	function OnWeaponEquipAttachment();// 0x206ccd8
	function OnWeakGuidEventDelegate__DelegateSignature();// 0x206ccd8
	function OnWallFeedBack();// 0x1873b2c
	function OnViewTargetPoseChanged();// 0x1873a70
	function OnViewTargetDetachedFromVehicle();// 0x18739f8
	function OnViewTargetChangeVehicleSeat();// 0x18739e4
	function OnViewTargetAttachedToVehicle();// 0x187396c
	function OnVehicleWeaponIsReadyForFireDelegate__DelegateSignature();// 0x206ccd8
	function OnVehicleWarVehicleRepawnDelegate__DelegateSignature();// 0x206ccd8
	function OnVehicleWarKilledTrackerStartDelegate__DelegateSignature();// 0x206ccd8
	function OnVehicleWarKilledTrackerFinishDelegate__DelegateSignature();// 0x206ccd8
	function OnVehicleExitFreeCameraDelegate__DelegateSignature();// 0x206ccd8
	function OnUseVehicleWarWeapon();// 0x1873958
	function OnUseVehicleWarItem();// 0x1873944
	function OnUseVehicleWarEyes();// 0x1873930
	function OnUseMainSlot__DelegateSignature();// 0x206ccd8
	function OnUseInventoryItemDelegate__DelegateSignature();// 0x206ccd8
	function OnUnequipWeaponDelegate__DelegateSignature();// 0x206ccd8
	function OnUITouchMoveDelegate__DelegateSignature();// 0x206ccd8
	function OnTeammateTemperatureChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnTeammatesAllDie();// 0x187391c
	function OnTeammateLogin();// 0x18738a4
	function OnTeammateHPChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnTaskConditionDeactivedDelegate__DelegateSignature();// 0x206ccd8
	function OnTaskConditionActivedDelegate__DelegateSignature();// 0x206ccd8
	function OnTakeDamaged__DelegateSignature();// 0x206ccd8
	function OnSwitchWeaponDelegate__DelegateSignature();// 0x206ccd8
	function OnSwitchToTeamByNumPressed__DelegateSignature();// 0x206ccd8
	function OnSwitchToPlayerByNumPressed__DelegateSignature();// 0x206ccd8
	function OnSwitchCameraModeStartDelegate__DelegateSignature();// 0x206ccd8
	function OnSwitchCameraModeEndDelegate__DelegateSignature();// 0x206ccd8
	function OnStopWeakGuidDelegate__DelegateSignature();// 0x206ccd8
	function OnStopFireDelegate__DelegateSignature();// 0x206ccd8
	function OnStartFireDelegate__DelegateSignature();// 0x206ccd8
	function OnStartAutoSprintCountDown__DelegateSignature();// 0x206ccd8
	function OnSpectatorChange__DelegateSignature();// 0x206ccd8
	function OnSpectatorCameraChange();// 0x206ccd8
	function OnSpawnVehicleServerTimeUpdatedDelegate__DelegateSignature();// 0x206ccd8
	function OnShowSkillPromptDelegate__DelegateSignature();// 0x206ccd8
	function OnShowGeneralGameTipsDelegate__DelegateSignature();// 0x206ccd8
	function OnShowAutoSprintButton__DelegateSignature();// 0x206ccd8
	function OnSetChangeCharacterState__DelegateSignature();// 0x206ccd8
	function OnServerFinishPickupRevivalFlag();// 0x1873888
	function OnRevivalAndEnterAirplane__DelegateSignature();// 0x206ccd8
	function OnRepTeammateChange__DelegateSignature();// 0x206ccd8
	function OnRepTeammateAvatarDisplayInfoChange__DelegateSignature();// 0x206ccd8
	function OnRepPlayerState__DelegateSignature();// 0x206ccd8
	function OnRepNotify_SetBattleOwner();// 0x1873874
	function OnRepNotify_ServerHitEnemyReplicatedData();// 0x16ad21c
	function OnRep_WeaponSystemReconnectReplicateData();// 0x1873860
	function OnRep_WeaponAvatarDataList();// 0x1873844
	function OnRep_UsedSimulation();// 0x1873828
	function OnRep_STExtraBaseCharacter();// 0x1873814
	function OnRep_SpawnAndBackpackWeaponReplicatedDataWithMgr();// 0x1873800
	function OnRep_SpawnAndBackpackWeaponReplicatedDataArray();// 0x18737ec
	function OnRep_ServerStateType();// 0x18737d8
	function OnRep_RefreshTotalPlayers();// 0x18737c4
	function OnRep_RefreshAirDropBox();// 0x18737b0
	function OnRep_Plane();// 0x187379c
	function OnRep_ObservedItemList();// 0x1873788
	function OnRep_InitialEquipmentAvatar();// 0x187376c
	function OnRep_InitialConsumableAvatar();// 0x1873750
	function OnRep_ImprisonmentTeammateSucess();// 0x187373c
	function OnRep_GameStateMsgType();// 0x1873728
	function OnRep_ForbitPickEffect();// 0x1873714
	function OnRep_ForbitPick();// 0x1873700
	function OnRep_FiringPlayerList();// 0x18736ec
	function OnRep_DeadTombBox();// 0x18736d8
	function OnRep_CanOpenParachute();// 0x18736c4
	function OnRep_CanJump();// 0x18736b0
	function OnRep_CanImprisonmentTeammate();// 0x187369c
	function OnRep_BattleSceneAvatarDisplayInfoList();// 0x1873688
	function OnRep_BackpackComponent();// 0x1873674
	function OnRemoveMainSlot__DelegateSignature();// 0x206ccd8
	function OnReleaseScreen__DelegateSignature();// 0x206ccd8
	function OnReleaseFireBtnDelegate__DelegateSignature();// 0x206ccd8
	function OnReleaseFire();// 0x1873660
	function OnReconnectResetUIByPlayerControllerStateDelegate__DelegateSignature();// 0x206ccd8
	function OnReconnected__DelegateSignature();// 0x206ccd8
	function OnRank__DelegateSignature();// 0x206ccd8
	function OnPressVehicleWarMatchData();// 0x187364c
	function OnPressVampireClothSlotBtn();// 0x1873638
	function OnPressTurnplateQuickMsgBtn();// 0x1873624
	function OnPressTriggerEntireMapBtn();// 0x1873610
	function OnPressShowTagVehileSeatListBtn();// 0x18735fc
	function OnPressRolewearChangeBtn();// 0x1873584
	function OnPressItemSKillBtn();// 0x1873570
	function OnPressFire();// 0x187355c
	function OnPressBackpackBtn();// 0x1873548
	function OnPostTakeDamageForBP__DelegateSignature();// 0x206ccd8
	function OnPlayerUseRecoverItem();// 0x1873534
	function OnPlayerStateChanged();// 0x1873520
	function OnPlayerReConnected();// 0x187346c
	function OnPlayerPutDownAllPropDelegate__DelegateSignature();// 0x206ccd8
	function OnPlayerPutDownActorDelegate__DelegateSignature();// 0x206ccd8
	function OnPlayerPickUpActorDelegate__DelegateSignature();// 0x206ccd8
	function OnPlayerNumOnPlaneChangedDelegate__DelegateSignature();// 0x206ccd8
	function OnPlayerNameChange__DelegateSignature();// 0x206ccd8
	function OnPlayerLostConnection();// 0x18733b8
	function OnPlayerHitFireBtn();// 0x1873338
	function OnPlayerFinalAssistKill__DelegateSignature();// 0x206ccd8
	function OnPlayerControllerStateChangedDelegate__DelegateSignature();// 0x206ccd8
	function OnPlayerClickDriveBtn();// 0x1873324
	function OnPlayerChangeWearingDone__DelegateSignature();// 0x206ccd8
	function OnPlayerChangeWearingAnimFinished__DelegateSignature();// 0x206ccd8
	function OnPlayerCanGetInVehicle();// 0x18731e0
	function OnPickupItemDelegate__DelegateSignature();// 0x206ccd8
	function OnPickUpExpand();// 0x1873178
	function OnPickUpCollapsed();// 0x18730f8
	function OnOneTeamPlayerHPChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnOccupyNewbieGuide();// 0x1873080
	function OnObserverLevelLoaded();// 0x187306c
	function OnObservedUsingWeaponChanged();// 0x1873058
	function OnObservedPoisonFogStageChanged();// 0x1873044
	function OnObservedItemsChanged();// 0x1873030
	function OnObservedBulletNumChanged();// 0x187301c
	function OnNewbieGuideHandlePickUp();// 0x1872fa4
	function OnMemberVoiceDelegate__DelegateSignature();// 0x206ccd8
	function OnMapMarkChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnLostConnection__DelegateSignature();// 0x206ccd8
	function OnLocalCharacterTemperatureChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnLocalCharacterHPChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnLandOnGroundAfterJumpPlaneEnd();// 0x206ccd8
	function OnKillerNotify();// 0x1872f2c
	function OnItemOperCount();// 0x1872e1c
	function OnItemOperation();// 0x1872d0c
	function OnInterruptAutoSprintCountDown__DelegateSignature();// 0x206ccd8
	function OnInfectionShowTipMsgDelegate__DelegateSignature();// 0x206ccd8
	function OnInfectionPlaySoundEvent__DelegateSignature();// 0x206ccd8
	function OnIndoorStateChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnGameStateChange__DelegateSignature();// 0x206ccd8
	function OnGameStartDelegate__DelegateSignature();// 0x206ccd8
	function OnGameStartCountDownDelegate__DelegateSignature();// 0x206ccd8
	function OnGameModeStateChanged();// 0x206ccd8
	function OnFingerMove__DelegateSignature();// 0x206ccd8
	function OnExitGame__DelegateSignature();// 0x206ccd8
	function OnEquipWeaponDelegate__DelegateSignature();// 0x206ccd8
	function OnEquipmentWeaponAvatarChange__DelegateSignature();// 0x206ccd8
	function OnEquipmentAvatarChange__DelegateSignature();// 0x206ccd8
	function OnEnterBattleResultStep();// 0x1872cf8
	function OnDropItemDelegate__DelegateSignature();// 0x206ccd8
	function OnDoubleClickCheckDelegate__DelegateSignature();// 0x206ccd8
	function OnDeathBoxSpawnedDelegate__DelegateSignature();// 0x206ccd8
	function OnDeadBoxExpand();// 0x1872ce4
	function OnDeadBoxCollapsed();// 0x1872c64
	function OnDamageToOtherDelegate__DelegateSignature();// 0x206ccd8
	function OnConsumableAvatarChange__DelegateSignature();// 0x206ccd8
	function OnClientWillGotoSpectating();// 0x1872c50
	function OnClientReportPeerVisualFieldAcotrList__DelegateSignature();// 0x206ccd8
	function OnClickVehicleWarBuff();// 0x1872c3c
	function OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterRecoveryHealthEvent();// 0x1872c28
	function OnCharacterRecoveryHealth__DelegateSignature();// 0x206ccd8
	function OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterCheckVoiceTriggerDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterBreathChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnCharacterAntidoteChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnChangeBattleOwnerDelegate__DelegateSignature();// 0x206ccd8
	function OnBackpackMainSlot__DelegateSignature();// 0x206ccd8
	function OnAutoSprintActive__DelegateSignature();// 0x206ccd8
	function On3DTouchForceChangeDelegate__DelegateSignature();// 0x206ccd8
	function ObserveWhoKilledMe();// 0x1872c14
	function ObserveClientSetPoisonSmogStage();// 0x1872b60
	function ObserveCharacter();// 0x1872a08
	function ObserveAirDropBox();// 0x1872990
	function OBCameraTurnSlower();// 0x187297c
	function OBCameraTurnFaster();// 0x1872968
	function OBCameraMoveSlower();// 0x1872954
	function OBCameraMoveNear();// 0x1872940
	function OBCameraMoveFaster();// 0x187292c
	function OBCameraMoveFar();// 0x1872918
	function NotifyOpenSequencer();// 0x1872700
	function NotifyObserverFinalDamage();// 0x18725f4
	function NotifyIsInResultView();// 0x1872574
	function NotifyInOutPickUpActorWrapperBP();// 0x206ccd8
	function MoveUp();// 0x18724fc
	function MoveToVehicle();// 0x1872484
	function MoveToItem();// 0x187240c
	function MoveToAIByDropItem();// 0x1872394
	function MoveToAI();// 0x1872380
	function MoveTo();// 0x1872280
	function ModifyTouchIndex();// 0x18721c4
	function ModifyStreamingDistance();// 0x187214c
	function MemberVoice();// 0x206ccd8
	function MarkStartFireFrame();// 0x1872138
	function LocalProfileFootprint();// 0x1872124
	function LocalGetGameStateReconnectInfo();// 0x1872110
	function LoadAllLand();// 0x1872090
	function LerpFPPCamera();// 0x187207c
	function KillSomeOne();// 0x1871fc0
	function KillAllEnermyVehicle();// 0x1871fac
	function KillAll();// 0x1871f98
	function Kill();// 0x1871f20
	function KickPlayerFromGame();// 0x1871f0c
	function JumpFromPlane();// 0x1871ef8
	function JoystickTriggerSprint();// 0x206ccd8
	function IsViewTarget();// 0x1871e70
	function IsUse3DTouch();// 0x1871e48
	function IsTouchToRotControl();// 0x1871e18
	function IsTombBoxTeammate();// 0x1871d98
	function IsTeammate();// 0x1871d18
	function IsShowBlood();// 0x1871cf8
	function IsSameTeam();// 0x1871c78
	function IsReleasePosInAimBtnRange();// 0x1871bf8
	function IsParachuteAnimCached();// 0x1871b78
	function IsMurderSelfDefense();// 0x1871ab4
	function IsMoveable_DontConsiderFollowingState();// 0x1871a8c
	function IsMoveable();// 0x1871a64
	function IsLastBreathOrRescueingOther();// 0x1871a3c
	function IsInRevival();// 0x1871a14
	function IsInPlane();// 0x18719ec
	function IsInParachuteOpen();// 0x18719c4
	function IsInParachuteJump();// 0x187199c
	function IsInParachute();// 0x1871974
	function IsInInitial();// 0x187194c
	function IsInFreeCameraView();// 0x1871930
	function IsInFinish();// 0x1871908
	function IsInFight();// 0x18718e0
	function IsInDeathReplay();// 0x18718b8
	function IsInDead();// 0x1871890
	function IsForbitPickMakeEffect();// 0x1871868
	function IsForbitPick();// 0x18717d4
	function IsCanViewEnemy();// 0x18717ac
	function IsCanImprisonmentTeammate();// 0x1871784
	function IsCacheReceiveRespawnZombie();// 0x187175c
	function IsAllowActorTouchMove();// 0x1871734
	function IsAGMPlayer();// 0x187170c
	function InsertGrenadeIDToName();// 0x1871650
	function InsertGrenadeIDInOrder();// 0x18715d8
	function InputCameraMoveTest();// 0x1871560
	function InitWeatherConfigComponent();// 0x187154c
	function InitTaskDatas();// 0x18714d4
	function InitTaskDataDelegate__DelegateSignature();// 0x206ccd8
	function InitTaskData();// 0x18712ec
	function InitTaskComponent();// 0x18712d8
	function InitNewbieComponent();// 0x206ccd8
	function InitJoyStickAfterActivation();// 0x206ccd8
	function InitCollectionDataDelegate__DelegateSignature();// 0x206ccd8
	function InitCollectionData();// 0x18711d8
	function InfectionSelectZombieDelegate__DelegateSignature();// 0x206ccd8
	function InfectionEndRound();// 0x18711c4
	function ImprisonmentTeammate();// 0x1871074
	function HideAllUIAfterDeadTipsShowDelegate__DelegateSignature();// 0x206ccd8
	function HandleUpdateShovelingRelease();// 0x1871060
	function HandleUpdateShovelingPressed();// 0x187104c
	function HandleUpdateShoveling();// 0x1871038
	function HandleTogglePlayerListInOB();// 0x1871024
	function HandleToggleOBTeamList();// 0x1870fa4
	function HandleToggleMapInOB();// 0x1870f90
	function HandleToggleHitDamageDisplay();// 0x1870f7c
	function HandleSwitchToTeammatePrev();// 0x1870f68
	function HandleSwitchToTeammateNext();// 0x1870f54
	function HandleSwitchToTeam();// 0x1870edc
	function HandleSwitchToPlayerIndex();// 0x1870e64
	function HandleLeaveFreeViewInOB();// 0x1870e3c
	function HandleLandOnGroundEnd();// 0x1870e50
	function HandleEnterFreeViewInOB();// 0x1870e3c
	function HandleDynamicWeatherChanged();// 0x1870d6c
	function HandleClientHasReactivated();// 0x1870d58
	function HandleCameraModeChanged();// 0x1870c9c
	function GotoSpectating();// 0x1870c14
	function GotoFlying();// 0x1870c00
	function GMTeleport();// 0x1870b88
	function GMSetBoolPoisonCircle();// 0x1870b74
	function GMSetBoolAirDrop();// 0x1870b60
	function GMSetBoolAirAttack();// 0x1870b4c
	function GMSetBoolAI();// 0x1870b38
	function GMOpenWeather();// 0x1870ac0
	function GMEnableRandom();// 0x1870aac
	function GMEnableAllComponent();// 0x1870a98
	function GMDisableRandom();// 0x1870a84
	function GMDisableAllComponent();// 0x1870a70
	function GMCloseWeather();// 0x18709f8
	function GMChangeWeaponScheme();// 0x1870980
	function GetWriteCircleDistance();// 0x1870958
	function GetWeatherConfigComponent();// 0x1870930
	function GetViewPortDPIScale();// 0x1870900
	function GetVehicleUserComp();// 0x18708d8
	function GetUseMotionControlLog();// 0x18708b0
	function GetUseMotionControlEnable();// 0x1870888
	function GetUnlockWearCount();// 0x1870860
	function GetTouchForce();// 0x18707e0
	function GetThePlane();// 0x18707c0
	function GetTeammatePlayerStateFromPlayerTombBox();// 0x1870740
	function GetTargetedSpringArm();// 0x1870718
	function GetStatTriangles();// 0x16c4ce0
	function GetStatMemory();// 0x184bb88
	function GetStatDrawCalls();// 0x16c4ce0
	function GetSpecialAreaList();// 0x1870658
	function GetSpecialAreaID();// 0x1870630
	function GetSensibilityRate();// 0x1870598
	function GetSelfAvatarDisplayInfo();// 0x187043c
	function GetRevivalCountDownTime();// 0x1870414
	function GetRemarkNameByGID();// 0x206ccd8
	function GetQuickSignComponent();// 0x18703ec
	function GetPlayerInfoInOBByName();// 0x18701cc
	function GetPlayerCharacterSafety();// 0x18701a4
	function GetParachuteAnimAsset();// 0x18700e0
	function GetPaintDecalTargetTransform();// 0x1870080
	function GetNewestAirDropBoxPos();// 0x1870038
	function GetNearPlayerList();// 0x186ff28
	function GetMurderUIDStr();// 0x186fe2c
	function GetMurderName();// 0x186fd6c
	function GetMurderIsAI();// 0x186fd34
	function GetMultiItemFromItemList();// 0x186faf8
	function GetMaxTouchForceFinger();// 0x186fab8
	function GetJoyStickVisualSize();// 0x186fa78
	function GetJoyStickCenter();// 0x186fa38
	function GetIsRespawn();// 0x186fa18
	function GetIsMurderSameTeam();// 0x186f9e0
	function GetIsFreeCamera();// 0x186f9c0
	function GetInfectionPawnSubType();// 0x186f998
	function GetInfectionPawnMainType();// 0x186f970
	function GetGameStateReconnectInfoOnServer();// 0x186f914
	function GetGameScreenSize();// 0x16ad21c
	function GetGameResult();// 0x186f900
	function GetFriendDistance();// 0x16c4ce0
	function GetFocalLocation();// 0x186f8b0
	function GetFinalMurderName();// 0x186f790
	function GetCurrentStateType();// 0x186f768
	function GetCurPlayerState();// 0x186f740
	function GetCurPlayerId();// 0x186f718
	function GetCurPlayerCharacter();// 0x186f6f0
	function GetCurPawnLocation();// 0x186f6a8
	function GetCurPawn();// 0x186f680
	function GetCurFPS();// 0x16c4ce0
	function GetControlLookRotation();// 0x186f630
	function GetControlLookPoint();// 0x186f544
	function GetClothingInAllBackpack();// 0x186f3ec
	function GetClassFromBPClassManager();// 0x186f36c
	function GetChatComponent();// 0x186f344
	function GetBackpackComponent();// 0x186f31c
	function GenerateAirDropData();// 0x186f1b8
	function GameModeGotoNextState();// 0x186f1a4
	function GameModeGotoFightingState();// 0x186f190
	function FreeCameraTouchMove();// 0x186f0d4
	function ForceReleaseCurTouchMoveFinger();// 0x186f0c0
	function FlushItem();// 0x186f048
	function FireTakeDamagedEvent();// 0x186efd8
	function FireOrGrenade();// 0x186efc4
	function FindAIDropItem();// 0x186ef4c
	function Fight();// 0x186ef38
	function ExtractAvatarDisplayInfo();// 0x186ed94
	function ExitFreeCamera();// 0x186ed14
	function ExecDSCommand();// 0x186ec50
	function EndTouchScreen();// 0x186eb48
	function EndForceTouchFire();// 0x186ead8
	function EnablePlayerInHouse();// 0x186ea58
	function EnableMyLandscapeDraw();// 0x16ad21c
	function EnableGuidActorDelegate__DelegateSignature();// 0x206ccd8
	function DynamicCreateComponents();// 0x186ea44
	function DoUITouchMove();// 0x206ccd8
	function DoubleClickCancel();// 0x186e9cc
	function DoTouchMove();// 0x206ccd8
	function DoRevivalTemmates();// 0x186e918
	function DoGiveUpRevivalTemmates();// 0x186e864
	function DisplayGameWarningTipWithMsgIDAndString();// 0x186e5ac
	function DisplayGameTipWithMsgIDAndString();// 0x186e2f4
	function DisplayGameTipWithMsgID();// 0x186e27c
	function DisplayGameTipForLowFPSWarning();// 0x186dfc4
	function DispatchPlayerRespawnedEvent();// 0x186df4c
	function DispatchPlayerReconnectedEvent();// 0x186df38
	function DispatchPlayerLostEvent();// 0x186df24
	function DispatchPlayerExitEvent();// 0x186df10
	function DispatchPlayerAboutToRespawnEvent();// 0x186de98
	function DisableMyLandscapeDraw();// 0x16ad21c
	function DelegatePlayerLevelChange__DelegateSignature();// 0x206ccd8
	function DelegatePlayerGoldChange__DelegateSignature();// 0x206ccd8
	function DelayGotoSpectating();// 0x186de84
	function DelayForceExitFreeCamera();// 0x186de70
	function DebugWorldPlayerAvatarInfo();// 0x186de5c
	function DebugSetUIVisibility();// 0x206ccd8
	function DebugEnableFerrisWheelTick();// 0x186dddc
	function DebugEnableDrawSearchLine();// 0x173e6cc
	function DebugEnableBulletImpact();// 0x173e6cc
	function DebugAirDropPickInfo();// 0x186dc4c
	function DealGetAllNearShotWeapon();// 0x186dbd4
	function DealGetAllNearMoveVehicle();// 0x186db18
	function DealGetAllNearMoveCharacter();// 0x186daa0
	function DeactiveTaskTrigger();// 0x186d9dc
	function CreateVehicleOverlapDamage();// 0x186d9c8
	function CreateGodzilla();// 0x186d8c8
	function CorrectVehicleState();// 0x186d70c
	function CollectAllPlayerWeaponPosInfo();// 0x16ad21c
	function ClientUpdateShovelingState();// 0x186d5f4
	function ClientStopShoveling();// 0x186d598
	function ClientStartOnlineGame();// 0x186d57c
	function ClientShowInfectAreaWarning();// 0x186d520
	function ClientSetTotalPlayers();// 0x186d3f8
	function ClientSetPoisonSmogStage();// 0x186d344
	function ClientSetOBData();// 0x186d23c
	function ClientSetAntidoteTime();// 0x186d140
	function ClientSendRoundEndEvent();// 0x186d070
	function ClientQuitViewEnemy();// 0x186d054
	function ClientPlayItemOperationSound();// 0x186cf54
	function ClientOnLeaveVehicleDelegate__DelegateSignature();// 0x206ccd8
	function ClientOnHurt();// 0x186cf38
	function ClientOnEnterVehicleDelegate__DelegateSignature();// 0x206ccd8
	function ClientOnDamageToOther();// 0x186ceb8
	function ClientOnChangeVehicleSeatCompletedDelegate__DelegateSignature();// 0x206ccd8
	function ClientObserveCharacter();// 0x186cda4
	function ClientInterruptGame();// 0x186cd48
	function ClientInitIngameUIAfterRespawn();// 0x186ccec
	function ClientHearSound();// 0x186cc30
	function ClientHandleMsg();// 0x186cb68
	function ClientGotoSpectating();// 0x186cb4c
	function ClientGiveUpRevivalTemmates();// 0x186cb38
	function ClientGameStarted();// 0x186cb1c
	function ClientFriendBattleEnd();// 0x186cb00
	function ClientForbidLoadParahuteAnim();// 0x186ca78
	function ClientExitFromHelicopter();// 0x186c9f0
	function ClientEnterViewBox();// 0x186c970
	function ClientEndOnlineGame();// 0x186c954
	function ClientDisplayGameTipWithMsgID();// 0x186c8a0
	function ClientCheckStartShovelingFail();// 0x186c844
	function ClientChangeStatePC();// 0x186c7c4
	function ClearParachuteAnimAssetCache();// 0x186c7b0
	function ClearBossBornPoint();// 0x186c79c
	function ClampFreeCamIconOffset();// 0x186c6fc
	function CientRevivalTemmates();// 0x186c6d4
	function CheckNeedReport();// 0x186c608
	function CheckConsumeGlideItem();// 0x186c5f4
	function CheckAllVehicleWeaponIsReadyForFire();// 0x186c56c
	function ChangeWeaponSchemeIndex();// 0x186c4ec
	function ChangeToWalkingDead();// 0x186c4d8
	function ChangeSpectatorStateToFreeView();// 0x186c4c4
	function ChangeRolewearIndex();// 0x186c444
	function ChangePVELevel();// 0x186c3cc
	function ChangeFinishTime();// 0x186c354
	function ChangeCharacterLogicDelegate__DelegateSignature();// 0x206ccd8
	function ChangeCharacterBeforeDelegate__DelegateSignature();// 0x206ccd8
	function CanSeeAllUI();// 0x1702fa4
	function CallZombieFlowAirDrop();// 0x186c2dc
	function CallZombieAirDrop();// 0x186c264
	function CallTeamMateUAVStateChanged();// 0x186c1ac
	function CallTeamMateStateChanged();// 0x186bfc8
	function CallShowTouchInterface();// 0x186bf40
	function CalInputFromRotaionRate();// 0x186b970
	function CalcAttactBtnPos();// 0x186b810
	function CacheRecvInfectionSelectZombie__DelegateSignature();// 0x206ccd8
	function C2S_RequestSkillPrompt();// 0x186b7b4
	function C2S_RequestBeingRescuedRemainingTime();// 0x186b758
	function BroadcastFatalDamageToClient();// 0x186af34
	function BroadcastClientsSpawnExplosionEffect();// 0x186acd0
	function BPGetIsAndroidSimulator();// 0x186ac9c
	function BP_OceanSideDetected();// 0x206ccd8
	function BluePrintSetViewTarget();// 0x186ac24
	function BindVoiceCheckFunction();// 0x186ac10
	function BeginTouchScreen();// 0x186ab54
	function BeginAbsorb();// 0x186aaf8
	function BackToGameDataRefresh();// 0x186aae4
	function AutoSelectViewTarget();// 0x186aabc
	function AutoSelectTeammateToView();// 0x186aaa8
	function AddTouchMoveFinger();// 0x186a99c
	function AddParachuteAnimAssetCache();// 0x186a89c
	function AddItemAttachList();// 0x186a824
	function AddItem();// 0x186a768
	function AddInfectionExp();// 0x186a6f0
	function AddBossBornPoint();// 0x186a634
	function AddAvatarItem();// 0x186a4ec
	function ActiveTaskTrigger();// 0x186a428
	function ActivateTouchInterface();// 0x186a3a8

--------------------------------
Class: UAEPlayerController.PlayerController.Controller.Actor.Object
	FName PlayerType;//[Offset: 0x568 , Size: 8]
	FString PlayerName;//[Offset: 0x570 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x57c , Size: 4]
	int TeamID;//[Offset: 0x594 , Size: 4]
	Vector CharacterLocation;//[Offset: 0x598 , Size: 12]
	int RoomMode;//[Offset: 0x5a4 , Size: 4]
	WeatherInfo WeatherInfo;//[Offset: 0x5a8 , Size: 20]
	int planeAvatarId;//[Offset: 0x5bc , Size: 4]
	int DyeDebugFlag;//[Offset: 0x5c0 , Size: 4]
	int PlayerStartID;//[Offset: 0x5c4 , Size: 4]
	bool bUsedSimulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c8 , Size: 1]
	PlayerNetStats NetStats;//[Offset: 0x5cc , Size: 48]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc , Size: 1]
	FString PlanetailResLink;//[Offset: 0x600 , Size: 12]
	bool bIsForReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624 , Size: 1]
	GameModePlayerUpassInfo InitialUpassInfo;//[Offset: 0x628 , Size: 36]
	InitialUpassInfoList(StructProperty)[] InitialUpassInfoList;//[Offset: 0x64c , Size: 12]
	PlayerOBInfoList(StructProperty)[] PlayerOBInfoList;//[Offset: 0x658 , Size: 12]
	int LobbyShowWeaponID;//[Offset: 0x664 , Size: 4]
	bool bIsGM;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x668 , Size: 1]
	FString Nation;//[Offset: 0x66c , Size: 12]
	bool bIsTeammateEscaped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x678 , Size: 1]
	enum DefaultCharacterGender;//[Offset: 0x679 , Size: 1]
	int DefaultCharacterHeadID;//[Offset: 0x67c , Size: 4]
	InitialItemList(StructProperty)[] InitialItemList;//[Offset: 0x680 , Size: 12]
	InitialAllWear(StructProperty)[] InitialAllWear;//[Offset: 0x68c , Size: 12]
	int RolewearIndex;//[Offset: 0x698 , Size: 4]
	equip_plating_list(IntProperty)[] equip_plating_list;//[Offset: 0x69c , Size: 12]
	int VehicleSkinInReady;//[Offset: 0x6a8 , Size: 4]
	bool bSpwanInVehiclePlayerStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ac , Size: 1]
	InitialWeaponAvatarList(StructProperty)[] InitialWeaponAvatarList;//[Offset: 0x6b0 , Size: 12]
	GameModePlayerPetInfo InitialPetInfo;//[Offset: 0x6bc , Size: 24]
	InitialKnapsackExtInfo(StructProperty)[] InitialKnapsackExtInfo;//[Offset: 0x6d4 , Size: 12]
	InitialWeaponSchemeInfo(StructProperty)[] InitialWeaponSchemeInfo;//[Offset: 0x6e0 , Size: 12]
	delegate OnInitialWeaponScheme;//[Offset: 0x6ec , Size: 12]
	int CurWeaponSchemeIndex;//[Offset: 0x6f8 , Size: 4]
	int PveLevel;//[Offset: 0x6fc , Size: 4]
	InitialCharSkillList(IntProperty)[] InitialCharSkillList;//[Offset: 0x700 , Size: 12]
	InitialVehicleAvatarList(StructProperty)[] InitialVehicleAvatarList;//[Offset: 0x70c , Size: 12]
	InitialBackPackPendantList(StructProperty)[] InitialBackPackPendantList;//[Offset: 0x718 , Size: 12]
	InitialVehicleAdvanceAvatarList(StructProperty)[] InitialVehicleAdvanceAvatarList;//[Offset: 0x724 , Size: 12]
	GameModePlayerConsumableAvatar InitialConsumableAvatar;//[Offset: 0x730 , Size: 16]
	GameModePlayerEquipmentAvatar InitialEquipmentAvatar;//[Offset: 0x740 , Size: 12]
	<WeaponAvatarItemList_Key(IntProperty) , WeaponAvatarItemList(IntProperty)> WeaponAvatarItemList;//[Offset: 0x74c , Size: 60]
	<GrenadeAvatarItemList_Key(IntProperty) , GrenadeAvatarItemList(IntProperty)> GrenadeAvatarItemList;//[Offset: 0x788 , Size: 60]
	WeaponAvatarDataList(StructProperty)[] WeaponAvatarDataList;//[Offset: 0x7c4 , Size: 12]
	<VehicleAvatarList_Key(IntProperty) , VehicleAvatarList(IntProperty)> VehicleAvatarList;//[Offset: 0x7d0 , Size: 60]
	<VehicleAdvanceAvatarList_Key(IntProperty) , VehicleAdvanceAvatarList(StructProperty)> VehicleAdvanceAvatarList;//[Offset: 0x80c , Size: 60]
	InitialExpressionItemList(StructProperty)[] InitialExpressionItemList;//[Offset: 0x848 , Size: 12]
	InitialTaskDataList(StructProperty)[] InitialTaskDataList;//[Offset: 0x854 , Size: 12]
	InitialSpecialPickItemList(StructProperty)[] InitialSpecialPickItemList;//[Offset: 0x860 , Size: 12]
	int AnchorPlatResID;//[Offset: 0x86c , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x870 , Size: 4]
	int64 LastGameResultTime;//[Offset: 0x888 , Size: 8]
	bool bRoomCanKickPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x890 , Size: 1]
	bool bRoomOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x891 , Size: 1]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x892 , Size: 1]
	bool bIsObserver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x893 , Size: 1]
	bool bIsSpectating;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x894 , Size: 1]
	uint32 WatchPlayerKey;//[Offset: 0x898 , Size: 4]
	bool bIsWatchEnd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89c , Size: 1]
	bool bAllowAutoSelectTeamMate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89d , Size: 1]
	FriendObservers(StrProperty)[] FriendObservers;//[Offset: 0x8a0 , Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ac , Size: 1]
	bool bIsSpectatingEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8 , Size: 1]
	UAEUserWidget* InGameUIRoot;//[Offset: 0x8bc , Size: 8]
	bool bReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c8 , Size: 1]
	delegate PlayerControllerLostDelegate;//[Offset: 0x8d8 , Size: 12]
	delegate PlayerControllerRecoveredDelegate;//[Offset: 0x8e4 , Size: 12]
	delegate PlayerControllerAboutToReconnectDelegate;//[Offset: 0x8f0 , Size: 12]
	delegate PlayerControllerReconnectedDelegate;//[Offset: 0x8fc , Size: 12]
	delegate PlayerControllerAboutToRespawnDelegate;//[Offset: 0x908 , Size: 12]
	delegate PlayerControllerRespawnedDelegate;//[Offset: 0x914 , Size: 12]
	delegate PlayerControllerAboutToExitDelegate;//[Offset: 0x920 , Size: 12]
	delegate OnPlayerQuitSpectatingForClient;//[Offset: 0x92c , Size: 12]
	BuffEffectDisplayIDArray(IntProperty)[] BuffEffectDisplayIDArray;//[Offset: 0x954 , Size: 12]
	bool IsDelayNotifyEnterBattleUntilLevelLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960 , Size: 1]
	float NotifyTimeOut;//[Offset: 0x964 , Size: 4]
	float DelayCloseLoadingTime;//[Offset: 0x968 , Size: 4]
	FString NeedLoadLevelName;//[Offset: 0x96c , Size: 12]
	int AntiDataCD;//[Offset: 0x988 , Size: 4]
	function UseingWeaponScheme();// 0x1c94274
	function TestShowLongTimeNoOperation();// 0x1c94238
	function TestShowConfirmDialogOfMisKill();// 0x1c94224
	function TestRespawn();// 0x16ad21c
	function TestLogout();// 0x16ad21c
	function TestCastUIMsgWithPara();// 0x1c940a0
	function SetUsedSimulationCVar();// 0x1c94020
	function SetPanels();// 0x1c93f4c
	function ServerTestLogout();// 0x1c93ef0
	function ServerSetVoiceId();// 0x1c93e3c
	function ServerKickSelf();// 0x1c93de0
	function ServerGotoSpectating();// 0x1c93d2c
	function ServerExitGame();// 0x1c93cd0
	function ServerAcknowledgeReconnection();// 0x1c93c1c
	function Respawn();// 0x1c93c00
	function ResetUsedSimulationCVar();// 0x1c93bec
	function ReleaseInGameUI();// 0x1c93bd0
	function PrintStatistics();// 0x16ad21c
	function PlayerStartIDReceived();// 0x1c93bbc
	function OnRep_WeaponAvatarDataList();// 0x1873844
	function OnRep_WatchPlayerKey();// 0x1c93ba0
	function OnRep_UsedSimulation();// 0x1873828
	function OnRep_PveLevel();// 0x1c93b84
	function OnRep_PlayerOBInfoList();// 0x1c93b70
	function OnRep_LastGameResultTime();// 0x1c93b54
	function OnRep_IsSpectatingEnemy();// 0x1c93b38
	function OnRep_IsSpectating();// 0x1c93b1c
	function OnRep_IsObserver();// 0x1c93b00
	function OnRep_InitialWeaponSchemeInfo();// 0x1c93aec
	function OnRep_InitialEquipmentAvatar();// 0x187376c
	function OnRep_InitialConsumableAvatar();// 0x1873750
	function OnRep_FriendObservers();// 0x1c93ad0
	function OnRep_CurWeaponSchemeIndex();// 0x16ad21c
	function OnRep_bRoomOwner();// 0x1c93ab4
	function NotifyEnterBattle();// 0x1c93aa0
	function LuaDoString();// 0x1c939dc
	function KickSelf();// 0x16ad21c
	function IsSpectator();// 0x1c939b4
	function IsRoomMode();// 0x1c93990
	function IsPureSpectator();// 0x1c93968
	function IsObserver();// 0x1c93940
	function IsInSpectatingEnemy();// 0x1c93918
	function IsInSpectating();// 0x1c938f0
	function IsFriendOrEnemySpectator();// 0x1c938c8
	function IsFriendObserver();// 0x1c938a0
	function IsExited();// 0x1c93878
	function IsDemoRecSpectator();// 0x1c93850
	function IsDemoPlaySpectator();// 0x1c93828
	function InitWithPlayerParams();// 0x1c9377c
	function InitWeaponAvatarItems();// 0x1c93760
	function InitVehicleAvatarList();// 0x1c93744
	function InitVehicleAdvanceAvatarList();// 0x1c93728
	function InitIngameUI();// 0x1c9370c
	function InitGrenadeAvatarList();// 0x1c93684
	function GotoSpectating();// 0x1870c14
	function GetWeaponAvatarItemId();// 0x1c93604
	function GetCurrentWeaponSchemeMainSlotItemId();// 0x1c935dc
	function GetCurrentOBPlayerKey();// 0x1c935ac
	function GetCurrentOBPlayerInfoIndex();// 0x1c93584
	function ForceNetReady();// 0x1c93570
	function ExitGame();// 0x1c9355c
	function ExhaustCPU();// 0x1c93548
	function ExecDSCommand();// 0x186ec50
	function ExcuteIntRecord();// 0x1c933ac
	function ExcuteIntCounterRecord();// 0x1c93210
	function EnableInGameUI();// 0x1c931fc
	function DumpUAENetActors();// 0x1c931e8
	function DumpRegions();// 0x1c931d4
	function DumpNetActors();// 0x16ad21c
	function DumpCharacters();// 0x1c931c0
	function DumpAllUI();// 0x16ad21c
	function DumpAllObjects();// 0x16ad21c
	function DumpAllActors();// 0x16ad21c
	function DoLuaFile();// 0x1c930fc
	function DoCrash();// 0x16ad21c
	function DisableInGameUI();// 0x1c930e8
	function ClientShowTeammateEscapeNotice();// 0x1c930cc
	function ClientRPC_CastUIMsgParams();// 0x1c92f40
	function ClientRPC_CastUIMsg();// 0x1c92df8
	function ClientInitPlayerOBInfoButton();// 0x1c92ddc
	function ClientBroadcastRespawnComplete();// 0x1c92dc0
	function ClientBroadcastReconnectionSuccessful();// 0x1811f6c
	function ClientAcknowledgeReconnection();// 0x1c92d40
	function CheckPlayerOBInfoButtonInit();// 0x1c92d24
	function CheckAcknowledgedPawn();// 0x1c92c9c
	function CastUIMsg();// 0x1c92b54
	function CallLuaTableFunction();// 0x1c92a0c
	function CallLuaGlobalFunction();// 0x1c92948

--------------------------------
Class: ClientFatalDamageRecordData
	FString Causer;//[Offset: 0x0 , Size: 12]
	FString CauserNation;//[Offset: 0xc , Size: 12]
	FString VictimName;//[Offset: 0x18 , Size: 12]
	FString VictimNation;//[Offset: 0x24 , Size: 12]
	int DamageType;//[Offset: 0x30 , Size: 4]
	int AdditionalParam;//[Offset: 0x34 , Size: 4]
	int CauserWeaponAvatarID;//[Offset: 0x38 , Size: 4]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c , Size: 1]
	int ResultHealthStatus;//[Offset: 0x40 , Size: 4]
	byte RecordRelationShip;//[Offset: 0x44 , Size: 1]
	int PreviousHealthStatus;//[Offset: 0x48 , Size: 4]
	int causerAnchorPlatformResID;//[Offset: 0x4c , Size: 4]
	int causerAnchorPlatformColorID;//[Offset: 0x50 , Size: 4]
	int realKillerAnchorPlatformResID;//[Offset: 0x54 , Size: 4]
	int realKillerAnchorPlatformColorID;//[Offset: 0x58 , Size: 4]
	int victimAnchorPlatformResID;//[Offset: 0x5c , Size: 4]
	int victimAnchorPlatformColorID;//[Offset: 0x60 , Size: 4]
	FString CauserPicURL;//[Offset: 0x64 , Size: 12]
	FString VictimPicURL;//[Offset: 0x70 , Size: 12]
	FString RealKillerName;//[Offset: 0x7c , Size: 12]
	int RealKillNum;//[Offset: 0x88 , Size: 4]
	byte CauserType;//[Offset: 0x8c , Size: 1]
	byte VictimType;//[Offset: 0x8d , Size: 1]

--------------------------------
Class: WeatherInfo
	FString WeatherLevelName;//[Offset: 0x0 , Size: 12]
	int WeatherID;//[Offset: 0xc , Size: 4]
	float WeatherTime;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PlayerNetStats
	FString ClientAddr;//[Offset: 0x0 , Size: 12]
	FString LocalAddr;//[Offset: 0xc , Size: 12]
	float AvgPing;//[Offset: 0x18 , Size: 4]
	float MaxPing;//[Offset: 0x1c , Size: 4]
	float HighPingPercent;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: GameModePlayerUpassInfo
	int updateTime;//[Offset: 0x0 , Size: 4]
	int upassLevel;//[Offset: 0x4 , Size: 4]
	int upassScore;//[Offset: 0x8 , Size: 4]
	bool isBattleTitle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool isUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	bool battleShow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe , Size: 1]
	bool isBuy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	FString iconUrl;//[Offset: 0x10 , Size: 12]
	bool mainSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int upassKeepBuy;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: GameModePlayerPetInfo
	int PetId;//[Offset: 0x0 , Size: 4]
	int PetLevel;//[Offset: 0x4 , Size: 4]
	int PetCfgId;//[Offset: 0x8 , Size: 4]
	PetAvatarList(IntProperty)[] PetAvatarList;//[Offset: 0xc , Size: 12]

--------------------------------
Class: GameModePlayerConsumableAvatar
	int GrenadeAvatarShoulei;//[Offset: 0x0 , Size: 4]
	int GrenadeAvatarSmoke;//[Offset: 0x4 , Size: 4]
	int GrenadeAvatarStun;//[Offset: 0x8 , Size: 4]
	int GrenadeAvatarBurn;//[Offset: 0xc , Size: 4]

--------------------------------
Class: GameModePlayerEquipmentAvatar
	int BagAvatar;//[Offset: 0x0 , Size: 4]
	int HelmetAvatar;//[Offset: 0x4 , Size: 4]
	int ArmorAvatar;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: SensibilityConfig
	SensibilityMode NormalMode;//[Offset: 0x0 , Size: 32]
	SensibilityMode FireMode;//[Offset: 0x20 , Size: 32]
	SensibilityMode MotionMode;//[Offset: 0x40 , Size: 32]
	float VehicleEye;//[Offset: 0x60 , Size: 4]
	float ParachuteEye;//[Offset: 0x64 , Size: 4]
	float FPPEye;//[Offset: 0x68 , Size: 4]
	int SideMirrorModeC;//[Offset: 0x6c , Size: 4]
	<MaterialConfigs_Key(IntProperty) , MaterialConfigs(StructProperty)> MaterialConfigs;//[Offset: 0x70 , Size: 60]

--------------------------------
Class: SensibilityMode
	float NoAim;//[Offset: 0x0 , Size: 4]
	float Sight1X;//[Offset: 0x4 , Size: 4]
	float Sight2X;//[Offset: 0x8 , Size: 4]
	float Sight3X;//[Offset: 0xc , Size: 4]
	float Sight4X;//[Offset: 0x10 , Size: 4]
	float Sight6X;//[Offset: 0x14 , Size: 4]
	float Sight8X;//[Offset: 0x18 , Size: 4]
	float FPPNoAim;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: KillOrPutDownMessage
	byte MsgType;//[Offset: 0x0 , Size: 1]
	FString AttackActionName;//[Offset: 0x4 , Size: 12]
	FString AttackName;//[Offset: 0x10 , Size: 12]
	bool bIsHeadshot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	int KillNum;//[Offset: 0x20 , Size: 4]
	bool bShowKillNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	FString FullMsg;//[Offset: 0x28 , Size: 12]
	int victimAnchorPlatformResID;//[Offset: 0x34 , Size: 4]
	FString VictimPlayerName;//[Offset: 0x38 , Size: 12]

--------------------------------
Class: STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate OnPlayerTeleport;//[Offset: 0x8a8 , Size: 12]
	delegate OnPlayerPawnHPChange;//[Offset: 0x8b4 , Size: 12]
	delegate OnDeath;//[Offset: 0x8c0 , Size: 12]
	delegate OnBulletChange;//[Offset: 0x8cc , Size: 12]
	delegate OnPlayerPoseChange;//[Offset: 0x8d8 , Size: 12]
	delegate OnPlayerEnterRescueingStatus;//[Offset: 0x8e4 , Size: 12]
	delegate OnPlayerEnterCallingForRevivalStatus;//[Offset: 0x8f0 , Size: 12]
	delegate OnPlayerPickUp;//[Offset: 0x8fc , Size: 12]
	delegate OnPlayerWeaponChangeState;//[Offset: 0x908 , Size: 12]
	delegate OnWeaponFireModeChangeDelegate;//[Offset: 0x914 , Size: 12]
	delegate OnHideUIAfterPlayerDeadDelegate;//[Offset: 0x920 , Size: 12]
	delegate OnPlayerHandFoldedChanged;//[Offset: 0x92c , Size: 12]
	delegate IsEnterNearDeathDelegate;//[Offset: 0x938 , Size: 12]
	delegate OnCharacterAimModeChanged;//[Offset: 0x964 , Size: 12]
	delegate OnPerspectiveChanged;//[Offset: 0x970 , Size: 12]
	delegate OnDoSomethingDelaySomeFrames;//[Offset: 0x97c , Size: 12]
	delegate OnDeathDelegate;//[Offset: 0x988 , Size: 12]
	delegate OnPostTakeDamage;//[Offset: 0x994 , Size: 12]
	delegate OnReconnectNotifyDelegate;//[Offset: 0x9a0 , Size: 12]
	delegate OnStartInitDelegate;//[Offset: 0x9ac , Size: 12]
	delegate OnCharacterShootHitServerDelegate;//[Offset: 0x9b8 , Size: 12]
	delegate OnUpdateForSleepComponent;//[Offset: 0x9c4 , Size: 12]
	delegate AnimMontagePlayDelegate;//[Offset: 0xa00 , Size: 12]
	delegate AnimPlaySlotAnimDelegate;//[Offset: 0xa0c , Size: 12]
	delegate OnCharacterStartFireDelegate;//[Offset: 0xa18 , Size: 12]
	delegate OnCharacterStopFireDelegate;//[Offset: 0xa24 , Size: 12]
	delegate OnCharacterShootDelegate;//[Offset: 0xa30 , Size: 12]
	delegate OnCharacterWeaponEquipDelegate;//[Offset: 0xa3c , Size: 12]
	delegate OnCharacterWeaponUnEquipDelegate;//[Offset: 0xa48 , Size: 12]
	delegate OnPawnChangeFinishDelegate;//[Offset: 0xa54 , Size: 12]
	delegate OnPawnRespawnDelegate;//[Offset: 0xa60 , Size: 12]
	AkAudioEvent* DeathSound;//[Offset: 0xa6c , Size: 4]
	AkAudioEvent* PickupSound;//[Offset: 0xa70 , Size: 4]
	AkAudioEvent* ThrowawayWeaponSound;//[Offset: 0xa74 , Size: 4]
	AkAudioEvent* SwitchFireModeSound;//[Offset: 0xa78 , Size: 4]
	AkAudioEvent* SwitchSightSound;//[Offset: 0xa7c , Size: 4]
	AkAudioEvent* MountAccessoriesSound;//[Offset: 0xa80 , Size: 4]
	bool IsInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa84 , Size: 1]
	bool bShowName;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa84 , Size: 1]
	bool bShowDamageToOther;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0xa84 , Size: 1]
	float NetDelayMinAniCompensate;//[Offset: 0xa88 , Size: 4]
	bool bIsFPPOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8c , Size: 1]
	float Money;//[Offset: 0xa90 , Size: 4]
	bool bHasHandleDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa94 , Size: 1]
	bool bDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa95 , Size: 1]
	bool bIgnoreInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0xa95 , Size: 1]
	bool FriendThread;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa96 , Size: 1]
	bool bUseSameTeamDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa97 , Size: 1]
	float MaxSwimSprintSpeed;//[Offset: 0xa98 , Size: 4]
	bool IsFiveTimesWalkSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xa9c , Size: 1]
	bool bIsSelfieMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9d , Size: 1]
	bool bIsDrawLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9e , Size: 1]
	bool bAllowToggleADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa9f , Size: 1]
	float AllowToggleADSCoolDownLength;//[Offset: 0xaa4 , Size: 4]
	float PreviousValueToSetForHealthPredict;//[Offset: 0xaac , Size: 4]
	float ValueLimitForHealthPredict;//[Offset: 0xab0 , Size: 4]
	FName HeadSocketName;//[Offset: 0xab8 , Size: 8]
	FName LFootSocketName;//[Offset: 0xac0 , Size: 8]
	FName RFootSocketName;//[Offset: 0xac8 , Size: 8]
	MoveAntiCheatComponent* MoveAntiCheatComponent;//[Offset: 0xad0 , Size: 4]
	LagCompensationComponent* LagCompensationComponent;//[Offset: 0xad4 , Size: 4]
	BaseCharacterEffectCom* EffectComponent;//[Offset: 0xad8 , Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xadc , Size: 4]
	CharacterParachuteComponent* ParachuteComponent;//[Offset: 0xae0 , Size: 4]
	NavigationInvokerComponent* NavigationInvokerComponent;//[Offset: 0xae4 , Size: 4]
	CapsuleComponent* DeltaRotationTestCapusle;//[Offset: 0xae8 , Size: 4]
	bool bIsWeaponFiring;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaec , Size: 1]
	Rotator ServerControlRotation;//[Offset: 0xaf0 , Size: 12]
	byte PoseState;//[Offset: 0xafc , Size: 1]
	float LastChangeCapsuleSizeTime;//[Offset: 0xb00 , Size: 4]
	Actor* ThePlane;//[Offset: 0xb04 , Size: 4]
	float ReplicatedNowShovelingSpeed;//[Offset: 0xb08 , Size: 4]
	Rotator ReplicatedShovelingRotation;//[Offset: 0xb0c , Size: 12]
	bool SkipOpenParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb18 , Size: 1]
	bool IsDoingPickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb19 , Size: 1]
	bool bIsHideCrossHairType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28 , Size: 1]
	byte LastPoseState;//[Offset: 0xb30 , Size: 1]
	bool bEnablePoseStateChangeOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb31 , Size: 1]
	float ConstPoseStateOptimizeOfflineTime;//[Offset: 0xb34 , Size: 4]
	bool bUsePoseStateOfflineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3c , Size: 1]
	bool bUpdateCameraWhenShootInMovePlat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3d , Size: 1]
	bool bEnableSwoop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb3e , Size: 1]
	float AnimDeathLifeSpan;//[Offset: 0xb40 , Size: 4]
	bool DestroyOnDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44 , Size: 1]
	class STExtraShootWeapon* AutoEquipWeaponTemplate;//[Offset: 0xb48 , Size: 4]
	SwitchSlotTimeDataList(StructProperty)[] SwitchSlotTimeDataList;//[Offset: 0xb4c , Size: 12]
	PlayerSlotData(ObjectProperty)[] PlayerSlotData;//[Offset: 0xb58 , Size: 12]
	InventoryData(ObjectProperty)[] InventoryData;//[Offset: 0xb64 , Size: 12]
	AkComponent* SoundComp;//[Offset: 0xbbc , Size: 4]
	AkComponent* AmbientSoundComp;//[Offset: 0xbc0 , Size: 4]
	bool IsAmbientSoundPlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc4 , Size: 1]
	AkAudioEvent* FootstepSound;//[Offset: 0xbc8 , Size: 4]
	AkAudioEvent* AmbientSound;//[Offset: 0xbcc , Size: 4]
	<SpecialMapAmbientSoundConfig_Key(StrProperty) , SpecialMapAmbientSoundConfig(StructProperty)> SpecialMapAmbientSoundConfig;//[Offset: 0xbd0 , Size: 60]
	SceneComponent* MeshContainer;//[Offset: 0xc0c , Size: 4]
	float ProduceSoundInterval;//[Offset: 0xc10 , Size: 4]
	float ProduceSoundVelocitySquared;//[Offset: 0xc14 , Size: 4]
	float HearRadius;//[Offset: 0xc18 , Size: 4]
	bool bVaultIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc20 , Size: 1]
	bool bIsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc21 , Size: 1]
	Actor* WaterObj;//[Offset: 0xc24 , Size: 4]
	bool UseShootVerifyEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc28 , Size: 1]
	byte ClientHitPartJudgment;//[Offset: 0xc29 , Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xc2a , Size: 1]
	STCharacterNearDeathComp* NearDeatchComponent;//[Offset: 0xc2c , Size: 4]
	STCharacterRescueOtherComp* RescueOtherComponent;//[Offset: 0xc30 , Size: 4]
	STCharacterFollowComp* AutoFollowComponent;//[Offset: 0xc34 , Size: 4]
	bool IsRescueingOther;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc38 , Size: 1]
	float ReplciateRestoringDuraion;//[Offset: 0xc3c , Size: 4]
	bool IsBeingRescued;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc40 , Size: 1]
	float EnterNearDeathCDTimeInitValue;//[Offset: 0xc44 , Size: 4]
	bool bIsCallingForRevival;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4c , Size: 1]
	float DistSquaredInterruptRevival;//[Offset: 0xc50 , Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0xc54 , Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0xc5c , Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0xc64 , Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0xc6c , Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0xc74 , Size: 8]
	<NewHitBodyPosMap_Key(StrProperty) , NewHitBodyPosMap(EnumProperty)> NewHitBodyPosMap;//[Offset: 0xc7c , Size: 60]
	Vector ScopeNewIdleLoc;//[Offset: 0xcb8 , Size: 12]
	Vector ScopeNewAimLoc;//[Offset: 0xcc4 , Size: 12]
	float ScopeMoveInOutSpeed;//[Offset: 0xcd0 , Size: 4]
	Vector ScopeAimShootSpreadDir;//[Offset: 0xcd4 , Size: 12]
	float ScopeAimShootSpreadAddDirValSpeed;//[Offset: 0xce0 , Size: 4]
	float ScopeAimShootSpreadDecDirValSpeed;//[Offset: 0xce4 , Size: 4]
	float ScopeAimShootSpreadDirValMax;//[Offset: 0xce8 , Size: 4]
	Rotator ScopeAimShootSpreadRot;//[Offset: 0xcf0 , Size: 12]
	float ScopeAimShootSpreadAddRotValSpeed;//[Offset: 0xcfc , Size: 4]
	float ScopeAimShootSpreadDecRotValSpeed;//[Offset: 0xd00 , Size: 4]
	float ScopeAimShootSpreadRotValMax;//[Offset: 0xd04 , Size: 4]
	float ScopeLagScale;//[Offset: 0xd0c , Size: 4]
	float ScopeAimCrosshairUIScale;//[Offset: 0xd10 , Size: 4]
	float ScopeFov;//[Offset: 0xd14 , Size: 4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0xd18 , Size: 4]
	class PlayerTombBox* DefaultDeadInventoryBoxTemplate;//[Offset: 0xd1c , Size: 4]
	float DeadInventoryBoxOverrideFindPutDownPointZThreshold;//[Offset: 0xd20 , Size: 4]
	int FirstDamageTypeSpesificID;//[Offset: 0xd24 , Size: 4]
	float RefreshUITimeAfterSpawn;//[Offset: 0xd28 , Size: 4]
	float RefreshUITimeAfterSpawnInterval;//[Offset: 0xd2c , Size: 4]
	Vector ScopeNewTargetLoc;//[Offset: 0xd38 , Size: 12]
	bool bMarkScopeLocDirty;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd44 , Size: 1]
	CustomSpringArmComponent* SpringArmComp;//[Offset: 0xd48 , Size: 4]
	CameraComponent* ThirdPersonCameraComponent;//[Offset: 0xd4c , Size: 4]
	SpringArmComponent* FPPSpringArmComp;//[Offset: 0xd50 , Size: 4]
	CameraComponent* FPPCameraComp;//[Offset: 0xd54 , Size: 4]
	SpringArmComponent* ScopeSpringArmComp;//[Offset: 0xd58 , Size: 4]
	CameraComponent* ScopeCameraComp;//[Offset: 0xd5c , Size: 4]
	SceneComponent* ShoulderCameraRoot;//[Offset: 0xd60 , Size: 4]
	bool bHasStuckOperation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd64 , Size: 1]
	SyncAKEvent SyncAKEvent;//[Offset: 0xd68 , Size: 16]
	delegate OnJoyStickInteruptDelegate;//[Offset: 0xd78 , Size: 12]
	delegate OnPlayerAttrChangeDelegate;//[Offset: 0xd84 , Size: 12]
	delegate OnCharacterAttrChangedWithDetail;//[Offset: 0xd90 , Size: 12]
	bool bIsDelayingMove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9c , Size: 1]
	bool bDebugNewWeaponSystem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9d , Size: 1]
	bool bDebugPVEShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9e , Size: 1]
	BoxComponent* ProneBoxComponent;//[Offset: 0xda0 , Size: 4]
	Vector ProneBoxRelativeLocation;//[Offset: 0xda4 , Size: 12]
	DamageCauserRecords(StructProperty)[] DamageCauserRecords;//[Offset: 0xdb0 , Size: 12]
	DamageRecords(StructProperty)[] DamageRecords;//[Offset: 0xdbc , Size: 12]
	STCharacterMovementComponent* STCharacterMovement;//[Offset: 0xdc8 , Size: 4]
	float PickUpRadius;//[Offset: 0xdcc , Size: 4]
	SimViewData SimulateViewData;//[Offset: 0xdd0 , Size: 4]
	AnchorPlatData AnchorPlat;//[Offset: 0xdd4 , Size: 8]
	class TrailMarkActor* ProneTrailMarkClass;//[Offset: 0xde0 , Size: 40]
	TrailMarkActor* WeakProneTrailMarkActor;//[Offset: 0xe08 , Size: 8]
	float MaxDispalyFootprintDistance;//[Offset: 0xe20 , Size: 4]
	KilledTipsBlock BlockData;//[Offset: 0xe24 , Size: 40]
	class AnimInstance* MainCharAnimClass;//[Offset: 0xe4c , Size: 4]
	class AnimInstance* MainCharFPPAnimClass;//[Offset: 0xe50 , Size: 4]
	bool IsFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe58 , Size: 1]
	int CurrentEmoteIndex;//[Offset: 0xe5c , Size: 4]
	delegate EmoteMontageFinishedEvent;//[Offset: 0xe64 , Size: 12]
	AnimationAsset* TempEmoteResource;//[Offset: 0xe70 , Size: 40]
	AnimSequenceBase* CurrentLoadedEmoteSequence;//[Offset: 0xe98 , Size: 4]
	float CurrentLoadedEmoteBlendTime;//[Offset: 0xe9c , Size: 4]
	<PawnStateRelatedBuffMap_Key(NameProperty) , PawnStateRelatedBuffMap(EnumProperty)> PawnStateRelatedBuffMap;//[Offset: 0xea4 , Size: 60]
	bool IsInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee0 , Size: 1]
	bool IsAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xee1 , Size: 1]
	STExtraBaseCharacter* WhoFollowMe;//[Offset: 0xee4 , Size: 4]
	Vector CurInputVector;//[Offset: 0xee8 , Size: 12]
	StaticMeshComponent* ScopComp;//[Offset: 0xef4 , Size: 4]
	PhysicsAsset* PhysicsAssetOverride_Dead;//[Offset: 0xf04 , Size: 4]
	float voiceCheckCD;//[Offset: 0xf08 , Size: 4]
	float voiceCheckShowCD;//[Offset: 0xf0c , Size: 4]
	float VoiceCheckDis;//[Offset: 0xf10 , Size: 4]
	PlayerGunCollosionComp* PlayerGunCollosionComp;//[Offset: 0xf2c , Size: 4]
	STExtraPlayerState* STExtraPlayerState;//[Offset: 0xf3c , Size: 4]
	byte MovementModeBeforeNearDeath;//[Offset: 0xf40 , Size: 1]
	float MoveableSwitchPoseTime;//[Offset: 0xf44 , Size: 4]
	STExtraPlayerState* WhoKillMeRecord;//[Offset: 0xf48 , Size: 4]
	int HandFolderRatio;//[Offset: 0xf4c , Size: 4]
	float SwimUpRate;//[Offset: 0xf50 , Size: 4]
	PlayerSwimComponent* swimComponet;//[Offset: 0xf54 , Size: 4]
	bool bEnableWorldPawnCollisionDisabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf58 , Size: 1]
	bool bEnableWorldPawnCollisionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf59 , Size: 1]
	Vector MoveInputState;//[Offset: 0xf8c , Size: 12]
	bool hHasCallGameModeKill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0 , Size: 1]
	float CollideByTeammateCDConfig;//[Offset: 0xff0 , Size: 4]
	PoseChangeTime SwitchPoseTime;//[Offset: 0xff8 , Size: 16]
	Transform HitBoxLeanTransL;//[Offset: 0x1010 , Size: 48]
	Transform HitBoxLeanTransR;//[Offset: 0x1040 , Size: 48]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x1088 , Size: 4]
	BaseCharacterPickupProxy* PickupProxy;//[Offset: 0x108c , Size: 4]
	CharacterWeaponManagerComponent* WeaponManagerComponent;//[Offset: 0x1090 , Size: 4]
	float DelayHideDuration;//[Offset: 0x1094 , Size: 4]
	float DelayHideDuration_SimulatePhysicsDead;//[Offset: 0x1098 , Size: 4]
	bool bEnableRagdollAfterDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109c , Size: 1]
	float MaxRagdollActiveDuration;//[Offset: 0x10a0 , Size: 4]
	bool bEnableAnimFrameCounter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10ac , Size: 1]
	PlayerAnimList CurPlayerAnimList;//[Offset: 0x10b0 , Size: 132]
	AnimParamList CurAnimParamList;//[Offset: 0x1134 , Size: 276]
	PlayerVehAnimList CurPlayerVehAnimList;//[Offset: 0x1248 , Size: 92]
	AnimVehParamList CurAnimVehParamList;//[Offset: 0x12a4 , Size: 48]
	AnimStatusKeyList LastUpdateStatusKeyList;//[Offset: 0x12d4 , Size: 32]
	AnimStatusKeyList CurUpdateStatusKeyList;//[Offset: 0x12f4 , Size: 32]
	byte ThrowGrenadeMode;//[Offset: 0x1314 , Size: 1]
	bool IsPeekLeft;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1324 , Size: 1]
	bool IsEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1325 , Size: 1]
	float PeekCheckCollisionTimer;//[Offset: 0x1328 , Size: 4]
	bool PeekHasCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1330 , Size: 1]
	float AutoScopeDelayTimeWhenPeek;//[Offset: 0x1334 , Size: 4]
	int IsEnableReportPlayerBehavior;//[Offset: 0x1338 , Size: 4]
	float HighWalkSpeed;//[Offset: 0x1354 , Size: 4]
	float WalkSpeedChangeRate;//[Offset: 0x1358 , Size: 4]
	float WalkSpeedThreshold;//[Offset: 0x135c , Size: 4]
	float MaxCrouchSpeed;//[Offset: 0x1360 , Size: 4]
	float MaxProneSpeed;//[Offset: 0x1364 , Size: 4]
	float MaxSprintSpeed;//[Offset: 0x1368 , Size: 4]
	float MaxSprintCrouchSpeed;//[Offset: 0x136c , Size: 4]
	float MaxSwimSpeed;//[Offset: 0x1370 , Size: 4]
	float HealthPredict;//[Offset: 0x1374 , Size: 4]
	float BreathAmount;//[Offset: 0x1378 , Size: 4]
	bool bShouldDrowningHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x137c , Size: 1]
	int PoisonSmogStage;//[Offset: 0x1380 , Size: 4]
	float PoisonSmogProgress;//[Offset: 0x1384 , Size: 4]
	float AntidoteExeTime;//[Offset: 0x1388 , Size: 4]
	float AntidoteMaxTime;//[Offset: 0x138c , Size: 4]
	float SpeedDynamicScale;//[Offset: 0x1390 , Size: 4]
	float TurnInPlaceAngel;//[Offset: 0x1394 , Size: 4]
	delegate PoisonFogStageUpdatedDelegate;//[Offset: 0x1398 , Size: 12]
	byte HealthStatus;//[Offset: 0x13a4 , Size: 1]
	<BodyPartConfigMap_Key(EnumProperty) , BodyPartConfigMap(StructProperty)> BodyPartConfigMap;//[Offset: 0x13a8 , Size: 60]
	bool bIsLastTwoCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e4 , Size: 1]
	float SpeedRate;//[Offset: 0x13e8 , Size: 4]
	float EnergySpeedScale;//[Offset: 0x13ec , Size: 4]
	float RecoveryScale;//[Offset: 0x13f0 , Size: 4]
	float DefaultSpeedValue;//[Offset: 0x13f4 , Size: 4]
	float PawnBackpackCapacity;//[Offset: 0x13f8 , Size: 4]
	CharacterEnergyData Energy;//[Offset: 0x13fc , Size: 44]
	TemperaturePhaseList(StructProperty)[] TemperaturePhaseList;//[Offset: 0x1428 , Size: 12]
	bool bCheckRelevantWithFOV;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1434 , Size: 1]
	float FarDistanceAimFOV;//[Offset: 0x1438 , Size: 4]
	float FarRelevantDistanceSqured;//[Offset: 0x143c , Size: 4]
	float MiddleDistanceAimFOV;//[Offset: 0x1440 , Size: 4]
	float MiddleRelevantDistanceSqured;//[Offset: 0x1444 , Size: 4]
	float VerticalSpeedFallingDamageThrehod;//[Offset: 0x144c , Size: 4]
	float VerticalFallingDamageCoefficient;//[Offset: 0x1450 , Size: 4]
	float PrachuteLandedFallingDamageMax;//[Offset: 0x1458 , Size: 4]
	bool EnablePrachuteLandedFallingDamageMax;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x145c , Size: 1]
	float HorizontalSpeedFallingDamageThrehod;//[Offset: 0x1460 , Size: 4]
	CurveFloat* CurveHorizontalSpeedFallingDamage;//[Offset: 0x1464 , Size: 4]
	class STDamageCameraShake* DamageShakeClass;//[Offset: 0x1468 , Size: 4]
	float StandHalfHeight;//[Offset: 0x146c , Size: 4]
	float CrouchHalfHeight;//[Offset: 0x1470 , Size: 4]
	float ProneHalfHeight;//[Offset: 0x1474 , Size: 4]
	float CrouchEnableCheckTolerance;//[Offset: 0x1478 , Size: 4]
	float StandRadius;//[Offset: 0x147c , Size: 4]
	float DyingRadius;//[Offset: 0x1480 , Size: 4]
	HealthPredictShowDataList(StructProperty)[] HealthPredictShowDataList;//[Offset: 0x1484 , Size: 12]
	SecuryInfoComponent* SecuryComponent;//[Offset: 0x1490 , Size: 4]
	bool bWasOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14a0 , Size: 1]
	STExtraVehicleBase* CurrentVehicle;//[Offset: 0x14a4 , Size: 4]
	float LastVehicleDamageCD;//[Offset: 0x14ac , Size: 4]
	int VehicleSeatIdx;//[Offset: 0x14b4 , Size: 4]
	float LeaveVehicleVelocityKeepTime;//[Offset: 0x14bc , Size: 4]
	float FixMovementOnVehicleInterval;//[Offset: 0x14d0 , Size: 4]
	UnmannedVehicleSyncData CurrentUnmannedVehicleSyncData;//[Offset: 0x14d8 , Size: 8]
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e8 , Size: 1]
	CharacterAvatarComponent2* AvatarComponent2;//[Offset: 0x14ec , Size: 4]
	<AvatarRectifyData_Key(EnumProperty) , AvatarRectifyData(IntProperty)> AvatarRectifyData;//[Offset: 0x14f0 , Size: 60]
	HalloweenVampireCloth HalloweenVampireCloth;//[Offset: 0x152c , Size: 8]
	delegate OnAttachedToVehicle;//[Offset: 0x1534 , Size: 12]
	delegate OnDetachedFromVehicle;//[Offset: 0x1540 , Size: 12]
	delegate OnChangedVehicleSeat;//[Offset: 0x154c , Size: 12]
	float voiceCheckUAVOperatorDeltaTime;//[Offset: 0x1564 , Size: 4]
	STExtraWeapon* CurrentReloadWeapon;//[Offset: 0x1634 , Size: 4]
	bool EnableSprintSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1638 , Size: 1]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x163c , Size: 4]
	STParachuteState STReplicateParchuteState;//[Offset: 0x1644 , Size: 24]
	UAEChaParachuteAnimListComponent* CharParachuteAnimListComponentCache;//[Offset: 0x165c , Size: 4]
	STReplicatedMoveState STReplicatedMoveState;//[Offset: 0x1660 , Size: 32]
	bool bReplicatedIsStartParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1680 , Size: 1]
	float MoveForwardInputValue;//[Offset: 0x1684 , Size: 4]
	float MoveRightInputValue;//[Offset: 0x1688 , Size: 4]
	bool bIsParachuteLandingAnimEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168c , Size: 1]
	float ParachuteLandingHeightAdded;//[Offset: 0x1690 , Size: 4]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1694 , Size: 1]
	float TargetPlayerAIPolicyDecisionLogInterval;//[Offset: 0x1698 , Size: 4]
	float RelevantPlayerAIPolicyDecisionLogInterval;//[Offset: 0x169c , Size: 4]
	ParachuteFollowComponent* ParachuteFollowComp;//[Offset: 0x16a4 , Size: 4]
	FlyingTeam(ObjectProperty)[] FlyingTeam;//[Offset: 0x16a8 , Size: 12]
	STExtraBaseCharacter* Leader;//[Offset: 0x16b4 , Size: 4]
	enum FollowState;//[Offset: 0x16b8 , Size: 1]
	TeammateParachuteFollowState(StructProperty)[] TeammateParachuteFollowState;//[Offset: 0x16bc , Size: 12]
	Inviters(ObjectProperty)[] Inviters;//[Offset: 0x16c8 , Size: 12]
	InviterStateArr(ObjectProperty)[] InviterStateArr;//[Offset: 0x16d4 , Size: 12]
	FString LatestInviter;//[Offset: 0x16e0 , Size: 12]
	bool IsDuringTransferLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x16ec , Size: 1]
	float MaxTemporaryNotAllowInvitedTime;//[Offset: 0x16f4 , Size: 4]
	float maxShowAlpha;//[Offset: 0x16fc , Size: 4]
	float MoveMaxShowDis;//[Offset: 0x1700 , Size: 4]
	float WeaponMaxShowDis;//[Offset: 0x1704 , Size: 4]
	float VehicleMaxShowDis;//[Offset: 0x1708 , Size: 4]
	float FPPPutDownWeaponCoolingStart;//[Offset: 0x173c , Size: 4]
	float FPPPutDownWeaponCoolingEnd;//[Offset: 0x1740 , Size: 4]
	float FPPSprintWeaponSmoothTime;//[Offset: 0x1744 , Size: 4]
	int IsEnableReportRoute;//[Offset: 0x1818 , Size: 4]
	Vector EmoteColBox;//[Offset: 0x1858 , Size: 12]
	int IsEnableLogAIPlayerPos;//[Offset: 0x186c , Size: 4]
	float CompVisionOpDis;//[Offset: 0x1870 , Size: 4]
	float CompVisionOpDelay;//[Offset: 0x1874 , Size: 4]
	bool bHasAppliedVisionCompOp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1878 , Size: 1]
	<CharacterCompOutOfVisionOptimizationDataMap_Key(ObjectProperty) , CharacterCompOutOfVisionOptimizationDataMap(StructProperty)> CharacterCompOutOfVisionOptimizationDataMap;//[Offset: 0x1888 , Size: 60]
	bool bEnableCompVisionOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c4 , Size: 1]
	bool bNightVisionUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c5 , Size: 1]
	float MaxRelavantDistance;//[Offset: 0x18cc , Size: 4]
	float MaxRelavantDistanceSquared;//[Offset: 0x18d0 , Size: 4]
	int IsEnableReportPlayerKillFlow;//[Offset: 0x18d4 , Size: 4]
	int IsEnableReportGameSetting;//[Offset: 0x18d8 , Size: 4]
	int EnableReportGameSettingLevel;//[Offset: 0x18dc , Size: 4]
	int IsEnableReportMrpcsInCircleFlow;//[Offset: 0x18e0 , Size: 4]
	int IsEnableReportMrpcsInPartCircleFlow;//[Offset: 0x18e4 , Size: 4]
	int IsEnableReportMrpcsFlow;//[Offset: 0x18e8 , Size: 4]
	bool CrowdAgentConsidered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18ec , Size: 1]
	UAECharacterAnimListComponent* OwnedCharacterAnimComp;//[Offset: 0x18f8 , Size: 4]
	bool bIsSwapingMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1900 , Size: 1]
	float EquipingScopeDelay;//[Offset: 0x1904 , Size: 4]
	bool bClientHasFinishedReloadWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1909 , Size: 1]
	delegate OnEquipZoomScope;//[Offset: 0x190c , Size: 12]
	WeaponOverrideAttrs WeaponOverrideAttrs;//[Offset: 0x191c , Size: 24]
	CharacterOverrideAttrs CharacterOverrideAttrs;//[Offset: 0x1934 , Size: 16]
	float CharacterFallingVelocityZFactor;//[Offset: 0x1944 , Size: 4]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1970 , Size: 1]
	delegate CharacterDisplayFinalDamageDelegate;//[Offset: 0x1974 , Size: 12]
	int AloneDistance;//[Offset: 0x1980 , Size: 4]
	int NearTeamPlayerDistance;//[Offset: 0x1984 , Size: 4]
	AnimationAsset* ChangeWearingMontage;//[Offset: 0x1990 , Size: 40]
	float ChangeWearingLastTime;//[Offset: 0x19b8 , Size: 4]
	int ChangeWearingPromptTextID;//[Offset: 0x19bc , Size: 4]
	FString ChangeWearingPromptText;//[Offset: 0x19c0 , Size: 12]
	AnimMontage* ChangeWearingAnimMontage;//[Offset: 0x19cc , Size: 4]
	delegate WearingMontageFinishedEvent;//[Offset: 0x19d0 , Size: 12]
	Vector ChangeWearingColBox;//[Offset: 0x1a1c , Size: 12]
	float PaintDecalMaxDistance;//[Offset: 0x1a28 , Size: 4]
	bool bDetectingPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2c , Size: 1]
	bool bValidPaintDecalTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a2d , Size: 1]
	float RequestPaintDecalCD;//[Offset: 0x1a30 , Size: 4]
	float MaxRequestPaintDecalCD;//[Offset: 0x1a34 , Size: 4]
	ChildActorComponent* DecalComponent;//[Offset: 0x1a38 , Size: 4]
	Actor* DecalActor;//[Offset: 0x1a3c , Size: 4]
	bool bInBattleState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a40 , Size: 1]
	float OutBattleStateTime;//[Offset: 0x1a44 , Size: 4]
	delegate OnBattleStateChange;//[Offset: 0x1a4c , Size: 12]
	BonfireActor* CurBonfire;//[Offset: 0x1a58 , Size: 4]
	BonfireActor* BuiltBonfire;//[Offset: 0x1a5c , Size: 4]
	class STCharacterBonfireLinkComp* BonfireLinkComponentTemplate;//[Offset: 0x1a60 , Size: 40]
	delegate OnCharacterPlayEmote;//[Offset: 0x1a88 , Size: 12]
	delegate OnCharacterWin;//[Offset: 0x1a94 , Size: 12]
	delegate OnCharacterFallingModeChange;//[Offset: 0x1aa0 , Size: 12]
	Vector LastServerHitImpactPoint;//[Offset: 0x1aac , Size: 12]
	byte RemainUseSupplySpotTimes;//[Offset: 0x1ab8 , Size: 1]
	byte RemainUseEnhancerSpotTimes;//[Offset: 0x1ab9 , Size: 1]
	bool IsShowHealthBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1aba , Size: 1]
	UseEnhanceSpotTip(IntProperty)[] UseEnhanceSpotTip;//[Offset: 0x1abc , Size: 12]
	int MonsterDamageReduceSkillID;//[Offset: 0x1ac8 , Size: 4]
	<InteractionEmoteConfig_Key(IntProperty) , InteractionEmoteConfig(StructProperty)> InteractionEmoteConfig;//[Offset: 0x1acc , Size: 60]
	STExtraBaseCharacter* InteractionEmoteSender;//[Offset: 0x1b08 , Size: 4]
	bool IsInitCharacterSkill;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1a , Size: 1]
	FString CharacterSkillTableName;//[Offset: 0x1b1c , Size: 12]
	STExtraVehicleBase* RelevantVehicleInReady;//[Offset: 0x1b28 , Size: 4]
	PhysicsAsset* DeathCachePhysicsAsset;//[Offset: 0x1b2c , Size: 4]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x1b30 , Size: 152]
	byte MeleeAutoAimType;//[Offset: 0x1bc8 , Size: 1]
	bool bIsInObjectPool;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bd4 , Size: 1]
	PlayerRespawnData PlayerRespawnData;//[Offset: 0x1bd8 , Size: 28]
	bool bCharacterHideIngame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1bf4 , Size: 1]
	TimerHandle CharacterShowWeaponTimerHandle;//[Offset: 0x1bf8 , Size: 8]
	float CharacterShowWeaponTime;//[Offset: 0x1c00 , Size: 4]
	enum CharacterMainType;//[Offset: 0x1c04 , Size: 1]
	enum CharacterSubType;//[Offset: 0x1c05 , Size: 1]
	delegate ZombieModePropSkillUIShowDelegate;//[Offset: 0x1c08 , Size: 12]
	int ZombieModeCurrentSkillPropLevel;//[Offset: 0x1c14 , Size: 4]
	int ZombieModeCurrentSkillPropID;//[Offset: 0x1c18 , Size: 4]
	delegate MarkPlayerPosDelegate;//[Offset: 0x1c1c , Size: 12]
	float Config_PlayerHurt_ResetTime;//[Offset: 0x1c28 , Size: 4]
	PlayerVaultComponent* VaultControllerComp;//[Offset: 0x1c2c , Size: 4]
	bool EnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c30 , Size: 1]
	bool EnableBulletFlySound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c31 , Size: 1]
	delegate OnUseSpringJump;//[Offset: 0x1c34 , Size: 12]
	float LastSprintTriggerTime;//[Offset: 0x1c40 , Size: 4]
	float FallingTime;//[Offset: 0x1c48 , Size: 4]
	bool bInteractWithActivityActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4c , Size: 1]
	bool IsShowRevivalPointIcon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4d , Size: 1]
	bool bIsGiveupWhenMatchGoalAchieved;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c4e , Size: 1]
	Actor* MyConstActor;//[Offset: 0x1c50 , Size: 4]
	bool EnterSnowArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c54 , Size: 1]
	ShowSnowAreaTypes(ByteProperty)[] ShowSnowAreaTypes;//[Offset: 0x1c58 , Size: 12]
	float TickCanDriveSnowBoardInterval;//[Offset: 0x1c64 , Size: 4]
	float ClientAttachToVehicleKeepTime;//[Offset: 0x1c6c , Size: 4]
	float RefreshAnimListTimerMaxTime;//[Offset: 0x1c78 , Size: 4]
	float RealtimeVerifyInterval;//[Offset: 0x1c7c , Size: 4]
	float RealtimeVerifyIntervalRandomOffset;//[Offset: 0x1c80 , Size: 4]
	Transform DefaultParticleAttachTransform;//[Offset: 0x1ca0 , Size: 48]
	byte DefaultParticleAttachLocationType;//[Offset: 0x1cd0 , Size: 1]
	ParticleAttachOffsetArray(StructProperty)[] ParticleAttachOffsetArray;//[Offset: 0x1cd4 , Size: 12]
	float ParticleShowingInterval;//[Offset: 0x1ce0 , Size: 4]
	bool bIsShowingInjuryEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ce8 , Size: 1]
	ParticleSystem* InjuryAndToxicParticleEffect;//[Offset: 0x1cf0 , Size: 40]
	ParticleSystem* ProtectedInjuryAndToxicParticleEffect;//[Offset: 0x1d18 , Size: 4]
	Actor* LastShootActor;//[Offset: 0x1d1c , Size: 4]
	float RTNoDamageTime;//[Offset: 0x1d20 , Size: 4]
	bool IsCanEnableWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d24 , Size: 1]
	bool IsWingUpControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d2c , Size: 1]
	float MinWingUpControlTime;//[Offset: 0x1d38 , Size: 4]
	function VaultStartPosNotifyBPToCpp();// 0x181adb0
	function VaultFailPawnCPP();// 0x181acec
	function VaultFailPawnBluePrint();// 0x181ac18
	function UseSpringJump();// 0x181aba0
	function UserCancelRescue();// 0x181ab8c
	function UpdateShovelingState();// 0x181ab64
	function UpdateShovelingHoldStateRelease();// 0x181ab50
	function UpdateShovelingHoldStatePressed();// 0x181ab3c
	function UpdatePoseCollisionCpp();// 0x181aa80
	function UpdateFallingTime();// 0x181aa08
	function UpdateCurrentShootWeaponTick();// 0x181a9f4
	function UpdateAllInstanceBodyTransform();// 0x181a97c
	function UnequipWeaponFinish();// 0x16ad21c
	function UnequipWeapon();// 0x181a8b8
	function TryToBroadcastFatalDamageEvent();// 0x181a6f0
	function TryPeek();// 0x181a620
	function TryFollowInitialParachuteLeader();// 0x181a4c8
	function TriggerEntryEvent_Implementation();// 0x181a440
	function TakeDamageWhenThrowedDelegate__DelegateSignature();// 0x206ccd8
	function SyncServerTagsChange();// 0x181a2dc
	function SyncDeadTombBoxToController();// 0x181a25c
	function SwitchWeaponCheck();// 0x181a190
	function SwitchWeaponBySlot();// 0x181a028
	function SwitchToLastWeapon();// 0x1819f58
	function SwitchToLastNoneGrenageWeapon();// 0x1819e88
	function SwitchPoseState();// 0x1819cc8
	function SwapMainWeapon();// 0x1819cb4
	function STServerUpdateState();// 0x1819b2c
	function StopSlotAnim();// 0x1819a1c
	function StopPlayEmoteAnim();// 0x181999c
	function StopMove();// 0x1819988
	function StopFireFilter();// 0x1819958
	function StopFire();// 0x1819944
	function StopChangeWearingAnim();// 0x181991c
	function StartPlayEmoteAnim();// 0x181989c
	function StartFireSimple();// 0x181981c
	function StartFireFilter();// 0x18197ec
	function StartFire();// 0x1819698
	function StartChangeWearingAnim();// 0x1819670
	function SpawnFootprint();// 0x18195f8
	function SpawnAndSwithToGrenadeServerCall();// 0x1819544
	function SpawnAndSwitchToGrenadeOnServer();// 0x18194c4
	function SpawnAndSwitchToGrenadeOnClient();// 0x1819444
	function SpawnAndBackpackWeaponOnServer();// 0x1819288
	function ShowNightVisionFrame();// 0x181926c
	function ShowInjuryScreenEffect();// 0x1819258
	function ShowDebugRole();// 0x1819244
	function ShowDebugRecordData();// 0x1819230
	function ShowDebugPickUpFlow();// 0x181921c
	function ShowDebugEquipOrUnequipFlow();// 0x1819208
	function ShowDebugBornLandFlow();// 0x18191f4
	function ShowConfirmDialogOfMisKill();// 0x18191d8
	function ShouldUpdateHPOnUI();// 0x18191a8
	function ShouldShowCorp();// 0x1819180
	function ShouldShowAnchor();// 0x1819158
	function ShouldAutoScopeWhenPeek();// 0x1819128
	function ShootCharacterVertify();// 0x1818ec0
	function SetWeaponShootType();// 0x1818e40
	function SetViewTargetAgainForOB();// 0x1818e2c
	function SetThrowGrenadeMode();// 0x1818db4
	function SetRTNoDamageTimer();// 0x1818d3c
	function SetReloadMethod();// 0x1818c78
	function SetPawnStateDisabled();// 0x1818bb4
	function SetPawnReloadWeaponFinished();// 0x1818b2c
	function SetIsDuringTransferLeader();// 0x1818aac
	function SetIsAutoFollow();// 0x18189e4
	function SetHighWalkSpeed();// 0x181896c
	function SetHealthSafety();// 0x18188b0
	function SetHandFoldRatio();// 0x1818838
	function SetExitingParachute();// 0x18187b8
	function SetEnterSnowArea();// 0x1818738
	function SetDelayStateSwitchTime();// 0x18186c0
	function SetCurScopeFov();// 0x1818648
	function SetCurrentPersonPerspective();// 0x1818570
	function SetCurBonfire();// 0x18184f8
	function SetComponentsActive();// 0x181842c
	function SetCheatSpeedModifier();// 0x18183ac
	function SetChangeWearingPromptEnable();// 0x181832c
	function SetAntidoteMaxTime();// 0x18182b4
	function SetAntidoteExeTime();// 0x181823c
	function SetAnimParamIsRescueing();// 0x18181bc
	function SetAnimParamIsNearDeathStatus();// 0x181813c
	function SetAnimParamCallingForRevival();// 0x18180bc
	function SetAnimMontagePlayRate();// 0x1818000
	function SetAmbientRTPC();// 0x1817e64
	function ServerUpdateShovelingHoldState();// 0x1817d9c
	function ServerTriggerJump();// 0x1817d40
	function ServerSetPoisonSmogStage();// 0x1817cc8
	function ServerSetPeekState();// 0x1817ba4
	function ServerSetPeekCollision();// 0x1817adc
	function ServerSetPawnStateDisabled();// 0x18179cc
	function ServerSetMovementState();// 0x1817920
	function ServerSendToLobbyServerUseItem();// 0x1817864
	function ServerResponseInvite();// 0x1817680
	function ServerRequestPaintDecal();// 0x18174cc
	function ServerNightVisionUse();// 0x1817404
	function ServerInviteTeammate();// 0x18172c8
	function ServerHandleBulletHitData();// 0x1817140
	function ServerFollowTeammate();// 0x1817048
	function ServerEndZombieModePropSkill();// 0x16ad21c
	function ServerChangeThrowGrenadeMode();// 0x1816f94
	function ServerCancelFollow();// 0x1816f38
	function SendServerMoveToClientUnreliaby();// 0x1816e00
	function SendClientMoveToServerUnreliaby();// 0x1816c88
	function SendClientMoveToServerReliaby();// 0x1816b10
	function SearchTombBoxes();// 0x18169f4
	function SearchPickUpWrapperActors();// 0x18168f0
	function Scoping();// 0x1816878
	function ScopeOut();// 0x1816800
	function ScopeInterrupt();// 0x1816788
	function ScopeIn();// 0x1816710
	function SaveMeshUpdateFlag();// 0x18166f0
	function RspSetInteractionEmoteSender();// 0x181663c
	function RspPlayInteractionEmote();// 0x1816588
	function RspClientSureLeaveVehicle();// 0x1816500
	function RPC_Server_UseZombieModeSkill();// 0x18164a4
	function RPC_Server_TriggerEntryEvent();// 0x18163f0
	function RPC_Server_SwitchWeapon();// 0x1816224
	function RPC_Server_SwitchSkillProp();// 0x1816170
	function RPC_Server_SwapMainWeapon();// 0x1816114
	function RPC_Server_SpawnAndSwitchToGrenade();// 0x1816060
	function RPC_Server_SetHandFoldRatio();// 0x1815fac
	function RPC_Server_SetCurScopeFov();// 0x1815ef8
	function RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x1815e9c
	function RPC_NetMulticast_HandlePlayerPickUpActor();// 0x1815de8
	function RPC_CollideByTeamMate();// 0x1815d34
	function RPC_Client_SwitchWeapon();// 0x1815b68
	function RPC_Client_SwapMainWeapon();// 0x1815b0c
	function RPC_Client_SpawnAndSwitchToGrenade();// 0x1815a58
	function RPC_Client_ShowZombieModeSkillCD();// 0x1815914
	function RPC_Client_ShootVertifyRes();// 0x18156a0
	function RPC_Client_SetReloadCurWeapon();// 0x18155e8
	function RPC_Client_ReportPlayerKillFlow();// 0x1815534
	function RPC_Client_OnSkillPropCountChanged();// 0x1815480
	function RPC_Client_OnNearDeathRecordingNotify();// 0x1815330
	function RPC_Client_OnDeathStopRecordingNotify();// 0x1815184
	function RPC_Client_OnDamageNotifyRecord();// 0x1814edc
	function RPC_Client_MarkPlayersOnUI();// 0x1814de8
	function RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();// 0x1814d8c
	function RPC_Client_ChangeRectiftAvatar();// 0x1814c34
	function RestoreMeshUpdateFlag();// 0x1814c14
	function ResponceInvite();// 0x1814a80
	function ResetValueLimitForHealthPredict();// 0x1814a6c
	function ResetCharacterEnergy();// 0x1814a58
	function ResetCamera();// 0x1814a44
	function RequestUserCancleRescue();// 0x18149e8
	function RequestServerSureLeaveVehicle();// 0x181498c
	function RequestPutOnHalloweenVampireCloth();// 0x181487c
	function RequestPaintDecal();// 0x18147fc
	function ReqStartPlayEmoteWithRand();// 0x1814700
	function ReqStartPlayEmote();// 0x181464c
	function ReqStartChangeWearing();// 0x18145f0
	function ReqSetIsWingUpControl();// 0x1814528
	function ReqSetInteractionEmoteReceiver();// 0x1814474
	function ReqPlayInteractionEmote();// 0x1814330
	function ReqInteruptPlayEmote();// 0x181427c
	function ReqInteruptChangeWearing();// 0x1814220
	function ReqEmotePlayFinished();// 0x181416c
	function ReqChangeWearingFinished();// 0x18140b8
	function ReqAcceptInteractionEmote();// 0x181405c
	function ReportAntiCheatInfo();// 0x16ad21c
	function RemoveClientLeaveStateCheck();// 0x1813fe4
	function ReloadWeaponFilter();// 0x1813fb4
	function ReloadCurrentWeapon();// 0x1813f8c
	function RegisterPlayerPickUpList();// 0x1813f78
	function RefreshWeaponOwnerCollision();// 0x1813ef8
	function RefreshPersonPerspective();// 0x1813ee4
	function RefreshPawnVaultTypeServer();// 0x1813e88
	function RefreshPawnVaultTypeAll();// 0x1813e00
	function RefreshMoveAttrModifier();// 0x1813dec
	function RefreshAvatar();// 0x1813ce0
	function RecordFinalParachuteLeader();// 0x1813ccc
	function PrintAIPolicyDecisionData();// 0x1813cb8
	function PostGetPlayerAnimation();// 0x206ccd8
	function PlaySwitchSightSound();// 0x1813ca4
	function PlaySwitchFireModeSound();// 0x1813c90
	function PlaySpecialAmbientSound();// 0x1813c18
	function PlaySlotAnim();// 0x1813ac0
	function PlaySelfThrowAwayWeaponSound();// 0x1813aac
	function PlayPullBoltSound();// 0x1813a98
	function PlayOperateItemSound();// 0x1813828
	function PlayMountAccessoriesSound();// 0x1813814
	function PlayMagOUTSound();// 0x1813800
	function PlayMagINSound();// 0x18137ec
	function PlayLocalShellDropFX();// 0x18137d8
	function PlayLoadBulletSound();// 0x18137c4
	function PlayFootstepSound();// 0x181374c
	function PlayerConfirmToRescue();// 0x1813724
	function PlayChangeMagazineSound();// 0x1813710
	function PlayAmbientSound();// 0x18136fc
	function PickUpWrapperActor();// 0x1813520
	function PickUpActor();// 0x1813420
	function PawnVaultStopCPP();// 0x1813404
	function PawnVaultStopBluePrint();// 0x18133e8
	function PawnVaultServerStopCheckCPP();// 0x181338c
	function PawnVaultServerStopCheckBluePrint();// 0x1813370
	function PawnVaultServerCPP();// 0x1812ee8
	function PawnVaultServerBluePrint();// 0x1812b0c
	function PawnVaultAllCPP();// 0x1812798
	function PawnVaultAllBluePrint();// 0x1812408
	function PawnLeaveState();// 0x1812388
	function PawnHasState();// 0x1812300
	function PawnEnterState();// 0x1812278
	function PawnAllowState();// 0x18121a4
	function OnWeaponEquipmentUpdate();// 0x1812188
	function OnUnEquipWeapon();// 0x206ccd8
	function OnUIZombieModeSkillCDShowDelegate();// 0x1812088
	function OnStateLeave();// 0x1812008
	function OnStateEnter();// 0x1811f88
	function OnShowName();// 0x206ccd8
	function OnServerCheckBulletSoundUAV();// 0x1811f6c
	function OnScopeNotHandFold();// 0x1811f58
	function OnScopeHandFold();// 0x1811f44
	function OnRep_ZombieModeSkillPropLevel();// 0x1811f30
	function OnRep_ZombieModeSkillPropChanged();// 0x1811f1c
	function OnRep_WaterObj();// 0x1811f08
	function OnRep_VehicleSeatIdx();// 0x1811ef4
	function OnRep_UnmannedVehicleSyncData();// 0x1811e70
	function OnRep_ThrowGrenadeMode();// 0x1811e5c
	function OnRep_Temperature();// 0x1811ddc
	function OnRep_StatusChanged();// 0x1811d5c
	function OnRep_ShowRevivalPointIcon();// 0x1811d48
	function OnRep_ScopeFov();// 0x1811d34
	function OnRep_ResetDataOnRespawn();// 0x1811d20
	function OnRep_ReplicatedParachuteState();// 0x16ad21c
	function OnRep_ReplicatedMoveState();// 0x1811d0c
	function OnRep_ReplicatedIsStartParachute();// 0x1811cf8
	function OnRep_RemainUseSupplySpotTimes();// 0x1811ce4
	function OnRep_RemainUseEnhancerSpotTimes();// 0x1811cd0
	function OnRep_PoseStateNotify();// 0x1811c58
	function OnRep_PoisonFogStageChange();// 0x1811c44
	function OnRep_PlayerKey();// 0x1811c28
	function OnRep_PeekHasCollision();// 0x1811c14
	function OnRep_MoneyNotify();// 0x1811c00
	function OnRep_KillTipsNotify();// 0x16ad21c
	function OnRep_IsWingUpControl();// 0x1811bec
	function OnRep_IsRescueingOtherStatusChange();// 0x1811bd8
	function OnRep_IsInvincible();// 0x1811bbc
	function OnRep_IsFPPChanged();// 0x1811ba8
	function OnRep_IsBeingRescuedStatusChange();// 0x1811b94
	function OnRep_HealthPredict();// 0x1811b80
	function OnRep_Health();// 0x1811b00
	function OnRep_HandFolderRatio();// 0x1811aec
	function OnRep_FollowState();// 0x1811ad8
	function OnRep_EnergyChange();// 0x1811ac4
	function OnRep_DisabledPawnStates();// 0x1811aa8
	function OnRep_CurrentVehicle();// 0x1811a30
	function OnRep_CurrentStates();// 0x18119ac
	function OnRep_CurBonFire();// 0x1811998
	function OnRep_CharacterHideInGame();// 0x1811984
	function OnRep_CharacterFallingVelocityZFactor();// 0x1811970
	function OnRep_ChangeHalloweenVampireCloth();// 0x181195c
	function OnRep_BreathAmmountChange();// 0x1811948
	function OnRep_bNightVisionUseTest();// 0x1811934
	function OnRep_bNightVisionUse();// 0x1811920
	function OnRep_bIsCallingForRevival();// 0x181190c
	function OnRep_AntidoteMaxTimeSync();// 0x16ad21c
	function OnRep_AntidoteExeTimeSync();// 0x16ad21c
	function OnRep_AnchorPlat();// 0x18118f8
	function OnRep_AKEventNotify();// 0x18118e4
	function OnPoseStateChange();// 0x206ccd8
	function OnPlayEmote();// 0x1811864
	function OnOpenDoor();// 0x18117a0
	function OnNotifyHurt();// 0x206ccd8
	function OnLoadEmoteAssetEnd();// 0x18116dc
	function OnLoadEmoteAssetBegin();// 0x1811618
	function OnLeaveStateInChangeWearing();// 0x18115a0
	function OnInterruptCurrentEmote();// 0x181158c
	function OnInterruptChangeWearing();// 0x1811578
	function OnHealthChangeFromRPC();// 0x18114bc
	function OnFollowStateChange();// 0x18114a8
	function OnEquipWeapon();// 0x206ccd8
	function OnEnterStateInChangeWearing();// 0x1811430
	function OnEndCurrentEmote();// 0x1811374
	function OnEndChangeWearing();// 0x18112fc
	function OnEmoteStop();// 0x181127c
	function OnDetectPaintDecalTarget();// 0x206ccd8
	function OnCurEquipedShootWeaponChangeState();// 0x18111c0
	function OnClientRemoveBuff();// 0x18110c0
	function OnClientAddBuff();// 0x1810fc0
	function OnChangeWearingAnimFinishedEvent();// 0x1810f48
	function OnChangeWearing();// 0x1810ec8
	function OnBPMoneyChange();// 0x206ccd8
	function OnBPIsInvincibleChange();// 0x206ccd8
	function OnBPHealthChange();// 0x206ccd8
	function OnBeforeGetUp();// 0x206ccd8
	function OnAsyncLoadEmoteAnim();// 0x1810cc0
	function OnAsyncLoadChangeWearingAnim();// 0x1810cac
	function OnActorHitHandle();// 0x1810b44
	function NM_SetPeekState();// 0x1810a6c
	function MulticastStartPlayEmoteWithRand();// 0x1810970
	function MulticastStartPlayEmote();// 0x18108bc
	function MulticastStartChangeWearing();// 0x1810860
	function MulticastInteruptPlayEmoteOnServer();// 0x18107ac
	function MulticastInteruptPlayEmote();// 0x18106f8
	function MulticastInteruptChangeWearingOnServer();// 0x181069c
	function MulticastInteruptChangeWearing();// 0x1810640
	function MeleeServer();// 0x18105e4
	function MeleeReleased();// 0x18105d0
	function MeleeLocal();// 0x206ccd8
	function MeleeBroadcastOtherClients();// 0x1810574
	function Melee();// 0x18104f4
	function LogWeaponsDataInWeaponManagerAndBackpack();// 0x18104e0
	function LocalUnEquipWeapon();// 0x1810468
	function LocalSwitchPersonPerspective();// 0x1810340
	function LocalStartPlayEmote();// 0x18102c0
	function LocalStartChangeWearing();// 0x1810298
	function LocalInteruptPlayEmote();// 0x1810218
	function LocalInteruptChangeWearing();// 0x18101f0
	function LocalEquipWeapon();// 0x1810134
	function LevaveFire();// 0x18100b4
	function LeaveState();// 0x1810034
	function LeaveServerState();// 0x180ff80
	function LeaveBattleState();// 0x180ff6c
	function IsWeaponOwnerLocallyControlled();// 0x180ff3c
	function IsValidPaintDecalTarget_Simple();// 0x180ff1c
	function IsValidPaintDecalTarget();// 0x180fde4
	function IsUsingGrenade();// 0x180fdbc
	function IsSameTeamWithPlayerState();// 0x180fd3c
	function IsSameTeamWithLocal();// 0x180fd14
	function IsSameTeam();// 0x180fc8c
	function IsReplayViewTarget();// 0x180fc64
	function IsProneMove();// 0x180fc3c
	function IsOnVehicleNotUAV();// 0x180fbf8
	function IsOnVehicle();// 0x180fbd0
	function IsNowUpWater();// 0x180fba8
	function IsNearDeath();// 0x180fb80
	function IsLocalViewed();// 0x180fb50
	function IsLocalControlorView();// 0x180fb28
	function IsInFlyingTeam();// 0x180fb00
	function IsInEditor();// 0x180fad8
	function IsHealthyAlive();// 0x180fab0
	function IsHandleInFold();// 0x180fa88
	function IsGunADS();// 0x180fa58
	function IsFirstPerson();// 0x180fa30
	function IsExitingParachute();// 0x180fa08
	function IsEnableBulletFlySound();// 0x180f9d8
	function IsDetectingPaintDecalTarget();// 0x180f9b8
	function IsDefaultCharType();// 0x180f988
	function IsClient_WeaponOwner();// 0x180f958
	function IsCharacterSprinting();// 0x180f930
	function IsChangeWearingState();// 0x180f908
	function IsCanDriveSnowBoard();// 0x180f8e0
	function IsBattleState();// 0x180f8b8
	function IsAngledSight();// 0x180f890
	function IsAllowScopeIn();// 0x180f868
	function IsAlive();// 0x180f838
	function InviteTeammate();// 0x180f738
	function InsertDelayStateRelation();// 0x180f67c
	function InitCharacterSkillList();// 0x180f668
	function InClientSetAntidoteTime();// 0x180f5ac
	function HidePlayerMagOnGunReload();// 0x180f598
	function HideNightVisionFrame();// 0x180f57c
	function HasState();// 0x180f4f4
	function HandleWeaponShootLost();// 0x180f4d8
	function HandleWeaponOnShoot();// 0x180f4c4
	function HandleStartFireDelegate();// 0x180f444
	function HandleShootDelegate();// 0x180f3c4
	function HandlePlayOperateItemSoundOnServer();// 0x180f308
	function HandlePlayerWeaponChangeState();// 0x180f288
	function HandlePlayerPoseChanged();// 0x180f1cc
	function HandlePlayerPickUpActor();// 0x180f110
	function HandleOpenPickUpBoxAction();// 0x180f0fc
	function HandleOnCharAnimLoadingFinished();// 0x180f0e0
	function HandleMoveAntiShootVerifyMiss();// 0x180f0c4
	function HandleConsumeItemSkillBreak();// 0x180f0b0
	function HandleBulletHitEvent();// 0x180efec
	function HandleAutoSwitchWeaponDelay();// 0x180efd8
	function GrenadeBackToWeaponServerCall();// 0x180ef7c
	function GMTestZengzuo();// 0x180ef68
	function GMShowName();// 0x16ad21c
	function GetWeaponUserConst();// 0x180ef38
	function GetWeaponOwnerPawnHealth();// 0x180ef08
	function GetWeaponManager();// 0x180eed8
	function GetViewRotation();// 0x180ee88
	function GetVaultComponent();// 0x180ee60
	function GetValueLimitForHealthPredict();// 0x180ee38
	function GetUnmannedVehicle();// 0x180ee18
	function GetUIHelmetPosition();// 0x180edc8
	function GetUAVState();// 0x180eda8
	function GetThrowGrenadeMode();// 0x180ed88
	function GetTeamMateIndex();// 0x180ed08
	function GetSkillIdListByCharaSkillID();// 0x180eb28
	function GetShootWeaponNameByWeapon();// 0x206ccd8
	function GetRole();// 0x180eaf8
	function GetRelevantVehicleInReady();// 0x180ead8
	function GetRedClothIDByEmote();// 0x180ea50
	function GetRandomPutDownLocation();// 0x180e9c0
	function GetProneShapeComponent();// 0x180e9a4
	function GetPlayerWeaponFireMode();// 0x17923e8
	function GetPlayerWeaponEquipSlot();// 0x180e97c
	function GetPlayerVehAnimParam();// 0x180e8b8
	function GetPlayerVehAnimation();// 0x180e884
	function GetPlayerTeamIndex();// 0x180e85c
	function GetPlayerStateSafety();// 0x180e834
	function GetPlayerState();// 0x180e804
	function GetPlayerNameSafety();// 0x180e73c
	function GetPlayerControllerSafety();// 0x180e70c
	function GetPlayerControllerInReplay();// 0x180e6e4
	function GetPlayerAnimParam();// 0x180e5b4
	function GetPlayerAnimationByEventType();// 0x180e52c
	function GetPlayerAnimation();// 0x180e464
	function GetNearTeamPlayerNum();// 0x180e43c
	function GetMoveAntiCheatComponentInterface();// 0x180e40c
	function GetLatestInviter();// 0x180e34c
	function GetLastInviterPlayerState();// 0x180e324
	function GetLagCompensationComponent();// 0x180e2f4
	function GetKdValue();// 0x180e2cc
	function GetIsPlayingEmote();// 0x180e2ac
	function GetIsFPP();// 0x180e27c
	function GetIsChangeWearing();// 0x180e25c
	function GetHitBodyType();// 0x180e0e8
	function GetHeadLocation();// 0x180e050
	function GetHandFolderRatio();// 0x180e020
	function GetGrenadeNameByGrenadeType();// 0x206ccd8
	function GetFPPComp();// 0x180dff8
	function GetFollowerLocOffset();// 0x180df68
	function GetFollowerLoc();// 0x180ded8
	function GetEmoteHandle();// 0x206ccd8
	function GetEmote();// 0x206ccd8
	function GetCurrentWeapon();// 0x180deb0
	function GetCurrentVehicleAnimVehicleType();// 0x180de88
	function GetCurrentVehicle();// 0x180de58
	function GetCurrentStatesInterface();// 0x180de28
	function GetCurrentShootWeapon();// 0x180de00
	function GetCurrentShieldWeapon();// 0x180ddd8
	function GetCorpName();// 0x180dd18
	function GetControllerSafety();// 0x180dce8
	function GetCharParachuteAnimListComponent();// 0x180dcc0
	function GetCharacterXYPlaneVelocity();// 0x180dc98
	function GetCharacterSubType();// 0x180dc70
	function GetCharacterMainType();// 0x180dc48
	function GetCharacterEnergy();// 0x180da5c
	function GetCharacterAnimComponent();// 0x180da2c
	function GetCapsuleComponentInterface();// 0x180d9fc
	function GetCachedControlRotation();// 0x180d9b4
	function GetBonfireLinkComp();// 0x180d98c
	function getAvatarComponent2();// 0x180d964
	function GetAnimMontagePlayRate();// 0x180d8e4
	function GetAdjustDurabilityReduce();// 0x180d820
	function GetActiveSpringArm();// 0x180d7f0
	function GeneratePlayerBackpackWrappersToGround();// 0x180d7d4
	function FpsPawnVaultToServer();// 0x180d508
	function FpsPawnVaultToAll();// 0x180d2c4
	function ForceWeaponFireInMuzzleDirection();// 0x180d244
	function ForceSwitchWeaponBySlotOnServer();// 0x180d178
	function ForcePlayerUpdateAnimation();// 0x180d164
	function ForceDestroyWeaponInventoryAndClearData();// 0x180d150
	function ForceCorrectClient();// 0x180d060
	function FollowTeammate();// 0x180cf08
	function FindBuffRelatedPawnState();// 0x180ce88
	function FillPlayerAnimRate();// 0x180cd10
	function ExecFollowTeammate();// 0x180cbb8
	function EquipZoomScope();// 0x180cafc
	function EquipWeaponFinish();// 0x16ad21c
	function EquipWeapon();// 0x180ca38
	function EnterState();// 0x180c9b0
	function EnterServerState();// 0x180c8fc
	function EnterFire();// 0x180c8e0
	function EnterBattleState();// 0x180c8cc
	function EmoteAnimFinishedSuccessfully();// 0x180c8a4
	function DoDetectPaintDecalTarget();// 0x180c824
	function DisappearOnDeath();// 0x180c810
	function DettachWeapon();// 0x16ad21c
	function DestroyWeaponOnServerByPropSlot();// 0x180c744
	function DestroyWeaponOnServer();// 0x180c670
	function DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();// 0x180c65c
	function DelayMoveEnd();// 0x180c648
	function DelayMove();// 0x180c5d0
	function DelayHidden();// 0x180c5b4
	function DelayCustomDepth();// 0x180c53c
	function CreateCapsuleComponentForDeltaRotation();// 0x180c4b4
	function ConvertWeaponSlotToCharacterAnimType();// 0x180c434
	function ConvertWeaponFireModeToWeaponAnimType();// 0x180c3b4
	function ConvertCharacterPoseStateToPoseType();// 0x180c334
	function ClientSyncServerTagsChange();// 0x180c1b8
	function ClientSomeOneResponseMe();// 0x180c06c
	function ClientSomeOneInviteMe();// 0x180bf64
	function ClientShowAutoGroupParachuteTeamTips();// 0x180bedc
	function ClientSetLeaveVehicleLocation();// 0x180be64
	function ClientSetAntidoteTime();// 0x180bda0
	function ClientResponseFeedback();// 0x180bd20
	function ClientPlayVehicleOverlapCameraShake();// 0x180bcc4
	function ClientOnPossessBy();// 0x180bc10
	function ClientFeedbackZombiePointDamage();// 0x180ba40
	function ClientFeedbackZombieMeleeDamage();// 0x180b85c
	function ClientFeedbackVehiclePointDamage();// 0x180b68c
	function ClientChangeCharacterMesh();// 0x180b60c
	function ClientBulletLineTrace();// 0x180b4a8
	function ClearOnDeath();// 0x180b3ec
	function ClearHPUI();// 0x180b3d0
	function ClearClientJump();// 0x180b3bc
	function CheckWeaponIsCurUsingWeapon();// 0x180b334
	function CheckPlayerNeedUpdateAnimation();// 0x180b29c
	function CheckNeedReload();// 0x180b1d8
	function CheckIsWearingThisCloth();// 0x180b158
	function CheckCharacterDelayHide();// 0x180b144
	function CheckCanAutoUseWeapon();// 0x180b0bc
	function CheckBuffTarget();// 0x180b034
	function CheckBaseIsMoving();// 0x180b00c
	function CheckBaseIsMoveable();// 0x180afe4
	function CharacterShowWeaponDelay();// 0x180afd0
	function CharacterPoseStateToPoseType();// 0x180af58
	function CharacterMovementUpdatedCallback();// 0x180ae4c
	function ChangeWearingAnimFinishedSuccessfully();// 0x180ae24
	function ChangeVehWeaponCameraData();// 0x180ad54
	function ChangeRectiftAvatar();// 0x180ac4c
	function CanPaintDecal();// 0x180abcc
	function CanEnterWaterArea();// 0x180aa6c
	function CanEnterState();// 0x180a9ec
	function CanChangeThrowMode();// 0x180a9c4
	function CancelFollow();// 0x180a9b0
	function CalculateTakeItemFlow();// 0x180a8f4
	function CalculatePickUpItemFlow();// 0x180a760
	function CalculateBornLandThrowGrenade();// 0x180a6e8
	function CalculateBornLandGrenadeBattle();// 0x180a624
	function BulletLineTrace();// 0x180a4d8
	function BulletChange();// 0x180a47c
	function BroadcastOtherClientsDie();// 0x180a218
	function BroadcastFatalDamageInfoWrapper();// 0x1809f64
	function BroadcastFatalDamageInfo();// 0x1809db4
	function BroadcastClientsSimulateVehicleDamageDie();// 0x1809ae8
	function BroadcastClientsSimulateVehicleDamage();// 0x180986c
	function BroadcastClientsSimulateRadialDamageDie();// 0x1809534
	function BroadcastClientsSimulateRadialDamage();// 0x180924c
	function BroadcastClientsSimulatePoisonDamageDie();// 0x1808f80
	function BroadcastClientsSimulatePoisonDamage();// 0x1808d04
	function BroadcastClientsSimulatePointDamageDie();// 0x1808a38
	function BroadcastClientsSimulatePointDamage();// 0x18087bc
	function BroadcastClientsSimulateMeleeDamageDie();// 0x18084dc
	function BroadcastClientsSimulateMeleeDamage();// 0x180824c
	function BroadcastClientsSimulateFallingDamageDie();// 0x1807f80
	function BroadcastClientsSimulateFallingDamage();// 0x1807d04
	function BroadcastClientsSimulateDrowningDamageDie();// 0x1807a38
	function BroadcastClientsSimulateDrowningDamage();// 0x18077bc
	function BroadcastClientsSimulateBurningDamageDie();// 0x18074e8
	function BroadcastClientsSimulateBurningDamage();// 0x1807264
	function BroadcastClientsSimulateAirAttackDamageDie();// 0x1806f2c
	function BroadcastClientsSimulateAirAttackDamage();// 0x1806c44
	function BPTakeDamage();// 0x1806ac8
	function BPResetCharacter();// 0x206ccd8
	function BPReceiveRadialDamage();// 0x206ccd8
	function BPReceivePointDamage();// 0x206ccd8
	function BPReceiveMeleeDamage();// 0x206ccd8
	function BPReceiveDamage();// 0x206ccd8
	function BPNotifyStartDying();// 0x206ccd8
	function BPNotifyDeathEnd();// 0x206ccd8
	function BPDie();// 0x1806954
	function BP_SetInteractionEmoteSender();// 0x206ccd8
	function AutoScopeWhenPeek();// 0x1806940
	function AttachWeapon();// 0x16ad21c
	function AsyncAnimOpenDoorCallback();// 0x18068c8
	function AllowState();// 0x18067f4
	function AIStartFireOnServer();// 0x18066a0
	function AddOneDamageCauserRecord();// 0x18064e0
	function AddMoveOffSet();// 0x18063e0
	function AddDamageRecord();// 0x180622c
	function AddClientLeaveStateCheck();// 0x1806170

--------------------------------
Class: STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	delegate CharacterAnimEventDelegate;//[Offset: 0x700 , Size: 12]
	uint64 CurrentStates;//[Offset: 0x770 , Size: 8]
	float Health;//[Offset: 0x778 , Size: 4]
	float HealthMax;//[Offset: 0x77c , Size: 4]
	TypeIds(IntProperty)[] TypeIds;//[Offset: 0x780 , Size: 12]
	float SwimSpeedDynamicScale;//[Offset: 0x78c , Size: 4]
	bool bDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x790 , Size: 1]
	float threatenValue;//[Offset: 0x794 , Size: 4]
	float HurtParticleOffset;//[Offset: 0x798 , Size: 4]
	delegate DoOnNextFrameEnsureSpawnActorTriggerSuccess;//[Offset: 0x7a4 , Size: 12]
	DisabledPawnStates(StructProperty)[] DisabledPawnStates;//[Offset: 0x7b0 , Size: 12]
	bool EnableStatesInterruptRPC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc , Size: 1]
	FString CharacterStateType;//[Offset: 0x7c4 , Size: 12]
	delegate OnHandleSkillStartDelegate;//[Offset: 0x7d0 , Size: 12]
	delegate OnHandleSkillEndDelegate;//[Offset: 0x7dc , Size: 12]
	STBaseBuffSystemComponent* BuffSystemComponent;//[Offset: 0x800 , Size: 4]
	STBuffSystemComponent* BuffSystem;//[Offset: 0x804 , Size: 4]
	UTSkillManagerComponent* SkillManager;//[Offset: 0x808 , Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0x80c , Size: 4]
	ActorAttributeComponent* ActorAttribute;//[Offset: 0x810 , Size: 4]
	delegate StateEnterHandler;//[Offset: 0x814 , Size: 12]
	delegate StateLeaveHandler;//[Offset: 0x820 , Size: 12]
	delegate StateInterruptedHandlerBP;//[Offset: 0x840 , Size: 12]
	DamageableGameObjectTypeList(EnumProperty)[] DamageableGameObjectTypeList;//[Offset: 0x84c , Size: 12]
	PartHitComponent* PartHitComponent;//[Offset: 0x858 , Size: 4]
	bool bIsGunADS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85d , Size: 1]
	byte TeamNum;//[Offset: 0x868 , Size: 1]
	TickControlComponent* TickControlComp;//[Offset: 0x86c , Size: 4]
	float SpeedScale;//[Offset: 0x878 , Size: 4]
	float SpeedValue;//[Offset: 0x87c , Size: 4]
	float Temperature;//[Offset: 0x880 , Size: 4]
	float TemperatureMax;//[Offset: 0x884 , Size: 4]
	float TemperatureMin;//[Offset: 0x888 , Size: 4]
	function TriggerSkillEvent();// 0x18389f4
	function TriggerSkillCustomEvent();// 0x1838928
	function TriggerEntryEvent_Implementation();// 0x181a440
	function TriggerCustomEvent_Implementation();// 0x18388a8
	function SetBuffExpiry();// 0x18387d4
	function S2C_InterruptState();// 0x1838710
	function RemoveBuffBySkill();// 0x1838600
	function RemoveBuffByID();// 0x18384a8
	function RemoveBuff();// 0x1838384
	function RemoveBaseBuffSystemComponent();// 0x1838370
	function PlayAnimMontageWithStartPos();// 0x1838210
	function OnRep_Temperature();// 0x1811ddc
	function OnRep_HealthMax();// 0x18381f4
	function OnRep_Health();// 0x1811b00
	function OnRep_DisabledPawnStates();// 0x1811aa8
	function OnRep_CurrentStates();// 0x18119ac
	function OnLeaveStateForBp();// 0x206ccd8
	function OnHandleSkillStart__DelegateSignature();// 0x206ccd8
	function OnHandleSkillEnd__DelegateSignature();// 0x206ccd8
	function OnEnterStateForBp();// 0x206ccd8
	function LeaveState();// 0x1810034
	function IsPawnStateDisabled();// 0x1838174
	function IsCanDamageTeammate();// 0x18380d0
	function IsCanDamageSelf();// 0x183802c
	function IsAlive();// 0x180f838
	function HasState();// 0x180f4f4
	function HasBuffID();// 0x1837fa4
	function HasBuff();// 0x1837f1c
	function GetScaledSpeed();// 0x1837eec
	function GetPlayerNameSafety();// 0x180e73c
	function GetPlayerControllerSafety();// 0x180e70c
	function GetObserverType();// 0x1837ebc
	function GetDamageableGameObjectType();// 0x1837df4
	function GetCurSkill();// 0x1837dc4
	function GetCurrentVehicle();// 0x180de58
	function GetBuffExpiry();// 0x1837d3c
	function GetBuffDuration();// 0x1837c70
	function ExtractDamageParams();// 0x1837b30
	function EnterState();// 0x180c9b0
	function DelayHidden();// 0x180c5b4
	function Client_ShowDebugString();// 0x183795c
	function Client_ShowDebugSphere();// 0x1837810
	function Client_ShowDebugLine();// 0x18376c4
	function Client_ShowDebugCone();// 0x18374e0
	function Client_ShowDebugCapsule();// 0x18372b4
	function Client_ShowDebugBox();// 0x1837110
	function ClearBuff();// 0x16e3afc
	function BPReceiveDamage();// 0x206ccd8
	function AllowState();// 0x18067f4
	function AddBuffBySkill();// 0x1837000
	function AddBuffByID();// 0x1836ea8
	function AddBuff();// 0x1836d04

--------------------------------
Class: UAECharacter.Character.Pawn.Actor.Object
	int iRegionCharacter;//[Offset: 0x5d4 , Size: 4]
	FName PlayerType;//[Offset: 0x5e0 , Size: 8]
	FString PlayerName;//[Offset: 0x5e8 , Size: 12]
	FString Nation;//[Offset: 0x5f4 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x600 , Size: 4]
	FString PlayerUID;//[Offset: 0x604 , Size: 12]
	int TeamID;//[Offset: 0x610 , Size: 4]
	bool bTeamLeader;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x614 , Size: 1]
	int CampID;//[Offset: 0x618 , Size: 4]
	enum DefaultCharacterGender;//[Offset: 0x61c , Size: 1]
	InitialItemList(StructProperty)[] InitialItemList;//[Offset: 0x620 , Size: 12]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x62c , Size: 36]
	GameModePlayerPetInfo PetInfo;//[Offset: 0x650 , Size: 24]
	int planeAvatarId;//[Offset: 0x668 , Size: 4]
	int DyeDebugFlag;//[Offset: 0x66c , Size: 4]
	InitialTaskDataList(StructProperty)[] InitialTaskDataList;//[Offset: 0x670 , Size: 12]
	bool bIsAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67c , Size: 1]
	bool bIsAIWithPet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x67d , Size: 1]
	bool UseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x690 , Size: 1]
	bool DefaultIsUseWholeBodyModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x691 , Size: 1]
	function OnRep_UseWholeModel();// 0x1c83384
	function OnRep_TeamID();// 0x1c83370
	function OnRep_PlayerUID();// 0x1c8335c
	function OnRep_PlayerKey();// 0x1811c28
	function OnRep_CampID();// 0x1c83348
	function IsDefaultCharType();// 0x180f988
	function GetTeamId();// 0x1c8332c
	function GetPlayerKey();// 0x1c8326c
	function GetNonSimulatedComponents_OnFighting();// 0x1c831a4
	function GetNonSimulatedComponents_NonTeammates();// 0x1c830dc
	function GetNonSimulatedComponents();// 0x1c83014
	function GetNonDedicatedComponents();// 0x1c82f4c
	function GetCampId();// 0x1c82f24
	function ClientAcknowledgeReconnection();// 0x1c82ea4

--------------------------------
Class: AkAudioEvent.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c , Size: 4]
	float MaxAttenuationRadius;//[Offset: 0x20 , Size: 4]
	bool IsInfinite;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float MinimumDuration;//[Offset: 0x28 , Size: 4]
	float MaximumDuration;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: AkAudioBank.Object
	bool AutoLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]

--------------------------------
Class: STBaseBuffSystemComponent.ActorComponent.Object
	delegate OnBuffAttached;//[Offset: 0xcc , Size: 12]
	delegate OnBuffDetached;//[Offset: 0xd8 , Size: 12]
	BuffSyncList(StructProperty)[] BuffSyncList;//[Offset: 0x124 , Size: 12]
	FString ServerBuffString;//[Offset: 0x130 , Size: 12]
	float BuffSyncRemainingPeriod;//[Offset: 0x13c , Size: 4]
	AllBuffs(StructProperty)[] AllBuffs;//[Offset: 0x140 , Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	function SetBuffExpiry();// 0x1992ff4
	function ResetForDeath();// 0x1992fe0
	function RepBuffSyncList();// 0x1992fcc
	function RemoveBuffWithCauser();// 0x1992eb0
	function RemoveBuffByID();// 0x1992d54
	function RemoveBuff();// 0x1992c38
	function RefreshAllBuffs();// 0x1992c1c
	function IsBufferMutexed();// 0x1992b9c
	function HasBuffID();// 0x1992b1c
	function HasBuff();// 0x1992a9c
	function GetPawnOwner();// 0x1992a74
	function GetBuffName();// 0x19929ec
	function GetBuffID();// 0x199296c
	function GetBuffExpiry();// 0x19928d8
	function GetBuffByName();// 0x1992858
	function GetActorOwner();// 0x1992830
	function ClientSimulateRemoveBuff();// 0x19925d0
	function ClientSimulateAddBuff();// 0x19926e4
	function ClientMulticastSimulateRemoveBuff();// 0x19925d0
	function ClientMulticastSimulateAddBuff();// 0x1992484
	function ClientMulticastSetBuffExpiry();// 0x19923c0
	function ClearBuff();// 0x19922f0
	function CheckBuffStatus();// 0x199221c
	function BuffDetached__DelegateSignature();// 0x206ccd8
	function BuffAttached__DelegateSignature();// 0x206ccd8
	function AddBuffLayer();// 0x1992158
	function AddBuffExpiry();// 0x199208c
	function AddBuffByID();// 0x1991f34
	function AddBuff();// 0x1991d98

--------------------------------
Class: STBuffSystemComponent.ActorComponent.Object
	FString BuffTableName;//[Offset: 0xbc , Size: 12]
	FString OneceBuffTableName;//[Offset: 0xc8 , Size: 12]
	FString ConditionBuffTableName;//[Offset: 0xd4 , Size: 12]
	float RPCSyncInterval;//[Offset: 0xe0 , Size: 4]
	bool IsPreloadUClass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]
	delegate OnClientAddBuffEvent;//[Offset: 0xe8 , Size: 12]
	delegate OnClientRemoveBuffEvent;//[Offset: 0xf4 , Size: 12]
	delegate OnClientUpdateBuffEvent;//[Offset: 0x100 , Size: 12]
	Buffs(ObjectProperty)[] Buffs;//[Offset: 0x10c , Size: 12]
	int SyncBriefNum;//[Offset: 0x118 , Size: 4]
	ClientSyncBrief SyncBriefs;//[Offset: 0x11c , Size: 28]
	ClientSyncBrief SyncRefBriefs;//[Offset: 0x1c4 , Size: 28]
	<MaxPowerBuffs_Key(IntProperty) , MaxPowerBuffs(ObjectProperty)> MaxPowerBuffs;//[Offset: 0x26c , Size: 60]
	function UpdateServerSyncBuff();// 0x1997eb8
	function UpdateClientBuff();// 0x1997d28
	function RPC_Server_ReqBriefs();// 0x1997ccc
	function RPC_Client_SyncBrief();// 0x1997c24
	function RPC_Client_RspBriefs();// 0x1997b60
	function RemoveClientBuff();// 0x1997ae8
	function RemoveBuffInner();// 0x1997998
	function RemoveBuff();// 0x1997850
	function RemoveAndFindMaxPowerBuff();// 0x19977d8
	function OnRep_SyncBriefs();// 0x19977c4
	function OnClientUpdateBuffEvent__DelegateSignature();// 0x206ccd8
	function OnClientRemoveBuffEvent__DelegateSignature();// 0x206ccd8
	function OnClientAddBuffEvent__DelegateSignature();// 0x206ccd8
	function HasSkillID();// 0x1997744
	function HasBuff();// 0x19976c4
	function HandleCauserSkill();// 0x1997608
	function HandleBuffTypeMutex();// 0x1997588
	function HandleBuffTypeExclude();// 0x1997510
	function HandleBuffLayer();// 0x1997408
	function GetTableConfig();// 0x19973e0
	function GetBuffs();// 0x1997320
	function GetBuffDuration();// 0x199725c
	function CreateBuff();// 0x199710c
	function CompareBuffPower();// 0x1997094
	function ClientGetBuffInfo();// 0x1996fac
	function ClearBuffs();// 0x1996f2c
	function CheckBuffTargetClient();// 0x1996eac
	function AddBuff();// 0x1996d5c

--------------------------------
Class: ClientSyncBrief
	int InstID;//[Offset: 0x0 , Size: 4]
	byte LayerCount;//[Offset: 0x4 , Size: 1]
	int BuffID;//[Offset: 0x8 , Size: 4]
	int CauseSkillID;//[Offset: 0xc , Size: 4]
	float SyncTime;//[Offset: 0x10 , Size: 4]
	float EndTime;//[Offset: 0x14 , Size: 4]
	bool PendingRemove;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]

--------------------------------
Class: UTSkillManagerComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0xc0 , Size: 4]
	SkillArchetypes(SoftClassProperty)[] SkillArchetypes;//[Offset: 0xc4 , Size: 12]
	bool isNeedCheckValidation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	bool UseSkillsCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd1 , Size: 1]
	bool DestroySkillsOnDie;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd2 , Size: 1]
	bool LoadSkillsAllClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3 , Size: 1]
	bool NeedAutonomousClientSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	Skills(ObjectProperty)[] Skills;//[Offset: 0xd8 , Size: 12]
	<SkillsBlackboardMap_Key(WeakObjectProperty) , SkillsBlackboardMap(ObjectProperty)> SkillsBlackboardMap;//[Offset: 0xe4 , Size: 60]
	Actor* Target;//[Offset: 0x15c , Size: 4]
	RepTargets(ObjectProperty)[] RepTargets;//[Offset: 0x160 , Size: 12]
	UTSkillSynData SkillSynData;//[Offset: 0x16c , Size: 24]
	LastCastArray(StructProperty)[] LastCastArray;//[Offset: 0x184 , Size: 12]
	delegate OnSkillHit;//[Offset: 0x190 , Size: 12]
	delegate OnSkillCast;//[Offset: 0x19c , Size: 12]
	float PhasePercentage;//[Offset: 0x1c0 , Size: 4]
	UTSkillHitInfo SkillHitInfo;//[Offset: 0x1c8 , Size: 40]
	UTSkillHitEnvInfo SkillHitEnvInfo;//[Offset: 0x1f0 , Size: 40]
	MutexMontageGroupBeenPlayed(StrProperty)[] MutexMontageGroupBeenPlayed;//[Offset: 0x218 , Size: 12]
	FString LastESkillTargetDesc;//[Offset: 0x238 , Size: 12]
	int SkillSynRandomSeed;//[Offset: 0x244 , Size: 4]
	RandomStream SkillSynRandStream;//[Offset: 0x248 , Size: 8]
	int SkillSynRandomSeedExpireCount;//[Offset: 0x250 , Size: 4]
	<SkillTimerMap_Key(StrProperty) , SkillTimerMap(StructProperty)> SkillTimerMap;//[Offset: 0x254 , Size: 60]
	bool bNeedBeginInitOnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a4 , Size: 1]
	<SkillHandleToIndexMap_Key(IntProperty) , SkillHandleToIndexMap(IntProperty)> SkillHandleToIndexMap;//[Offset: 0x2a8 , Size: 60]
	AddedSkillStructList(StructProperty)[] AddedSkillStructList;//[Offset: 0x2e4 , Size: 12]
	LoadingSkillStructList(StructProperty)[] LoadingSkillStructList;//[Offset: 0x2f0 , Size: 12]
	float ZombieModeUseSkillCD;//[Offset: 0x2fc , Size: 4]
	int ZombieModeMaxSkillPropLevel;//[Offset: 0x304 , Size: 4]
	function TriggerEvent();// 0x42067c4
	function TraceTarget();// 0x42064b8
	function SwitchSkill();// 0x4206364
	function StopSkill();// 0x4206214
	function ShouldTriggerEvent();// 0x42060b4
	function SetSkillOwner();// 0x4205fd0
	function SetCurSkill();// 0x4205f00
	function ServerTriggerEvent();// 0x4205d68
	function ServerStartSkill();// 0x4205be4
	function ServerNotifyRandomSeed();// 0x4205ac4
	function RepSkillSynData();// 0x4205a5c
	function RepSkillHitInfo();// 0x42059fc
	function RepLastCastTime();// 0x420599c
	function RandRangeSyn();// 0x420585c
	function PreCheckNewSkill();// 0x420576c
	function PlayHurtSkillEffect();// 0x4205624
	function OnSameTeam();// 0x42054ec
	function OnRep_SkillHitInfo();// 0x4205484
	function OnRep_AddedSkillList();// 0x4205288
	function OnAsyncLoadFinishedByItem();// 0x42051b8
	function LoadSyncIfLoadingWithSkillIndex();// 0x42050dc
	function LoadSyncIfLoading();// 0x4204f0c
	function IsReadyToCastSkill();// 0x42008cc
	function IsCastingSkill();// 0x4204e98
	function InitSkillSystem();// 0x4204d88
	function GetSkillIndexByClass();// 0x4204c9c
	function GetSkillByName();// 0x4204b24
	function GetSkill();// 0x4204a38
	function GetCurSkillPhase();// 0x42049d0
	function GetCurSkillIndex();// 0x4204968
	function GetCurSkill();// 0x4204900
	function ClientStartSkill();// 0x4204788
	function ClearSkill();// 0x4204720
	function CheckNewSkill();// 0x4204630
	function CheckAutoSkill();// 0x41ffae4
	function BeginAddSkillByItemAsync();// 0x42044fc

--------------------------------
Class: UTSkillSynData
	int CurSkillIndex;//[Offset: 0x0 , Size: 4]
	int CurSkillPhase;//[Offset: 0x4 , Size: 4]
	bool ReplicateImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	int CurLoadDynSkillID;//[Offset: 0xc , Size: 4]
	bool ReplicatePhaseIndexImpulseFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int Reason;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: UTSkillHitInfo
	ToPawn(ObjectProperty)[] ToPawn;//[Offset: 0x0 , Size: 12]
	Actor* FromPawn;//[Offset: 0xc , Size: 4]
	int SkillID;//[Offset: 0x10 , Size: 4]
	int SkillPhaseID;//[Offset: 0x14 , Size: 4]
	bool Flag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool IsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	byte HitSurfaceType;//[Offset: 0x1a , Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: UTSkillHitEnvInfo
	ToPawn(ObjectProperty)[] ToPawn;//[Offset: 0x0 , Size: 12]
	Actor* FromPawn;//[Offset: 0xc , Size: 4]
	int SkillID;//[Offset: 0x10 , Size: 4]
	int SkillPhaseID;//[Offset: 0x14 , Size: 4]
	byte HitSurfaceType;//[Offset: 0x18 , Size: 1]
	Vector HitEnvLocation;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: RandomStream
	int InitialSeed;//[Offset: 0x0 , Size: 4]
	int Seed;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AttrModifyComponent.ActorComponent.Object
	bool UseAttributeModifyRep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	delegate OnAttrModified;//[Offset: 0xc0 , Size: 12]
	int AttrGroup;//[Offset: 0xcc , Size: 4]
	ConfigAttrModifyList(StructProperty)[] ConfigAttrModifyList;//[Offset: 0xd0 , Size: 12]
	ConfigAttrModifyGroupList(StructProperty)[] ConfigAttrModifyGroupList;//[Offset: 0xdc , Size: 12]
	uint32 AttrModifyStateList;//[Offset: 0x1a0 , Size: 4]
	AttrModifyGroupStateList(BoolProperty)[] AttrModifyGroupStateList;//[Offset: 0x1a4 , Size: 12]
	DynamicModifierRepList(StructProperty)[] DynamicModifierRepList;//[Offset: 0x1b0 , Size: 12]
	RepAttributeModify DynamicModifierRep;//[Offset: 0x1bc , Size: 16]
	int AttrModifyStateListNum;//[Offset: 0x1ec , Size: 4]
	AttributeExpands(StructProperty)[] AttributeExpands;//[Offset: 0x1f0 , Size: 12]
	AttrDynamicModifier DynamicModifier;//[Offset: 0x1fc , Size: 124]
	<RelateAttributeGroup_Key(StrProperty) , RelateAttributeGroup(StructProperty)> RelateAttributeGroup;//[Offset: 0x278 , Size: 60]
	function SetAttrModifyStateValue();// 0x1984cc4
	function RegisterModifyAbleAttr();// 0x1984b38
	function OnRep_DynamicModifierList();// 0x1984b24
	function OnRep_DynamicModifier();// 0x1984b10
	function OnRep_AttrModifyStateList();// 0x1984afc
	function OnRep_AttrModifyGroupStateList();// 0x1984ae8
	function OnAttrModifiedEvent__DelegateSignature();// 0x206ccd8
	function IsAttrModifyStateValidIndex();// 0x1984a68
	function GetAttrModifyStateValue();// 0x19849e8
	function GetAttrModifyStateNum();// 0x19849cc
	function GetAttrModifyItemByItemName();// 0x19846f0
	function EnableAttrModifier();// 0x1984590
	function EnableAllAttrModifier();// 0x1984568
	function DisableModifierToActor();// 0x19844e8
	function DisableAttrModifier();// 0x1984388
	function DisableAllAttrModifier();// 0x1984360
	function AddDynamicModifier();// 0x1984208

--------------------------------
Class: RepAttributeModify

--------------------------------
Class: AttrDynamicModifier
	<ModifyAttrs_Key(StrProperty) , ModifyAttrs(StructProperty)> ModifyAttrs;//[Offset: 0x0 , Size: 60]
	<ModifyConfigs_Key(StrProperty) , ModifyConfigs(StructProperty)> ModifyConfigs;//[Offset: 0x3c , Size: 60]
	AttrModifyComponent* Component;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: MoveAntiCheatComponent.ActorComponent.Object
	bool bUseMoveAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0xbc , Size: 1]
	float MinMoveAntiCheatCheckIntervel;//[Offset: 0xc0 , Size: 4]
	int MaxCheatTimes;//[Offset: 0xc4 , Size: 4]
	float TolerateDistanceFractor;//[Offset: 0xc8 , Size: 4]
	float MaxPacketLossRate;//[Offset: 0xcc , Size: 4]
	float MinDistanceSqAtStaticColliderCheck;//[Offset: 0xd0 , Size: 4]
	int MaxTotalMoveCheatTimes;//[Offset: 0xd4 , Size: 4]
	int MaxTotalPassWallTimes;//[Offset: 0xd8 , Size: 4]
	float MinMoveAntiCheatCheckIntervel2;//[Offset: 0xdc , Size: 4]
	bool bIsForceAdjustZWhenExceed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	int MaxShootPointPassWall;//[Offset: 0xe4 , Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0xe8 , Size: 4]
	float MaxSkeletonLength;//[Offset: 0xec , Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0xf0 , Size: 4]
	int MaxLocusFailTime;//[Offset: 0xf4 , Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0xf8 , Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0xfc , Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x100 , Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x104 , Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x108 , Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x114 , Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x120 , Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x12c , Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x138 , Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x144 , Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x150 , Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x15c , Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x168 , Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x174 , Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x180 , Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x18c , Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x198 , Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x1a4 , Size: 12]
	bool IsOpenReportAntiMovementData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x220 , Size: 1]
	float RecordAntiCheatInterval;//[Offset: 0x224 , Size: 4]
	MoveCheatAntiStrategy MoveCheatAntiStrategy3;//[Offset: 0x240 , Size: 128]
	MoveCheatAntiStrategy2 MoveCheatAntiStrategy4;//[Offset: 0x2c0 , Size: 80]
	CharacterZMoveDistanceCheck CharacterZMoveDistanceCheck;//[Offset: 0x310 , Size: 52]
	ShovelAntiCheat ShovelAntiCheat;//[Offset: 0x348 , Size: 120]
	ClientTimeSpeedCheck TimeSpeedCheck;//[Offset: 0x408 , Size: 52]
	MoveCheatAntiStrategy6 MoveCheatAntiStrategy6;//[Offset: 0x43c , Size: 1396]
	float MaxJumpHeight;//[Offset: 0x9b4 , Size: 4]
	Character* CharacterOwner;//[Offset: 0x9b8 , Size: 4]
	bool IsOpenRTPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa28 , Size: 1]
	function SendShovelDataToServer();// 0x177da80
	function RefreshRealMaxJumpHeight();// 0x177da6c
	function Ping2Server();// 0x177d8f0
	function Ping2Client();// 0x177d878
	function OnPreReconnectOnServer();// 0x177d864
	function K2_MoveSweepTest();// 0x177d5f8
	function DebugDrawLine();// 0x177d54c
	function ClearJumpLimit();// 0x177d538

--------------------------------
Class: VerifySwitch
	int PunishThresHold;//[Offset: 0x0 , Size: 4]
	bool bShouldPunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: MoveCheatAntiStrategy
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	float MaxAllowClientSideTimeLag;//[Offset: 0x4 , Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x8 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0xc , Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0x10 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x14 , Size: 4]
	float ServerSendPingIntervel;//[Offset: 0x18 , Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x1c , Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x20 , Size: 4]
	int MaxContinuousCheatMoveTimes;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy2
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	float CheckTimeSpeedIntervel;//[Offset: 0x4 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x8 , Size: 4]
	float MaxMoveDistanceScaleFactor;//[Offset: 0xc , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x10 , Size: 4]
	float MaxMoveSpeedValue;//[Offset: 0x14 , Size: 4]
	int MaxSpeedSplitNum;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CharacterZMoveDistanceCheck
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4 , Size: 4]
	float MaxAllowMoveZHeight;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: ShovelAntiCheat
	float DataSendInterval;//[Offset: 0x0 , Size: 4]
	float DataSampleInterval;//[Offset: 0x4 , Size: 4]
	float SampleMoveVelocityTorelate;//[Offset: 0x8 , Size: 4]
	float CheatLockTime;//[Offset: 0xc , Size: 4]
	int MaxServerClientDeltaCount;//[Offset: 0x10 , Size: 4]
	MoveAntiCheatComponent* OwnerMoveAntiCheat;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: ClientTimeSpeedCheck
	float CheckTimeDeltaInterval;//[Offset: 0x20 , Size: 4]
	float MaxClientTimeDeltaAheadServer;//[Offset: 0x24 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x28 , Size: 4]
	float MaxServerTimeDelta;//[Offset: 0x2c , Size: 4]
	float MaxClientAheadServerTotalTime;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: MoveCheatAntiStrategy6
	uint32 bIsOpen;//[Offset: 0x0 , Size: 4]
	int MaxAllowCheatMoveTimes;//[Offset: 0x4 , Size: 4]
	float MaxPublishForbidMoveTime;//[Offset: 0x8 , Size: 4]
	float MaxVectorAccAngel;//[Offset: 0xc , Size: 4]
	float MaxSumVectorLength;//[Offset: 0x10 , Size: 4]
	float MaxVectorAccTime;//[Offset: 0x14 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	function SimulatedCharacterServerTime();// 0x175b190

--------------------------------
Class: LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	PoseCheckBoxesCfg(StructProperty)[] PoseCheckBoxesCfg;//[Offset: 0xd4 , Size: 12]
	bool GM_UseNewProjectileBulletVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	bool bDebugShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1 , Size: 1]
	bool bDrawHitBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe2 , Size: 1]
	bool bVerifyShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe3 , Size: 1]
	bool bVerifyShootPointPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe4 , Size: 1]
	bool bVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe5 , Size: 1]
	bool bEnableReverseVerityBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe6 , Size: 1]
	bool bVerifyInParachuteShootPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe7 , Size: 1]
	float TolerateShootPointDistanceSqured;//[Offset: 0xe8 , Size: 4]
	float TolerateShootPointScaleOnFast;//[Offset: 0xec , Size: 4]
	bool bVerifyHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	float TolerateShootPointDistanceVehicleSqured;//[Offset: 0xf4 , Size: 4]
	float TolerateSimulatedDelayTime;//[Offset: 0xf8 , Size: 4]
	bool bVerifyBulletFlyTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	bool bVerifyShooterMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd , Size: 1]
	bool bVerifyMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfe , Size: 1]
	bool bVerifyShootRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xff , Size: 1]
	bool bVerifyShootDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]
	bool bVerifyBulletImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101 , Size: 1]
	bool bVerifyCharacterImpactOffset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102 , Size: 1]
	bool bVerifyHistoryLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x103 , Size: 1]
	bool bVerifyShooterWeaponRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool bVerifyGunPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	float BulletFlyTimeVerifyMinTime;//[Offset: 0x108 , Size: 4]
	float TolerateBulletFlyTimePercentage;//[Offset: 0x10c , Size: 4]
	float TolerateMuzzleDistanceSqured;//[Offset: 0x110 , Size: 4]
	float TolerateMuzzleDistanceVehicleSqured;//[Offset: 0x114 , Size: 4]
	float TolerateShootHitAngle;//[Offset: 0x118 , Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0x11c , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x120 , Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0x124 , Size: 4]
	float TolerateShootRange;//[Offset: 0x128 , Size: 4]
	traceObjectTypes(ByteProperty)[] traceObjectTypes;//[Offset: 0x12c , Size: 12]
	float ShooterWeaponRange;//[Offset: 0x138 , Size: 4]
	float ShooterWeaponHeight;//[Offset: 0x13c , Size: 4]
	bool bAllowShortReverseDir;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x140 , Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x144 , Size: 4]
	float TolerateShootMuzzleHeight;//[Offset: 0x148 , Size: 4]
	bool bUseSimpleVerifyHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14c , Size: 1]
	bool bUseSimpleVerifyHitParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14d , Size: 1]
	bool bTimeCompensationDisable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14e , Size: 1]
	float TolerateLocusSingle;//[Offset: 0x150 , Size: 4]
	float TolerateLocusDist;//[Offset: 0x154 , Size: 4]
	float TolerateLocusSegment;//[Offset: 0x158 , Size: 4]
	float TolerateBoxExpand;//[Offset: 0x15c , Size: 4]
	float TolerateLocusZOffsetUp;//[Offset: 0x160 , Size: 4]
	float TolerateLocusZOffsetDown;//[Offset: 0x164 , Size: 4]
	float LocusSearchBackTime;//[Offset: 0x168 , Size: 4]
	float LocusZHistoryUpInVehicle;//[Offset: 0x16c , Size: 4]
	float MaxGunPosZHeight;//[Offset: 0x170 , Size: 4]
	float MaxGunPosLength;//[Offset: 0x174 , Size: 4]
	Vector GiftHeadBoundingBoxUpperOffset;//[Offset: 0x178 , Size: 12]
	Vector GiftHeadBoundingBoxLowerOffset;//[Offset: 0x184 , Size: 12]
	bool bVerifyBonePointInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190 , Size: 1]
	bool bVerifyBoneHitType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191 , Size: 1]
	float BonePointTorelate;//[Offset: 0x194 , Size: 4]
	uint32 TolerateCharacterImpactOffsetDistSquredOnVehicle;//[Offset: 0x198 , Size: 4]
	bool GM_VerifyProjectileBulletShootPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c , Size: 1]
	bool GM_VerifyProjectileBulletShootPosByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19d , Size: 1]
	Character* CharacterOwner;//[Offset: 0x1a0 , Size: 4]
	bool GM_VerifyShootPointByNetDelay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a4 , Size: 1]
	bool GM_VerifyShooterAndMuzzleDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a5 , Size: 1]
	uint32 TolerateMuzzleAndCharacterDisSquare;//[Offset: 0x1a8 , Size: 4]
	uint32 TolerateMuzzleAndVehicleDisSquare;//[Offset: 0x1ac , Size: 4]
	bool GM_VerifyServerShooterPosDis;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b0 , Size: 1]
	bool GM_VerifyBlock;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b1 , Size: 1]
	float VehiclePosCheckInterval;//[Offset: 0x1b4 , Size: 4]
	float MaxVehicleSpeed;//[Offset: 0x1b8 , Size: 4]
	float TolerateVehicleDis;//[Offset: 0x1bc , Size: 4]
	float MaxTolerateVehicleDis;//[Offset: 0x1c0 , Size: 4]
	float CharacterPosCheckInterval;//[Offset: 0x1c4 , Size: 4]
	float MaxCharacterSpeed;//[Offset: 0x1c8 , Size: 4]
	float TolerateCharacterDis;//[Offset: 0x1cc , Size: 4]
	float MaxTolerateCharacterDis;//[Offset: 0x1d0 , Size: 4]
	float SimVehiclePosCheckInterval;//[Offset: 0x1d4 , Size: 4]
	float SimTolerateVehicleDis;//[Offset: 0x1d8 , Size: 4]
	float SimMaxTolerateVehicleDis;//[Offset: 0x1dc , Size: 4]
	float SimCharacterPosCheckInterval;//[Offset: 0x1e0 , Size: 4]
	float SimTolerateCharacterDis;//[Offset: 0x1e4 , Size: 4]
	float SimMaxTolerateCharacterDis;//[Offset: 0x1e8 , Size: 4]
	float SimMaxVictmPosChangeSpeed;//[Offset: 0x1ec , Size: 4]
	float TolerateNetDelay;//[Offset: 0x1f0 , Size: 4]
	float TolerateMaxVictmPosDis;//[Offset: 0x1f4 , Size: 4]
	bool GM_VerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f8 , Size: 1]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0x1fc , Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0x200 , Size: 4]
	float VerifyDownShootCD;//[Offset: 0x204 , Size: 4]
	float GrayMuzzleAndCharacterBottomHeight;//[Offset: 0x210 , Size: 4]
	float GrayMuzzleAndCharacterHeight;//[Offset: 0x214 , Size: 4]
	float GrayWeaponAndShootAngle;//[Offset: 0x218 , Size: 4]
	uint32 GrayCharacterImpactMaxOffset;//[Offset: 0x21c , Size: 4]
	uint32 GrayCharacterImpactMaxOffset2;//[Offset: 0x220 , Size: 4]
	uint32 GrayCharacterImpactMinOffset;//[Offset: 0x224 , Size: 4]
	uint32 GrayCharacterImpactOffsetChange;//[Offset: 0x228 , Size: 4]
	uint32 GrayFirstCharacterImpactMaxOffset;//[Offset: 0x22c , Size: 4]
	float GrayImpactPointChangeMinDistSqured;//[Offset: 0x230 , Size: 4]
	float GrayBulletImpactOffsetMaxDistSqured;//[Offset: 0x234 , Size: 4]
	float GrayBulletImpactOffsetMinDistSqured;//[Offset: 0x238 , Size: 4]
	uint32 LastCharacterImpactOffset;//[Offset: 0x23c , Size: 4]
	Vector LastImpactPoint;//[Offset: 0x240 , Size: 12]
	uint32 LastFirstCharacterImpactOffset;//[Offset: 0x24c , Size: 4]
	function VertifyMuzzleHeight();// 0x175bfb0
	function VertifyImpactActorPosWithNoLagCompensation();// 0x175be9c
	function VertifyClientAntiCheatResult();// 0x175bdd8
	function VerifyWeaponOwnerPos();// 0x175bc50
	function VerifyWeaponOwnerAndMuzzleDis();// 0x175bac0
	function SimulatedCharacterServerTime();// 0x175b190
	function RPC_DrawHeadBox();// 0x175b9d8
	function GrayVerify();// 0x175b860
	function GetTolerateServerVictmPosTolerateByNetDelay();// 0x175b794
	function GetTolerateServerVictmPosByNearMaxNetDelay();// 0x175b6d0
	function GetTolerateServerShooterPosDisByNetDelay();// 0x175b650

--------------------------------
Class: EntityAntiCheatComponent.ActorComponent.Object
	bool bVerifyClientHitAndBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool bVerifyClientMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	ShootVerifyConfig VictimShootVerify;//[Offset: 0xc0 , Size: 16]
	float TolerateOwnerAndBulletDist;//[Offset: 0xd0 , Size: 4]

--------------------------------
Class: ShootVerifyConfig
	float ClientMuzzleHeightMax;//[Offset: 0x0 , Size: 4]
	float ClientPureMuzzleHeightMax;//[Offset: 0x4 , Size: 4]
	float VehicleWeaponClientMuzzleHeightMax;//[Offset: 0x8 , Size: 4]
	float VehicleWeaponClientPureMuzzleHeightMax;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BaseCharacterEffectCom.ActorComponent.Object
	ParticleSystem* DeathFX;//[Offset: 0xbc , Size: 4]
	STExtraBaseCharacter* OwningCharacter;//[Offset: 0xc0 , Size: 4]
	function HandleOwnerDeath();// 0x16dacf4

--------------------------------
Class: EffectComponent.ActorComponent.Object
	function S2Sim_CallRemoteEffect();// 0x17228ac
	function S2C_CallRemoteEffect();// 0x1722688
	function S2A_EndEffectGraph();// 0x1698eb0
	function C2S_CallRemoteEffect();// 0x172241c

--------------------------------
Class: CharacterParachuteComponent.ActorComponent.Object
	float CurrentDiveRate;//[Offset: 0xc4 , Size: 4]
	float FreeFall_InputTriggerThreshold;//[Offset: 0xd8 , Size: 4]
	float FreeFall_AcceFall;//[Offset: 0xdc , Size: 4]
	float FreeFall_MaxFreeFallSpeed;//[Offset: 0xe0 , Size: 4]
	float FreeFall_MaxFallSpeedChangeAccel;//[Offset: 0xe4 , Size: 4]
	float FreeFall_AcceForward;//[Offset: 0xe8 , Size: 4]
	float FreeFall_MaxForwardSpeed;//[Offset: 0xec , Size: 4]
	float FreeFall_MaxForwardExtraFallSpeed;//[Offset: 0xf0 , Size: 4]
	float FreeFall_AcceRight;//[Offset: 0xf4 , Size: 4]
	float FreeFall_MaxRightSpeed;//[Offset: 0xf8 , Size: 4]
	float FreeFall_MaxRightExtraFallSpeed;//[Offset: 0xfc , Size: 4]
	float FreeFall_MaxPitchForwardAngle;//[Offset: 0x100 , Size: 4]
	float FreeFall_MaxPitchBackAngle;//[Offset: 0x104 , Size: 4]
	float FreeFall_RotationYawInterpSpeed;//[Offset: 0x108 , Size: 4]
	float FreeFall_RotationPitchInterpSpeed;//[Offset: 0x10c , Size: 4]
	float FreeFall_MinDiveAngle;//[Offset: 0x110 , Size: 4]
	float FreeFall_DiveExtraAcceFall;//[Offset: 0x114 , Size: 4]
	float FreeFall_MaxDiveExtraFallSpeed;//[Offset: 0x118 , Size: 4]
	bool bOpened_EnableInputMode8Dirs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	float Opened_AcceFall;//[Offset: 0x120 , Size: 4]
	float Opened_MaxFreeFallSpeed;//[Offset: 0x124 , Size: 4]
	float Opened_AcceForward;//[Offset: 0x128 , Size: 4]
	float Opened_MaxForwardSpeed;//[Offset: 0x12c , Size: 4]
	float Opened_MaxBackwardSpeed;//[Offset: 0x130 , Size: 4]
	float Opened_MaxForwardExtraFallSpeed;//[Offset: 0x134 , Size: 4]
	float Opened_MaxBackExtraFallSpeed;//[Offset: 0x138 , Size: 4]
	float Opened_GlidingSpeedRemainPercent;//[Offset: 0x13c , Size: 4]
	float Opened_AcceRight;//[Offset: 0x140 , Size: 4]
	float Opened_MaxRightSpeed;//[Offset: 0x144 , Size: 4]
	float Opened_MaxLeftRightExtraFallSpeed;//[Offset: 0x148 , Size: 4]
	float Opened_MaxRollAngle;//[Offset: 0x14c , Size: 4]
	float Opened_MaxPitchForwardAngle;//[Offset: 0x150 , Size: 4]
	float Opened_MaxPitchBackAngle;//[Offset: 0x154 , Size: 4]
	float Opened_MaxYawAngleSpeed;//[Offset: 0x158 , Size: 4]
	float Opened_RotationInterpSpeed;//[Offset: 0x15c , Size: 4]
	Vector Launch_InitSpeed;//[Offset: 0x160 , Size: 12]
	Vector Launch_SpeedRandomDelta;//[Offset: 0x16c , Size: 12]
	Vector Launch_Accel;//[Offset: 0x178 , Size: 12]
	float Launch_YawRandomDelta;//[Offset: 0x184 , Size: 4]
	float Launch_WingUpAngle;//[Offset: 0x188 , Size: 4]
	float Launch_WingForwardDecreaseRate;//[Offset: 0x18c , Size: 4]
	float Launch_WingForwardDecreaseConstRate;//[Offset: 0x190 , Size: 4]
	float Launch_WingForwardEnterFreeFallSpeed;//[Offset: 0x194 , Size: 4]
	float Launch_WingForwardToUpRate;//[Offset: 0x198 , Size: 4]
	float Launch_WingUpDampingRate;//[Offset: 0x19c , Size: 4]
	float Launch_WingUpDampingConstRate;//[Offset: 0x1a0 , Size: 4]
	float Launch_MaxWingUpSpeed;//[Offset: 0x1a4 , Size: 4]
	float Launch_WingUpDropPlus;//[Offset: 0x1a8 , Size: 4]
	delegate OnInitLaunch;//[Offset: 0x1ac , Size: 12]
	delegate OnResetLaunch;//[Offset: 0x1b8 , Size: 12]
	delegate OnChangeMovementModeWhenLaunch;//[Offset: 0x1c4 , Size: 12]
	float CurrentFallSpeed;//[Offset: 0x1d0 , Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0x1d4 , Size: 4]
	float MaxZAllowDistance;//[Offset: 0x1d8 , Size: 4]
	bool bIsPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc , Size: 1]
	float FollowerDist;//[Offset: 0x200 , Size: 4]
	float ReletiveStaticNearbyDistanceSquare;//[Offset: 0x204 , Size: 4]
	function VerifyClientTimeStamp();// 0x1704f30
	function UpdateRotation();// 0x1704d94
	function UpdateParachuteState();// 0x1704bf8
	function UpdateParachuteOpenedRotation();// 0x1704af8
	function UpdateLaunchRotation();// 0x17049f8
	function UpdateFreeFallRotation();// 0x17048ac
	function TickParachuteComponent();// 0x1704758
	function StopParachute();// 0x1704744
	function StartParachute();// 0x1704730
	function ResetVelocity();// 0x170471c
	function PostNetReceiveNewState();// 0x1704708
	function OnPreReconnectOnServer();// 0x17046f4
	function InvalidateAdjustFollowerLocation();// 0x17046e0
	function GetReplicatedRightInput();// 0x17046b8
	function GetReplicatedForwardInput();// 0x1704690
	function GetParachuteVelocity();// 0x1704648
	function GetLaunchInitVelocity();// 0x17045f8
	function CalWingUpVelocity();// 0x17044d4
	function CalParachuteOpenedVelocity();// 0x17043b8
	function CalLaunchVelocity();// 0x1704294
	function CalFreeFallVelocity();// 0x1704178
	function AngleInterpTo();// 0x1704028
	function AdjustFollowerLocation();// 0x1704014

--------------------------------
Class: PartHitComponent.ActorComponent.Object
	STExtraCharacter* OwnerCharacter;//[Offset: 0xbc , Size: 4]
	float UpdateHitBoxDeltaTime;//[Offset: 0xc0 , Size: 4]
	bool bActivePartHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool bOptimizeBulletCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	HitBoxs_Stand_Tran(StructProperty)[] HitBoxs_Stand_Tran;//[Offset: 0xc8 , Size: 12]
	HitBoxs_Prone_Tran(StructProperty)[] HitBoxs_Prone_Tran;//[Offset: 0xd4 , Size: 12]
	HitBoxs_Stand(ObjectProperty)[] HitBoxs_Stand;//[Offset: 0xe0 , Size: 12]
	HitBoxs_Prone(ObjectProperty)[] HitBoxs_Prone;//[Offset: 0xec , Size: 12]
	byte ClientHitPartJudgment;//[Offset: 0xf8 , Size: 1]
	byte DSHitPartJudgment;//[Offset: 0xf9 , Size: 1]
	FString HitBox_Stand_Tag;//[Offset: 0xfc , Size: 12]
	FString HitBox_Prone_Tag;//[Offset: 0x108 , Size: 12]
	float Server_HitBox_Stand_HalfHeight;//[Offset: 0x114 , Size: 4]
	float Server_HitBox_Stand_Radius;//[Offset: 0x118 , Size: 4]
	float Server_HitBox_Prone_HalfHeight;//[Offset: 0x11c , Size: 4]
	float Server_HitBox_Prone_Radius;//[Offset: 0x120 , Size: 4]
	BodyTypeDef ProneBodyDef;//[Offset: 0x124 , Size: 8]
	BodyTypeDef StandBodyDef;//[Offset: 0x12c , Size: 8]
	BodyTypeDef CrouchBodyDef;//[Offset: 0x134 , Size: 8]
	BodyTypeDef DyingBodyDef;//[Offset: 0x13c , Size: 8]
	BodyTypeDef VechicleBodyDef;//[Offset: 0x144 , Size: 8]
	<NewHitBodyPosMap_Key(StrProperty) , NewHitBodyPosMap(EnumProperty)> NewHitBodyPosMap;//[Offset: 0x14c , Size: 60]
	float PawnCollisionCountdown;//[Offset: 0x188 , Size: 4]
	bool IsRefreshPawnCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	float BoxCollisionCountdown;//[Offset: 0x190 , Size: 4]
	bool IsRefreshBoxCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	function UpdatePoseCollisionShapes();// 0x16ad19c
	function UpdateAllInstanceBodyTransform();// 0x178bfa8
	function InitBodyBoneMap();// 0x1713304
	function GetHitBoxByState();// 0x178bf28
	function GetHitBodyTypeByHitPos();// 0x178be94
	function GetHitBodyTypeByBoneName();// 0x178bdc8
	function GetHitBodyType();// 0x178bc54
	function GetCurHitPartJugementType();// 0x178bc2c
	function CloseBodyBulletCollision();// 0x1698f30
	function CalcHitBodyType();// 0x178ba90

--------------------------------
Class: BodyTypeDef
	int UpThreshold;//[Offset: 0x0 , Size: 4]
	int DownThreshold;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TickControlComponent.ActorComponent.Object
	enum CustomTickType;//[Offset: 0xbc , Size: 1]
	<NeedTickComponentClassList_Key(ClassProperty) , NeedTickComponentClassList(EnumProperty)> NeedTickComponentClassList;//[Offset: 0xc0 , Size: 60]
	NeedTickComponentList(StructProperty)[] NeedTickComponentList;//[Offset: 0xfc , Size: 12]
	byte RoleBits;//[Offset: 0x108 , Size: 1]

--------------------------------
Class: STExtraShootWeapon.STExtraWeapon.Actor.Object
	bool CloseLowLevelDeviceHitEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8 , Size: 1]
	float voiceCheckCD;//[Offset: 0x6ac , Size: 4]
	float voiceCheckShowCD;//[Offset: 0x6b0 , Size: 4]
	bool isDefaultSlienceWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6b4 , Size: 1]
	bool bIsPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6ce , Size: 1]
	bool bIsAIOwner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6cf , Size: 1]
	delegate OnShootWeaponAutoReloadDel;//[Offset: 0x6d0 , Size: 12]
	delegate OnCurBulletChange;//[Offset: 0x6dc , Size: 12]
	delegate OnCurBarrelBulletChangeDelegate;//[Offset: 0x6e8 , Size: 12]
	delegate OnStartFireDelegate;//[Offset: 0x6f4 , Size: 12]
	delegate OnStopFireDelegate;//[Offset: 0x700 , Size: 12]
	delegate OnWeaponShootDelegate;//[Offset: 0x70c , Size: 12]
	delegate OnWeaponShootHitDelegate;//[Offset: 0x718 , Size: 12]
	delegate OnWeaponReloadStartDelegate;//[Offset: 0x724 , Size: 12]
	delegate OnWeaponReloadEndDelegage;//[Offset: 0x730 , Size: 12]
	delegate OnWeaponEquipDelegate;//[Offset: 0x73c , Size: 12]
	delegate OnWeaponUnEquipDelegate;//[Offset: 0x748 , Size: 12]
	delegate OnWeaponEquipAnimProcessDelegate;//[Offset: 0x754 , Size: 12]
	delegate OnWeaponUnEquipAnimProcessDelegate;//[Offset: 0x760 , Size: 12]
	delegate OnLeftLastBulletWhenReloadOneByOneDelegate;//[Offset: 0x76c , Size: 12]
	delegate OnBulletNumChangeDelegate;//[Offset: 0x778 , Size: 12]
	delegate OnWeaponShootPlayerNotifyDelegate;//[Offset: 0x790 , Size: 12]
	delegate OnWeaponSecurityLogShootActorDelegate;//[Offset: 0x79c , Size: 12]
	delegate OnScopeIn;//[Offset: 0x7a8 , Size: 12]
	delegate OnScopeOut;//[Offset: 0x7b4 , Size: 12]
	delegate OnScopeInContinue;//[Offset: 0x7c0 , Size: 12]
	STExtraShootWeaponComponent* ShootWeaponComponent;//[Offset: 0x7cc , Size: 4]
	int CurBulletNumInClip;//[Offset: 0x7d0 , Size: 4]
	int CurMaxBulletNumInOneClip;//[Offset: 0x7d4 , Size: 4]
	int CurBulletNumInBarrel;//[Offset: 0x7d8 , Size: 4]
	byte ShootMode;//[Offset: 0x7dc , Size: 1]
	byte CurShootType;//[Offset: 0x7dd , Size: 1]
	int CurShootTotalType;//[Offset: 0x7e0 , Size: 4]
	float VoiceCheckDis;//[Offset: 0x7e4 , Size: 4]
	float SilenceVoiceCheckDis;//[Offset: 0x7e8 , Size: 4]
	float nowVoiceCheckDis;//[Offset: 0x7ec , Size: 4]
	Vector ShootTargetLoc;//[Offset: 0x7f0 , Size: 12]
	byte TraceChannel;//[Offset: 0x800 , Size: 1]
	Vector LastImpactEffectLocation;//[Offset: 0x804 , Size: 12]
	float LastImpactEffectTime;//[Offset: 0x810 , Size: 4]
	int CurBurstShootIndex;//[Offset: 0x818 , Size: 4]
	Transform BoltActionTransform;//[Offset: 0x820 , Size: 48]
	bool bHasFinishConfirmedFromServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x850 , Size: 1]
	int ClientShootTimes;//[Offset: 0x854 , Size: 4]
	AkAudioEvent* BulletFlySound;//[Offset: 0x858 , Size: 4]
	AkAudioEvent* LoadBulletSound;//[Offset: 0x85c , Size: 4]
	AkAudioEvent* ChangeMagazineSound;//[Offset: 0x860 , Size: 4]
	AkAudioEvent* MagazineINSound;//[Offset: 0x864 , Size: 4]
	AkAudioEvent* MagazineOUTSound;//[Offset: 0x868 , Size: 4]
	AkAudioEvent* PullBoltSound;//[Offset: 0x86c , Size: 4]
	Vector BulletDecalScale;//[Offset: 0x870 , Size: 12]
	int CurBulletNumInClipOnSimulatedClients;//[Offset: 0x87c , Size: 4]
	NormalProjectileComponent* NormalProjectileComponent;//[Offset: 0x884 , Size: 4]
	float AIShootLoudness;//[Offset: 0x888 , Size: 4]
	float AIShootStartAttenuationDis;//[Offset: 0x88c , Size: 4]
	float AIShootMaxDis;//[Offset: 0x890 , Size: 4]
	float AISilenceShootLoudness;//[Offset: 0x894 , Size: 4]
	float AISilenceShootStartAttenuationDis;//[Offset: 0x898 , Size: 4]
	float AISilenceShootMaxDis;//[Offset: 0x89c , Size: 4]
	byte CurShootWeaponState;//[Offset: 0x8a0 , Size: 1]
	ShootWeaponEntity* ShootWeaponEntityComp;//[Offset: 0x8b0 , Size: 4]
	ShootWeaponEffectComponent* ShootWeaponEffectComp;//[Offset: 0x8b4 , Size: 4]
	int md_MaxBulletArraySize;//[Offset: 0x8b8 , Size: 4]
	bool IsEquipSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bc , Size: 1]
	bool IsEquipFiringSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8bd , Size: 1]
	bool IsEquipCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8be , Size: 1]
	Vector OffsetFPPLocation;//[Offset: 0x8c0 , Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x8cc , Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x8d8 , Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x8e4 , Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x8f0 , Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x8fc , Size: 12]
	Rotator OffsetFPPScopeRotation;//[Offset: 0x908 , Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x914 , Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0x920 , Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0x92c , Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0x938 , Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0x944 , Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0x950 , Size: 12]
	Rotator OffsetAngledFPPScopeRotation;//[Offset: 0x95c , Size: 12]
	bool DefaultScopeVisiable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968 , Size: 1]
	AvailableWeaponAttachmentSocketTypeList(EnumProperty)[] AvailableWeaponAttachmentSocketTypeList;//[Offset: 0x978 , Size: 12]
	AttrModifyComponent* AttrModifierCompoment;//[Offset: 0x984 , Size: 4]
	WeaponAttrModifyConfigList(StructProperty)[] WeaponAttrModifyConfigList;//[Offset: 0x988 , Size: 12]
	AttachedAttachmentID(IntProperty)[] AttachedAttachmentID;//[Offset: 0x994 , Size: 12]
	uint32 ShootID;//[Offset: 0x9a0 , Size: 4]
	WeaponAntiCheatComp* AntiCheatComp;//[Offset: 0x9a4 , Size: 4]
	HitDataArray(StructProperty)[] HitDataArray;//[Offset: 0x9a8 , Size: 12]
	SimulateHitDataArray(StructProperty)[] SimulateHitDataArray;//[Offset: 0x9b4 , Size: 12]
	bool UseNewSimulateHitInfoData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c0 , Size: 1]
	bool IsInitAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c8 , Size: 1]
	bool IsRegisterCanModifyAttr;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c9 , Size: 1]
	bool bIsResettedMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa70 , Size: 1]
	function UpdateComponentTick();// 0x1897164
	function StopFireFilter();// 0x1897134
	function StopFire();// 0x18970b4
	function StartReload();// 0x1897084
	function StartFireFilter();// 0x1852260
	function StartFire();// 0x170044c
	function StartDoPreBarrel();// 0x1897004
	function StartDoBarrel();// 0x1896fe8
	function ShowDefaultScope();// 0x1896f68
	function ShowDefaultAttachmentComponentByType();// 0x1896ea4
	function ShootIDIsNotValid();// 0x1896e88
	function SetWeaponAttrModifierEnable();// 0x1896d80
	function SetCurShootType();// 0x1896d08
	function SetCurrentBulletNumInClipOnServer();// 0x1896c90
	function SetCurrentBulletNumInClipOnClient();// 0x1896c18
	function SetCurReloadMethod();// 0x1896ba0
	function SetBaseImpactDamageEntity();// 0x173e6cc
	function SetAvailableWeaponAttachmentSocketTypeList();// 0x1896a90
	function ScopeOut();// 0x1896a60
	function ScopeInContinue();// 0x1896a4c
	function ScopeIn();// 0x1852290
	function RPC_ServerSetMaxBulletNum();// 0x18969f0
	function RPC_ServerSetBaseImpactDamageEntity();// 0x189693c
	function RPC_ClientSetCurShootType();// 0x1896888
	function RPC_ClientSetCurReloadMethod();// 0x18967d4
	function RPC_ClientNotifyLeftLastBulletWhenReloadOneByOne();// 0x1896754
	function RPC_Client_SetBulletNumInClip();// 0x18966a0
	function ResetInitialBulletNumInClip();// 0x1896620
	function OnWeaponUnEquipDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponUnEquipAnimProcessDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponShootPlayerNotifyDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponShootHitDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponShootDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponSecurityLogShootActorDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponReloadStartDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponReloadEndDelegage__DelegateSignature();// 0x206ccd8
	function OnWeaponEquipDelegate__DelegateSignature();// 0x206ccd8
	function OnWeaponEquipAnimProcessDelegate__DelegateSignature();// 0x206ccd8
	function OnStopFireDelegate__DelegateSignature();// 0x206ccd8
	function OnStartFireDelegate__DelegateSignature();// 0x206ccd8
	function OnShootWeaponAutoReloadDelegate__DelegateSignature();// 0x206ccd8
	function OnScopeInContinue__DelegateSignature();// 0x206ccd8
	function OnRep_SimulateHitDataArray();// 0x189660c
	function OnRep_HitDataArray();// 0x18965f8
	function OnRep_CurMaxBulletNumChange();// 0x18965e4
	function OnRep_CurBulletNumInClipOnSimulatedClients();// 0x18965d0
	function OnMaxBulletChange__DelegateSignature();// 0x206ccd8
	function OnLeftLastBulletWhenReloadOneByOne__DelegateSignature();// 0x206ccd8
	function OnCurBulletChange__DelegateSignature();// 0x206ccd8
	function OnCurBarrelBulletChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnBulletNumChangeDelegate__DelegateSignature();// 0x206ccd8
	function NotifyServerNoneShootAction();// 0x1896574
	function NotifyLeftLastBulletWhenReloadOneByOneOnServer();// 0x18964fc
	function NotifyClientNoneShootAction();// 0x18964a0
	function LocalSetBulletNumInClip();// 0x1896428
	function IsSupportAutoAim();// 0x1896400
	function IsInPreFire();// 0x18963d8
	function HandleWeaponScopeEquiped();// 0x18963c4
	function GetWeaponReloadType();// 0x189639c
	function GetWeaponIDFromEntity();// 0x1896374
	function GetWeaponID();// 0x189634c
	function GetWeaponBodyLength();// 0x1896324
	function GetVisualBulletTrackFX();// 0x18962fc
	function GetVisualBulletTrackEnabled();// 0x18962d4
	function GetVisualBulletItemConfig();// 0x1896294
	function GetVerifyScopeSocketNameFromEntity();// 0x1896254
	function GetUseSpecificBulletNumOnReloadFromEntity();// 0x189622c
	function GetTraceDistanceFromEntity();// 0x1896204
	function GetSilencerSocketNameFromEntity();// 0x18961c4
	function GetShootWeaponEntityComponent();// 0x189619c
	function GetShootWeaponEffectComponent();// 0x1896174
	function GetShootTypeFromEntity();// 0x189614c
	function GetShootIntervalFromEntity();// 0x1896124
	function GetShellDropSocketNameFromEntity();// 0x18960e4
	function GetScopeID();// 0x189605c
	function GetScopeAimCameraTransform();// 0x1895f98
	function GetReloadWithNoCostFromEntity();// 0x1895f70
	function GetReloadTimeMagOutFromEntity();// 0x1895f48
	function GetReloadTimeFromEntity();// 0x1895f20
	function GetReloadTIDName();// 0x1895e90
	function GetReloadTacticalTimeFromEntity();// 0x1895e68
	function GetReloadSpecificBulletNumFromEntity();// 0x1895e40
	function GetReloadDurationStartFromEntity();// 0x1895e18
	function GetReloadDurationLoopFromEntity();// 0x1895df0
	function GetRelativeMuzzleTransform();// 0x1895d88
	function GetReferenceDistance();// 0x1895d60
	function GetRangeModifier();// 0x1895d38
	function GetRangeAttenuateFromEntity();// 0x1895c78
	function GetPreFireTimeFromEntity();// 0x1895c50
	function GetPostReloadTimeFromEntity();// 0x1895c28
	function GetPostFireTimeFromEntity();// 0x1895c00
	function GetMuzzleTransform();// 0x1895b98
	function GetMuzzleSocketNameFromEntity();// 0x1895b58
	function GetMaxVelocityOffsetAddRateFromEntity();// 0x1895b30
	function GetMaxValidHitTimeFromEntity();// 0x1895b08
	function GetMaxImpactEffectSkipTimeFromEntity();// 0x1895ae0
	function GetMaxBulletNumInOneClipFromEntity();// 0x1895ab8
	function GetMaxBulletNumInBarrelFromEntity();// 0x1895a90
	function GetIsNeedOffsetVelocityFromEntity();// 0x1895a68
	function GetImpactEffectSkipDistanceFromEntity();// 0x1895a40
	function GetIgnoreRangeAttenuatDis();// 0x1895a18
	function GetHitPartCoff();// 0x1895984
	function GetGameDeviationFactor();// 0x189595c
	function GetFiringSuppressorSocketNameFromEntity();// 0x189591c
	function GetFireSensitiveYawRate();// 0x18958f4
	function GetFireSensitivePitchRate();// 0x18958cc
	function GetDefaultAttachmentComponentByType();// 0x189584c
	function GetCurSightType();// 0x1895824
	function GetCurReloadTime();// 0x18957fc
	function GetCurReloadMethod();// 0x18957d4
	function GetCrossHairInitSize();// 0x18957ac
	function GetCrossHairBurstSpeed();// 0x1895784
	function GetCrossHairBurstIncreaseSpeed();// 0x189575c
	function GetControllerRole();// 0x1725a5c
	function GetClipHasInfiniteBulletsFromEntity();// 0x1895734
	function GetChildMeshComp();// 0x18956b4
	function GetBurstShootIntervalFromEntity();// 0x189568c
	function GetBurstShootCDFromEntity();// 0x1895664
	function GetBurstShootBulletsNumFromEntity();// 0x189563c
	function GetBulletTypeFromEntity();// 0x18955f0
	function GetBulletRangeEntity();// 0x18955c8
	function GetBulletNumSingleShotFromEntity();// 0x18955a0
	function GetBulletFireSpeedFromEntity();// 0x1895578
	function GetBaseImpactDamageEntity();// 0x1895550
	function GetAvailableWeaponAttachmentSocketTypeList();// 0x1895438
	function GetAutoReloadFromEntity();// 0x1895410
	function GetADSManualStop();// 0x18953e8
	function GetAccessoriesVRecoilFactor();// 0x18953c0
	function GetAccessoriesRecoveryFactor();// 0x1895398
	function GetAccessoriesHRecoilFactor();// 0x1895370
	function GetAccessoriesDeviationFactor();// 0x1895348
	function FixBulletNumWithValideData();// 0x1895334
	function EnableInfiniteBullets();// 0x18952b4
	function ClearWeaponAttrModifier();// 0x18952a0
	function CheckReloadAttr();// 0x189528c
	function CheckNeedClientSetMaxBulletNum();// 0x1895264
	function BP_OnSyncSimulatedClientsCurBullets();// 0x206ccd8
	function AddOwnerOffsetVelocity();// 0x18951e0

--------------------------------
Class: STExtraWeapon.Actor.Object
	int iRegionWeapon;//[Offset: 0x2cc , Size: 4]
	float MaxWaitHandleAvatarMeshChangedTime;//[Offset: 0x2d0 , Size: 4]
	bool GM_DisableHandleAvatarMeshChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d4 , Size: 1]
	bool GM_UseAsyncMeshLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d5 , Size: 1]
	bool GM_EnableNewWeaponInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d6 , Size: 1]
	bool GM_EnableCheckReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d7 , Size: 1]
	MainWeaponTableStruct WeaponCfg;//[Offset: 0x2d8 , Size: 16]
	Transform WeaponAttachMeshOffset;//[Offset: 0x2f0 , Size: 48]
	Transform FPPWeaponOffset;//[Offset: 0x320 , Size: 48]
	Transform FPPWeaponOffsetNonShooting;//[Offset: 0x350 , Size: 48]
	Transform FPPWeaponOffsetSprint;//[Offset: 0x380 , Size: 48]
	Transform TDModeFPPWeaponOffset;//[Offset: 0x3b0 , Size: 48]
	Transform TDModeFPPWeaponOffsetNonShooting;//[Offset: 0x3e0 , Size: 48]
	Transform TDModeFPPWeaponOffsetSprint;//[Offset: 0x410 , Size: 48]
	int CrossHairType;//[Offset: 0x440 , Size: 4]
	float UnMatchStateSyncCheckInterval;//[Offset: 0x444 , Size: 4]
	WeaponAvatarComponent* WeaponAvatarComponent;//[Offset: 0x448 , Size: 4]
	FName WeaponStaticMeshCompTag;//[Offset: 0x450 , Size: 8]
	WeaponOwnerProxy* OwnerProxy;//[Offset: 0x458 , Size: 4]
	delegate WeaponEffectActionDelegate;//[Offset: 0x45c , Size: 12]
	delegate FireOneShotEffectDelegate;//[Offset: 0x468 , Size: 12]
	delegate OnShootWeaponChangeState;//[Offset: 0x474 , Size: 12]
	delegate OnWeaponAttachToBackDelegate;//[Offset: 0x480 , Size: 12]
	delegate OnWeaponDrawHUDDelegate;//[Offset: 0x48c , Size: 12]
	delegate OnDisconnectToClientOnServerDelegate;//[Offset: 0x498 , Size: 12]
	delegate OnReconnectToClientOnServerDelegate;//[Offset: 0x4a4 , Size: 12]
	delegate OnRecoverOnClientDelegate;//[Offset: 0x4b0 , Size: 12]
	WeaponEntity* WeaponEntityComp;//[Offset: 0x4bc , Size: 4]
	byte CurFreshWeaponState;//[Offset: 0x4c0 , Size: 1]
	delegate OnGetOwnerActorDelegate;//[Offset: 0x4c4 , Size: 12]
	byte SyncFreshWeaponStateForRep;//[Offset: 0x4d0 , Size: 1]
	FName WeaponAttachSocketName;//[Offset: 0x4d8 , Size: 8]
	bool bNeedReconnct;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0 , Size: 1]
	bool bClientHasFinishedCteate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1 , Size: 1]
	bool GM_CloseMaxWeaponReconnetTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e2 , Size: 1]
	float MaxReconnectTime;//[Offset: 0x4e4 , Size: 4]
	float StartReconnectTime;//[Offset: 0x4e8 , Size: 4]
	WeaponReconnectReplicateData WeaponReconnectReplicateData;//[Offset: 0x4f0 , Size: 96]
	UpdateOptimizationList(ObjectProperty)[] UpdateOptimizationList;//[Offset: 0x558 , Size: 12]
	bool bEnableCompUpdateOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x564 , Size: 1]
	SpawnAndBackpackWeaponReplicatedData OwnerClientCreateWeaponData;//[Offset: 0x568 , Size: 80]
	StaticMeshComponent* WeaponStaticMeshComp;//[Offset: 0x5bc , Size: 4]
	byte CurWeaponState;//[Offset: 0x5c0 , Size: 1]
	Actor* SimulatedOwnerActor;//[Offset: 0x5c4 , Size: 4]
	Pawn* SimulatedOwnerPawn;//[Offset: 0x5c8 , Size: 4]
	<SceneCompsUpdateOpCatche_Key(ObjectProperty) , SceneCompsUpdateOpCatche(StructProperty)> SceneCompsUpdateOpCatche;//[Offset: 0x5d0 , Size: 60]
	WeaponStateManager* _WeaponStateManager;//[Offset: 0x618 , Size: 4]
	synData(StructProperty)[] synData;//[Offset: 0x620 , Size: 12]
	bool IsMeshInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x62c , Size: 1]
	float MaxWaitMeshInitTime;//[Offset: 0x630 , Size: 4]
	float WaitMeshInitTime;//[Offset: 0x634 , Size: 4]
	bool UseReplaceBulletType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x638 , Size: 1]
	bool bNeedUpdateWeaponAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x639 , Size: 1]
	bool IsNeedReInitWeaponOwnerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x640 , Size: 1]
	GrenadeAvatarComponent* GrenadeAvatarComponent;//[Offset: 0x644 , Size: 4]
	bool IsInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x648 , Size: 1]
	delegate ForceHideWeaponWidget;//[Offset: 0x64c , Size: 12]
	bool bNeedHiddenWhenCameraModeChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x658 , Size: 1]
	byte WeaponUIType;//[Offset: 0x659 , Size: 1]
	Transform DefaultRelativeTransform;//[Offset: 0x660 , Size: 48]
	Rotator RotForSimulate;//[Offset: 0x690 , Size: 12]
	int FuncFlag;//[Offset: 0x69c , Size: 4]
	function WeaponNotifyChangeStateDelegate__DelegateSignature();// 0x206ccd8
	function WeaponEffectActionDelegate__DelegateSignature();// 0x206ccd8
	function UpdateWeaponAvatar();// 0x206ccd8
	function SpecialResetForWeaponCrosshair();// 0x206ccd8
	function RPC_ClientSyncPostFireHandledTime();// 0x18b6148
	function RPC_ClientChangeFreshWeaponState();// 0x18b6094
	function PlayLocalShellDropFX();// 0x206ccd8
	function OnWeaponDrawHUD__DelegateSignature();// 0x206ccd8
	function OnWeaponAttachToBackDelegate__DelegateSignature();// 0x206ccd8
	function OnShootWeaponChangeStateDelegate__DelegateSignature();// 0x206ccd8
	function OnRep_WeaponReconnectReplicateData();// 0x18b6080
	function OnRep_WeaponAttachSocketName();// 0x18b606c
	function OnRep_SimulatedOwnerPawn();// 0x18b6058
	function OnRep_OwnerClientCreateWeaponData();// 0x18b6044
	function OnRep_AvatarMeshChanged();// 0x18b6030
	function OnRep_AttachmentReplication();// 0x16d3a24
	function OnReleaseTrigger();// 0x18b6014
	function OnRecoverOnClientDelegate__DelegateSignature();// 0x206ccd8
	function OnReconnectToClientOnServerDelegate__DelegateSignature();// 0x206ccd8
	function OnPushTrigger();// 0x18b5ff8
	function OnGetOwnerActorDelegate__DelegateSignature();// 0x206ccd8
	function OnDisconnectToClientOnServerDelegate__DelegateSignature();// 0x206ccd8
	function NewInitWeapon();// 0x18b5fe4
	function JudgeHasEquipedComponentSlot();// 0x18b5f64
	function IsLocalOrSpectorPlayer();// 0x18b5f3c
	function InitWeapon();// 0x18b5f28
	function HasComponentSlot();// 0x18b5ea8
	function HandleReconnectNew();// 0x18b5e30
	function GetWeaponStaticMeshComponent();// 0x18b5e08
	function GetWeaponStateType();// 0x18b5de0
	function GetWeaponSkeletalMeshComponent();// 0x18b5db8
	function GetWeaponOwnerObserverType();// 0x18b5d90
	function GetWeaponName();// 0x18b5cd0
	function GetWeaponMeshComponent();// 0x18b5ca8
	function GetWeaponEntityComponent();// 0x18b5c80
	function GetWeaponAttachSocket();// 0x18b5c38
	function GetSpecificHandler();// 0x18b5c10
	function GetOwnerPlayerName();// 0x18b5b50
	function GetOwnerPlayerController();// 0x18b5b28
	function GetOwnerPawn();// 0x18b5b00
	function GetOwnerName();// 0x18b5a40
	function GetOwnerController();// 0x18b5a18
	function GetOwnerActor();// 0x18b59f0
	function GetItemDefineID();// 0x18b59a4
	function GetGrenadeAvatar();// 0x18b597c
	function GetComponentSlotTarget();// 0x18b58a8
	function GetColorByTeamID();// 0x206ccd8
	function GetBackpackItemHandle();// 0x18b5880
	function ForceHideWeaponWidget__DelegateSignature();// 0x206ccd8
	function DelayHandleAvatarMeshChanged();// 0x18b586c
	function ClientLoadDefaultMesh();// 0x18b5858
	function CheckNeedReInitWeaponOwnerData();// 0x18b57e0
	function CheckHasFuncByInt();// 0x18b5760
	function CheckHasFunc();// 0x18b5760
	function ChangeSequenceState();// 0x18b56e0
	function CallForceHideWeaponWidgetDel();// 0x18b56cc

--------------------------------
Class: MainWeaponTableStruct
	int KeyID;//[Offset: 0x0 , Size: 4]
	SkillIDList(IntProperty)[] SkillIDList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: WeaponAvatarComponent.AvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	bool bEnableAsyncLoadMatInTeamMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570 , Size: 1]
	bool bEnableAsyncLoadMatInInfection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x571 , Size: 1]
	delegate OnScopeEquipDelegate;//[Offset: 0x574 , Size: 12]
	delegate OnScopeUnequipDelegate;//[Offset: 0x580 , Size: 12]
	delegate OnWeaponAvatarLoaded;//[Offset: 0x58c , Size: 12]
	delegate OnWeaponAttachAvatarLoaded;//[Offset: 0x598 , Size: 12]
	delegate OnWeaponAvatarClearSlot;//[Offset: 0x5a4 , Size: 12]
	BackpackWeaponHandle* AsyncCacheWeaponHandle;//[Offset: 0x5b0 , Size: 4]
	delegate OnWeaponPartsEquipped;//[Offset: 0x5b4 , Size: 12]
	BattleItemHandleBase* handleRecord;//[Offset: 0x5c0 , Size: 4]
	BattleItemHandleBase* MasterWeaponHandle;//[Offset: 0x5c4 , Size: 4]
	<attachmentRef_Key(StructProperty) , attachmentRef(StructProperty)> attachmentRef;//[Offset: 0x5c8 , Size: 60]
	defaultSynData(StructProperty)[] defaultSynData;//[Offset: 0x610 , Size: 12]
	<DefaultAttachmentMesh_Key(IntProperty) , DefaultAttachmentMesh(StructProperty)> DefaultAttachmentMesh;//[Offset: 0x61c , Size: 60]
	<ParticleComponents_Key(IntProperty) , ParticleComponents(StructProperty)> ParticleComponents;//[Offset: 0x658 , Size: 60]
	STExtraWeapon* OwnerWeapon;//[Offset: 0x6a0 , Size: 4]
	function ShouldDisplayByQuality();// 0x191e950
	function ResetAttachmentParent();// 0x191e93c
	function RemoveParticleEffect();// 0x191e8c4
	function ReloadItemHandle();// 0x191e844
	function PutOnMasterComponentByItemHandle();// 0x191e6e4
	function PutOnEquipmentByResID();// 0x16b4d18
	function PutOnEquipmentByItemHandle();// 0x16b4bb8
	function PutOffEquimentByResID();// 0x16b4b30
	function PreFiltHandles();// 0x191e608
	function OnWeaponPartsEquipEvent__DelegateSignature();// 0x206ccd8
	function OnWeaponAvatarLoaded__DelegateSignature();// 0x206ccd8
	function OnWeaponAvatarClearSlot__DelegateSignature();// 0x206ccd8
	function OnWeaponAttachAvatarLoaded__DelegateSignature();// 0x206ccd8
	function OnScopeUnequipDelegate__DelegateSignature();// 0x206ccd8
	function OnScopeEquipDelegate__DelegateSignature();// 0x206ccd8
	function OnMeshLoaded();// 0x191e3b4
	function OnItemHandleLoaded();// 0x191e2e8
	function OnItemHandleListLoaded();// 0x191e190
	function OnDefaultItemLoaded();// 0x191e0c4
	function OnAsyncLoadMeshList();// 0x16b4858
	function OnAsyncInitDefaultAvatar();// 0x191e044
	function NetSyncData();// 0x191df44
	function LoadMeshsAsync();// 0x16b4528
	function LoadMeshListAsync();// 0x16b43fc
	function LoadDefaultAttachmentsAsync();// 0x191df30
	function IsTeammate();// 0x16b43cc
	function IsAutonomousAvatar();// 0x191df00
	function InitMasterComponent();// 0x191de80
	function InitialAvatarParam();// 0x191de00
	function InitDefaultMesh();// 0x16b4178
	function InitDefaultAvatar();// 0x16b40f8
	function InitDefaultAttachment();// 0x191dd3c
	function GetWeaponParentID();// 0x191dc60
	function GetWeaponController();// 0x191dc38
	function GetStaticMesh();// 0x191da2c
	function GetSocketName();// 0x191d958
	function GetSkeletalMesh();// 0x191d74c
	function GetMeshResRef();// 0x191d5e0
	function GetMeshPack();// 0x191d3dc
	function GetMeshComponentBySlotID();// 0x191d35c
	function GetMaterial();// 0x191d19c
	function GetEquippedHandle();// 0x191d11c
	function GetAttachmentSocketTransform();// 0x191d09c
	function GetAttachmentAnim();// 0x191cfd8
	function ClearMeshBySlot();// 0x16b393c
	function ClearMeshByItemHandle();// 0x16b38bc
	function CheckSlotIsEquipped();// 0x191cf0c
	function CheckIsAlreadyEquipped();// 0x191ce7c
	function ApplyStaticMeshByID();// 0x16b3714
	function ApplySkeletalMeshByID();// 0x16b356c
	function ApplyParticleEffect();// 0x191cd74
	function ApplyMaterial();// 0x16b3304
	function ApplyAttachment();// 0x191ccb0
	function ApplyAnimation();// 0x191cbf4

--------------------------------
Class: AvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x29c , Size: 4]
	<avatarMeshList_Key(IntProperty) , avatarMeshList(StructProperty)> avatarMeshList;//[Offset: 0x2a0 , Size: 60]
	<meshComponentList_Key(IntProperty) , meshComponentList(ObjectProperty)> meshComponentList;//[Offset: 0x2dc , Size: 60]
	<slotToSocket_Key(IntProperty) , slotToSocket(NameProperty)> slotToSocket;//[Offset: 0x318 , Size: 60]
	<DefaultAvataConfig_Key(EnumProperty) , DefaultAvataConfig(StructProperty)> DefaultAvataConfig;//[Offset: 0x354 , Size: 60]
	<loadedItemList_Key(IntProperty) , loadedItemList(ObjectProperty)> loadedItemList;//[Offset: 0x390 , Size: 60]
	int gender;//[Offset: 0x3cc , Size: 4]
	bool isNeedRefresh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0 , Size: 1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d1 , Size: 1]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d2 , Size: 1]
	<PendingLoadRes_Key(StructProperty) , PendingLoadRes(ObjectProperty)> PendingLoadRes;//[Offset: 0x3d4 , Size: 60]
	delegate OnAvatarEquipped;//[Offset: 0x410 , Size: 12]
	handleTickDispatcher(ObjectProperty)[] handleTickDispatcher;//[Offset: 0x41c , Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428 , Size: 1]
	<OutlineEnableList_Key(IntProperty) , OutlineEnableList(BoolProperty)> OutlineEnableList;//[Offset: 0x450 , Size: 60]
	bool bResSyncLoad;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48c , Size: 1]
	<PendingLoadMeshRequestList_Key(IntProperty) , PendingLoadMeshRequestList(StructProperty)> PendingLoadMeshRequestList;//[Offset: 0x498 , Size: 60]
	int AsyncLoadReqID;//[Offset: 0x4d4 , Size: 4]
	function ShowAttachmentByIndex();// 0x16b506c
	function SetMeshVisibleByID();// 0x16b4f50
	function ResetComponentMaster();// 0x16b4f3c
	function ResetAllAvataSlot();// 0x16b4f28
	function ReloadAllEquippedAvatar();// 0x16b4ea8
	function ReleaseMeshResourceMaterial();// 0x16b4da0
	function PutOnEquipmentByResID();// 0x16b4d18
	function PutOnEquipmentByItemHandle();// 0x16b4bb8
	function PutOffEquimentByResID();// 0x16b4b30
	function PutOffEquiment();// 0x16b4ab0
	function OnAsyncLoadMeshList();// 0x16b4858
	function OnAsyncLoadMesh();// 0x16b464c
	function LoadMeshsAsync();// 0x16b4528
	function LoadMeshListAsync();// 0x16b43fc
	function IsTeammate();// 0x16b43cc
	function IsSlotHasEquipped();// 0x16b434c
	function IsNeedReplaced();// 0x16b42c4
	function InitWidgetComponent();// 0x16b41f8
	function InitDefaultMesh();// 0x16b4178
	function InitDefaultAvatar();// 0x16b40f8
	function GetStaticMesh();// 0x16b3ff8
	function GetSlotDefinedID();// 0x16b3f64
	function GetSkeletalMesh();// 0x16b3e64
	function GetMaterial();// 0x16b3db0
	function GetEquimentMeshBySlot();// 0x16b3cb8
	function GetAvatarSlotTypeFromInt();// 0x16b3c40
	function GetApplyMeshType();// 0x16b3b28
	function DrawOutlineEffect();// 0x16b3a58
	function ClearMeshBySlot();// 0x16b393c
	function ClearMeshByItemHandle();// 0x16b38bc
	function ApplyStaticMeshByID();// 0x16b3714
	function ApplySkeletalMeshByID();// 0x16b356c
	function ApplyMesh();// 0x16b3414
	function ApplyMaterial();// 0x16b3304
	function ApplyConfig();// 0x16b32f0

--------------------------------
Class: AvatarComponentBase.SceneComponent.ActorComponent.Object
	bool bIsLobby;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x288 , Size: 1]
	bool bNeedUpdateLightMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x289 , Size: 1]
	FName LightVectorName;//[Offset: 0x290 , Size: 8]
	DirectionalLight* DirectionalLight;//[Offset: 0x298 , Size: 4]
	function GetGameInstance();// 0x16b7258

--------------------------------
Class: BackpackWeaponHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0xa8 , Size: 4]
	WeaponMeshCfg MeshPackage;//[Offset: 0xb0 , Size: 320]
	class AnimInstance* animBP;//[Offset: 0x1f0 , Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x1f8 , Size: 40]
	<AttachmentAvatarList_Key(StructProperty) , AttachmentAvatarList(StructProperty)> AttachmentAvatarList;//[Offset: 0x220 , Size: 60]
	DefaultAvatarList(StructProperty)[] DefaultAvatarList;//[Offset: 0x25c , Size: 12]
	ItemDefineID ParentID;//[Offset: 0x268 , Size: 24]
	ParentIDList(StructProperty)[] ParentIDList;//[Offset: 0x280 , Size: 12]
	class STExtraWeapon* lobbyWeapon;//[Offset: 0x28c , Size: 4]
	enum OverrideSocket;//[Offset: 0x290 , Size: 1]
	WeaponAttachmentAdditionalDataList(StructProperty)[] WeaponAttachmentAdditionalDataList;//[Offset: 0x294 , Size: 12]
	STExtraWeapon* CachedTargetWeapon;//[Offset: 0x2a0 , Size: 4]
	BattleItemPickupInfo CachedBattleItemPickupInfo;//[Offset: 0x2a8 , Size: 64]
	CachedWeaponAttachmentListBeforeDrop(StructProperty)[] CachedWeaponAttachmentListBeforeDrop;//[Offset: 0x2e8 , Size: 12]
	WeaponKillEffectCfg KillEffect;//[Offset: 0x2f4 , Size: 4]
	ParticleSystem* LightEffect;//[Offset: 0x2f8 , Size: 40]
	ParticleSystem* ShootLightEffect;//[Offset: 0x320 , Size: 40]
	<HitSoundMap_Key(ByteProperty) , HitSoundMap(SoftObjectProperty)> HitSoundMap;//[Offset: 0x348 , Size: 60]
	AkAudioEvent* SlashSound;//[Offset: 0x388 , Size: 40]
	bool IsInitUIWidget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b0 , Size: 1]
	function SaveWeaponAttachmentListBeforeDrop();// 0x16d8b98
	function PreLocalHandleDisuse();// 0x16d8b84
	function LocalSpawnWrapperOnGround();// 0x16d8ac0
	function LocalHandleUse();// 0x16d8508
	function LocalGetAvailableInstantLogicSocketName();// 0x16d8198
	function LocalAutoEquipAttachments();// 0x206ccd8
	function IsVirtualAvatarHandle();// 0x16d8168
	function IsAvatarWeapon();// 0x16d8140
	function GetWidgetList();// 0x16d73b0
	function GetSubSlotID();// 0x16d8110
	function GetSlotID();// 0x16d80e0
	function GetMeshPackCfgCopy();// 0x16d8074
	function GetMeshPackCfg();// 0x16d7eb4
	function GetDefaultAvatarList();// 0x16d7de0
	function GetAnimationBP();// 0x16d7db0

--------------------------------
Class: BattleItemHandleBase.ItemHandleBase.Object
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	AdditionalData(StructProperty)[] AdditionalData;//[Offset: 0x88 , Size: 12]
	float UnitWeight;//[Offset: 0x94 , Size: 4]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99 , Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a , Size: 1]
	function HanldeCleared();// 0x17101ac
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleEnable();// 0x16c084c
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function HandleBindToTargetItem();// 0x1738598
	function GetWorldInternal();// 0x1986fb0
	function ExtractItemData();// 0x16c6a74

--------------------------------
Class: ItemHandleBase.Object
	int count;//[Offset: 0x1c , Size: 4]
	int MaxCount;//[Offset: 0x20 , Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	<AssociationMap_Key(NameProperty) , AssociationMap(StructProperty)> AssociationMap;//[Offset: 0x28 , Size: 60]
	ItemDefineID DefineID;//[Offset: 0x68 , Size: 24]
	function SetAssociation();// 0x198d2fc
	function RemoveAssociation();// 0x198d284
	function Init();// 0x198d1f4
	function GetDefineID();// 0x198d1b0
	function GetAssociationMap();// 0x198d030
	function GetAssociationListByTargetType();// 0x198cf28
	function GetAssociationByTargetDefineID();// 0x198ce7c
	function GetAssociation();// 0x198cddc
	function AddAssociation();// 0x198ccd4

--------------------------------
Class: ItemDefineID
	int Type;//[Offset: 0x0 , Size: 4]
	int TypeSpecificID;//[Offset: 0x4 , Size: 4]
	bool bValidItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	bool bValidInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9 , Size: 1]
	uint64 InstanceID;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: BackpackComponent.ActorComponent.Object
	delegate ItemListUpdatedDelegate;//[Offset: 0xc4 , Size: 12]
	delegate SingleItemUpdatedDelegate;//[Offset: 0xd0 , Size: 12]
	delegate SingleItemDeleteDelegate;//[Offset: 0xdc , Size: 12]
	delegate CapacityUpdatedDelegate;//[Offset: 0xe8 , Size: 12]
	delegate ItemOperationDelegate;//[Offset: 0xf4 , Size: 12]
	delegate ItemOperCountDelegate;//[Offset: 0x100 , Size: 12]
	delegate ItemOperationFailedDelegate;//[Offset: 0x10c , Size: 12]
	delegate BackPackTipsToPlayerDelegate;//[Offset: 0x118 , Size: 12]
	delegate ItemUpdatedDelegate;//[Offset: 0x124 , Size: 12]
	delegate ItemRemovedDelegate;//[Offset: 0x130 , Size: 12]
	specialCountLimit(StructProperty)[] specialCountLimit;//[Offset: 0x13c , Size: 12]
	IncNetArray ItemListNet;//[Offset: 0x154 , Size: 24]
	CachItemList(StructProperty)[] CachItemList;//[Offset: 0x16c , Size: 12]
	IncNetArray ItemListNetCache;//[Offset: 0x178 , Size: 24]
	ItemHandleList(ObjectProperty)[] ItemHandleList;//[Offset: 0x194 , Size: 12]
	<ItemHandleMap_Key(StructProperty) , ItemHandleMap(ObjectProperty)> ItemHandleMap;//[Offset: 0x1a0 , Size: 60]
	int CapacityThreshold;//[Offset: 0x1dc , Size: 4]
	float Capacity;//[Offset: 0x1e0 , Size: 4]
	float OccupiedCapacity;//[Offset: 0x1e4 , Size: 4]
	int virtualitemid;//[Offset: 0x1f8 , Size: 4]
	delegate ZombieModeSkillPropLevelChangedDelegate;//[Offset: 0x200 , Size: 12]
	delegate ZombieModeSkillPropCDDelegate;//[Offset: 0x20c , Size: 12]
	bool IsForbidAutoEquipAttachments;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219 , Size: 1]
	function UseItem();// 0x1c60708
	function UpdateCapacity();// 0x1c606d8
	function UnequipItem();// 0x1c60650
	function TryMergeItemHandles();// 0x1c605c8
	function TakeItem();// 0x1c604a4
	function SwapItem();// 0x1c603b8
	function ServerEnableItem();// 0x1c60288
	function ReturnItem();// 0x1c60164
	function RemoveItemHandle();// 0x1c600cc
	function ReceiveItemList();// 0x1c600b0
	function ReceiveCapacity();// 0x1698f30
	function PickupItem();// 0x1c5fdb8
	function OnRep_specialCountLimit();// 0x1c5fda4
	function OnRep_ItemListNet();// 0x1c5fd90
	function OnRep_ItemList();// 0x1c5fd7c
	function OnRep_Capacity();// 0x1c5fd68
	function NotifyItemUpdated();// 0x1c5fcd8
	function NotifyItemRemoved();// 0x1c5fc48
	function NotifyItemListUpdated();// 0x176b2fc
	function NotifyCapacityUpdated();// 0x17c0580
	function NewItemHandle();// 0x1c5fbb0
	function ModifyItemHandleEquippingState();// 0x1c5faec
	function ModifyItemHandleCount();// 0x1c5fa30
	function ItemNet2Data();// 0x1c5f86c
	function HasUnEquipItemByDefindIdRange();// 0x1c5f7a8
	function HasItemBySubType();// 0x1c5f728
	function HasItemByDefineID();// 0x1c5f698
	function HasItemByDefindIdRange();// 0x1c5f5d4
	function GetWorld_BP();// 0x1c5f5ac
	function GetUnEquipItemNumByItemId();// 0x1c5f52c
	function GetSpecialItemNow();// 0x1c5f48c
	function GetSpecialItemBefore();// 0x1c5f3fc
	function GetLeastElectrictyBattleItemData();// 0x1c5f228
	function GetItemListByDefineID();// 0x1c5f0b8
	function GetItemHandleMap();// 0x1c5f080
	function GetItemHandleList();// 0x1c5f010
	function GetItemCountByType();// 0x1c5ef90
	function GetItemByDefineID();// 0x1c5eed4
	function GetFirstItemBySubType();// 0x1c5ee28
	function GetFirstItemByDefineIDIgnoreInstance();// 0x1c5ed6c
	function GetBattleItemFeatureDataByDefineID();// 0x1c5ecb8
	function GetAllItemList();// 0x1c5ec18
	function ForceNetUpdate();// 0x1795538
	function EquipItem();// 0x1c5eb90
	function DropItem();// 0x1c5ea70
	function DisuseItem();// 0x1c5e994
	function CreateItemHandleInternal();// 0x1c5e8fc
	function CreateItemHandle();// 0x1c5e864
	function ConsumeItem();// 0x1c5e790
	function ClientUpdateSingleItem();// 0x1c5e710
	function ClientUpdateItemData();// 0x1c5e674
	function ClientRemoveItemData();// 0x1c5e5d8
	function ClientBroadcastItemOperationFailedDelegate();// 0x1c5e4c0
	function ClientBroadcastItemOperationDelegate();// 0x1c5e3a8
	function CheckSpecialMaxCountForItem();// 0x1c5e2d4
	function CheckSkillPropItemCanBePickup();// 0x1c5e1f4
	function CheckCapacityForItem();// 0x1c5e120
	function CanDisuseToBackpack();// 0x1c5e090
	function BroadcastItemOperCountDelegate();// 0x1c5df80
	function BroadcastItemOperationFailedDelegate();// 0x1c5de70
	function BroadcastItemOperationDelegate();// 0x1c5dd60
	function AddItemHandle();// 0x1c5dc84

--------------------------------
Class: IncNetArray
	incArray(StructProperty)[] incArray;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: WeaponMeshCfg
	StaticMesh* stMesh;//[Offset: 0x0 , Size: 40]
	SkeletalMesh* skMesh;//[Offset: 0x28 , Size: 40]
	StaticMesh* stMeshLod;//[Offset: 0x50 , Size: 40]
	SkeletalMesh* skMeshLod;//[Offset: 0x78 , Size: 40]
	MaterialInterface* MeshMat;//[Offset: 0xa0 , Size: 40]
	MaterialInterface* OverrideMatByGameMode;//[Offset: 0xc8 , Size: 40]
	MaterialInterface* baseMat;//[Offset: 0xf0 , Size: 4]
	MaterialInterface* baseMatClass;//[Offset: 0xf8 , Size: 40]
	ParticleEffects(StructProperty)[] ParticleEffects;//[Offset: 0x120 , Size: 12]
	WidgetList(StructProperty)[] WidgetList;//[Offset: 0x12c , Size: 12]
	enum meshType;//[Offset: 0x138 , Size: 1]

--------------------------------
Class: BattleItemPickupInfo
	Object* Source;//[Offset: 0x0 , Size: 4]
	int count;//[Offset: 0x4 , Size: 4]
	AdditionalData(StructProperty)[] AdditionalData;//[Offset: 0x8 , Size: 12]
	bool bAutoEquip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	BattleItemUseTarget AutoEquipTarget;//[Offset: 0x18 , Size: 40]

--------------------------------
Class: BattleItemUseTarget
	ItemDefineID TargetDefineID;//[Offset: 0x0 , Size: 24]
	FName TargetAssociationName;//[Offset: 0x18 , Size: 8]
	Actor* TargetActor;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: WeaponKillEffectCfg
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: PlayerTombBox.Actor.Object
	delegate OnPickUpListWrapperDataEmptyDelegate;//[Offset: 0x2c8 , Size: 12]
	FName tombName;//[Offset: 0x2d8 , Size: 8]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x2e0 , Size: 4]
	STExtraBaseCharacter* DamageCauser;//[Offset: 0x2e4 , Size: 4]
	ItemDefineID KillByItemDefineID;//[Offset: 0x2e8 , Size: 24]
	int DeadTime;//[Offset: 0x300 , Size: 4]
	int BoxLifeSpan;//[Offset: 0x304 , Size: 4]
	bool bDisableCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	Vector AttachedRelLoc;//[Offset: 0x30c , Size: 12]
	Actor* AttachedActor;//[Offset: 0x318 , Size: 4]
	bool bIsLastDiedInTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	enum BoxType;//[Offset: 0x31d , Size: 1]
	uint32 OwnerUniqueID;//[Offset: 0x320 , Size: 4]
	int TargetPlayerKey;//[Offset: 0x324 , Size: 4]
	float AirDropBoxNetCullDistanceSquaredRate;//[Offset: 0x328 , Size: 4]
	PickUpListWrapperActor* BoxPickupWrapperActor;//[Offset: 0x32c , Size: 8]
	PickUpListWrapperActor* PickupListWrapper;//[Offset: 0x334 , Size: 4]
	function SwitchToDeadTombBox();// 0x16e6e40
	function RegisterToPlayerPickUpList();// 0x179ec00
	function OnRep_BoxLifeSpan();// 0x179ebec
	function OnRep_AttachmentReplication();// 0x16d3a24
	function OnRep_AttachedActor();// 0x179ebd8
	function HideDeadTombApparence();// 0x16f99b4
	function GetUniqueInstanceID();// 0x179ebb0
	function GetTombboxLifespan();// 0x179eb88
	function GetPickupWrapperActor();// 0x179eb6c
	function GetBoxPickupWrapperActor();// 0x179eb40
	function GenerateTreasureBoxWrappers();// 0x179ea24
	function GeneratePlayerBackpackWrappers();// 0x1723214
	function GenerateBoxWrappersInner();// 0x179e88c
	function GenerateBoxWrappersByPickUpItemDataList();// 0x179e790
	function GenerateAirDropBoxWrappers();// 0x179e630

--------------------------------
Class: PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object
	PickUpDataList(StructProperty)[] PickUpDataList;//[Offset: 0x43c , Size: 12]
	enum BoxType;//[Offset: 0x448 , Size: 1]
	function RPC_Broadcast_NotifyAllClientsModifyCount();// 0x1793220
	function RPC_Broadcast_ForceSyncAllData();// 0x179314c
	function OnWrapperEmptyDelegate__DelegateSignature();// 0x206ccd8
	function OnSomeonePickItemDelegate__DelegateSignature();// 0x206ccd8
	function OnRep_PickUpDataList();// 0x1793138
	function OnBoxEmptyDelegate__DelegateSignature();// 0x206ccd8
	function GetDataList();// 0x17930cc
	function FinishPickedUp();// 0x1792fc4

--------------------------------
Class: PickUpWrapperActor.UAENetActor.Actor.Object
	float NetCullDistanceSquaredRate;//[Offset: 0x2e4 , Size: 4]
	bool DestroyStaticMesh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	ItemDefineID DefineID;//[Offset: 0x2f0 , Size: 24]
	int count;//[Offset: 0x308 , Size: 4]
	bool bCanBePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	bool bHasBeenPickedUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30d , Size: 1]
	bool bIsInBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30e , Size: 1]
	ForbitPickPlayerNameList(StrProperty)[] ForbitPickPlayerNameList;//[Offset: 0x310 , Size: 12]
	bool bIsInAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	bool bDropedByPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d , Size: 1]
	FName OwnerName;//[Offset: 0x320 , Size: 8]
	uint32 OwnerUniqueID;//[Offset: 0x328 , Size: 4]
	Vector AttachedRelLoc;//[Offset: 0x32c , Size: 12]
	Actor* AttachedActor;//[Offset: 0x338 , Size: 4]
	SavedAdditionalDataList(StructProperty)[] SavedAdditionalDataList;//[Offset: 0x33c , Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348 , Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x34c , Size: 4]
	float PickUpColdCountDown;//[Offset: 0x350 , Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x378 , Size: 4]
	bool IsTrainModeSingleCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	float SingleTrainingModePickUpColdCD;//[Offset: 0x380 , Size: 4]
	ItemSpotSceneComponent* ItemSpotSceneComponent;//[Offset: 0x384 , Size: 4]
	FString ItemValue;//[Offset: 0x388 , Size: 12]
	FString ItemCategory;//[Offset: 0x394 , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a0 , Size: 1]
	bool bForceNotRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a1 , Size: 1]
	delegate OnWrapperPickedUp;//[Offset: 0x3a8 , Size: 12]
	StaticMeshComponent* PickupMesh;//[Offset: 0x3b8 , Size: 4]
	STExtraBaseCharacter* TargetPlayer;//[Offset: 0x3bc , Size: 4]
	int ObjectPoolSize;//[Offset: 0x3c0 , Size: 4]
	bool ObjectPoolEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4 , Size: 1]
	bool bShowDropEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c5 , Size: 1]
	FString EffectPath;//[Offset: 0x3c8 , Size: 12]
	FString DurationTime;//[Offset: 0x3d4 , Size: 12]
	int ItemID;//[Offset: 0x3e0 , Size: 4]
	Color DefaultColor;//[Offset: 0x3e4 , Size: 4]
	ParticleSystemComponent* EffectComponent;//[Offset: 0x410 , Size: 4]
	SoftObjectPath PickUpEffectPath;//[Offset: 0x418 , Size: 24]
	UAENetDriver* NetDriver;//[Offset: 0x430 , Size: 4]
	int SpotDataIndex;//[Offset: 0x438 , Size: 4]
	function UpdateAdditionalDataListOnServerAfterSpawn();// 0x1795eec
	function ToDetailString();// 0x1795e24
	function ShowMesh();// 0x1795da4
	function ShowActor();// 0x1795d90
	function SetDefineID();// 0x1795d00
	function SetCountOnServerAfterSpawn();// 0x1795c88
	function ServerResetShowActor();// 0x1795c74
	function RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList();// 0x1795b18
	function RPC_Broadcast_NotifyAllClientsHideActorForSomeTime();// 0x1795a64
	function OnRep_PickUpColdCountDown();// 0x1795a50
	function OnRep_AttachmentReplication();// 0x16d3a24
	function OnRep_AttachedActor();// 0x1795a3c
	function ModifyData();// 0x17959c4
	function MarkIsDropedByPlayerOnServer();// 0x17958fc
	function InitData();// 0x17955a4
	function GetPickupMesh();// 0x179557c
	function GetNetGUIDOffsetValue();// 0x1795554
	function GetDataList();// 0x17930cc
	function ForceNetUpdate();// 0x1795538
	function FinishPickedUp();// 0x1792fc4
	function ColdTimeCountDown();// 0x1795524
	function ClientResetShowActor();// 0x1795510
	function CheckPickUpDataIsWeapon();// 0x17954e8
	function BroadcastResetShowActor();// 0x179548c
	function BroadcastDataToAllClients();// 0x17953d8
	function AsyncLoadPickUpEffectDone();// 0x1795358
	function AddAdditionalDataListOnServerAfterSpawn();// 0x1795144

--------------------------------
Class: UAENetActor.Actor.Object
	int iRegionActor;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: ItemSpotSceneComponent.SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	int AIGroupID;//[Offset: 0x274 , Size: 4]
	byte SpotGroupType;//[Offset: 0x279 , Size: 1]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x27c , Size: 4]
	AllItems(StructProperty)[] AllItems;//[Offset: 0x280 , Size: 12]
	GroupSpotSceneComponent* GroupSpotSceneComponent;//[Offset: 0x28c , Size: 4]
	<CacheItemValeCategory_Key(StrProperty) , CacheItemValeCategory(IntProperty)> CacheItemValeCategory;//[Offset: 0x290 , Size: 60]
	function SetSpotProperty();// 0x1c764e8
	function RepeatSpotProperty();// 0x1c76430
	function GenerateSpot();// 0x1c76400
	function GenerateItems();// 0x1c76354
	function DoPickUp();// 0x1c760e4
	function CountCacheItemValeCategory();// 0x1c760bc

--------------------------------
Class: SpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte SpotType;//[Offset: 0x25d , Size: 1]
	int WorldCompositionID;//[Offset: 0x260 , Size: 4]
	float HalfHeight;//[Offset: 0x264 , Size: 4]
	int SpotProbability;//[Offset: 0x268 , Size: 4]
	float LineOffsetZ;//[Offset: 0x26c , Size: 4]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x270 , Size: 1]
	bool bIsSpotValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x271 , Size: 1]
	function SetSpotValid();// 0x1c812e0
	function LineTraceSingle();// 0x1c81024
	function IsSpotValid();// 0x1c80ff4
	function GetRandomCategory();// 0x1c80e28
	function GenerateSpot();// 0x1c76400
	function GenerateActor();// 0x1c80cb0

--------------------------------
Class: ItemSceneComponent.SceneComponent.ActorComponent.Object

--------------------------------
Class: ItemGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	Vector ItemGenerateOffset;//[Offset: 0x168 , Size: 12]
	byte BornIslandGroupType;//[Offset: 0x174 , Size: 1]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x175 , Size: 1]
	ItemGenerateStatisticsData ItemStatisticsData;//[Offset: 0x178 , Size: 196]
	<IgnoreItemClassPathSet(StrProperty)> IgnoreItemClassPathSet;//[Offset: 0x23c , Size: 60]
	SpotGroupPropertys(StructProperty)[] SpotGroupPropertys;//[Offset: 0x278 , Size: 12]
	<SpotGroupPropertysDic_Key(ByteProperty) , SpotGroupPropertysDic(StructProperty)> SpotGroupPropertysDic;//[Offset: 0x284 , Size: 60]
	SpotGroupProperty DefaultSpotGroupProperty;//[Offset: 0x2c0 , Size: 32]
	CurveFloat* SpotRateCurve;//[Offset: 0x2e0 , Size: 4]
	CurveFloat* ItemRateCurve;//[Offset: 0x2e4 , Size: 4]
	<CategoryRates_Key(StrProperty) , CategoryRates(FloatProperty)> CategoryRates;//[Offset: 0x2e8 , Size: 60]
	<ItemGenerateSpawnDatas_Key(StrProperty) , ItemGenerateSpawnDatas(StructProperty)> ItemGenerateSpawnDatas;//[Offset: 0x324 , Size: 60]
	BornIslandItems(ObjectProperty)[] BornIslandItems;//[Offset: 0x360 , Size: 12]
	AllValidGroups(ObjectProperty)[] AllValidGroups;//[Offset: 0x36c , Size: 12]
	bool bIsGenerateBornIslandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378 , Size: 1]
	bool bIsGenerateMainlandItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x379 , Size: 1]
	bool bIsGenerateWorldTileItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37a , Size: 1]
	DateTime GenerateBornIslandTime;//[Offset: 0x380 , Size: 8]
	DateTime GenerateMainlandTime;//[Offset: 0x388 , Size: 8]
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390 , Size: 1]
	AllRepeatItemSpotData(StructProperty)[] AllRepeatItemSpotData;//[Offset: 0x3d0 , Size: 12]
	AllItemSpotDataToTick(StructProperty)[] AllItemSpotDataToTick;//[Offset: 0x3e8 , Size: 12]
	FString CookedBandFilePath;//[Offset: 0x430 , Size: 12]
	function WriteItemClassStatisticsDatas_V15();// 0x16ad21c
	function WriteItemClassStatisticsDatas();// 0x1c74b98
	function WriteGroupStatisticsDatas();// 0x1c74b84
	function WriteBuildingStatisticsDatas();// 0x1c74b70
	function WriteAllStatisticsDatasToLog();// 0x1c74b54
	function WriteAllStatisticsDatas();// 0x1c74b38
	function SetCatetoryRate();// 0x1c7498c
	function RegisterItemGenerateSpawnData();// 0x1c748a8
	function RegisterBornIslandItem();// 0x1c74828
	function RandomSingleGroup();// 0x1c74670
	function RandomItemGenerateSpawnData();// 0x1c74444
	function RandomGroupsByType();// 0x1c7432c
	function RandomGroups();// 0x1698f30
	function RandomBornIslandGroups();// 0x1c74310
	function LoadItemGenerateTable();// 0x1c742f4
	function IsCatetoryEnabled();// 0x1c742cc
	function InitCatetorys();// 0x1c742b8
	function GetSpotGroupPropertyByGroupType();// 0x1c74190
	function GetRandomItemClassArray();// 0x1c73f58
	function GetCatetoryRate();// 0x1c73e90
	function GenerateSpotOnTick();// 0x16fbc78
	function DeleteValidGroups();// 0x1c73e7c
	function DeleteBornIslandItems();// 0x1c73e68
	function AddIgnoreItemClassPath();// 0x1c73d34

--------------------------------
Class: BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bWorldTileGenerator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool bModeStateControl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	int GenerateSpotCountPerTick;//[Offset: 0xc0 , Size: 4]
	FString ItemTableName;//[Offset: 0xc4 , Size: 12]
	UAEDataTable* ItemTable;//[Offset: 0xd0 , Size: 4]
	bool IsWriteStatisticsToLog;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	<AllGroupSpots_Key(ByteProperty) , AllGroupSpots(StructProperty)> AllGroupSpots;//[Offset: 0xd8 , Size: 60]
	AllSpotsToTick(ObjectProperty)[] AllSpotsToTick;//[Offset: 0x114 , Size: 12]
	<WorldTileSpots_Key(IntProperty) , WorldTileSpots(StructProperty)> WorldTileSpots;//[Offset: 0x120 , Size: 60]
	FString CookedFilePath;//[Offset: 0x15c , Size: 12]
	function RegisterWorldTileSpot();// 0x16fb9f8
	function RegisterSpotComponentToTick();// 0x16fbbf8
	function RegisterGroupSpotComponent();// 0x16fba78
	function GetRandomCategory();// 0x1c621dc
	function GeneratorWorldTileSpots();// 0x1c62110
	function GenerateSpots();// 0x1c600b0
	function GenerateSpotOnTick();// 0x16fbc78
	function GeneratePickupActor();// 0x1c61de4
	function CheckTileLevelsVisible();// 0x1c61dd0

--------------------------------
Class: ItemActorComponent.ActorComponent.Object

--------------------------------
Class: ItemGenerateStatisticsData
	int AllGroupSpotCount;//[Offset: 0x0 , Size: 4]
	int AllValidGroupSpotCount;//[Offset: 0x4 , Size: 4]
	int AllSpotCount;//[Offset: 0x8 , Size: 4]
	int AllValidSpotCount;//[Offset: 0xc , Size: 4]
	<GroupStatisticsData_Key(ByteProperty) , GroupStatisticsData(StructProperty)> GroupStatisticsData;//[Offset: 0x10 , Size: 60]
	<BuildingStatisticsData_Key(StrProperty) , BuildingStatisticsData(StructProperty)> BuildingStatisticsData;//[Offset: 0x4c , Size: 60]
	<ItemStatisticsData_Key(StrProperty) , ItemStatisticsData(StructProperty)> ItemStatisticsData;//[Offset: 0x88 , Size: 60]

--------------------------------
Class: SpotGroupProperty
	byte SpotGroupType;//[Offset: 0x0 , Size: 1]
	int SpotGroupPercent;//[Offset: 0x4 , Size: 4]
	SpotTypeProperties(StructProperty)[] SpotTypeProperties;//[Offset: 0x8 , Size: 12]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	float RepeatGenerateItemCDMin;//[Offset: 0x18 , Size: 4]
	float RepeatGenerateItemCDMax;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: UAEDataTable.DataTable.Object
	<nameToProperty_Key(NameProperty) , nameToProperty(ObjectProperty)> nameToProperty;//[Offset: 0x68 , Size: 60]

--------------------------------
Class: DateTime

--------------------------------
Class: GroupSpotSceneComponent.ItemSceneComponent.SceneComponent.ActorComponent.Object
	byte GroupType;//[Offset: 0x25d , Size: 1]
	bool bNearItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25e , Size: 1]
	int WorldCompositionID;//[Offset: 0x260 , Size: 4]
	float LastGenerateItemTime;//[Offset: 0x264 , Size: 4]
	float GenerateItemTimeCD;//[Offset: 0x268 , Size: 4]
	bool bPickup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26c , Size: 1]
	bool bRepeatGenerateItem;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26d , Size: 1]
	bool bIsValidGroup;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26e , Size: 1]
	function SetGroupValid();// 0x1c71b58
	function IsValidGroup();// 0x1c71b28
	function FindWorldCompositionID();// 0x1c71b00
	function DoPickUp();// 0x1c71aec

--------------------------------
Class: UAENetDriver.IpNetDriver.NetDriver.Object
	float NetCullChangeTime;//[Offset: 0x448 , Size: 4]

--------------------------------
Class: IpNetDriver.NetDriver.Object
	bool LogPortUnreach;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x3d8 , Size: 1]
	bool AllowPlayerPortUnreach;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x3d8 , Size: 1]
	uint32 MaxPortCountToTry;//[Offset: 0x3dc , Size: 4]
	uint32 ServerDesiredSocketReceiveBufferBytes;//[Offset: 0x3ec , Size: 4]
	uint32 ServerDesiredSocketSendBufferBytes;//[Offset: 0x3f0 , Size: 4]
	uint32 ClientDesiredSocketReceiveBufferBytes;//[Offset: 0x3f4 , Size: 4]
	uint32 ClientDesiredSocketSendBufferBytes;//[Offset: 0x3f8 , Size: 4]
	bool bResolveRemoteHostOnRecreateSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x444 , Size: 1]

--------------------------------
Class: WeaponOwnerProxy.Object
	Actor* OwnerActor;//[Offset: 0x28 , Size: 4]
	Pawn* OwnerPawn;//[Offset: 0x2c , Size: 4]
	Controller* OwnerController;//[Offset: 0x30 , Size: 4]
	STExtraWeapon* BindedWeapon;//[Offset: 0x34 , Size: 4]
	function OnWeaponStopFireDelegate__DelegateSignature();// 0x206ccd8
	function HandlePlayerSwitchCameraMode();// 0x192821c
	function HandlePlayerChangePose();// 0x1928160
	function GetOwnerSTExtraPlayerController();// 0x1928138
	function GetOwnerSTExtraPlayerCharacter();// 0x1928110
	function GetOwnerPlayerController();// 0x19280e8
	function GetOwnerPawn();// 0x19280c0
	function GetOwnerController();// 0x1928098
	function GetOwnerActor();// 0x192807c

--------------------------------
Class: WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	int WeaponID;//[Offset: 0xc0 , Size: 4]
	byte WeaponType;//[Offset: 0xc4 , Size: 1]
	byte WeaponTypeNew;//[Offset: 0xc5 , Size: 1]
	byte WeaponHoldType;//[Offset: 0xc6 , Size: 1]
	FName WeaponAttachSocket;//[Offset: 0xc8 , Size: 8]
	bool bUseCustomWeaponBackpackAttachSocket;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	FName CustomWeaponBackpackAttachSocket;//[Offset: 0xd8 , Size: 8]
	bool ShowBulletTraceWhenScoped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	int MaxNoGravityRange;//[Offset: 0xe4 , Size: 4]
	float LaunchGravityScale;//[Offset: 0xe8 , Size: 4]
	bool bEnableProneHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec , Size: 1]
	int UnableProneHoldingTipID;//[Offset: 0xf0 , Size: 4]
	bool bEnableVehicleHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool bEnableLeanOutHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	bool bEnableShovelHolding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6 , Size: 1]
	int UnableShovelHoldingTipID;//[Offset: 0xf8 , Size: 4]
	bool bEnablePeek;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfc , Size: 1]
	int UnablePeekTipID;//[Offset: 0x100 , Size: 4]
	bool bEnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	bool GuidedMissileVehicleRenderIsOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x105 , Size: 1]
	<PlugComponentSlotMap_Key(ByteProperty) , PlugComponentSlotMap(BoolProperty)> PlugComponentSlotMap;//[Offset: 0x108 , Size: 60]
	<PlugComponentSlotDataMap_Key(ByteProperty) , PlugComponentSlotDataMap(StructProperty)> PlugComponentSlotDataMap;//[Offset: 0x144 , Size: 60]
	float SwitchFromIdleToBackpackTime;//[Offset: 0x180 , Size: 4]
	float SwitchFromBackpackToIdleTime;//[Offset: 0x184 , Size: 4]
	Transform AttachToBackRelativeTransform_NoBagL;//[Offset: 0x190 , Size: 48]
	Transform AttachToBackRelativeTransform_NoBagR;//[Offset: 0x1c0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagL;//[Offset: 0x1f0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv1BagR;//[Offset: 0x220 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagL;//[Offset: 0x250 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv2BagR;//[Offset: 0x280 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagL;//[Offset: 0x2b0 , Size: 48]
	Transform AttachToBackRelativeTransform_Lv3BagR;//[Offset: 0x2e0 , Size: 48]
	MaterialInstance* WeaponMaterialUsedForDisplay;//[Offset: 0x310 , Size: 4]
	bool bIsShieldWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x314 , Size: 1]
	bool bCanBeHoldedWithShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x315 , Size: 1]

--------------------------------
Class: WeaponLogicBaseComponent.ActorComponent.Object
	STExtraWeapon* OwnerWeapon;//[Offset: 0xbc , Size: 4]
	function UpdateComponentTick();// 0x170e77c
	function TryGetOwnerWeapon();// 0x1920fd8
	function TryGetOwnerShootWeapon();// 0x1920fb0
	function IsLocalOrSpectorPlayer();// 0x1920f88

--------------------------------
Class: WeaponReconnectReplicateData
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x0 , Size: 4]
	Actor* WeaponOwner;//[Offset: 0x4 , Size: 4]
	bool UseNewReconnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	FString OwnerPlayerName;//[Offset: 0xc , Size: 12]
	FName WeaponInventoryLogicSocket;//[Offset: 0x18 , Size: 8]
	int WeaponBulletNumInClip;//[Offset: 0x20 , Size: 4]
	uint32 WeaponShootID;//[Offset: 0x24 , Size: 4]
	uint32 WeaponClipID;//[Offset: 0x28 , Size: 4]
	byte CurWeaponState;//[Offset: 0x2c , Size: 1]
	byte CurShootType;//[Offset: 0x2d , Size: 1]
	int CurShootTotalType;//[Offset: 0x30 , Size: 4]
	ItemDefineID DefineID;//[Offset: 0x38 , Size: 24]
	int BackpackPistolListIndex;//[Offset: 0x50 , Size: 4]
	bool bIsCurrentWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	int OperationIndex;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: SpawnAndBackpackWeaponReplicatedData
	STExtraWeapon* TargetWeapon;//[Offset: 0x0 , Size: 4]
	FName LogicSocket;//[Offset: 0x8 , Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bNeedSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	ItemDefineID ID;//[Offset: 0x18 , Size: 24]
	bool bResetBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	int OperationIndex;//[Offset: 0x34 , Size: 4]
	Actor* WeaponOwnerActor;//[Offset: 0x38 , Size: 4]
	FString OwnerCharacterName;//[Offset: 0x3c , Size: 12]
	bool bIsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]

--------------------------------
Class: STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	FName NormalBulletsTrackCompTag;//[Offset: 0xc0 , Size: 8]
	FName ScopeBulletsTrackCompTag;//[Offset: 0xc8 , Size: 8]
	bool bDrawShootLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd0 , Size: 1]
	float DrawShootLineTime;//[Offset: 0xd4 , Size: 4]
	bool bDrawShootPointOnScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	float DrawShootPointOnScreenTime;//[Offset: 0xdc , Size: 4]
	float DrawShootPointOnScreenSize;//[Offset: 0xe0 , Size: 4]
	float DrawShootPoint3DSize;//[Offset: 0xe4 , Size: 4]
	BulletTrackComponent* ShootWeaponBulletsTrackComponent;//[Offset: 0xe8 , Size: 4]
	BulletTrackComponent* ShootWeaponScopeBulletsTrackComponent;//[Offset: 0xec , Size: 4]
	ShootWeaponEntity* ShootWeaponEntityComponent;//[Offset: 0xf0 , Size: 4]
	bool bIsContinuousShooting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	int ContinuousShootingBulletsNum;//[Offset: 0xf8 , Size: 4]
	delegate OnShoot;//[Offset: 0xfc , Size: 12]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x108 , Size: 4]
	function VehicleShoot();// 0x189a234
	function ShootDelegate__DelegateSignature();// 0x206ccd8
	function ReInitWeaponOwnerData();// 0x189a220
	function OnWeaponClipMaxBulletChanged();// 0x189a20c
	function OnWeaponBulletChanged();// 0x189a1f8
	function OnContinuousShootStateChangedDelegate__DelegateSignature();// 0x206ccd8
	function OnContinuousShootDelegate__DelegateSignature();// 0x206ccd8
	function LocalShowDamageFloatingText();// 0x189a064
	function GetDamageAfterModify();// 0x1899ef0
	function GetBulletPosAndVelocity();// 0x1899e18
	function CheckShootState();// 0x1787f7c
	function CalcShootTargetLocByStartAndRot();// 0x1899cd0

--------------------------------
Class: BulletTrackComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xbc , Size: 4]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xc0 , Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0xc4 , Size: 4]
	int UseTss;//[Offset: 0x128 , Size: 4]
	bool IsAutonomousOrSpectorWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	function OnWeaponStopFire();// 0x16f9d68
	function OnWeaponStartFire();// 0x16f9d54
	function OnWeaponShoot();// 0x16f9d40
	function GetDataFromWeaponEntity();// 0x16f9d2c
	function GetCurRecoilInfo();// 0x16f9ce4
	function GetCurDeviation();// 0x16f9cbc
	function CheckComponentTick();// 0x16f9ca8

--------------------------------
Class: ShootWeaponEntity.WeaponEntity.WeaponLogicBaseComponent.ActorComponent.Object
	class STExtraShootWeaponBulletBase* BulletTemplate;//[Offset: 0x318 , Size: 4]
	float BulletFireSpeed;//[Offset: 0x31c , Size: 4]
	bool bAddOwnerOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	float MaxVelocityOffsetAddRate;//[Offset: 0x324 , Size: 4]
	int MaxBulletNumInOneClip;//[Offset: 0x328 , Size: 4]
	int MaxBulletNumInBarrel;//[Offset: 0x32c , Size: 4]
	int ExtendMaxBulletNumInOneClip;//[Offset: 0x330 , Size: 4]
	ReplaceExtendMaxBulletNumList(StructProperty)[] ReplaceExtendMaxBulletNumList;//[Offset: 0x334 , Size: 12]
	float ShootInterval;//[Offset: 0x340 , Size: 4]
	bool bHasSingleFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x344 , Size: 1]
	bool bHasAutoFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x345 , Size: 1]
	bool bHasBurstFireMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x346 , Size: 1]
	bool bScopeInBoltActionEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x347 , Size: 1]
	int BurstShootBulletsNum;//[Offset: 0x348 , Size: 4]
	float BurstShootInterval;//[Offset: 0x34c , Size: 4]
	float BurstShootCD;//[Offset: 0x350 , Size: 4]
	int BulletNumSingleShot;//[Offset: 0x354 , Size: 4]
	FName MuzzleSocketName;//[Offset: 0x358 , Size: 8]
	FName DefaultMuzzleSocketName;//[Offset: 0x360 , Size: 8]
	FName SilencerSocketName;//[Offset: 0x368 , Size: 8]
	FName FiringSuppressorSocketName;//[Offset: 0x370 , Size: 8]
	FName ShellDropSocketName;//[Offset: 0x378 , Size: 8]
	FName ScopeAimCameraSocketName;//[Offset: 0x380 , Size: 8]
	float ImpactEffectSkipDistance;//[Offset: 0x388 , Size: 4]
	float MaxImpactEffectSkipTime;//[Offset: 0x38c , Size: 4]
	byte shootType;//[Offset: 0x390 , Size: 1]
	int ShootTotalType;//[Offset: 0x394 , Size: 4]
	bool ADSManualStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398 , Size: 1]
	float WeaponWarnUpTime;//[Offset: 0x39c , Size: 4]
	WeaponHitPartCoff WeaponHitPartCoff;//[Offset: 0x3a0 , Size: 20]
	WeaponHitPartCoff WeaponHitPartCoffZombie;//[Offset: 0x3b4 , Size: 20]
	float BaseImpactDamage;//[Offset: 0x3c8 , Size: 4]
	float BulletRange;//[Offset: 0x3cc , Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x3d0 , Size: 4]
	byte ImpactDirType;//[Offset: 0x3d4 , Size: 1]
	RangeAttenuate(StructProperty)[] RangeAttenuate;//[Offset: 0x3d8 , Size: 12]
	float RangeModifier;//[Offset: 0x3e4 , Size: 4]
	float ReferenceDistance;//[Offset: 0x3e8 , Size: 4]
	float IgnoreRangeAttenuatDis;//[Offset: 0x3ec , Size: 4]
	class DamageType* DamageType;//[Offset: 0x3f0 , Size: 4]
	ItemDefineID BulletType;//[Offset: 0x3f8 , Size: 24]
	ItemDefineID ReplaceBulletType;//[Offset: 0x410 , Size: 24]
	bool bHasInfiniteClips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x428 , Size: 1]
	bool bClipHasInfiniteBullets;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x429 , Size: 1]
	int InitBulletInClip;//[Offset: 0x42c , Size: 4]
	bool bAutoReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430 , Size: 1]
	float TraceDistance;//[Offset: 0x434 , Size: 4]
	float MaxValidHitTime;//[Offset: 0x438 , Size: 4]
	<BreakThroughDampRateConfig_Key(ByteProperty) , BreakThroughDampRateConfig(FloatProperty)> BreakThroughDampRateConfig;//[Offset: 0x43c , Size: 60]
	bool bHasOBBulletTrack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478 , Size: 1]
	CurveFloat* OBBulletSpeedScaleCurve;//[Offset: 0x47c , Size: 4]
	WeaponVisualBulletClientModeConfig VisualBulletTrackConfig;//[Offset: 0x480 , Size: 56]
	Vector2D LocalOBBulletLaunchRangeFromMuzzle;//[Offset: 0x4b8 , Size: 8]
	float DamageImpulse;//[Offset: 0x4c0 , Size: 4]
	byte ReloadType;//[Offset: 0x4c4 , Size: 1]
	float PreFireTime;//[Offset: 0x4c8 , Size: 4]
	float PostFireTime;//[Offset: 0x4cc , Size: 4]
	float PostReloadTime;//[Offset: 0x4d0 , Size: 4]
	float ReloadDurationStart;//[Offset: 0x4d4 , Size: 4]
	float ReloadDurationLoop;//[Offset: 0x4d8 , Size: 4]
	float ReloadTime;//[Offset: 0x4dc , Size: 4]
	float ReloadTimeTactical;//[Offset: 0x4e0 , Size: 4]
	float ReloadTimeMagOut;//[Offset: 0x4e4 , Size: 4]
	float ReloadTimeMagIn;//[Offset: 0x4e8 , Size: 4]
	FName ReloadAllTIDName;//[Offset: 0x4f0 , Size: 8]
	FName ReloadTacticalTIDName;//[Offset: 0x4f8 , Size: 8]
	bool bUseSpecificBulletNumOnReload;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x500 , Size: 1]
	int ReloadSpecificBulletNum;//[Offset: 0x504 , Size: 4]
	bool ReloadWithNoCost;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x508 , Size: 1]
	AutoAimingConfig AutoAimingConfig;//[Offset: 0x50c , Size: 152]
	AdjustAutoAimingConfigByModeList(StructProperty)[] AdjustAutoAimingConfigByModeList;//[Offset: 0x5a4 , Size: 12]
	bool IsSupportAutoAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b0 , Size: 1]
	SRecoilInfo RecoilInfo;//[Offset: 0x5b4 , Size: 100]
	float AccessoriesVRecoilFactor;//[Offset: 0x618 , Size: 4]
	float AccessoriesHRecoilFactor;//[Offset: 0x61c , Size: 4]
	float AccessoriesRecoveryFactor;//[Offset: 0x620 , Size: 4]
	SDeviation DeviationInfo;//[Offset: 0x624 , Size: 64]
	float ShotGunVerticalSpread;//[Offset: 0x664 , Size: 4]
	float ShotGunHorizontalSpread;//[Offset: 0x668 , Size: 4]
	float GameDeviationFactor;//[Offset: 0x66c , Size: 4]
	float GameDeviationAccuracy;//[Offset: 0x670 , Size: 4]
	float AccessoriesDeviationFactor;//[Offset: 0x674 , Size: 4]
	byte CrossHairType;//[Offset: 0x678 , Size: 1]
	float CrossHairInitialSize;//[Offset: 0x67c , Size: 4]
	float CrossHairBurstSpeed;//[Offset: 0x680 , Size: 4]
	float CrossHairBurstIncreaseSpeed;//[Offset: 0x684 , Size: 4]
	float VehicleWeaponDeviationAngle;//[Offset: 0x688 , Size: 4]
	FName DefaultScopeSocket;//[Offset: 0x690 , Size: 8]
	FName DefaultGripSocket;//[Offset: 0x698 , Size: 8]
	FName DefaultGunStockSocket;//[Offset: 0x6a0 , Size: 8]
	FName DefaultMagSocket;//[Offset: 0x6a8 , Size: 8]
	float WeaponBodyLength;//[Offset: 0x6b0 , Size: 4]
	OpticalSightAttachmentSocketNameList(NameProperty)[] OpticalSightAttachmentSocketNameList;//[Offset: 0x6b4 , Size: 12]
	float WeaponAimFOV;//[Offset: 0x6c4 , Size: 4]
	float WeaponAimInTime;//[Offset: 0x6c8 , Size: 4]
	float WeaponAimPitchRate;//[Offset: 0x6cc , Size: 4]
	float WeaponAimYawRate;//[Offset: 0x6d0 , Size: 4]
	float GameMotionYawRate;//[Offset: 0x6d4 , Size: 4]
	float GameMotionPitchRate;//[Offset: 0x6d8 , Size: 4]
	float ForegripParam;//[Offset: 0x6dc , Size: 4]
	float MagParam;//[Offset: 0x6e0 , Size: 4]
	bool SimulateMagParam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6e4 , Size: 1]
	float SensitiveFireYawRate;//[Offset: 0x6e8 , Size: 4]
	float SensitiveFirePitchRate;//[Offset: 0x6ec , Size: 4]
	byte SightType;//[Offset: 0x6f0 , Size: 1]
	ItemDefineID DefaultScopeID;//[Offset: 0x6f8 , Size: 24]
	float MaxBulletImpactFXClampDistance;//[Offset: 0x710 , Size: 4]
	int MaxBulletImpactFXSpawnNum;//[Offset: 0x714 , Size: 4]
	float RecoilKickADS;//[Offset: 0x718 , Size: 4]
	float ExtraHitPerformScale;//[Offset: 0x71c , Size: 4]
	float HUDAlphaDecreaseSpeedScale;//[Offset: 0x720 , Size: 4]
	bool bAutoExitScopeAfterFire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x724 , Size: 1]
	enum ReleaseFireType;//[Offset: 0x725 , Size: 1]
	bool bEnableScopeIn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x726 , Size: 1]
	bool bLock90DirWhenPitchAbove75;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x727 , Size: 1]
	float LockAnimPitchDegree;//[Offset: 0x728 , Size: 4]
	float LockAnimPitchDegreeCrouch;//[Offset: 0x72c , Size: 4]
	float AnimationKick;//[Offset: 0x730 , Size: 4]
	int ReloadAnimSlot;//[Offset: 0x734 , Size: 4]
	bool ReloadAnimAdditive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x738 , Size: 1]
	bool bShowBarrelBulletNumUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x739 , Size: 1]
	function ReloadNoEncodeAttr();// 0x17cfc60
	function ReloadEncodeAttr();// 0x17cfc4c
	function ReloadCanModifyInGameAttr();// 0x17cfab0
	function ReloadAttr();// 0x17cfa9c
	function GetBulletType();// 0x17cfa50
	function GetAttrReloadTableName();// 0x17cf990
	function EncodeAttr();// 0x17cf97c

--------------------------------
Class: STExtraShootWeaponBulletBase.Actor.Object
	BulletMovementComponent* PMComp;//[Offset: 0x2c4 , Size: 4]
	bool bLaunchWithGravity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	int MaxNoGravityRange;//[Offset: 0x2cc , Size: 4]
	float LaunchGravityScale;//[Offset: 0x2d0 , Size: 4]
	int PunctureTimes;//[Offset: 0x2d4 , Size: 4]
	class STEShootWeaponBulletImpactEffect* ImpactActorTemplate;//[Offset: 0x2d8 , Size: 4]
	class DamageType* DamageType;//[Offset: 0x2dc , Size: 4]
	ParticleSystem* NormalTailFX;//[Offset: 0x2e0 , Size: 4]
	bool bShowNormalTailFXImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4 , Size: 1]
	bool bDrawImpactNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e5 , Size: 1]
	ParticleSystem* BeamTailFX;//[Offset: 0x2e8 , Size: 4]
	Vector RootScale;//[Offset: 0x2ec , Size: 12]
	bool bUseOffsetVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8 , Size: 1]
	bool bHasFlyPastEarSound;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f9 , Size: 1]
	Vector ShootDir;//[Offset: 0x2fc , Size: 12]
	bool bIgnoreCahracterRootCompImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x308 , Size: 1]
	STExtraShootWeapon* OwningShootWeapon;//[Offset: 0x3f0 , Size: 4]
	delegate OnResetBullet;//[Offset: 0x3f4 , Size: 12]
	delegate OnBulletImpact;//[Offset: 0x400 , Size: 12]
	delegate OnLaunchBullet;//[Offset: 0x40c , Size: 12]
	ParticleSystemComponent* BeamTailFXComp;//[Offset: 0x418 , Size: 4]
	Actor* WeaponOwnerPawn;//[Offset: 0x41c , Size: 4]
	float WeaponFloorHeight;//[Offset: 0x48c , Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x490 , Size: 12]
	byte CachedOwnerRole;//[Offset: 0x49c , Size: 1]
	uint32 OwnerPlayerKey;//[Offset: 0x4a0 , Size: 4]
	function ResetBulletDelegate__DelegateSignature();// 0x206ccd8
	function ReloadNoEncodeAttr();// 0x16a8160
	function OnImpactEnd();// 0x16e78fc
	function OnImpactDelegate__DelegateSignature();// 0x206ccd8
	function OnImpact();// 0x16e7858
	function NeedCheckBulletFlySound();// 0x1899828
	function LaunchBulletDelegate__DelegateSignature();// 0x206ccd8
	function GetMaxBulletFlySpeed();// 0x17c8a74

--------------------------------
Class: BulletMovementComponent.ProjectileMovementComponent.MovementComponent.ActorComponent.Object
	bool bIgnoreBounceReflectOnce;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x152 , Size: 1]
	bool bEnableTickDelayForOneFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x153 , Size: 1]
	bool bNeedStopWhenImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	SceneComponent* LastUpdateComponentBeforeStop;//[Offset: 0x158 , Size: 4]
	function ResumeMoveAfterImpactWithNoLost();// 0x16f95a4
	function ResetTickDelay();// 0x16f9588
	function IgnoreBounceReflectOnce();// 0x16f956c
	function ForceStop();// 0x16f9558

--------------------------------
Class: STEShootWeaponBulletImpactEffect.Actor.Object
	ParticleSystem* DefaultFX;//[Offset: 0x2c8 , Size: 4]
	ParticleSystem* ConcreteFX;//[Offset: 0x2cc , Size: 4]
	ParticleSystem* DirtFX;//[Offset: 0x2d0 , Size: 4]
	ParticleSystem* WaterFX;//[Offset: 0x2d4 , Size: 4]
	ParticleSystem* MetalFX;//[Offset: 0x2d8 , Size: 4]
	ParticleSystem* WoodFX;//[Offset: 0x2dc , Size: 4]
	ParticleSystem* GlassFX;//[Offset: 0x2e0 , Size: 4]
	ParticleSystem* GrassFX;//[Offset: 0x2e4 , Size: 4]
	ParticleSystem* FleshFX;//[Offset: 0x2e8 , Size: 4]
	ParticleSystem* SteelFX;//[Offset: 0x2ec , Size: 4]
	ParticleSystem* SandbagFX;//[Offset: 0x2f0 , Size: 4]
	ParticleSystem* SandFX;//[Offset: 0x2f4 , Size: 4]
	ParticleSystem* ClothFX;//[Offset: 0x2f8 , Size: 4]
	ParticleSystem* PlasticFX;//[Offset: 0x2fc , Size: 4]
	ParticleSystem* LeatherFX;//[Offset: 0x300 , Size: 4]
	ParticleSystem* CeramicsFX;//[Offset: 0x304 , Size: 4]
	ParticleSystem* PaperFX;//[Offset: 0x308 , Size: 4]
	ParticleSystem* StoneFX;//[Offset: 0x30c , Size: 4]
	ParticleSystem* SnowFX;//[Offset: 0x310 , Size: 4]
	ParticleSystem* PopCanFX;//[Offset: 0x314 , Size: 4]
	ParticleSystem* PyreflyFX;//[Offset: 0x318 , Size: 4]
	ParticleSystem* LeafFX;//[Offset: 0x31c , Size: 4]
	ParticleSystem* CarFX;//[Offset: 0x320 , Size: 4]
	ParticleSystem* AsphaltFX;//[Offset: 0x324 , Size: 4]
	ParticleSystem* IceFX;//[Offset: 0x328 , Size: 4]
	bool bForceDefaultFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	AkAudioEvent* DefaultSound;//[Offset: 0x330 , Size: 4]
	AkAudioEvent* ConcreteSound;//[Offset: 0x334 , Size: 4]
	AkAudioEvent* DirtSound;//[Offset: 0x338 , Size: 4]
	AkAudioEvent* WaterSound;//[Offset: 0x33c , Size: 4]
	AkAudioEvent* MetalSound;//[Offset: 0x340 , Size: 4]
	AkAudioEvent* WoodSound;//[Offset: 0x344 , Size: 4]
	AkAudioEvent* GlassSound;//[Offset: 0x348 , Size: 4]
	AkAudioEvent* GrassSound;//[Offset: 0x34c , Size: 4]
	AkAudioEvent* FleshSound;//[Offset: 0x350 , Size: 4]
	AkAudioEvent* SteelSound;//[Offset: 0x354 , Size: 4]
	AkAudioEvent* SandbagSound;//[Offset: 0x358 , Size: 4]
	AkAudioEvent* SandSound;//[Offset: 0x35c , Size: 4]
	AkAudioEvent* ClothSound;//[Offset: 0x360 , Size: 4]
	AkAudioEvent* PlasticSound;//[Offset: 0x364 , Size: 4]
	AkAudioEvent* LeatherSound;//[Offset: 0x368 , Size: 4]
	AkAudioEvent* CeramicsSound;//[Offset: 0x36c , Size: 4]
	AkAudioEvent* PaperSound;//[Offset: 0x370 , Size: 4]
	AkAudioEvent* StoneSound;//[Offset: 0x374 , Size: 4]
	AkAudioEvent* SnowSound;//[Offset: 0x378 , Size: 4]
	AkAudioEvent* PopCanSound;//[Offset: 0x37c , Size: 4]
	AkAudioEvent* PyreflySound;//[Offset: 0x380 , Size: 4]
	AkAudioEvent* LeafSound;//[Offset: 0x384 , Size: 4]
	AkAudioEvent* CarSound;//[Offset: 0x388 , Size: 4]
	AkAudioEvent* AsphaltSound;//[Offset: 0x38c , Size: 4]
	AkAudioEvent* IceSound;//[Offset: 0x390 , Size: 4]
	AkAudioEvent* ShootFeedbackSound;//[Offset: 0x394 , Size: 4]
	AkAudioEvent* ShootShieldFeedbackSound;//[Offset: 0x398 , Size: 4]
	DecalData DefaultDecal;//[Offset: 0x39c , Size: 28]
	DecalData ConcreteDecal;//[Offset: 0x3b8 , Size: 28]
	DecalData DirtDecal;//[Offset: 0x3d4 , Size: 28]
	DecalData WaterDecal;//[Offset: 0x3f0 , Size: 28]
	DecalData MetalDecal;//[Offset: 0x40c , Size: 28]
	DecalData WoodDecal;//[Offset: 0x428 , Size: 28]
	DecalData GrassDecal;//[Offset: 0x444 , Size: 28]
	DecalData GlassDecal;//[Offset: 0x460 , Size: 28]
	DecalData FleshDecal;//[Offset: 0x47c , Size: 28]
	DecalData SteelDecal;//[Offset: 0x498 , Size: 28]
	DecalData SandbagDecal;//[Offset: 0x4b4 , Size: 28]
	DecalData SandDecal;//[Offset: 0x4d0 , Size: 28]
	DecalData ClothDecal;//[Offset: 0x4ec , Size: 28]
	DecalData PlasticDecal;//[Offset: 0x508 , Size: 28]
	DecalData LeatherDecal;//[Offset: 0x524 , Size: 28]
	DecalData CeramicsDecal;//[Offset: 0x540 , Size: 28]
	DecalData PaperDecal;//[Offset: 0x55c , Size: 28]
	DecalData StoneDecal;//[Offset: 0x578 , Size: 28]
	DecalData SnowDecal;//[Offset: 0x594 , Size: 28]
	DecalData PopCanDecal;//[Offset: 0x5b0 , Size: 28]
	DecalData PyreflyDecal;//[Offset: 0x5cc , Size: 28]
	DecalData LeafDecal;//[Offset: 0x5e8 , Size: 28]
	DecalData CarDecal;//[Offset: 0x604 , Size: 28]
	DecalData AsphaltDecal;//[Offset: 0x620 , Size: 28]
	DecalData IceDecal;//[Offset: 0x63c , Size: 28]
	BulletHitInfoUploadData SurfaceHit;//[Offset: 0x660 , Size: 304]
	bool bAudioOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x790 , Size: 1]
	bool bAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x791 , Size: 1]
	DecalComponent* ImpactDecalComp;//[Offset: 0x794 , Size: 4]
	ParticleSystemComponent* ImpactParticleComp;//[Offset: 0x798 , Size: 4]
	SceneComponent* TargetImpactComp;//[Offset: 0x7c0 , Size: 4]
	ParticleSystem* GreenBloodFleshFX;//[Offset: 0x800 , Size: 4]
	<WeaponAvatarSpecialFleshFX_Key(IntProperty) , WeaponAvatarSpecialFleshFX(ObjectProperty)> WeaponAvatarSpecialFleshFX;//[Offset: 0x804 , Size: 60]
	function TimerHideDecal();// 0x17f9b1c

--------------------------------
Class: DecalData
	float DecalSize;//[Offset: 0x0 , Size: 4]
	float LifeSpan;//[Offset: 0x4 , Size: 4]
	Material* DecalMaterial;//[Offset: 0x8 , Size: 4]
	float ImpactEffectStartScaleDistance;//[Offset: 0xc , Size: 4]
	float ImpactEffectEndScaleDistance;//[Offset: 0x10 , Size: 4]
	float ImpactEffectStartScaleValue;//[Offset: 0x14 , Size: 4]
	float ImpactEffectEndScaleValue;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BulletHitInfoUploadData
	Vector ImpactPoint;//[Offset: 0x0 , Size: 12]
	Vector_NetQuantizeNormal ImpactNormal;//[Offset: 0xc , Size: 12]
	Vector VictimLocation;//[Offset: 0x18 , Size: 12]
	Vector BulletPos;//[Offset: 0x24 , Size: 12]
	Vector ShootMomentMuzzlePos;//[Offset: 0x30 , Size: 12]
	Vector2D ShootDir2D;//[Offset: 0x3c , Size: 8]
	byte SurfaceType;//[Offset: 0x44 , Size: 1]
	uint32 ShootID;//[Offset: 0x48 , Size: 4]
	uint16 CompensationTime;//[Offset: 0x4c , Size: 2]
	Actor* Actor;//[Offset: 0x50 , Size: 8]
	PrimitiveComponent* Component;//[Offset: 0x58 , Size: 8]
	int TimeStamp;//[Offset: 0x60 , Size: 4]
	int ClientShootTime;//[Offset: 0x64 , Size: 4]
	byte HitBodyType;//[Offset: 0x68 , Size: 1]
	uint32 CharacterImpactOffsetSquared;//[Offset: 0x6c , Size: 4]
	float MuzzleFloorHeight;//[Offset: 0x70 , Size: 4]
	Vector WeaponOwnerPos;//[Offset: 0x74 , Size: 12]
	float DamageRate;//[Offset: 0x80 , Size: 4]
	bool bIsFirstImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	double SystemTimeStamp;//[Offset: 0x88 , Size: 8]
	Vector GunTailPos;//[Offset: 0x90 , Size: 12]
	FName BoneName;//[Offset: 0xa0 , Size: 8]
	Transform BoneTrans;//[Offset: 0xb0 , Size: 48]
	MoveBaseInfo_NetQuantize VictimBase;//[Offset: 0xe0 , Size: 80]

--------------------------------
Class: MoveBaseInfo_NetQuantize

--------------------------------
Class: WeaponHitPartCoff
	float Head;//[Offset: 0x0 , Size: 4]
	float Body;//[Offset: 0x4 , Size: 4]
	float Limbs;//[Offset: 0x8 , Size: 4]
	float Hand;//[Offset: 0xc , Size: 4]
	float Foot;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: WeaponVisualBulletClientModeConfig
	WeaponVisualBulletCameraModeConfig AutonomousClientSetting;//[Offset: 0x0 , Size: 24]
	WeaponVisualBulletCameraModeConfig OBPawnPerspectiveClientSetting;//[Offset: 0x18 , Size: 24]
	WeaponVisualBulletItemConfig DefaultSetting;//[Offset: 0x30 , Size: 8]

--------------------------------
Class: WeaponVisualBulletCameraModeConfig
	WeaponVisualBulletItemConfig FPPSetting;//[Offset: 0x0 , Size: 8]
	WeaponVisualBulletItemConfig TPPSetting;//[Offset: 0x8 , Size: 8]
	WeaponVisualBulletItemConfig GunADSSetting;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: WeaponVisualBulletItemConfig
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	ParticleSystem* VisualBulletTrackFX;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AutoAimingConfig
	AutoAimingRangeConfig OuterRange;//[Offset: 0x0 , Size: 72]
	AutoAimingRangeConfig InnerRange;//[Offset: 0x48 , Size: 72]
	float followTimeMax;//[Offset: 0x90 , Size: 4]
	float MaxAngle;//[Offset: 0x94 , Size: 4]

--------------------------------
Class: AutoAimingRangeConfig
	float Speed;//[Offset: 0x0 , Size: 4]
	float RangeRate;//[Offset: 0x4 , Size: 4]
	float SpeedRate;//[Offset: 0x8 , Size: 4]
	float RangeRateSight;//[Offset: 0xc , Size: 4]
	float SpeedRateSight;//[Offset: 0x10 , Size: 4]
	float CrouchRate;//[Offset: 0x14 , Size: 4]
	float ProneRate;//[Offset: 0x18 , Size: 4]
	float DyingRate;//[Offset: 0x1c , Size: 4]
	float DriveVehicleRate;//[Offset: 0x20 , Size: 4]
	float InVehicleRate;//[Offset: 0x24 , Size: 4]
	float FreeFallRate;//[Offset: 0x28 , Size: 4]
	float OpeningRate;//[Offset: 0x2c , Size: 4]
	float LandingRate;//[Offset: 0x30 , Size: 4]
	float adsorbMaxRange;//[Offset: 0x34 , Size: 4]
	float adsorbMinRange;//[Offset: 0x38 , Size: 4]
	float adsorbMinAttenuationDis;//[Offset: 0x3c , Size: 4]
	float adsorbMaxAttenuationDis;//[Offset: 0x40 , Size: 4]
	float adsorbActiveMinRange;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: SRecoilInfo
	float VerticalRecoilMin;//[Offset: 0x0 , Size: 4]
	float VerticalRecoilMax;//[Offset: 0x4 , Size: 4]
	float VerticalRecoilVariation;//[Offset: 0x8 , Size: 4]
	float VerticalRecoveryModifier;//[Offset: 0xc , Size: 4]
	float VerticalRecoveryClamp;//[Offset: 0x10 , Size: 4]
	float VerticalRecoveryMax;//[Offset: 0x14 , Size: 4]
	float LeftMax;//[Offset: 0x18 , Size: 4]
	float RightMax;//[Offset: 0x1c , Size: 4]
	float HorizontalTendency;//[Offset: 0x20 , Size: 4]
	CurveVector* RecoilCurve;//[Offset: 0x24 , Size: 4]
	int BulletPerSwitch;//[Offset: 0x28 , Size: 4]
	float TimePerSwitch;//[Offset: 0x2c , Size: 4]
	bool SwitchOnTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30 , Size: 1]
	float RecoilSpeedVertical;//[Offset: 0x34 , Size: 4]
	float RecoilSpeedHorizontal;//[Offset: 0x38 , Size: 4]
	float RecovertySpeedVertical;//[Offset: 0x3c , Size: 4]
	float RecoilValueClimb;//[Offset: 0x40 , Size: 4]
	float RecoilValueFail;//[Offset: 0x44 , Size: 4]
	float RecoilModifierStand;//[Offset: 0x48 , Size: 4]
	float RecoilModifierCrouch;//[Offset: 0x4c , Size: 4]
	float RecoilModifierProne;//[Offset: 0x50 , Size: 4]
	float RecoilHorizontalMinScalar;//[Offset: 0x54 , Size: 4]
	float BurstEmptyDelay;//[Offset: 0x58 , Size: 4]
	bool ShootSightReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float ShootSightReturnSpeed;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: SDeviation
	float DeviationBase;//[Offset: 0x0 , Size: 4]
	float DeviationBaseAim;//[Offset: 0x4 , Size: 4]
	float DeviationBaseADS;//[Offset: 0x8 , Size: 4]
	float DeviationRecoilGain;//[Offset: 0xc , Size: 4]
	float DeviationRecoilGainAim;//[Offset: 0x10 , Size: 4]
	float DeviationRecoilGainADS;//[Offset: 0x14 , Size: 4]
	float DeviationMax;//[Offset: 0x18 , Size: 4]
	float DeviationMinMove;//[Offset: 0x1c , Size: 4]
	float DeviationMaxMove;//[Offset: 0x20 , Size: 4]
	float DeviationMoveMultiplier;//[Offset: 0x24 , Size: 4]
	float DeviationMoveMinRefrence;//[Offset: 0x28 , Size: 4]
	float DeviationMoveMaxRefrence;//[Offset: 0x2c , Size: 4]
	float DeviationStanceStand;//[Offset: 0x30 , Size: 4]
	float DeviationStanceCrouch;//[Offset: 0x34 , Size: 4]
	float DeviationStanceProne;//[Offset: 0x38 , Size: 4]
	float DeviationStanceJump;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: NormalProjectileComponent.STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float AutoRecoverShootLockInterval;//[Offset: 0x2d8 , Size: 4]
	NormalProjectileVerifyConfig VerifyConfig;//[Offset: 0x2dc , Size: 44]
	delegate OnHandleShootDamageDelegate;//[Offset: 0x308 , Size: 12]
	bool bNeedWaitClientBulletLaunch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	float CurShootLockInterval;//[Offset: 0x31c , Size: 4]
	function UpdateShootLockCD();// 0x1787fac
	function OnHandleShootDamageDelegate__DelegateSignature();// 0x206ccd8
	function CheckShootState();// 0x1787f7c

--------------------------------
Class: STEShootWeaponProjectComponent.STExtraShootWeaponComponent.WeaponLogicBaseComponent.ActorComponent.Object
	BulletCacheList(ObjectProperty)[] BulletCacheList;//[Offset: 0x2cc , Size: 12]

--------------------------------
Class: NormalProjectileVerifyConfig
	float MaxShootPointTolerateDistanceOffset;//[Offset: 0x0 , Size: 4]
	float MaxShootPointTolerateDistanceOffsetVehicle;//[Offset: 0x4 , Size: 4]
	float MaxImpactPointTolerateDistanceOffset;//[Offset: 0x8 , Size: 4]
	float BlockVerifyImpactNormalOffset;//[Offset: 0xc , Size: 4]
	bool bVerifyBulletScDiff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	float MaxDiffServerClient;//[Offset: 0x14 , Size: 4]
	bool bVerifyShootDir2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	float ShortDirReverseDistance;//[Offset: 0x1c , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0x20 , Size: 4]
	bool bVerifyWeaponFireInfoTimeForcePunish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	bool bVerifyClientFlySpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x25 , Size: 1]
	bool bVerifyLauchTimeWithServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x26 , Size: 1]
	float ClientServerFlyTimeTorelate;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: ShootWeaponEffectComponent.WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	class CameraShake* CameraShakeTemplate_NormalCameraMode;//[Offset: 0x104 , Size: 4]
	class CameraShake* CameraShakeTemplate_NearCameraMode;//[Offset: 0x108 , Size: 4]
	class CameraShake* CameraShakeTemplate_AimCameraMode;//[Offset: 0x10c , Size: 4]
	float CameraShakeInnerRadius;//[Offset: 0x110 , Size: 4]
	float CameraShakeOuterRadius;//[Offset: 0x114 , Size: 4]
	float CameraShakFalloff;//[Offset: 0x118 , Size: 4]
	bool bNeedRefreshMuzzle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	bool bNeedOptimizeMuzzleFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11e , Size: 1]
	ParticleSystem* MuzzleFX;//[Offset: 0x120 , Size: 4]
	Vector LocalMuzzelFXScale;//[Offset: 0x124 , Size: 12]
	ParticleSystem* ScopeMuzzleFX;//[Offset: 0x130 , Size: 4]
	Vector ScopeMuzzelFXScale;//[Offset: 0x134 , Size: 12]
	ParticleSystem* RemoteMuzzleFX;//[Offset: 0x140 , Size: 4]
	Vector RemoteMuzzelFXScale;//[Offset: 0x144 , Size: 12]
	FXDistancaScaleStruct RemoteMuzzleFXDistanceScale;//[Offset: 0x150 , Size: 16]
	ParticleSystem* LocalSilencerMuzzleFX;//[Offset: 0x160 , Size: 4]
	Vector LocalSilencerMuzzelFXScale;//[Offset: 0x164 , Size: 12]
	ParticleSystem* ScopeSilencerMuzzleFX;//[Offset: 0x170 , Size: 4]
	Vector ScopeSilencerMuzzelFXScale;//[Offset: 0x174 , Size: 12]
	ParticleSystem* RemoteSilencerMuzzleFX;//[Offset: 0x180 , Size: 4]
	Vector RemoteSilencerMuzzelFXScale;//[Offset: 0x184 , Size: 12]
	FXDistancaScaleStruct RemoteSilencerMuzzleFXDistanceScale;//[Offset: 0x190 , Size: 16]
	ParticleSystem* LocalFiringSuppressorMuzzleFX;//[Offset: 0x1a0 , Size: 4]
	Vector LocalFiringSuppressorMuzzelFXScale;//[Offset: 0x1a4 , Size: 12]
	ParticleSystem* ScopeFiringSuppressorMuzzleFX;//[Offset: 0x1b0 , Size: 4]
	Vector ScopeFiringSuppressorMuzzelFXScale;//[Offset: 0x1b4 , Size: 12]
	ParticleSystem* RemoteFiringSuppressorMuzzleFX;//[Offset: 0x1c0 , Size: 4]
	Vector RemoteFiringSuppressorMuzzelFXScale;//[Offset: 0x1c4 , Size: 12]
	FXDistancaScaleStruct RemoteSuppressorMuzzleFXDistanceScale;//[Offset: 0x1d0 , Size: 16]
	ParticleSystem* LocalCompensatorMuzzleFX;//[Offset: 0x1e0 , Size: 4]
	Vector LocalCompensatorMuzzelFXScale;//[Offset: 0x1e4 , Size: 12]
	ParticleSystem* ScopeCompensatorMuzzleFX;//[Offset: 0x1f0 , Size: 4]
	Vector ScopeCompensatorMuzzelFXScale;//[Offset: 0x1f4 , Size: 12]
	ParticleSystem* RemoteCompensatorMuzzleFX;//[Offset: 0x200 , Size: 4]
	Vector RemoteCompensatorMuzzelFXScale;//[Offset: 0x204 , Size: 12]
	bool bIsActiveShellDropFXWhenShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x210 , Size: 1]
	ParticleSystem* ShellDropFX;//[Offset: 0x214 , Size: 4]
	Vector ShellDropFXScale;//[Offset: 0x218 , Size: 12]
	ParticleSystem* FPPShellDropFX;//[Offset: 0x224 , Size: 4]
	Vector FPPShellDropFXScale;//[Offset: 0x228 , Size: 12]
	class OBEffectBullet* OBEffectBulletTemplate;//[Offset: 0x234 , Size: 4]
	int MaxOBBulletTrackCompNum;//[Offset: 0x238 , Size: 4]
	ParticleSystemComponent* ShellDropFXComp;//[Offset: 0x23c , Size: 4]
	ParticleSystemComponent* FPPShellDropFXComp;//[Offset: 0x240 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x244 , Size: 4]
	ParticleSystemComponent* MuzzleFXComp;//[Offset: 0x248 , Size: 4]
	OBBulletTrackFXCompsArray(ObjectProperty)[] OBBulletTrackFXCompsArray;//[Offset: 0x24c , Size: 12]
	Vector MuzzleFXOriginalScale;//[Offset: 0x258 , Size: 12]
	float MuzzleFXPrevDistanceScaler;//[Offset: 0x264 , Size: 4]
	OBEffectBulletsCachePool(ObjectProperty)[] OBEffectBulletsCachePool;//[Offset: 0x278 , Size: 12]
	bool bChangeShellDropRot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x284 , Size: 1]
	Rotator ShellDropRot;//[Offset: 0x288 , Size: 12]
	FName ChangeShellDropSocket;//[Offset: 0x298 , Size: 8]
	bool ShellDropRotHasChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a0 , Size: 1]
	function ReloadAttr();// 0x17cec14
	function OnWeaponUnEquiped();// 0x17cec00
	function OnWeaponEuiped();// 0x17cebec
	function HandleWeaponAction();// 0x17ceb6c
	function GetOwnerShootWeapon();// 0x17ceb44
	function GetOBEffectBullet();// 0x17ceb1c
	function GetAvailableOBEffectBulletNum();// 0x17ceaf4
	function CheckOptimizeMuzzleFX();// 0x17cead8
	function ChangeShellDropFx();// 0x17ceac4
	function ActiveLocalShellDropFX();// 0x17ceab0

--------------------------------
Class: WeaponEffectComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<SoundDataMap_Key(ByteProperty) , SoundDataMap(ObjectProperty)> SoundDataMap;//[Offset: 0xc0 , Size: 60]
	AkAudioEvent* ShellDropSound;//[Offset: 0xfc , Size: 4]
	AkAudioEvent* SilencerShootSound;//[Offset: 0x100 , Size: 4]
	function HandleWeaponAction();// 0x17ceb6c

--------------------------------
Class: FXDistancaScaleStruct
	float FXStartScaleDistance;//[Offset: 0x0 , Size: 4]
	float FXEndScaleDistance;//[Offset: 0x4 , Size: 4]
	float FXStartScaleValue;//[Offset: 0x8 , Size: 4]
	float FXEndScaleValue;//[Offset: 0xc , Size: 4]

--------------------------------
Class: OBEffectBullet.Actor.Object
	float MaxMovingTime;//[Offset: 0x2c4 , Size: 4]
	delegate OnOBEffectBulletMoveEnd;//[Offset: 0x2c8 , Size: 12]
	ParticleSystem* CurFXTemplate;//[Offset: 0x2d8 , Size: 4]
	float CurMovingTime;//[Offset: 0x304 , Size: 4]
	CurveFloat* SpeedCurve;//[Offset: 0x308 , Size: 4]

--------------------------------
Class: WeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xc0 , Size: 4]
	float ShootRateCheckInterval;//[Offset: 0xec , Size: 4]
	bool ShootRateCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	float ShootRateCheckMulCoff;//[Offset: 0xf4 , Size: 4]
	bool ShootHitTargetIntervalCheckTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	float ShootHitTargetIntervalMulCoff;//[Offset: 0xfc , Size: 4]
	bool bCheckParachuteHit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]
	float MaxParachuteHeightDist;//[Offset: 0x104 , Size: 4]
	float MaxParachutePlaneDist;//[Offset: 0x108 , Size: 4]
	float ShootTimeInfoCheckClearInterval;//[Offset: 0x14c , Size: 4]
	float ShootTimeInfoCheckLifeTime;//[Offset: 0x150 , Size: 4]
	float ShootTimeGunPosMaxZDif;//[Offset: 0x154 , Size: 4]
	float ShootTimeGunPosMaxForwadDif;//[Offset: 0x158 , Size: 4]
	float ShootTimeGunPosMaxForwadDifInVehicle;//[Offset: 0x15c , Size: 4]
	float ShootTimeGunPosMaxRightDif;//[Offset: 0x160 , Size: 4]
	float ShootTimeGunPosMaxRightDifInVehicle;//[Offset: 0x164 , Size: 4]
	int MaxClientCapsuleHalfHeight;//[Offset: 0x168 , Size: 4]
	float ShootTimeMuzzleDistThres;//[Offset: 0x16c , Size: 4]
	float ShootTimeMuzzleZThres;//[Offset: 0x170 , Size: 4]
	bool bVerifyTimeLineSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x174 , Size: 1]
	float TimeLineCheckDnBorder;//[Offset: 0x178 , Size: 4]
	float TimeLineCheckUpBorder;//[Offset: 0x17c , Size: 4]
	float ShootTimeConnectionDeltaThres;//[Offset: 0x180 , Size: 4]
	bool bVerifyStartFireTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x184 , Size: 1]
	float MaxShootPassTimeDeltaBetweenSysAndLevel;//[Offset: 0x188 , Size: 4]
	function OnWeaponShootHit();// 0x191b630

--------------------------------
Class: WeaponStateManager.WeaponLogicBaseComponent.ActorComponent.Object
	WeaponStateBase* CurrentState;//[Offset: 0xc0 , Size: 4]
	WeaponStateBase* DefaultState;//[Offset: 0xc4 , Size: 4]
	<StateMap_Key(ByteProperty) , StateMap(ObjectProperty)> StateMap;//[Offset: 0xc8 , Size: 60]
	function GetCurrentState();// 0x19294e4
	function GetCurrentFreshWeaponStateType();// 0x19294bc

--------------------------------
Class: WeaponStateBase.WeaponLogicBaseComponent.ActorComponent.Object
	delegate OnBeginState;//[Offset: 0xc0 , Size: 12]
	delegate OnEndState;//[Offset: 0xcc , Size: 12]
	bool bNeedConditionGateCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	byte FreshWeaponStateType;//[Offset: 0xd9 , Size: 1]

--------------------------------
Class: GrenadeAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	delegate GrenadeAvatarEqiuped;//[Offset: 0x424 , Size: 12]
	function PreChangeGrenadeAvatar();// 0x1746810
	function PostChangeItemAvatar();// 0x17467f4
	function GetItemAvatarHandlePath();// 0x206ccd8
	function GetItemAvatarHandle();// 0x206ccd8
	function GetDefaultAvatarID();// 0x206ccd8
	function AddAssetSoftObject();// 0x17466b8

--------------------------------
Class: ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	delegate VehicleEquipedDefaultAvatarEvent;//[Offset: 0x29c , Size: 12]
	bool bNeedCheckResExist;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2a8 , Size: 1]
	ItemDefineID DefaultCfg;//[Offset: 0x2b0 , Size: 24]
	bool bEnableLobbyMat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	MeshComponent* ItemBodyMesh;//[Offset: 0x2cc , Size: 4]
	NetItemAvatarData NetAvatarData;//[Offset: 0x2d0 , Size: 32]
	BackpackCommonAvatarHandle* ItemAvatarHandle;//[Offset: 0x388 , Size: 4]
	BackpackCommonAvatarHandle* DefaultItemAvatarHandle;//[Offset: 0x38c , Size: 4]
	int itemType;//[Offset: 0x390 , Size: 4]
	SkeletalMesh* MasterSkeletalMesh;//[Offset: 0x398 , Size: 40]
	StaticMesh* MasterStaticMesh;//[Offset: 0x3c0 , Size: 40]
	<AssetObjectMap_Key(StrProperty) , AssetObjectMap(ObjectProperty)> AssetObjectMap;//[Offset: 0x3e8 , Size: 60]
	function VehicleEquipedDefaultAvatar__DelegateSignature();// 0x206ccd8
	function SetMasterStaticMeshPath();// 0x1756368
	function SetMasterSkeletalMeshPath();// 0x1756260
	function ResetItemAvatar();// 0x175624c
	function PreChangeItemAvatar();// 0x17561cc
	function OnRep_ItemAvatarChanged();// 0x17561b8
	function IsValidAvatar();// 0x1756190
	function GetValidAvatarHandle();// 0x1756160
	function GetSoftRefObj();// 0x1756084
	function GetItemBodyMesh();// 0x1756068
	function GetDynamicMaterial();// 0x1755fa4
	function ChangeItemAvatar();// 0x1755ee0
	function AsyncChangeItemAvatar();// 0x1755e60
	function ApplyMesh();// 0x1755d50
	function ApplyMaterial();// 0x1755c50
	function AddAssetSoftObject();// 0x17466b8

--------------------------------
Class: NetItemAvatarData
	ItemDefineID ItemDefineID;//[Offset: 0x0 , Size: 24]
	int UpdateFlag;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemAvatarMats(StructProperty)[] ItemAvatarMats;//[Offset: 0x9c , Size: 12]
	SkeletalMesh* ItemSkletalMesh;//[Offset: 0xa8 , Size: 40]
	StaticMesh* ItemStaticMesh;//[Offset: 0xd0 , Size: 40]
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function GetBackpackComponent();// 0x16c4ce0
	function CheckCanPickUp();// 0x16c4c1c

--------------------------------
Class: AkComponent.SceneComponent.ActorComponent.Object
	AkAuxBus* EarlyReflectionAuxBus;//[Offset: 0x260 , Size: 4]
	FString EarlyReflectionAuxBusName;//[Offset: 0x264 , Size: 12]
	int EarlyReflectionOrder;//[Offset: 0x270 , Size: 4]
	float EarlyReflectionBusSendGain;//[Offset: 0x274 , Size: 4]
	float EarlyReflectionMaxPathLength;//[Offset: 0x278 , Size: 4]
	bool EnableSpotReflectors;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x280 , Size: 1]
	bool DrawFirstOrderReflections;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x280 , Size: 1]
	bool DrawSecondOrderReflections;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x280 , Size: 1]
	bool DrawHigherOrderReflections;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x280 , Size: 1]
	bool StopWhenOwnerDestroyed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x281 , Size: 1]
	bool bIsUpdateEmmiterTransform;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x282 , Size: 1]
	bool bAllIsInstanceSound;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x282 , Size: 1]
	float AttenuationScalingFactor;//[Offset: 0x284 , Size: 4]
	float OcclusionRefreshInterval;//[Offset: 0x288 , Size: 4]
	AkAudioEvent* AkAudioEvent;//[Offset: 0x28c , Size: 4]
	FString EventName;//[Offset: 0x290 , Size: 12]
	function UseReverbVolumes();// 0x4194024
	function UseEarlyReflections();// 0x4193cf0
	function Stop();// 0x4193cdc
	function SetSwitch();// 0x4193a6c
	function SetStopWhenOwnerDestroyed();// 0x41939ec
	function SetRTPCValueGlobally();// 0x4193850
	function SetRTPCValue();// 0x4193670
	function SetOutputBusVolume();// 0x41935f8
	function SetListeners();// 0x419352c
	function SetEarlyReflectionOrder();// 0x41934b4
	function SetAutoDestroy();// 0x4193438
	function SetAttenuationScalingFactor();// 0x41933c0
	function PostTrigger();// 0x4193268
	function PostAssociatedAkEvent();// 0x4193240
	function PostAkEventByName();// 0x419317c
	function PostAkEvent();// 0x4193074
	function GetAttenuationRadius();// 0x419304c

--------------------------------
Class: AkAuxBus.Object
	AkAudioBank* RequiredBank;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: STCharacterNearDeathComp.ActorComponent.Object
	float BreathMax;//[Offset: 0xc8 , Size: 4]
	float AssistAccountableDuration;//[Offset: 0xcc , Size: 4]
	float EnterNearDeathDamageInvincibleTime;//[Offset: 0xd0 , Size: 4]
	bool IsTurnOnDebugSameTeamAccountable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	CurveFloat* CurveLayeredDeathInterval;//[Offset: 0xd8 , Size: 4]
	int MaxDeathTimes;//[Offset: 0xdc , Size: 4]
	bool IsDebugging;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe8 , Size: 4]
	float EnterNearDeathSeconds;//[Offset: 0xec , Size: 4]
	float Breath;//[Offset: 0xf0 , Size: 4]
	int NearDeathRestoredOrignalHealth;//[Offset: 0xf4 , Size: 4]
	int NearDeathRestoredOrignalBreathAmount;//[Offset: 0xf8 , Size: 4]
	Controller* EventInstigatorRecorded;//[Offset: 0x104 , Size: 4]
	Actor* DamageCauserRecorded;//[Offset: 0x108 , Size: 4]
	DamageEvent DamageEventRecorded;//[Offset: 0x10c , Size: 8]
	function SetHealthSafety();// 0x17f6c48
	function S2C_HelpOther();// 0x17f6b34
	function S2C_BeHelpedByOther();// 0x17f6a20
	function ResetDataOnRespawn();// 0x17f6a0c
	function RescueFinishSuccessfully();// 0x17f69f8
	function OnRep_BreathChanged();// 0x17f66b8
	function IsNearDeathInvincible();// 0x17f69d0
	function IsHealthAlive();// 0x17f69a8
	function IsHaveLastBreathStatus();// 0x17f6980
	function IsFinishedLastBreathStatus();// 0x17f6958
	function InitializeOwner();// 0x17f68e0
	function GotoLastBreathStatus();// 0x17f6718
	function GetBreathMax();// 0x17f66fc
	function GetBreath();// 0x17f66e0
	function EnterSwimWhileDying();// 0x17f66cc
	function DoFinishLastBreath();// 0x17f66b8
	function ClearNearDeathTeammate();// 0x17f66a4
	function AddHealthSafety();// 0x17f65d8
	function AddDeadBuff();// 0x17f65c4

--------------------------------
Class: DamageEvent
	class DamageType* DamageTypeClass;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STCharacterRescueOtherComp.ActorComponent.Object
	int WanderingRadius;//[Offset: 0xbc , Size: 4]
	float ReturnToCheckConditionCDTimeSetting;//[Offset: 0xc0 , Size: 4]
	anPickerData FanData;//[Offset: 0xc4 , Size: 20]
	STExtraBaseCharacter* RescueWho;//[Offset: 0xf0 , Size: 4]
	float RescueingStatusStartTimeSeconds;//[Offset: 0xf4 , Size: 4]
	float RestoringDuration;//[Offset: 0x110 , Size: 4]
	FString DurationAttrModifyRef;//[Offset: 0x114 , Size: 12]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x120 , Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0x128 , Size: 4]
	function WaitingConfirmState_IsConditionSatisfied();// 0x17f7a94
	function WaitingConfirmState_ActOnUnsatisfied();// 0x17f7a80
	function WaitingConfirmState_ActOnSatisfied();// 0x173e6cc
	function TickAsHelper();// 0x17f7a08
	function ServerPlayerConfirm();// 0x17f7954
	function SelectedPickedTargetChangeNotifyHUD();// 0x17f78dc
	function RescueingState_IsConditionSatisfied();// 0x17f78b4
	function RescueingState_ActOnUnsatisfied();// 0x17f78a0
	function RescueingState_ActOnSatisfied();// 0x173e6cc
	function RescueingProcessFinished();// 0x17f788c
	function PlayerConfirmToRescueClientSide();// 0x17f7864
	function PickTargetsAsHelper();// 0x17f7790
	function OnRep_IsRescueingOtherStatusChange();// 0x17f777c
	function IsInRescueingStatus();// 0x17f7754
	function InitializeOwner();// 0x17f7698
	function GetRestoringDuration();// 0x17f7670
	function DrawDebugFan();// 0x16ad21c

--------------------------------
Class: anPickerData
	float Radius;//[Offset: 0x0 , Size: 4]
	float Angle;//[Offset: 0x4 , Size: 4]
	float Offset;//[Offset: 0x8 , Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	float LowerTraceRatio;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: STCharacterFollowComp.ActorComponent.Object
	TargetJumpOperation* CurRecordingVaultOperation;//[Offset: 0xbc , Size: 4]
	TargetJumpOperation* CurPlayingVaultOperation;//[Offset: 0xc0 , Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0xc8 , Size: 4]
	float CanFollowDist;//[Offset: 0xcc , Size: 4]
	float QuitFollowAngleInput;//[Offset: 0xd0 , Size: 4]
	float QuitFollowDist;//[Offset: 0xd4 , Size: 4]
	float PointDensityTimeInterval;//[Offset: 0xd8 , Size: 4]
	float DistThrehold;//[Offset: 0xdc , Size: 4]
	bool IsEnableAutoFollow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xe4 , Size: 8]
	STCharacterNearDeathComp* ParentNDComp;//[Offset: 0xec , Size: 4]
	TargetOps(ObjectProperty)[] TargetOps;//[Offset: 0x124 , Size: 12]
	TargetKeyOperation* CurOp;//[Offset: 0x130 , Size: 4]
	function WaitingConfirmState_IsConditionSatisfied();// 0x17f3520
	function WaitingConfirmState_ActOnUnsatisfied();// 0x17f350c
	function WaitingConfirmState_ActOnSatisfied();// 0x173e6cc
	function TargetStartVault();// 0x17f3494
	function SetInterruptAutoFollowByInput();// 0x17f341c
	function SelectedPickedTargetChangeNotifyHUD();// 0x17f33a4
	function PlayerStopFollow();// 0x17f337c
	function PlayerConfirmToFollow();// 0x17f3354
	function InitializeOwner();// 0x17f32dc
	function FollowingTargetChangeNotifyHUD();// 0x17f3264
	function FollowingState_IsConditionSatisfied();// 0x17f323c
	function FollowingState_ActOnUnsatisfied();// 0x17f3228
	function FollowingState_ActOnSatisfied();// 0x17f31b0

--------------------------------
Class: TargetJumpOperation.TargetKeyOperation.Object
	function TaskRemoved();// 0x1790b84
	function Start();// 0x1710168
	function IsValidate();// 0x18bdc74
	function DebugDraw();// 0x18bdbb0
	function Awake();// 0x1790b68

--------------------------------
Class: TargetKeyOperation.Object
	STExtraBaseCharacter* PawnOwner;//[Offset: 0x7c , Size: 4]
	STExtraBaseCharacter* Target;//[Offset: 0x80 , Size: 4]
	function Update();// 0x18bdd64
	function ToString();// 0x18bdca4
	function TaskRemoved();// 0x1790b84
	function Start();// 0x1710168
	function IsValidate();// 0x18bdc74
	function IsReachable();// 0x1738460
	function Finish();// 0x1738598
	function DebugDraw();// 0x18bdbb0
	function Awake();// 0x1790b68

--------------------------------
Class: CustomSpringArmComponent.STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SpringArmLengthModifier1;//[Offset: 0x388 , Size: 4]
	float SpringArmLengthModifier2;//[Offset: 0x38c , Size: 4]
	float SpringArmLengthModifier3;//[Offset: 0x390 , Size: 4]
	CurveFloat* SpringArmForwadOffsetByPitchCurve;//[Offset: 0x394 , Size: 4]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398 , Size: 1]
	bool bUseLocalSpaceClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b9 , Size: 1]
	bool bClampPitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3ba , Size: 1]
	float ResultMinPitch;//[Offset: 0x3bc , Size: 4]
	float ResultMaxPitch;//[Offset: 0x3c0 , Size: 4]
	bool bEnableShoulderCameraMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3c4 , Size: 1]
	float FreeCamRotationReturnRate;//[Offset: 0x3c8 , Size: 4]
	CameraOffsetData CrouchCameraData;//[Offset: 0x3cc , Size: 28]
	CameraOffsetData ProneCameraData;//[Offset: 0x3e8 , Size: 28]
	CameraOffsetData IndoorCameraData;//[Offset: 0x404 , Size: 28]
	CameraOffsetData LeanLeftCameraData;//[Offset: 0x420 , Size: 28]
	CameraOffsetData LeanRightCameraData;//[Offset: 0x43c , Size: 28]
	CameraOffsetData InVehicleCameraData;//[Offset: 0x458 , Size: 28]
	CameraOffsetData NearDeathCameraData;//[Offset: 0x474 , Size: 28]
	CameraOffsetData PeekLeftCameraData;//[Offset: 0x490 , Size: 28]
	CameraOffsetData PeekRightCameraData;//[Offset: 0x4ac , Size: 28]
	CameraOffsetData IndoorLowerCameraStand;//[Offset: 0x4c8 , Size: 28]
	CameraOffsetData IndoorLowerCameraCrouch;//[Offset: 0x4e4 , Size: 28]
	CameraOffsetData IndoorLowerCameraProne;//[Offset: 0x500 , Size: 28]
	CameraOffsetData VaultCameraData;//[Offset: 0x51c , Size: 28]
	CameraOffsetData ShovelingCameraData;//[Offset: 0x538 , Size: 28]
	CameraOffsetData InHelicopterCameraData;//[Offset: 0x554 , Size: 28]
	bool bIsShoulderMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x570 , Size: 1]
	CameraOffsetData ShoulderCameraData;//[Offset: 0x574 , Size: 28]
	float AdditionalSocketOffetZMax;//[Offset: 0x594 , Size: 4]
	Vector2D AdditionalSocketOffetZPitch;//[Offset: 0x598 , Size: 8]
	CurveVector* LandingHeavyCameraOffset;//[Offset: 0x5a0 , Size: 4]
	float LandingHeavyCameraOffsetDurationTime;//[Offset: 0x5a4 , Size: 4]
	float LandingHeavyCameraOffsetPlaySpeed;//[Offset: 0x5a8 , Size: 4]
	bool bIsPlayingCurveAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5b1 , Size: 1]
	float OffsetCountTime;//[Offset: 0x5b4 , Size: 4]
	float OffSetDurTime;//[Offset: 0x5b8 , Size: 4]
	float RevertMoveSpeed;//[Offset: 0x5bc , Size: 4]
	CurveVector* TargetOffsetAnimCurve;//[Offset: 0x5c0 , Size: 4]
	Transform PrevRelativeTrans;//[Offset: 0x5d0 , Size: 48]
	Vector PrevRelativeSocketLocation;//[Offset: 0x600 , Size: 12]
	Quat PrevRelativeSocketRotation;//[Offset: 0x610 , Size: 16]
	function SetSelfieCameraDefRotation();// 0x17163a0
	function SetCameraDataEnable();// 0x17162dc
	function ForceUpdateDesiredArmLocation();// 0x1716170
	function DelayRotationLagEnabledEnd();// 0x171615c
	function DelayRotationLagEnabled();// 0x1716094

--------------------------------
Class: STExtraSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float SocketOffsetInterpSpeed;//[Offset: 0x318 , Size: 4]
	float TargetOffsetInterpSpeed;//[Offset: 0x31c , Size: 4]
	float ArmLengthInterpSpeed;//[Offset: 0x320 , Size: 4]
	function ClearCameraData();// 0x18a5be0

--------------------------------
Class: CameraOffsetData
	Vector SocketOffset;//[Offset: 0x0 , Size: 12]
	Vector TargetOffset;//[Offset: 0xc , Size: 12]
	float SpringArmLength;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: SyncAKEvent
	int AkEventID;//[Offset: 0x0 , Size: 4]
	Vector AkLocation;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: STCharacterMovementComponent.CharacterMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bServerMoveCheckPassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x61f , Size: 1]
	bool bCheckPassWallUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x620 , Size: 1]
	float CheckPassWallShapeShrinkScale;//[Offset: 0x624 , Size: 4]
	float AdjustRadiusScaleWhenPassWall;//[Offset: 0x628 , Size: 4]
	float RadiusScaleWhenCheckPassWall;//[Offset: 0x62c , Size: 4]
	float MaxPrisonmentMove;//[Offset: 0x630 , Size: 4]
	bool NoPrisonReport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x634 , Size: 1]
	bool bIgnoreClientRotationErrorChecksAndCorrection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x635 , Size: 1]
	bool bIsServerPriorityControlShoveling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64c , Size: 1]
	float ShovelingStopMaxRelianceClientTime;//[Offset: 0x650 , Size: 4]
	float EnterShovelCD;//[Offset: 0x654 , Size: 4]
	float DSEnterShovelCD;//[Offset: 0x658 , Size: 4]
	float ShovelingCollisionHalfHeight;//[Offset: 0x65c , Size: 4]
	float MaxShovelFloorAngle;//[Offset: 0x660 , Size: 4]
	float StandMinEnterShovelingSpeed;//[Offset: 0x664 , Size: 4]
	float CrounchMinEnterShovelingSpeed;//[Offset: 0x668 , Size: 4]
	float DefaultShovelingSpeed;//[Offset: 0x66c , Size: 4]
	float DefaultShovelingDCC;//[Offset: 0x670 , Size: 4]
	float ExtraShovelingDCC1;//[Offset: 0x674 , Size: 4]
	float ExtraShovelingDCC2;//[Offset: 0x678 , Size: 4]
	float ExtraShovelingDCC3;//[Offset: 0x67c , Size: 4]
	float MinusGradeShovelingACC;//[Offset: 0x680 , Size: 4]
	float MinusGradeShovelingDCC;//[Offset: 0x684 , Size: 4]
	float MaxShovelingSpeed;//[Offset: 0x688 , Size: 4]
	float StopShovelingSpeed;//[Offset: 0x690 , Size: 4]
	float MinNoDCCInShovelingSlopeAngle;//[Offset: 0x694 , Size: 4]
	float MAxNoDCCInShovelingSlopeAngle;//[Offset: 0x698 , Size: 4]
	float EnterShovelingMinHeightInFalling;//[Offset: 0x69c , Size: 4]
	float ShovelingFPPFovVaule;//[Offset: 0x6a0 , Size: 4]
	float EnterShovelingFPPFovChangeSpeed;//[Offset: 0x6a4 , Size: 4]
	float ExitShovelingFPPFovChangeSpeed;//[Offset: 0x6a8 , Size: 4]
	float ShovelingTPPFovVaule;//[Offset: 0x6ac , Size: 4]
	float EnterShovelingTPPFovChangeSpeed;//[Offset: 0x6b0 , Size: 4]
	float ExitShovelingTPPFovChangeSpeed;//[Offset: 0x6b4 , Size: 4]
	float ShovelingLegBodyMaxAngle;//[Offset: 0x6b8 , Size: 4]
	float ShovelingLegStartFollowBodyMinAngle;//[Offset: 0x6bc , Size: 4]
	float ShovelingLegFollowBodySpeed;//[Offset: 0x6c0 , Size: 4]
	float MaxAngleShovelingLegFollowBodySpeed;//[Offset: 0x6c4 , Size: 4]
	float ShovelingLegFollowFloorSpeed;//[Offset: 0x6c8 , Size: 4]
	SoftObjectPath ShovelingEffectPath;//[Offset: 0x6d0 , Size: 24]
	AkAudioEvent* EnterShovelingSound;//[Offset: 0x6e8 , Size: 4]
	AkAudioEvent* ExitShovelingSound;//[Offset: 0x6ec , Size: 4]
	AkAudioEvent* InterruptShovelingSound;//[Offset: 0x6f0 , Size: 4]
	float nowShovelingSpeed;//[Offset: 0x6f4 , Size: 4]
	Rotator ShovelingRotation;//[Offset: 0x6f8 , Size: 12]
	bool ShovelingIsTrigger;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x704 , Size: 1]
	bool ShovelingIsHold;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x705 , Size: 1]
	byte ShovelingPrePoseState;//[Offset: 0x707 , Size: 1]
	float PreShovelFov;//[Offset: 0x708 , Size: 4]
	ParticleSystemComponent* ShovelingParticleSystemComponent;//[Offset: 0x74c , Size: 4]
	bool StopTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750 , Size: 1]
	float TimeSpeedFactor;//[Offset: 0x754 , Size: 4]
	bool CheatCheckSumFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x758 , Size: 1]
	bool bCanSendCmdAck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x759 , Size: 1]
	bool bCheatClientLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75a , Size: 1]
	float MaxPenetrationAdjustmentSize;//[Offset: 0x75c , Size: 4]
	float JumpOffVelocityFactor;//[Offset: 0x760 , Size: 4]
	bool mb_UseVehiclePushSwim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x764 , Size: 1]
	bool mb_UseVehiclePushUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x765 , Size: 1]
	float MaxDecideClientTimeSpeedDeltaTime;//[Offset: 0x768 , Size: 4]
	bool bUseTimeSpeedAntiCheatCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x76c , Size: 1]
	bool bUseUserCmdDeltaCompress;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x76c , Size: 1]
	float SimulatedNearDistanceSqAtClient;//[Offset: 0x770 , Size: 4]
	float SimulatedNearTickIntervalAtClient;//[Offset: 0x774 , Size: 4]
	float SimulatedMiddleDistanceSqAtClient;//[Offset: 0x778 , Size: 4]
	float SimulatedMiddleTickIntervalAtClient;//[Offset: 0x77c , Size: 4]
	float SimulatedFarDistanceSqAtClient;//[Offset: 0x780 , Size: 4]
	float SimulatedFarTickIntervalAtClient;//[Offset: 0x784 , Size: 4]
	float WalkSpeedCurveScale;//[Offset: 0x788 , Size: 4]
	CurveFloat* MaxWalkSpeedCurve;//[Offset: 0x78c , Size: 4]
	float ProneFloorAngle;//[Offset: 0x790 , Size: 4]
	float ProneFloorZ;//[Offset: 0x794 , Size: 4]
	float JumpFloorAngle;//[Offset: 0x798 , Size: 4]
	float JumpFloorZ;//[Offset: 0x79c , Size: 4]
	float ResolvePenetrationPosDiffSq;//[Offset: 0x7a0 , Size: 4]
	float ResolvePenetrationAdjustment;//[Offset: 0x7a4 , Size: 4]
	bool bOpenLocationSmoothOnDynamicMovementBase;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a8 , Size: 1]
	float DistSqOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7ac , Size: 4]
	float DistAngleOnDynamicMovementBaseAtSimulateProxy;//[Offset: 0x7b0 , Size: 4]
	bool bProcessDeltaRotationWhenKnockedDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7cc , Size: 1]
	bool EnabledResetPredictionData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cd , Size: 1]
	bool bEnableAdjustWhenStepUpFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7ce , Size: 1]
	float AdjustDistanceWhenStepUpFailed;//[Offset: 0x7d0 , Size: 4]
	bool ForceSimulatedOpti;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d4 , Size: 1]
	bool bFixParachuteEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8b8 , Size: 1]
	float CheckDistanceAhead;//[Offset: 0x8bc , Size: 4]
	bool bPrintMoveStatusDataDebugs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c0 , Size: 1]
	int PrintMoveStatusDataDebugsMaxNum;//[Offset: 0x8c4 , Size: 4]
	STExtraBaseCharacter* STCharacter_PRIVATE;//[Offset: 0x8d8 , Size: 4]
	function ToggleUserCmdDelta();// 0x17f5700
	function TimeSpeedCheck();// 0x17f5648
	function SeverAddRotationVelocity();// 0x17f559c
	function SetProneFloorZ();// 0x17f5524
	function SetProneFloorAngle();// 0x17f54ac
	function SetJumpFloorZ();// 0x17f5434
	function SetJumpFloorAngle();// 0x17f53bc
	function ServerUserMoveCmdOld();// 0x17f5290
	function ServerUserMoveCmdDual();// 0x17f5044
	function ServerUserMoveCmd();// 0x17f4e84
	function Ping2Server();// 0x17f4d98
	function Ping2Client();// 0x17f4d20
	function PhysicsFlyDistance();// 0x17f4c58
	function OnRecoverOnServer();// 0x17f4c3c
	function OnPreReconnectOnServer();// 0x17f4c28
	function OnClientCloseUserCmdDelta();// 0x17f4c14
	function K2_GetProneFloorZ();// 0x17f4bec
	function K2_GetProneFloorAngle();// 0x17f4bc4
	function K2_GetJumpFloorZ();// 0x17f4b9c
	function K2_GetJumpFloorAngle();// 0x17f4b74
	function IsWalkable();// 0x17f4ac8
	function IsProning();// 0x17f4aa0
	function GetSTCharacter();// 0x17f4a78
	function GetLastServerMoveTime();// 0x17f4a50
	function GetIsOpenShovelingAbility();// 0x17f4a28
	function DragOnGround();// 0x17f49a8
	function ClientVeryShortAdjustPositionAndRotation();// 0x17f4700
	function ClientUserMoveCmdAck();// 0x17f4688
	function ClientAdjustPositionAndRotation();// 0x17f4380
	function ChangePhysxShapeFlag();// 0x16ad21c

--------------------------------
Class: SimViewData
	byte ViewPitch;//[Offset: 0x0 , Size: 1]
	byte ViewYaw;//[Offset: 0x1 , Size: 1]
	byte ViewRoll;//[Offset: 0x2 , Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]

--------------------------------
Class: AnchorPlatData
	int AnchorPlatResID;//[Offset: 0x0 , Size: 4]
	int AnchorPlatColorID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: TrailMarkActor.Actor.Object
	int MaxQuadNum;//[Offset: 0x2c4 , Size: 4]
	float MaxQuadLength;//[Offset: 0x2c8 , Size: 4]
	float QuadDirectionAcceptAngle;//[Offset: 0x2cc , Size: 4]
	MaterialInterface* TrailMarkMaterial;//[Offset: 0x2d0 , Size: 4]
	float DefaultTrailWidth;//[Offset: 0x2d4 , Size: 4]
	bool bUseTrailLength;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d8 , Size: 1]
	float DefaultTrailLength;//[Offset: 0x2dc , Size: 4]
	float TextureLength;//[Offset: 0x2e0 , Size: 4]
	int USegmentNum;//[Offset: 0x2e4 , Size: 4]
	int CoordU;//[Offset: 0x2e8 , Size: 4]
	int SlippingCoordU;//[Offset: 0x2ec , Size: 4]
	int BrokenCoordU;//[Offset: 0x2f0 , Size: 4]
	bool bUseAdditionalType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]
	float AdditionalTrailWidth;//[Offset: 0x2f8 , Size: 4]
	float AdditionalTextureLength;//[Offset: 0x2fc , Size: 4]
	int AdditionalCoordU;//[Offset: 0x300 , Size: 4]
	int AdditionalSlippingCoordU;//[Offset: 0x304 , Size: 4]
	int AdditionalBrokenCoordU;//[Offset: 0x308 , Size: 4]
	bool bDeferUpdateTrailMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	RuntimeMeshComponent* TrailMesh;//[Offset: 0x310 , Size: 4]
	function UpdateInput();// 0x18c55c4
	function StopUpdate();// 0x18c55b0
	function IsUpdating();// 0x18c5588

--------------------------------
Class: RuntimeMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	delegate CollisionUpdated;//[Offset: 0x56c , Size: 12]
	bool bUseComplexAsSimpleCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x578 , Size: 1]
	bool bUseAsyncCooking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x579 , Size: 1]
	bool bShouldSerializeMeshData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x57a , Size: 1]
	enum CollisionMode;//[Offset: 0x57b , Size: 1]
	BodySetup* BodySetup;//[Offset: 0x57c , Size: 4]
	MeshCollisionSections(StructProperty)[] MeshCollisionSections;//[Offset: 0x5a0 , Size: 12]
	ConvexCollisionSections(StructProperty)[] ConvexCollisionSections;//[Offset: 0x5ac , Size: 12]
	BoxSphereBounds LocalBounds;//[Offset: 0x5b8 , Size: 28]
	RuntimeMeshComponentPrePhysicsTickFunction PrePhysicsTick;//[Offset: 0x5d4 , Size: 60]
	AsyncBodySetupQueue(ObjectProperty)[] AsyncBodySetupQueue;//[Offset: 0x610 , Size: 12]
	function UpdateMeshSection_Blueprint();// 0x44befb0
	function SetSectionTessellationTriangles();// 0x44bee50
	function SetMeshSectionVisible();// 0x44bed8c
	function SetMeshSectionCollisionEnabled();// 0x44becc8
	function SetMeshSectionCastsShadow();// 0x44bec04
	function SetMeshCollisionSection();// 0x44bea5c
	function RuntimeMeshCollisionUpdatedDelegate__DelegateSignature();// 0x206ccd8
	function IsMeshSectionVisible();// 0x44be9dc
	function IsMeshSectionCollisionEnabled();// 0x44be95c
	function IsMeshSectionCastingShadows();// 0x44be8dc
	function GetNumSections();// 0x44be8b4
	function GetLastSectionIndex();// 0x44be88c
	function FirstAvailableMeshSectionIndex();// 0x44be864
	function EndBatchUpdates();// 0x44be850
	function DoesSectionExist();// 0x44be7d0
	function CreateMeshSection_Blueprint();// 0x44be1e0
	function CookCollisionNow();// 0x44be1cc
	function ClearMeshSection();// 0x44be154
	function ClearMeshCollisionSection();// 0x44be0dc
	function ClearCollisionConvexMeshes();// 0x44be0c8
	function ClearAllMeshSections();// 0x44be0b4
	function ClearAllMeshCollisionSections();// 0x44be0a0
	function BeginBatchUpdates();// 0x44be084
	function AddCollisionConvexMesh();// 0x44bdf28

--------------------------------
Class: RuntimeMeshComponentPrePhysicsTickFunction.TickFunction

--------------------------------
Class: KilledTipsBlock
	byte DamageType;//[Offset: 0x0 , Size: 1]
	FString attackerName;//[Offset: 0x4 , Size: 12]
	FString WeaponName;//[Offset: 0x10 , Size: 12]
	FString DeadName;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: PlayerGunCollosionComp.ActorComponent.Object
	float DetectInterval;//[Offset: 0xbc , Size: 4]
	int DetectThreshold;//[Offset: 0xc0 , Size: 4]
	float FoldFactor;//[Offset: 0xc4 , Size: 4]
	STExtraBaseCharacter* pCharOwner;//[Offset: 0xc8 , Size: 4]
	Vector BoxHalfSize;//[Offset: 0xd4 , Size: 12]
	Vector QEoffsetPeekLeftOnVehicle;//[Offset: 0xe0 , Size: 12]
	Vector QEoffsetPeekRightOnVehicle;//[Offset: 0xec , Size: 12]
	Vector QEoffsetPeekLeft;//[Offset: 0xf8 , Size: 12]
	Vector QEoffsetPeekRight;//[Offset: 0x104 , Size: 12]
	float StaticTraceLengthOffset;//[Offset: 0x110 , Size: 4]
	Vector QEoffsetPeekStandAdd;//[Offset: 0x114 , Size: 12]
	Vector QEoffsetPeekCrouchAdd;//[Offset: 0x120 , Size: 12]
	Vector QEoffsetPeekProneAdd;//[Offset: 0x12c , Size: 12]
	int FoldFactorDelt;//[Offset: 0x138 , Size: 4]
	int FoldFactorDeltChange;//[Offset: 0x13c , Size: 4]
	int TraceDis;//[Offset: 0x140 , Size: 4]
	float TickDeltTime;//[Offset: 0x144 , Size: 4]
	bool IsDrawDebugLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	SweepIgnoreActors(WeakObjectProperty)[] SweepIgnoreActors;//[Offset: 0x150 , Size: 12]
	bool IsUseCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c , Size: 1]
	function SetEffect();// 0x179b4b4
	function CheckCollision();// 0x179b37c

--------------------------------
Class: STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CommonRank;//[Offset: 0x988 , Size: 4]
	FString IniTeamLeaderName;//[Offset: 0x98c , Size: 12]
	enum LiveState;//[Offset: 0x998 , Size: 1]
	CharacterAutoFollowStruct AutoFollowInfo;//[Offset: 0x99c , Size: 8]
	STExtraBaseCharacter* CharacterOwner;//[Offset: 0x9a4 , Size: 4]
	STExtraBaseCharacter* SpectatingCharacterOwner;//[Offset: 0x9a8 , Size: 4]
	float PlayerHealth;//[Offset: 0x9ac , Size: 4]
	float PlayerHealthMax;//[Offset: 0x9b0 , Size: 4]
	float PlayerTemperature;//[Offset: 0x9b4 , Size: 4]
	float PlayerTemperatureMax;//[Offset: 0x9b8 , Size: 4]
	CharacterLocAndRot SelfLocAndRot;//[Offset: 0x9bc , Size: 24]
	CharacterLocAndRot UAVLocAndRot;//[Offset: 0x9d4 , Size: 24]
	enum EUAVUseType;//[Offset: 0x9ec , Size: 1]
	enum eCurVehicleType;//[Offset: 0x9ed , Size: 1]
	enum EUAVCharacterMsgType;//[Offset: 0x9ee , Size: 1]
	Vector PlayerDeadLocation;//[Offset: 0x9f0 , Size: 12]
	Vector PlayerBoxLocation;//[Offset: 0x9fc , Size: 12]
	Vector MapMark;//[Offset: 0xa08 , Size: 12]
	bool IsRestartAtPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa14 , Size: 1]
	Vector RestartLocation;//[Offset: 0xa18 , Size: 12]
	Rotator RestartRotate;//[Offset: 0xa24 , Size: 12]
	<UseQuickMsgMap_Key(IntProperty) , UseQuickMsgMap(IntProperty)> UseQuickMsgMap;//[Offset: 0xa30 , Size: 60]
	<UseWheelMsgMap_Key(IntProperty) , UseWheelMsgMap(IntProperty)> UseWheelMsgMap;//[Offset: 0xa6c , Size: 60]
	byte ShowMsgCnt;//[Offset: 0xaa8 , Size: 1]
	byte UserConfirmCnt;//[Offset: 0xaa9 , Size: 1]
	byte UserCancelCnt;//[Offset: 0xaaa , Size: 1]
	byte UserDoNothingCnt;//[Offset: 0xaab , Size: 1]
	float FPSBeforeAdapt;//[Offset: 0xaac , Size: 4]
	float FPSAfterAdapt;//[Offset: 0xab0 , Size: 4]
	int AirDropBoxFirstPickUpNum;//[Offset: 0xacc , Size: 4]
	TeamMatePlayerStateList(WeakObjectProperty)[] TeamMatePlayerStateList;//[Offset: 0xad0 , Size: 12]
	int TeamMatePlayerStateIndex;//[Offset: 0xadc , Size: 4]
	int PlayerLayerID;//[Offset: 0xae0 , Size: 4]
	VisualFieldInfo VisualFieldInfo;//[Offset: 0xae4 , Size: 16]
	int Breath;//[Offset: 0xaf4 , Size: 4]
	DriveCarNotify DriveCarNotify;//[Offset: 0xaf8 , Size: 12]
	float EnegyBuffStage1;//[Offset: 0xb04 , Size: 4]
	float EnegyBuffStage2;//[Offset: 0xb08 , Size: 4]
	float EnegyBuffStage3;//[Offset: 0xb0c , Size: 4]
	float EnegyBuffStage4;//[Offset: 0xb10 , Size: 4]
	float EnegyBuffReduceSpeedPerSec;//[Offset: 0xb14 , Size: 4]
	float CurEnegyBuff;//[Offset: 0xb18 , Size: 4]
	float EnegyBuffStage1RecoverHealthTime;//[Offset: 0xb1c , Size: 4]
	float EnegyBuffStage1RecoverHealthVal;//[Offset: 0xb20 , Size: 4]
	float EnegyBuffStage2RecoverHealthTime;//[Offset: 0xb24 , Size: 4]
	float EnegyBuffStage2RecoverHealthVal;//[Offset: 0xb28 , Size: 4]
	float EnegyBuffStage3RecoverHealthTime;//[Offset: 0xb2c , Size: 4]
	float EnegyBuffStage3RecoverHealthVal;//[Offset: 0xb30 , Size: 4]
	float EnegyBuffStage4RecoverHealthTime;//[Offset: 0xb34 , Size: 4]
	float EnegyBuffStage4RecoverHealthVal;//[Offset: 0xb38 , Size: 4]
	delegate OnLocalCharacterHPChangeDel;//[Offset: 0xb3c , Size: 12]
	delegate OnPlayerKillsChangeDelegate;//[Offset: 0xb48 , Size: 12]
	bool IsShowingRescueingUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb55 , Size: 1]
	bool isReconnected;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb60 , Size: 1]
	bool isLostConnection;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb61 , Size: 1]
	TeamMatesExitState(IntProperty)[] TeamMatesExitState;//[Offset: 0xb64 , Size: 12]
	bool PlayerGameOver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb70 , Size: 1]
	bool bGodSon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb71 , Size: 1]
	int PlayersCountOnPlane;//[Offset: 0xb7c , Size: 4]
	playerAliasShowInfoList(StructProperty)[] playerAliasShowInfoList;//[Offset: 0xb80 , Size: 12]
	float SingleRoundTotalDamage;//[Offset: 0xb8c , Size: 4]
	int ContinuousKillsNum;//[Offset: 0xb90 , Size: 4]
	delegate OnInfectionRoundDamageChange;//[Offset: 0xb94 , Size: 12]
	MonsterTreasureBoxDatas(StructProperty)[] MonsterTreasureBoxDatas;//[Offset: 0xba0 , Size: 12]
	int MonsterTreasureBoxGetNum;//[Offset: 0xbac , Size: 4]
	int MonsterTreasureBoxDefendNum;//[Offset: 0xbb0 , Size: 4]
	int OpnedMosnterBoxNum;//[Offset: 0xbb4 , Size: 4]
	bool bHasSendBattleResult;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb8 , Size: 1]
	int MaxDecalCount;//[Offset: 0xbd4 , Size: 4]
	DecalActorList(ObjectProperty)[] DecalActorList;//[Offset: 0xbd8 , Size: 12]
	KickListTotalPlayers(StructProperty)[] KickListTotalPlayers;//[Offset: 0xc38 , Size: 12]
	float LeanOutL_AimAngle;//[Offset: 0xc44 , Size: 4]
	float LeanOutR_AimAngle;//[Offset: 0xc48 , Size: 4]
	CharacterBuffRecords(StructProperty)[] CharacterBuffRecords;//[Offset: 0xc4c , Size: 12]
	int RemainingRevivalTime;//[Offset: 0xc58 , Size: 4]
	bool IsIDCardCaptured;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c , Size: 1]
	bool IsInWaittingRevivalState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5d , Size: 1]
	bool IsInRevivingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5e , Size: 1]
	bool IsGiveUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5f , Size: 1]
	int64 RevivalCardCreateTime;//[Offset: 0xc60 , Size: 8]
	delegate OnRevivalStateChangeDelegate;//[Offset: 0xc68 , Size: 12]
	delegate OnRevivalRemainingTimeChangeDelegate;//[Offset: 0xc74 , Size: 12]
	SyncMarkDispatchData(StructProperty)[] SyncMarkDispatchData;//[Offset: 0xc80 , Size: 12]
	PrevSyncMarkDispatchData(StructProperty)[] PrevSyncMarkDispatchData;//[Offset: 0xc8c , Size: 12]
	LocalMarkDispatchData(StructProperty)[] LocalMarkDispatchData;//[Offset: 0xc98 , Size: 12]
	float KdValue;//[Offset: 0xca4 , Size: 4]
	function SetPlayerGiveUp();// 0x1891fa4
	function SetForceSyncTeammateData();// 0x1891f28
	function SaveBuffData();// 0x1891f0c
	function RestoreBuffData();// 0x1891ef0
	function RespondToPawnRescueingStatusChange();// 0x1891d4c
	function RespondToPawnCanRescueOtherStatusChange();// 0x1891c44
	function RespondToPawnBreathChange();// 0x1891b44
	function RefreshRevivalState();// 0x1891b30
	function RefreshFollowMark();// 0x1891b1c
	function PlayersCountOnMyPlane();// 0x1891af4
	function OnRevivalStateChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnRevivalRemainingTimeChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnRep_VisualFieldInfo();// 0x1891ae0
	function OnRep_UpdateKillMonsterNum();// 0x1752180
	function OnRep_TeamMatePlayerStateList();// 0x1891acc
	function OnRep_TeamMatePlayerStateIndex();// 0x1891ab8
	function OnRep_SingleRoundTotalDamage();// 0x1891aa4
	function OnRep_RemainingRevivalTime();// 0x1891a90
	function OnRep_RankNotify();// 0x1891a7c
	function OnRep_PlayersCountOnPlane();// 0x1891a68
	function OnRep_PlayerReconnectEvent();// 0x1891a54
	function OnRep_PlayerName();// 0x16e6e40
	function OnRep_PlayerLostConnectionEvent();// 0x1891a40
	function OnRep_PlayerLiveState();// 0x17b8ee4
	function OnRep_PlayerKillsChange();// 0x1891a24
	function OnRep_PlayerIsFollowing();// 0x1891a10
	function OnRep_PlayerGiveUp();// 0x18919fc
	function OnRep_PlayerGameOver();// 0x18919e8
	function OnRep_PlayerExitGameEvent();// 0x18919d4
	function OnRep_PlayerAliasShowInfoList();// 0x18919c0
	function OnRep_MarkSyncData();// 0x18919ac
	function OnRep_MapMarkNotify();// 0x1891998
	function OnRep_IsIDCardCaptured();// 0x1891984
	function OnRep_HPChanged();// 0x16ad21c
	function OnRep_ChangeRevivalState();// 0x1891970
	function OnRep_ChangeInRevivingState();// 0x189195c
	function OnRep_BreathChanged();// 0x1891948
	function OnRep_BPS();// 0x1891934
	function OnPlayerKillsChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnNewRound();// 0x17b8e78
	function OnLocalCharacterHPChangeDelegate__DelegateSignature();// 0x206ccd8
	function OnClientVeteranRecruitIndexUpdated();// 0x1891918
	function OnClientRemoveBuff();// 0x17b8db4
	function OnClientAddBuff();// 0x17b8cf0
	function IsSinglePlayer();// 0x18918f0
	function IsAlive();// 0x18918c8
	function GetUserIDByMemberID();// 0x1891840
	function GetTeamMatePlayerStateList();// 0x189171c
	function GetTeamMatePlayerStateFromPlayerKey();// 0x189169c
	function GetTeamMateIndex();// 0x189161c
	function GetTeammateByName();// 0x1891558
	function GetPlayerTemperature();// 0x1891530
	function GetPlayerTeamIndex2();// 0x1891508
	function GetPlayerTeamIndex();// 0x1891508
	function GetPlayerMaxTemperature();// 0x18914e0
	function GetPlayerMaxHealth();// 0x18914b8
	function GetPlayerHealth();// 0x1891490
	function GetPlayerCharacter();// 0x1891468
	function GetPlayerAliasInfoList();// 0x18913bc
	function GetMaxEnegyBuff();// 0x189136c
	function GetMarkDataByInstanceID();// 0x1891214
	function GetCampMatePlayerList();// 0x18910f8
	function GetBreathPercentage();// 0x18910d0
	function GetAllPlayerStates();// 0x1891004
	function GetAllPlayerStateList();// 0x1890ee0
	function GetAllMarkSyncData();// 0x1890e34
	function GetAlertDataByIndex();// 0x1890c60
	function ForceNotifyAlertUpdate();// 0x1890c4c
	function FollowInitialTeamParachuteLeaderAndShowTips();// 0x1890af4
	function FadeTeammatesMapMark();// 0x1890ae0
	function DispatchPlayerExitEvent();// 0x1890ac4
	function ClientDisplayGameTipWithMsgID();// 0x1890900
	function ChangeFadeMapMarkDist();// 0x1890884
	function CanRevivalTeammate();// 0x189085c
	function CanBeRevival();// 0x1890834
	function CalculateEnegyStage();// 0x189080c
	function AddInDamageAmount();// 0x1890748
	function AddEnegySafety();// 0x18906d0
	function AddDamageAmount();// 0x1890550

--------------------------------
Class: UAEPlayerState.PlayerState.Info.Actor.Object
	float surviveTime;//[Offset: 0x328 , Size: 4]
	float Pronetime;//[Offset: 0x32c , Size: 4]
	float marchDistance;//[Offset: 0x338 , Size: 4]
	float travelDistance;//[Offset: 0x33c , Size: 4]
	float DriveDistance;//[Offset: 0x340 , Size: 4]
	float MonsterCatchupDistance;//[Offset: 0x344 , Size: 4]
	int destroyVehicleNum;//[Offset: 0x348 , Size: 4]
	int rescueTimes;//[Offset: 0x34c , Size: 4]
	int GVMemberID;//[Offset: 0x350 , Size: 4]
	FName PlayerType;//[Offset: 0x358 , Size: 8]
	uint64 FinalTeamleaderUID;//[Offset: 0x360 , Size: 8]
	uint32 PlayerKey;//[Offset: 0x368 , Size: 4]
	FString PlayerUID;//[Offset: 0x36c , Size: 12]
	bool bAIPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x378 , Size: 1]
	FString iconUrl;//[Offset: 0x37c , Size: 12]
	int gender;//[Offset: 0x388 , Size: 4]
	int PlayerLevel;//[Offset: 0x38c , Size: 4]
	int SegmentLevel;//[Offset: 0x390 , Size: 4]
	int AvatarBoxId;//[Offset: 0x394 , Size: 4]
	int CampID;//[Offset: 0x398 , Size: 4]
	uint64 UID;//[Offset: 0x3a0 , Size: 8]
	FString OpenID;//[Offset: 0x3a8 , Size: 12]
	FString Nation;//[Offset: 0x3b4 , Size: 12]
	int TeamID;//[Offset: 0x3c0 , Size: 4]
	int PlayerBornPointID;//[Offset: 0x3c4 , Size: 4]
	int Kills;//[Offset: 0x3c8 , Size: 4]
	int Knockouts;//[Offset: 0x3cc , Size: 4]
	int Assists;//[Offset: 0x3d8 , Size: 4]
	byte PlatformGender;//[Offset: 0x3dc , Size: 1]
	int MatchStrategyLabel;//[Offset: 0x3e0 , Size: 4]
	int MatchLabel;//[Offset: 0x3e4 , Size: 4]
	uint32 Killer;//[Offset: 0x3e8 , Size: 4]
	FString KillerName;//[Offset: 0x3ec , Size: 12]
	uint64 MisKillTeammatePlayerKey;//[Offset: 0x3f8 , Size: 8]
	int ShootWeaponShotNum;//[Offset: 0x400 , Size: 4]
	int ShootWeaponShotAndHitPlayerNum;//[Offset: 0x404 , Size: 4]
	int ShootWeaponShotAndHitPlayerNumNoAI;//[Offset: 0x408 , Size: 4]
	int ShootWeaponShotHeadNum;//[Offset: 0x40c , Size: 4]
	int ShootWeaponShotHeadNumNoAI;//[Offset: 0x410 , Size: 4]
	int HeadShotNum;//[Offset: 0x414 , Size: 4]
	int HeadShotNumNoAI;//[Offset: 0x418 , Size: 4]
	int KillNumByGrende;//[Offset: 0x41c , Size: 4]
	int UseFragGrenadeNum;//[Offset: 0x420 , Size: 4]
	int UseSmokeGrenadeNum;//[Offset: 0x424 , Size: 4]
	int MaxKillDistance;//[Offset: 0x428 , Size: 4]
	int HealTimes;//[Offset: 0x42c , Size: 4]
	float DamageAmount;//[Offset: 0x430 , Size: 4]
	float HealAmount;//[Offset: 0x434 , Size: 4]
	KillFlow(StrProperty)[] KillFlow;//[Offset: 0x438 , Size: 12]
	KnockOutFlow(StrProperty)[] KnockOutFlow;//[Offset: 0x444 , Size: 12]
	KnockOutList(StructProperty)[] KnockOutList;//[Offset: 0x450 , Size: 12]
	float InDamageAmount;//[Offset: 0x45c , Size: 4]
	TLog_PickUpItemFlowData(StructProperty)[] TLog_PickUpItemFlowData;//[Offset: 0x46c , Size: 12]
	<TLog_BornLandGrenadeData_Key(IntProperty) , TLog_BornLandGrenadeData(StructProperty)> TLog_BornLandGrenadeData;//[Offset: 0x478 , Size: 60]
	<TLog_PickUpItemIdMap_Key(IntProperty) , TLog_PickUpItemIdMap(BoolProperty)> TLog_PickUpItemIdMap;//[Offset: 0x4b4 , Size: 60]
	UseItemFlow(StructProperty)[] UseItemFlow;//[Offset: 0x4f0 , Size: 12]
	TLog_PropEquipUnequipFlowData(StructProperty)[] TLog_PropEquipUnequipFlowData;//[Offset: 0x4fc , Size: 12]
	<TLog_BulletCount_Key(IntProperty) , TLog_BulletCount(IntProperty)> TLog_BulletCount;//[Offset: 0x508 , Size: 60]
	TLog_SpecialStats TLog_SpecialStats;//[Offset: 0x544 , Size: 8]
	bool bIsOutsideBlueCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c , Size: 1]
	float OutsideBlueCircleTime;//[Offset: 0x550 , Size: 4]
	VehicleDriveDisDataArray(StructProperty)[] VehicleDriveDisDataArray;//[Offset: 0x554 , Size: 12]
	int FirstOpenedAirDropBoxNum;//[Offset: 0x560 , Size: 4]
	int FirstOpenedPlayerTombBoxNum;//[Offset: 0x564 , Size: 4]
	int FirstOpenedTreasureBoxNum;//[Offset: 0x568 , Size: 4]
	float HitEnemyHeadAmount;//[Offset: 0x56c , Size: 4]
	Vector LandLocation;//[Offset: 0x570 , Size: 12]
	Vector ParachuteLocation;//[Offset: 0x57c , Size: 12]
	int LandTime;//[Offset: 0x588 , Size: 4]
	Vector DeadLocation;//[Offset: 0x58c , Size: 12]
	FString DeadDamangeType;//[Offset: 0x598 , Size: 12]
	int PveDeadAttacker;//[Offset: 0x5a4 , Size: 4]
	int PveStageId;//[Offset: 0x5a8 , Size: 4]
	FString DeadTimeStr;//[Offset: 0x5ac , Size: 12]
	int NearDeathDamageType;//[Offset: 0x5b8 , Size: 4]
	uint32 NearDeathCauserId;//[Offset: 0x5bc , Size: 4]
	bool NearDeathIsHeadShot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c0 , Size: 1]
	EquipmentData EquipmentData;//[Offset: 0x5cc , Size: 80]
	bool bIsGameTerminator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x624 , Size: 1]
	int GamePlayingTime;//[Offset: 0x628 , Size: 4]
	int ObserverTime;//[Offset: 0x62c , Size: 4]
	int TouchDownAreaID;//[Offset: 0x630 , Size: 4]
	int TouchDownLocTypeID;//[Offset: 0x634 , Size: 4]
	TouchDownAreaList(IntProperty)[] TouchDownAreaList;//[Offset: 0x638 , Size: 12]
	bool bHasTouchDownAreaList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x644 , Size: 1]
	CompletedTaskList(StructProperty)[] CompletedTaskList;//[Offset: 0x648 , Size: 12]
	SpecialCollectionList(StructProperty)[] SpecialCollectionList;//[Offset: 0x654 , Size: 12]
	WeaponDamageRecordList(StructProperty)[] WeaponDamageRecordList;//[Offset: 0x660 , Size: 12]
	SecretAreaIDList(IntProperty)[] SecretAreaIDList;//[Offset: 0x66c , Size: 12]
	CollectItemRecord(StructProperty)[] CollectItemRecord;//[Offset: 0x678 , Size: 12]
	float DrivingHelicopterTime;//[Offset: 0x684 , Size: 4]
	float InHelicopterTime;//[Offset: 0x688 , Size: 4]
	int RevivalNum;//[Offset: 0x68c , Size: 4]
	int BeRevivedNum;//[Offset: 0x690 , Size: 4]
	int KillNumInVehicle;//[Offset: 0x694 , Size: 4]
	float TotalSprintDistance;//[Offset: 0x698 , Size: 4]
	float TotalBeenDamageAmount;//[Offset: 0x69c , Size: 4]
	float DestroyVehicleWheelNum;//[Offset: 0x6a0 , Size: 4]
	int ProneTimes;//[Offset: 0x6a4 , Size: 4]
	int CrouchTimes;//[Offset: 0x6a8 , Size: 4]
	int JumpTimes;//[Offset: 0x6ac , Size: 4]
	int KillMonsterNum;//[Offset: 0x6b0 , Size: 4]
	<MonsterID2KillNum_Key(IntProperty) , MonsterID2KillNum(IntProperty)> MonsterID2KillNum;//[Offset: 0x6b4 , Size: 60]
	float TotalDamageAmountToMonsters;//[Offset: 0x6f0 , Size: 4]
	float TotalDamageAmountFromMonsters;//[Offset: 0x6f4 , Size: 4]
	<DamageAmountToMonsters_Key(IntProperty) , DamageAmountToMonsters(FloatProperty)> DamageAmountToMonsters;//[Offset: 0x6f8 , Size: 60]
	<DamageAmountFromMonsters_Key(IntProperty) , DamageAmountFromMonsters(FloatProperty)> DamageAmountFromMonsters;//[Offset: 0x734 , Size: 60]
	int MonsterHeadShotKilledTimes;//[Offset: 0x770 , Size: 4]
	int BeMonsterDownTimes;//[Offset: 0x774 , Size: 4]
	int LightCandleNum;//[Offset: 0x778 , Size: 4]
	<ActivityButtonCount_Key(IntProperty) , ActivityButtonCount(IntProperty)> ActivityButtonCount;//[Offset: 0x77c , Size: 60]
	float BattleStateTime;//[Offset: 0x7b8 , Size: 4]
	bool bIsKickedFromGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7bc , Size: 1]
	float DriveWithTeammateDistance;//[Offset: 0x7c0 , Size: 4]
	int FistKillingCount;//[Offset: 0x7c4 , Size: 4]
	int OpenedAirDropBoxNum;//[Offset: 0x7c8 , Size: 4]
	<VehicleUsedMap_Key(UInt32Property) , VehicleUsedMap(UInt32Property)> VehicleUsedMap;//[Offset: 0x7cc , Size: 60]
	DestroyVehicleFlow(StrProperty)[] DestroyVehicleFlow;//[Offset: 0x808 , Size: 12]
	int UseHelicoperNum;//[Offset: 0x814 , Size: 4]
	float UseHelicoperDistance;//[Offset: 0x818 , Size: 4]
	byte CharmRankIndex;//[Offset: 0x81c , Size: 1]
	<UseHelicoperRecord(UInt32Property)> UseHelicoperRecord;//[Offset: 0x820 , Size: 60]
	int SnowBoardJumpActionCount;//[Offset: 0x860 , Size: 4]
	int EmoteOnTelpherCount;//[Offset: 0x864 , Size: 4]
	int KillSnowManCount;//[Offset: 0x868 , Size: 4]
	<EventCounterMap_Key(EnumProperty) , EventCounterMap(IntProperty)> EventCounterMap;//[Offset: 0x86c , Size: 60]
	int VeteranRecruitIndex;//[Offset: 0x8a8 , Size: 4]
	FPlayEmoteDataArray(StructProperty)[] FPlayEmoteDataArray;//[Offset: 0x8ac , Size: 12]
	GameModePlayerAliasInfo AliasInfo;//[Offset: 0x8b8 , Size: 48]
	int MemberIdInVoiceRoom;//[Offset: 0x8e8 , Size: 4]
	bool PlayerVoiceEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8ec , Size: 1]
	GameModePlayerUpassInfo UpassInfo;//[Offset: 0x8f0 , Size: 36]
	int UpassShow;//[Offset: 0x914 , Size: 4]
	int upassKeepBuy;//[Offset: 0x918 , Size: 4]
	TLog_Micphone MicphoneTlog;//[Offset: 0x91c , Size: 24]
	float TeammateMicrophoneTime;//[Offset: 0x934 , Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x938 , Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x93c , Size: 4]
	float EnemySpeakerTime;//[Offset: 0x940 , Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x944 , Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x948 , Size: 4]
	float MicrophoneUseTimeStamp;//[Offset: 0x94c , Size: 4]
	float SpeakerUseTimeStamp;//[Offset: 0x950 , Size: 4]
	function SetGVMemberIDServerCall();// 0x1c96b44
	function SetGVMemberID();// 0x1c96acc
	function ReportTaskExtInfo();// 0x1c9692c
	function ReportTaskData();// 0x1c96870
	function ReportSpecialCollection();// 0x1c967b4
	function ReportSecretAreaID();// 0x1c9673c
	function ReportLandLocType();// 0x1c966c4
	function ReportLandAreaList();// 0x1c965f8
	function ReportLandArea();// 0x1c96580
	function RecordUseHelicoper();// 0x1c96508
	function OnRep_VeteranRecruitIndex();// 0x1c964f4
	function OnRep_UpdateKillMonsterNum();// 0x1752180
	function OnRep_UID();// 0x1c964e0
	function OnRep_PlayerKillsChange();// 0x1891a24
	function OnRep_MatchLabel();// 0x16ad21c
	function OnRep_CollectItemRecord();// 0x1c964cc
	function OnRep_CampID();// 0x1c964b8
	function OnClientVeteranRecruitIndexUpdated();// 0x1891918
	function IsSpecialPickItemCollectionCompleted();// 0x1c96438
	function IsSpecialPickItem();// 0x1c963b8
	function GetWeaponRecordData();// 0x1c962d4
	function GetUserIDByMemberID();// 0x1891840
	function GetUIDString();// 0x1c96214
	function GetTeammateBattleResultData();// 0x1c961a8
	function GetPlayerKey();// 0x1c96180
	function GetPlayerBattleResultData_SuperCold();// 0x1c9609c
	function GetPlayerBattleResultData();// 0x1c96030
	function ForceUpdateCampCharacterList();// 0x1c96014
	function ChangeCollectItemRecord();// 0x1c95f50

--------------------------------
Class: TLog_SpecialStats
	float MonsterDamageInNight1;//[Offset: 0x0 , Size: 4]
	float MonsterDamageInNight2;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: EquipmentData
	int HelmetID;//[Offset: 0x0 , Size: 4]
	int ArmorID;//[Offset: 0x4 , Size: 4]
	int BackPackID;//[Offset: 0x8 , Size: 4]
	int MainWeapon1ID;//[Offset: 0xc , Size: 4]
	MainWeapon1AttachmentsID(IntProperty)[] MainWeapon1AttachmentsID;//[Offset: 0x10 , Size: 12]
	int MainWeapon2ID;//[Offset: 0x1c , Size: 4]
	MainWeapon2AttachmentsID(IntProperty)[] MainWeapon2AttachmentsID;//[Offset: 0x20 , Size: 12]
	int ViceWeaponID;//[Offset: 0x2c , Size: 4]
	ViceWeaponAttachmentsID(IntProperty)[] ViceWeaponAttachmentsID;//[Offset: 0x30 , Size: 12]
	int CloseWeaponID;//[Offset: 0x3c , Size: 4]
	ThrowWeaponsID(IntProperty)[] ThrowWeaponsID;//[Offset: 0x40 , Size: 12]
	int8 IsLuckyClothing;//[Offset: 0x4c , Size: 1]

--------------------------------
Class: GameModePlayerAliasInfo
	int aliasID;//[Offset: 0x0 , Size: 4]
	FString aliasTitle;//[Offset: 0x4 , Size: 12]
	FString aliasNation;//[Offset: 0x10 , Size: 12]
	int aliasRank;//[Offset: 0x1c , Size: 4]
	FString aliasPartnerName;//[Offset: 0x20 , Size: 12]
	int aliasPartnerRelation;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: TLog_Micphone
	float TeammateMicrophoneTime;//[Offset: 0x0 , Size: 4]
	float TeammateSpeakerTime;//[Offset: 0x4 , Size: 4]
	float EnemyMicrophoneTime;//[Offset: 0x8 , Size: 4]
	float EnemySpeakerTime;//[Offset: 0xc , Size: 4]
	float TeammateInterphoneTime;//[Offset: 0x10 , Size: 4]
	float EnemyInterphoneTime;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: CharacterAutoFollowStruct
	bool IsFollowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	STExtraBaseCharacter* Target;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterLocAndRot
	Vector Loc;//[Offset: 0x0 , Size: 12]
	Rotator Rot;//[Offset: 0xc , Size: 12]

--------------------------------
Class: VisualFieldInfo
	int ViewerLayerID;//[Offset: 0x0 , Size: 4]
	VisualFieldMetaInfoList(StructProperty)[] VisualFieldMetaInfoList;//[Offset: 0x4 , Size: 12]

--------------------------------
Class: DriveCarNotify
	byte DriveCar;//[Offset: 0x0 , Size: 1]
	STExtraBaseCharacter* Character;//[Offset: 0x4 , Size: 4]
	STExtraWheeledVehicle* Vehicle;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: STExtraWheeledVehicle.STExtraVehicleBase.Pawn.Actor.Object
	STVehicleWheelDustConfig* DustConfig;//[Offset: 0xb90 , Size: 4]
	ParticleSystemComponent* DustPSC;//[Offset: 0xb94 , Size: 4]
	PSCs(ObjectProperty)[] PSCs;//[Offset: 0xba4 , Size: 12]
	class TrailMarkActor* TrailMarkClass;//[Offset: 0xbb0 , Size: 40]
	TrailMarkActor* WeakTrailMarkActor;//[Offset: 0xbd8 , Size: 8]
	STExtraVehicleMovementComponent4W* VehicleMovement;//[Offset: 0xbe0 , Size: 4]
	float TorqueMultiplierforBoosting;//[Offset: 0xbe8 , Size: 4]
	float WheelEffectUpdateInterval;//[Offset: 0xbec , Size: 4]
	int ValidTransformMinWheelNum;//[Offset: 0xbf0 , Size: 4]
	delegate OnVehicleWheelLanded;//[Offset: 0xbf4 , Size: 12]
	float MinLandingWheelSuspensionOffset;//[Offset: 0xc00 , Size: 4]
	delegate OnVehicleGearChanged;//[Offset: 0xc04 , Size: 12]
	AkAudioEvent* Sfx_MoveConcrete;//[Offset: 0xc18 , Size: 4]
	AkAudioEvent* Sfx_MoveMud;//[Offset: 0xc1c , Size: 4]
	AkAudioEvent* Sfx_MoveWater;//[Offset: 0xc20 , Size: 4]
	AkAudioEvent* Sfx_Slip;//[Offset: 0xc24 , Size: 4]
	AkAudioEvent* Sfx_TireExplosion;//[Offset: 0xc28 , Size: 4]
	AkAudioEvent* Sfx_GearUp;//[Offset: 0xc2c , Size: 4]
	AkAudioEvent* Sfx_GearDown;//[Offset: 0xc30 , Size: 4]
	CurveFloat* Sfx_RPMRelativeCurve;//[Offset: 0xc34 , Size: 4]
	WheelSfxConfig* WheelSfxConfig;//[Offset: 0xc38 , Size: 4]
	AkComponent* AkComp_WheelFriction;//[Offset: 0xcd8 , Size: 4]
	float RTPC_Throttle_InterpSpeed_Up;//[Offset: 0xcec , Size: 4]
	float RTPC_Throttle_InterpSpeed_Down;//[Offset: 0xcf0 , Size: 4]
	float WheelSfxUpdateInterval;//[Offset: 0xd18 , Size: 4]
	STReplicatedVehicleState STReplicatedState;//[Offset: 0xd20 , Size: 5]
	bool ShouldDestroyPhysxWhileFreeze;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd25 , Size: 1]
	function STServerUpdateState();// 0x18b75d8
	function PostLoadFPPMesh();// 0x18ae2e0
	function OnWheelsLanded();// 0x18b75c4
	function OnRep_ReplicatedState();// 0x16ad21c
	function OnGearChanged();// 0x18b7544
	function GetVehicleSpeed();// 0x18b751c
	function GetVehicleSlip();// 0x18b74ec
	function GetRotationInputDir();// 0x17fbff0
	function BroadcastClientVehicleWheelDestroyEffect();// 0x18b74d0

--------------------------------
Class: STExtraVehicleBase.Pawn.Actor.Object
	int iRegionVehicle;//[Offset: 0x3a8 , Size: 4]
	enum VehicleType;//[Offset: 0x3ac , Size: 1]
	enum VehicleShapeType;//[Offset: 0x3ad , Size: 1]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x3b0 , Size: 24]
	MaterialInterface* BrokenMat;//[Offset: 0x3c8 , Size: 4]
	ParticleSystem* PS_Explosion;//[Offset: 0x3cc , Size: 4]
	ParticleSystem* PS_OnHitObstacles;//[Offset: 0x3d0 , Size: 4]
	Texture2D* VehicleIcon;//[Offset: 0x3d4 , Size: 4]
	byte CameraDataType;//[Offset: 0x3d8 , Size: 1]
	bool ShowUpDownGUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d9 , Size: 1]
	bool ShowHeightUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3da , Size: 1]
	bool AdjustViewDistanceByHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3db , Size: 1]
	float AdjustViewDistanceBaseDist;//[Offset: 0x3dc , Size: 4]
	float AdjustViewDistanceBaseFactor;//[Offset: 0x3e0 , Size: 4]
	bool IsUnmannedVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4 , Size: 1]
	float ShowGrainyScreenMinDist;//[Offset: 0x3e8 , Size: 4]
	float FuelConsumptionModifierBoost;//[Offset: 0x3ec , Size: 4]
	bool bCanBoostSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f0 , Size: 1]
	bool bUseSyncAtClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f1 , Size: 1]
	bool bCheckOnGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f2 , Size: 1]
	float LanscapeCheckDistance;//[Offset: 0x3f4 , Size: 4]
	bool bLockZeroAngularDamping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8 , Size: 1]
	float LockZeroAngularDampingValue;//[Offset: 0x3fc , Size: 4]
	bool bInvulnerableWhenHasRiders;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x400 , Size: 1]
	int MainMaterialIndex;//[Offset: 0x404 , Size: 4]
	FText VehicleDisplayName;//[Offset: 0x408 , Size: 12]
	Vector AirDropVelocity;//[Offset: 0x414 , Size: 12]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x420 , Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x428 , Size: 8]
	bool bAllowDifferentTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x430 , Size: 1]
	float EnterVehicleCameraBlendTime;//[Offset: 0x434 , Size: 4]
	float ExitVehicleCameraBlendTime;//[Offset: 0x438 , Size: 4]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x43c , Size: 4]
	bool DisableTickVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440 , Size: 1]
	float StaticForceFixInterval;//[Offset: 0x444 , Size: 4]
	float voiceCheckCD;//[Offset: 0x448 , Size: 4]
	float voiceCheckShowCD;//[Offset: 0x44c , Size: 4]
	float VoiceCheckDis;//[Offset: 0x450 , Size: 4]
	float voiceUsingHornCheckDis;//[Offset: 0x454 , Size: 4]
	float voiceCheckSpeed;//[Offset: 0x458 , Size: 4]
	bool EnableMapMark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x478 , Size: 1]
	bool mb_ZeroLocked;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x479 , Size: 1]
	bool bDebugDrawEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47a , Size: 1]
	float PassengerInjuryAvoidance;//[Offset: 0x47c , Size: 4]
	bool IsCanVehicleJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480 , Size: 1]
	enum VehicleHealthState;//[Offset: 0x4b8 , Size: 1]
	bool bIsEngineStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b9 , Size: 1]
	bool bIsUsingHorn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ba , Size: 1]
	bool bIsBoosting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bb , Size: 1]
	bool bIsVehicleSpringArmAutoReturn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4bc , Size: 1]
	Vector BloodEffectScale;//[Offset: 0x4c0 , Size: 12]
	SkeletalMeshComponent* Mesh;//[Offset: 0x4cc , Size: 4]
	VehicleSeatComponent* VehicleSeats;//[Offset: 0x4d0 , Size: 4]
	VehicleDamageComponent* VehicleDamage;//[Offset: 0x4d4 , Size: 4]
	VehicleCommonComponent* VehicleCommon;//[Offset: 0x4d8 , Size: 4]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x4dc , Size: 4]
	VehicleSyncComponent* VehicleSyncComponent;//[Offset: 0x4e0 , Size: 4]
	LagCompensationComponentBase* VehicleShootAntiCheat;//[Offset: 0x4e4 , Size: 4]
	VehicleComps(ObjectProperty)[] VehicleComps;//[Offset: 0x4e8 , Size: 12]
	float VehicleHitThreshold;//[Offset: 0x50c , Size: 4]
	float VehicleHitCharacterThreshold;//[Offset: 0x510 , Size: 4]
	float AndroidGLES2TailLightScale;//[Offset: 0x520 , Size: 4]
	delegate OnClientEnterVehicleEvent;//[Offset: 0x530 , Size: 12]
	delegate OnClientExitVehicleEvent;//[Offset: 0x53c , Size: 12]
	bool NeedCheckMovetoVehicleStraight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x548 , Size: 1]
	float VehicleEnterDistance;//[Offset: 0x54c , Size: 4]
	float TickEnterSphereInterval;//[Offset: 0x550 , Size: 4]
	float EnterSphereExtraHeight;//[Offset: 0x554 , Size: 4]
	float TickEnterCullWaterSphereInterval;//[Offset: 0x564 , Size: 4]
	float EnterCullWaterDistanceSq;//[Offset: 0x568 , Size: 4]
	Vector CullWaterCapsuleA;//[Offset: 0x56c , Size: 12]
	Vector CullWaterCapsuleB;//[Offset: 0x578 , Size: 12]
	float CullWaterCapsuleRadius;//[Offset: 0x584 , Size: 4]
	float CullWaterCapsuleBlendWidth;//[Offset: 0x588 , Size: 4]
	bool bPeneTerrainProtectionEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x594 , Size: 1]
	float PeneTerrainProtectionInterval;//[Offset: 0x598 , Size: 4]
	float SaveValidTransformInterval;//[Offset: 0x59c , Size: 4]
	Vector PeneTerrainProtectionFixOffset;//[Offset: 0x5a0 , Size: 12]
	bool bIsAirdroppingVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d0 , Size: 1]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x5d4 , Size: 4]
	AkAudioEvent* Sfx_EngineLoop;//[Offset: 0x5d8 , Size: 4]
	AkAudioEvent* Sfx_EngineLoop_Team;//[Offset: 0x5dc , Size: 4]
	AkAudioEvent* Sfx_Boost;//[Offset: 0x5e0 , Size: 4]
	AkAudioEvent* Sfx_FireLoop;//[Offset: 0x5e4 , Size: 4]
	AkAudioEvent* Sfx_Landing;//[Offset: 0x5e8 , Size: 4]
	AkAudioEvent* Sfx_Explosion;//[Offset: 0x5ec , Size: 4]
	AkAudioEvent* Sfx_HitBody;//[Offset: 0x5f0 , Size: 4]
	AkAudioEvent* Sfx_HitZombie;//[Offset: 0x5f4 , Size: 4]
	AkAudioEvent* Sfx_HitMetal;//[Offset: 0x5f8 , Size: 4]
	AkAudioEvent* Sfx_Horn;//[Offset: 0x5fc , Size: 4]
	AkAudioEvent* Sfx_Throttle;//[Offset: 0x600 , Size: 4]
	AkAudioEvent* Sfx_UnderWater_In;//[Offset: 0x604 , Size: 4]
	AkAudioEvent* Sfx_UnderWater_Out;//[Offset: 0x608 , Size: 4]
	AkAudioEvent* Sfx_CannotThrottle;//[Offset: 0x60c , Size: 4]
	AkAudioEvent* Sfx_BodyOverlapDamage;//[Offset: 0x610 , Size: 4]
	AkAudioEvent* Sfx_EngineStop;//[Offset: 0x614 , Size: 4]
	SfxArr_MusicLoops(ObjectProperty)[] SfxArr_MusicLoops;//[Offset: 0x618 , Size: 12]
	float EngineSfxEndDelayTime;//[Offset: 0x624 , Size: 4]
	bool bAudioLogEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x628 , Size: 1]
	AkComponent* SoundComponent;//[Offset: 0x76c , Size: 4]
	float RPMSfxScale;//[Offset: 0x79c , Size: 4]
	float ThrottleSfxMinSpeed;//[Offset: 0x7a0 , Size: 4]
	float PlayMusicChance;//[Offset: 0x7ac , Size: 4]
	int CurMusicIndex;//[Offset: 0x7b0 , Size: 4]
	enum VehicleSyncTag;//[Offset: 0x7c1 , Size: 1]
	float ReplicatedServerLastTransformUpdateTimeStamp;//[Offset: 0x7c4 , Size: 4]
	VehicleSimViewData SimulateViewData;//[Offset: 0x7c8 , Size: 4]
	VehicleSimViewData SimulateFreeCameraViewData;//[Offset: 0x7cc , Size: 4]
	VehicleSpringArmComponent* mp_VehicleSpringArm;//[Offset: 0x7d0 , Size: 4]
	delegate OnVehicleHealthStateChanged;//[Offset: 0x7d4 , Size: 12]
	bool bAlwaysIgnoreRideCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e0 , Size: 1]
	float MinRideAngleDgree;//[Offset: 0x7e4 , Size: 4]
	bool bCanUseSpeculativeCCD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f0 , Size: 1]
	bool bUseSpeculativeCCDOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f1 , Size: 1]
	float VehicleRadiusImulseScale;//[Offset: 0x7f4 , Size: 4]
	float VehicleAdditionalBlowUp;//[Offset: 0x7f8 , Size: 4]
	bool bResolvingStuckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c , Size: 1]
	float StuckMinImpulse;//[Offset: 0x820 , Size: 4]
	float ContinuousStuckInterval;//[Offset: 0x824 , Size: 4]
	float ContinuousStuckTimeBeforeResoving;//[Offset: 0x828 , Size: 4]
	float StuckResovingTime;//[Offset: 0x82c , Size: 4]
	float ContinuousStuckTimer;//[Offset: 0x834 , Size: 4]
	float StuckResovingTimer;//[Offset: 0x838 , Size: 4]
	bool bServerPrecentPenetratingEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x840 , Size: 1]
	bool bShouldRespawnSelfWhenUnusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x880 , Size: 1]
	float RespawnWaitingTime;//[Offset: 0x884 , Size: 4]
	float RespawnTickInterval;//[Offset: 0x888 , Size: 4]
	bool bDrawDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c , Size: 1]
	bool bEnableAntiCheat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x918 , Size: 1]
	VACTaskSetups(ClassProperty)[] VACTaskSetups;//[Offset: 0x91c , Size: 12]
	VACTasks(ObjectProperty)[] VACTasks;//[Offset: 0x928 , Size: 12]
	VacInstancedTasks(ObjectProperty)[] VacInstancedTasks;//[Offset: 0x934 , Size: 12]
	bool bEnableServerAuthorize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x970 , Size: 1]
	bool EnableServerRecordWhenEnterCheatPunishMentNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x978 , Size: 1]
	SkeletalMeshComponent* FPPMeshComponent;//[Offset: 0x990 , Size: 4]
	MaterialInstanceDynamic* FPPDynamicMat;//[Offset: 0x994 , Size: 4]
	SkeletalMesh* MeshAssetRef;//[Offset: 0x998 , Size: 40]
	SkeletalMesh* TPPMesh;//[Offset: 0x9c0 , Size: 4]
	bool bEnableSkeletalMeshOptimizationDS;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5c , Size: 1]
	Vector SeekLockOffset;//[Offset: 0xa60 , Size: 12]
	FName SeekLockSocket;//[Offset: 0xa70 , Size: 8]
	float ProduceSoundInterval;//[Offset: 0xa78 , Size: 4]
	delegate VehicleAnimEventDelegate;//[Offset: 0xa80 , Size: 12]
	BattleItemHandleBase* BindingHandle;//[Offset: 0xa8c , Size: 4]
	delegate OnEnterVehicle;//[Offset: 0xa90 , Size: 12]
	float OverlapCameraShakeInterval;//[Offset: 0xaa4 , Size: 4]
	float OverlapDamageRate;//[Offset: 0xaac , Size: 4]
	float OverlapImpulseRate;//[Offset: 0xab0 , Size: 4]
	float OverlapImpulseRateZ;//[Offset: 0xab4 , Size: 4]
	float MaxOverlapImpulse;//[Offset: 0xab8 , Size: 4]
	float MinOverlapSpeed;//[Offset: 0xabc , Size: 4]
	float OverlapSimpleCharacterInterval;//[Offset: 0xac0 , Size: 4]
	float OverlapVehicleDamageRate;//[Offset: 0xac8 , Size: 4]
	float MaxOverlapVehicleDamageRange;//[Offset: 0xacc , Size: 4]
	ESTAINoiseEventParams EngineParams;//[Offset: 0xad4 , Size: 16]
	float EngineSoundCheckInterval;//[Offset: 0xae4 , Size: 4]
	float EngineSoundMinCheckSpeed;//[Offset: 0xaec , Size: 4]
	ESTAINoiseEventParams LoudspeakerParams;//[Offset: 0xaf0 , Size: 16]
	bool IsForbidNightVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb01 , Size: 1]
	class AttrModifyComponent* AttrModifyCompClass;//[Offset: 0xb04 , Size: 4]
	class STBuffSystemComponent* BuffSystemCompClass;//[Offset: 0xb08 , Size: 4]
	AttrModifyComponent* AttrModifyComp;//[Offset: 0xb0c , Size: 4]
	STBuffSystemComponent* BuffSystemComp;//[Offset: 0xb10 , Size: 4]
	DamageableGameObjectTypeList(EnumProperty)[] DamageableGameObjectTypeList;//[Offset: 0xb14 , Size: 12]
	bool bEnterSocketChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb20 , Size: 1]
	VehicleAvatarComponent* VehicleAvatar;//[Offset: 0xb24 , Size: 4]
	VehicleAdvanceAvatarComponent* VehicleAdvanceAvatar;//[Offset: 0xb28 , Size: 4]
	bool bAdvanceAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2c , Size: 1]
	bool ForcePlayerUpdateAnimEveryFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2d , Size: 1]
	bool bNeedDelayProcessAvatarOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb2e , Size: 1]
	float MaxLinearVelocity;//[Offset: 0xb40 , Size: 4]
	bool bInBuffSpeedState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb44 , Size: 1]
	int TeamID;//[Offset: 0xb48 , Size: 4]
	int CampID;//[Offset: 0xb4c , Size: 4]
	float VehicleGoStraight;//[Offset: 0xb50 , Size: 4]
	bool DamageIgnoreWheels;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb54 , Size: 1]
	STExtraPlayerCharacter* ReqExchangeCharacter;//[Offset: 0xb58 , Size: 4]
	float ExchangeVehicleSeatInterval;//[Offset: 0xb5c , Size: 4]
	delegate OnHitSpecialEffectDelegate;//[Offset: 0xb64 , Size: 12]
	WeaponManagerBaseComponent* WeaponManagerComponent;//[Offset: 0xb70 , Size: 4]
	EffectComponent* NewEffectComponent;//[Offset: 0xb74 , Size: 4]
	bool OpenShootVertify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78 , Size: 1]
	bool IsPveShootVerify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb79 , Size: 1]
	int WeaponReconnectIdx;//[Offset: 0xb7c , Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0xb80 , Size: 4]
	enum UAVOperateState;//[Offset: 0xb84 , Size: 1]
	float SingleMoveRate;//[Offset: 0xb88 , Size: 4]
	int CannotEnterTips;//[Offset: 0xb8c , Size: 4]
	function VehicleBeenDestroyedCleanInfoDisplay();// 0x18af1f8
	function TickEnableAvatarOutline();// 0x18af1e4
	function StartFireSimple();// 0x18af16c
	function StartAirDrop();// 0x18af158
	function ShowBoostingEffect();// 0x206ccd8
	function ShouldUseSpecialHitEffect();// 0x18af128
	function ShootCharacterVertify();// 0x18aeec0
	function SetWeaponReconnectIdx();// 0x18aee3c
	function SetUAVOperateState();// 0x18aedc4
	function SetJoystickMoveVelocity();// 0x18aed54
	function ServerSetUsingHorn();// 0x18aec8c
	function ServerSetIsVehicleSpringArmAutoReturn();// 0x18aebc4
	function ServerSetBoosting();// 0x18aeafc
	function ServerSetAirControlF();// 0x18aea48
	function ServerSetAirControlB();// 0x18ae994
	function ServerDetachEveryoneFromSeat();// 0x18ae914
	function SendVehicleInAirChangedTimeToServer();// 0x18ae8b8
	function SendTriggerEventToServer();// 0x18ae804
	function SendCreateDamage();// 0x18ae750
	function ResetJoystickMove();// 0x18ae73c
	function RemoveBuffBySkill();// 0x18ae62c
	function RemoveBuffByID();// 0x18ae4d4
	function RemoveAntiStuckBox();// 0x18ae4c0
	function RegisterItemHandle();// 0x18ae448
	function ProcessAvatarOutline();// 0x18ae42c
	function PrintStats();// 0x18ae410
	function PreChangeVehicleFPPAvatar();// 0x18ae3e8
	function PreChangeVehicleBrokenMat();// 0x18ae3c0
	function PreChangeVehicleAvatar();// 0x18ae2fc
	function PostLoadFPPMesh();// 0x18ae2e0
	function PlaySfxOneShot();// 0x18ae268
	function PawnHasState();// 0x18ae1e0
	function OnUpdateEffects();// 0x206ccd8
	function OnStopFire();// 0x206ccd8
	function OnSkeletalMeshSleep();// 0x18ae124
	function OnSkeletalMeshAwake();// 0x18ae068
	function OnSetTailLightValue();// 0x206ccd8
	function OnServerPlayerChangeVehicleSeat();// 0x206ccd8
	function OnRep_VehicleSyncFlag();// 0x18ae054
	function OnRep_VehicleHealthState();// 0x18ae040
	function OnRep_TeamID();// 0x16ad21c
	function OnRep_SimulateViewData();// 0x18ae02c
	function OnRep_SimulateFreeCameraViewData();// 0x18ae018
	function OnRep_IsVehicleSpringArmAutoReturn();// 0x18ae004
	function OnRep_IsForbidNightVehicle();// 0x18adff0
	function OnRep_IsEngineStarted();// 0x18adfdc
	function OnRep_IsBoosting();// 0x18adfc8
	function OnRep_IsAirdroppingVehicle();// 0x18adfb4
	function OnRep_CampID();// 0x16ad21c
	function OnPlayerReqExitVehicle();// 0x1700468
	function OnPlayerExitVehicle();// 0x206ccd8
	function OnPlayerEnterVehicle();// 0x206ccd8
	function OnMeshLoaded();// 0x18ade48
	function OnFireBeginOverlapEvent();// 0x18addd0
	function OnEngineStop();// 0x206ccd8
	function OnEngineStart();// 0x206ccd8
	function OnBoostingChanged();// 0x206ccd8
	function NotifyServerProjectileBulletImpact();// 0x18adcfc
	function MultiCast_ApplyImpulse();// 0x18adbfc
	function LoadFPPVehicleModel();// 0x18adbe8
	function IsValidYawInput();// 0x18adb1c
	function IsUsingFPPModel();// 0x18adaf4
	function IsUAV();// 0x18adac4
	function IsSpawnedInReady();// 0x18adaa8
	function IsNotInWater();// 0x18ada78
	function IsMotorbike();// 0x18ada50
	function IsInMidAir();// 0x18ada20
	function IsInBuffSpeedState();// 0x18ada04
	function IsHelicopter();// 0x18ad9dc
	function IsEntirelyUnderWater();// 0x18ad9b4
	function IsClient_WeaponOwner();// 0x18ad984
	function IsCanEnter();// 0x18ad954
	function IsAmphibiousVehicle();// 0x18ad92c
	function IsAlive();// 0x18ad8fc
	function IsAirVehicle();// 0x18ad8cc
	function IsAI();// 0x18ad89c
	function InitVehicle();// 0x18ad7d0
	function InitSkeletalMesh();// 0x18ad750
	function HasSkillID();// 0x18ad6d0
	function HasBuffID();// 0x18ad648
	function HandleOnVehicleHealthStateChanged();// 0x18ad5c8
	function HandleOnSeatDetached();// 0x18ad4c0
	function HandleOnSeatChanged();// 0x18ad328
	function HandleOnSeatAttached();// 0x18ad220
	function HandleOnMeshHit();// 0x18a6d6c
	function HandleMoveAntiShootVerifyMiss();// 0x16e37d8
	function HandleLocalPlayerLeaveVehicle();// 0x18ad1a0
	function HandleLocalPlayerEnterVehicle();// 0x18ad120
	function HandleLocalPlayerDeadth();// 0x18ad0a8
	function GetWeaponUserConst();// 0x18ad078
	function GetWeaponUser();// 0x18ad048
	function GetWeaponReconnectIdx();// 0x18ad018
	function GetWeaponOwnerProxy();// 0x180de58
	function GetWeaponOwnerPlayerKey();// 0x18acfe8
	function GetWeaponOwnerPawnHealth();// 0x18acfb8
	function GetWeaponManagerBase();// 0x18acf88
	function GetWeaponManager();// 0x18acf58
	function GetVehicleSpringArm();// 0x18acf30
	function GetVehicleSkinItemID();// 0x18acf08
	function GetVehicleAvatar();// 0x18acee0
	function GetVehicleAdvanceAvatar();// 0x18aceb8
	function GetTeamId();// 0x18ace90
	function GetTailLightDIM();// 0x18ace68
	function GetSoftRefObj();// 0x1756084
	function GetRotationInputDir();// 0x17fbff0
	function GetReloadAllWeaponTime();// 0x18ace40
	function GetLagCompensationComponent();// 0x18ace10
	function GetItemHandle();// 0x18acdf4
	function GetIsOpenVertify();// 0x18acdd8
	function GetFrontLightDIM();// 0x18acdb0
	function GetForwardSpeed();// 0x18acd80
	function GetFirstPassenger();// 0x18acd58
	function GetFFPLightDIM();// 0x18acd30
	function GetEquipWeaponAttachMesh();// 0x18acd00
	function GetDriver();// 0x18accd8
	function GetCurrentStatesInterface();// 0x18acca8
	function GetCurrentOverlapActors();// 0x18acbdc
	function GetCullWaterCapsule();// 0x18aca50
	function GetCampId();// 0x18aca28
	function ExitFPPVehicle();// 0x18aca14
	function EnterFPPVehicle();// 0x18aca00
	function EnableAvatarOutline();// 0x18ac988
	function DestroyAndRespawnSelf();// 0x18ac974
	function CreateAntiStuckBox();// 0x18ac960
	function ClientPlayVehicleCameraShake();// 0x18ac904
	function ClientFeedbackPointDamage();// 0x18ac850
	function ClearInputs();// 0x18ac83c
	function ClearBuff();// 0x18ac820
	function CheckHaveSpecialAttachActor();// 0x18a4610
	function CheckEnableAvatarOutline();// 0x206ccd8
	function CheckAvatarModifyEnterSocket();// 0x18ac7a8
	function CheckAllWeaponIsReadyForFire();// 0x18ac780
	function ChangeVehicleAvatar();// 0x18ac6f8
	function CanVehicleJump();// 0x18ac6d0
	function CanBeSeekAndLocked();// 0x18ac648
	function BroadCastEnterVehicleEvent();// 0x18ac580
	function BroadcastClientVehicleExplosionEffect();// 0x18ac564
	function BPPostLoadFPPMesh();// 0x206ccd8
	function BPPlayOverlapDamageCameraShake();// 0x206ccd8
	function ApplyAnimation();// 0x18ac53c
	function AfterBeginPlay();// 0x206ccd8
	function AddHealthSafety();// 0x18ac4bc
	function AddBuffBySkill();// 0x18ac3ac
	function AddBuffByID();// 0x18ac254

--------------------------------
Class: STVehicleWheelDustConfig.DataAsset.Object
	WheelDusts(StructProperty)[] WheelDusts;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: STExtraVehicleMovementComponent4W.WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	WheelHubSetups(StructProperty)[] WheelHubSetups;//[Offset: 0x36c , Size: 12]
	ExtraOptBoneNames(NameProperty)[] ExtraOptBoneNames;//[Offset: 0x378 , Size: 12]
	bool bHideWheelPhyBodyOnServer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x390 , Size: 1]
	float DebugVehicleSettingInterval;//[Offset: 0x394 , Size: 4]
	WheelHubs(ObjectProperty)[] WheelHubs;//[Offset: 0x398 , Size: 12]
	STExtraVehicleBase* CharacterOwner;//[Offset: 0x3ac , Size: 4]
	float MaxRPMLimit;//[Offset: 0x4d4 , Size: 4]
	float TorqueRate;//[Offset: 0x4d8 , Size: 4]
	function SetTransmissionSetup();// 0x18b2704
	function SetEngineSetup();// 0x18b259c
	function SetDifferentialSetup();// 0x18b2518
	function OnExpoldeStopWheel();// 0x18b2504
	function HandleOnSeatDetached();// 0x18b2404
	function HandleOnSeatChanged();// 0x18b2278
	function HandleOnSeatAttached();// 0x18b2178
	function ForceWheelsRotate();// 0x18b2100
	function ClearDestroyedWheel();// 0x18b20ec

--------------------------------
Class: WheeledVehicleMovementComponent4W.WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	VehicleEngineData EngineSetup;//[Offset: 0x260 , Size: 108]
	VehicleDifferential4WData DifferentialSetup;//[Offset: 0x2cc , Size: 28]
	VehicleTransmissionData TransmissionSetup;//[Offset: 0x2e8 , Size: 40]
	RuntimeFloatCurve SteeringCurve;//[Offset: 0x310 , Size: 88]
	float AckermannAccuracy;//[Offset: 0x368 , Size: 4]

--------------------------------
Class: WheeledVehicleMovementComponent.PawnMovementComponent.NavMovementComponent.MovementComponent.ActorComponent.Object
	bool bDeprecatedSpringOffsetMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x128 , Size: 1]
	WheelSetups(StructProperty)[] WheelSetups;//[Offset: 0x12c , Size: 12]
	float Mass;//[Offset: 0x138 , Size: 4]
	float DragCoefficient;//[Offset: 0x13c , Size: 4]
	float ChassisWidth;//[Offset: 0x140 , Size: 4]
	float ChassisHeight;//[Offset: 0x144 , Size: 4]
	bool bReverseAsBrake;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x148 , Size: 1]
	float DragArea;//[Offset: 0x14c , Size: 4]
	float EstimatedMaxEngineSpeed;//[Offset: 0x150 , Size: 4]
	float MaxEngineRPM;//[Offset: 0x154 , Size: 4]
	float DebugDragMagnitude;//[Offset: 0x158 , Size: 4]
	Vector InertiaTensorScale;//[Offset: 0x15c , Size: 12]
	float MinNormalizedTireLoad;//[Offset: 0x168 , Size: 4]
	float MinNormalizedTireLoadFiltered;//[Offset: 0x16c , Size: 4]
	float MaxNormalizedTireLoad;//[Offset: 0x170 , Size: 4]
	float MaxNormalizedTireLoadFiltered;//[Offset: 0x174 , Size: 4]
	float ThresholdLongitudinalSpeed;//[Offset: 0x178 , Size: 4]
	int LowForwardSpeedSubStepCount;//[Offset: 0x17c , Size: 4]
	int HighForwardSpeedSubStepCount;//[Offset: 0x180 , Size: 4]
	Wheels(ObjectProperty)[] Wheels;//[Offset: 0x184 , Size: 12]
	bool bUseRVOAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x19c , Size: 1]
	float RVOAvoidanceRadius;//[Offset: 0x1a0 , Size: 4]
	float RVOAvoidanceHeight;//[Offset: 0x1a4 , Size: 4]
	float AvoidanceConsiderationRadius;//[Offset: 0x1a8 , Size: 4]
	float RVOSteeringStep;//[Offset: 0x1ac , Size: 4]
	float RVOThrottleStep;//[Offset: 0x1b0 , Size: 4]
	int AvoidanceUID;//[Offset: 0x1b4 , Size: 4]
	NavAvoidanceMask AvoidanceGroup;//[Offset: 0x1b8 , Size: 4]
	NavAvoidanceMask GroupsToAvoid;//[Offset: 0x1bc , Size: 4]
	NavAvoidanceMask GroupsToIgnore;//[Offset: 0x1c0 , Size: 4]
	float AvoidanceWeight;//[Offset: 0x1c4 , Size: 4]
	Vector PendingLaunchVelocity;//[Offset: 0x1c8 , Size: 12]
	ReplicatedVehicleState ReplicatedState;//[Offset: 0x1d4 , Size: 20]
	float RawSteeringInput;//[Offset: 0x1ec , Size: 4]
	float RawThrottleInput;//[Offset: 0x1f0 , Size: 4]
	float RawBrakeInput;//[Offset: 0x1f4 , Size: 4]
	bool bRawHandbrakeInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1f8 , Size: 1]
	bool bRawGearUpInput;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x1f8 , Size: 1]
	bool bRawGearDownInput;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x1f8 , Size: 1]
	float SteeringInput;//[Offset: 0x1fc , Size: 4]
	float ThrottleInput;//[Offset: 0x200 , Size: 4]
	float BrakeInput;//[Offset: 0x204 , Size: 4]
	float HandbrakeInput;//[Offset: 0x208 , Size: 4]
	float IdleBrakeInput;//[Offset: 0x20c , Size: 4]
	float StopThreshold;//[Offset: 0x210 , Size: 4]
	float WrongDirectionThreshold;//[Offset: 0x214 , Size: 4]
	VehicleInputRate ThrottleInputRate;//[Offset: 0x218 , Size: 8]
	VehicleInputRate BrakeInputRate;//[Offset: 0x220 , Size: 8]
	VehicleInputRate HandbrakeInputRate;//[Offset: 0x228 , Size: 8]
	VehicleInputRate SteeringInputRate;//[Offset: 0x230 , Size: 8]
	bool bWasAvoidanceUpdated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x238 , Size: 1]
	function SetUseAutoGears();// 0x4691674
	function SetThrottleInput();// 0x46915f4
	function SetTargetGear();// 0x4691530
	function SetSteeringInput();// 0x46914b0
	function SetPhysActive();// 0x4691430
	function SetHandbrakeInput();// 0x46913a8
	function SetGroupsToIgnoreMask();// 0x4691324
	function SetGroupsToIgnore();// 0x46912ac
	function SetGroupsToAvoidMask();// 0x4691228
	function SetGroupsToAvoid();// 0x46911b0
	function SetGearUp();// 0x4691130
	function SetGearDown();// 0x46910b0
	function SetBrakeInput();// 0x4691030
	function SetAvoidanceGroupMask();// 0x4690fac
	function SetAvoidanceGroup();// 0x4690f34
	function SetAvoidanceEnabled();// 0x4690eb4
	function ServerUpdateState();// 0x4690cd0
	function GetUseAutoGears();// 0x4690ca8
	function GetTargetGear();// 0x4690c80
	function GetForwardSpeed();// 0x4690c58
	function GetEngineRotationSpeed();// 0x4690c30
	function GetEngineMaxRotationSpeed();// 0x4690c08
	function GetCurrentGear();// 0x4690be0

--------------------------------
Class: ReplicatedVehicleState
	float SteeringInput;//[Offset: 0x0 , Size: 4]
	float ThrottleInput;//[Offset: 0x4 , Size: 4]
	float BrakeInput;//[Offset: 0x8 , Size: 4]
	float HandbrakeInput;//[Offset: 0xc , Size: 4]
	int CurrentGear;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: VehicleInputRate
	float RiseRate;//[Offset: 0x0 , Size: 4]
	float FallRate;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: VehicleEngineData
	RuntimeFloatCurve TorqueCurve;//[Offset: 0x0 , Size: 88]
	float MaxRPM;//[Offset: 0x58 , Size: 4]
	float MOI;//[Offset: 0x5c , Size: 4]
	float DampingRateFullThrottle;//[Offset: 0x60 , Size: 4]
	float DampingRateZeroThrottleClutchEngaged;//[Offset: 0x64 , Size: 4]
	float DampingRateZeroThrottleClutchDisengaged;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: VehicleDifferential4WData
	byte DifferentialType;//[Offset: 0x0 , Size: 1]
	float FrontRearSplit;//[Offset: 0x4 , Size: 4]
	float FrontLeftRightSplit;//[Offset: 0x8 , Size: 4]
	float RearLeftRightSplit;//[Offset: 0xc , Size: 4]
	float CentreBias;//[Offset: 0x10 , Size: 4]
	float FrontBias;//[Offset: 0x14 , Size: 4]
	float RearBias;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: VehicleTransmissionData
	bool bUseGearAutoBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float GearSwitchTime;//[Offset: 0x4 , Size: 4]
	float GearAutoBoxLatency;//[Offset: 0x8 , Size: 4]
	float FinalRatio;//[Offset: 0xc , Size: 4]
	ForwardGears(StructProperty)[] ForwardGears;//[Offset: 0x10 , Size: 12]
	float ReverseGearRatio;//[Offset: 0x1c , Size: 4]
	float NeutralGearUpRatio;//[Offset: 0x20 , Size: 4]
	float ClutchStrength;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: WheelSfxConfig.DataAsset.Object
	WheelSfxOnSurface(StructProperty)[] WheelSfxOnSurface;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: STReplicatedVehicleState
	int8 SteeringInput;//[Offset: 0x0 , Size: 1]
	int8 ThrottleInput;//[Offset: 0x1 , Size: 1]
	int8 BrakeInput;//[Offset: 0x2 , Size: 1]
	int8 HandbrakeInput;//[Offset: 0x3 , Size: 1]
	int8 CurrentGear;//[Offset: 0x4 , Size: 1]

--------------------------------
Class: VehicleSeatComponent.VehicleComponent.ActorComponent.Object
	Seats(StructProperty)[] Seats;//[Offset: 0xbc , Size: 12]
	SeatOccupiers(ObjectProperty)[] SeatOccupiers;//[Offset: 0xc8 , Size: 12]
	AlternativeLeaveVehicleSockets(NameProperty)[] AlternativeLeaveVehicleSockets;//[Offset: 0xd4 , Size: 12]
	AlternativeEnterVehicleSockets(NameProperty)[] AlternativeEnterVehicleSockets;//[Offset: 0xe0 , Size: 12]
	float LeaveVehicleVelocityScale;//[Offset: 0xec , Size: 4]
	bool bCheckValidLeaveLocationBySweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bEnableForceLeave;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	SeatGUITypes(ByteProperty)[] SeatGUITypes;//[Offset: 0xf8 , Size: 12]
	delegate OnSeatAttached;//[Offset: 0x104 , Size: 12]
	delegate OnSeatDetached;//[Offset: 0x110 , Size: 12]
	delegate OnSeatChanged;//[Offset: 0x11c , Size: 12]
	delegate OnUpdateSeatGUI;//[Offset: 0x128 , Size: 12]
	FString LatestDriverPlayerName;//[Offset: 0x134 , Size: 12]
	delegate OnDriverChange;//[Offset: 0x140 , Size: 12]
	FString LatestDriverPlayerUID;//[Offset: 0x14c , Size: 12]
	int MaxInUseSeatGUIIndex;//[Offset: 0x158 , Size: 4]
	bool bDelayOnRepOccupiersInReConnect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x15c , Size: 1]
	STExtraPlayerCharacter* mp_CurDriver;//[Offset: 0x160 , Size: 4]
	function OnRep_Occupiers();// 0x1902d9c
	function IsSeatIndexAvailable();// 0x1902d1c
	function IsSeatAvailableTeam();// 0x1902c9c
	function IsSeatAvailable();// 0x1902c1c
	function GetFirstPassenger();// 0x1902bf4
	function GetDriver();// 0x1902bcc
	function GetChracterSeatIndex();// 0x1902b4c
	function ClientSetLeaveVehicleLocation();// 0x1902a88
	function ClientChangeSeatCameraData();// 0x1902944

--------------------------------
Class: VehicleComponent.ActorComponent.Object

--------------------------------
Class: STExtraPlayerCharacter.STExtraBaseCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	class UserWidget* SettleAccountUI;//[Offset: 0x1d40 , Size: 40]
	delegate OnHasPickupPropsAvailableChanged;//[Offset: 0x1d68 , Size: 12]
	delegate OnHasTombBoxesAvailableChanged;//[Offset: 0x1d74 , Size: 12]
	delegate OnSkillFinishedDelegate;//[Offset: 0x1d80 , Size: 12]
	delegate OnScopeOutDelegate;//[Offset: 0x1d8c , Size: 12]
	delegate OnScopeInDelegate;//[Offset: 0x1d98 , Size: 12]
	WeaponAutoAimingComponent* AutoAimComp;//[Offset: 0x1da4 , Size: 4]
	STScreenAppearanceComponent* ScreenAppearaceComp;//[Offset: 0x1da8 , Size: 4]
	BoxComponent* BoxEar;//[Offset: 0x1dac , Size: 4]
	NightVisionComponent* NightVisionComponent;//[Offset: 0x1db0 , Size: 4]
	class NightVisionComponent* NightVisionComponentClass;//[Offset: 0x1db4 , Size: 4]
	float IndoorCheckDistance;//[Offset: 0x1db8 , Size: 4]
	float IndoorCheckTime;//[Offset: 0x1dbc , Size: 4]
	float BodyIndoorUpdateCheckTime;//[Offset: 0x1dc0 , Size: 4]
	float IndoorLowerCameraHeight;//[Offset: 0x1dc4 , Size: 4]
	bool IsIndoorBodyAreaCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1dc8 , Size: 1]
	float IndoorBodyAreaDistance;//[Offset: 0x1dcc , Size: 4]
	float mfTickDuration;//[Offset: 0x1dd0 , Size: 4]
	SoftClassPath PlayerGunCollisionComponentClassPath;//[Offset: 0x1dd8 , Size: 24]
	byte ParachuteState;//[Offset: 0x1dfc , Size: 1]
	byte LastParachuteState;//[Offset: 0x1dfe , Size: 1]
	float HaveToOpenHeightToGround;//[Offset: 0x1e00 , Size: 4]
	bool IsPlaneJumpParachute;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e04 , Size: 1]
	float SwimZDir;//[Offset: 0x1e08 , Size: 4]
	bool Indoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0c , Size: 1]
	bool IsBodyIndoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e0d , Size: 1]
	float SwimRotateX_Ex;//[Offset: 0x1e10 , Size: 4]
	CustomParticleSystemComponent* PS_CloudFast;//[Offset: 0x1e14 , Size: 4]
	CustomParticleSystemComponent* PS_CloudSlow;//[Offset: 0x1e18 , Size: 4]
	ParticleSystem* PS_CloudFastAsset;//[Offset: 0x1e1c , Size: 4]
	ParticleSystem* PS_CloudSlowAsset;//[Offset: 0x1e20 , Size: 4]
	AkAudioEvent* AK_StartFallingLocal;//[Offset: 0x1e24 , Size: 4]
	AkAudioEvent* AK_ParachuteLocal;//[Offset: 0x1e28 , Size: 4]
	AkAudioEvent* AK_ParachuteRemote;//[Offset: 0x1e2c , Size: 4]
	AkAudioEvent* AK_LandingLocal;//[Offset: 0x1e30 , Size: 4]
	AkAudioEvent* AK_LandingRemotel;//[Offset: 0x1e34 , Size: 4]
	SpringArmParams FreeFallSpringArmParam;//[Offset: 0x1e38 , Size: 80]
	SpringArmParams OpeningSpringArmParam;//[Offset: 0x1e88 , Size: 80]
	SpringArmParams TPPSpringArmParam;//[Offset: 0x1ed8 , Size: 80]
	class CameraShake* FreeFallCamShake;//[Offset: 0x1f40 , Size: 4]
	bool bDisableSimulateCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f44 , Size: 1]
	bool bEnableParachuteFalloff;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f45 , Size: 1]
	float VehicleForwardInputRate;//[Offset: 0x1f48 , Size: 4]
	float VehicleRightInputRate;//[Offset: 0x1f4c , Size: 4]
	bool bDrawBoxEarBulletOverlapRay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1f50 , Size: 1]
	STExtraPlayerController* STPlayerController;//[Offset: 0x1f54 , Size: 4]
	AirAttackLocatorComponent* AirAttackLocatorComponent;//[Offset: 0x1f5c , Size: 4]
	FName FeatureActorName;//[Offset: 0x1fc0 , Size: 8]
	bool bSprintUseConsumableNotStop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc8 , Size: 1]
	bool bLockUpdateAroundAfterRespawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fc9 , Size: 1]
	bool bIsLockingUpdateAround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1fca , Size: 1]
	float LockUpdateAroundPickupTime;//[Offset: 0x1fcc , Size: 4]
	ActivityActorList(ObjectProperty)[] ActivityActorList;//[Offset: 0x1fd8 , Size: 12]
	function UpdateParachuteState();// 0x185f850
	function UpdateParachuteFallingCameraDistance();// 0x185f7d8
	function UpdateIndoorState();// 0x185f710
	function UpdateBodyIndoorState();// 0x185f648
	function TriggerZombieBornSkills();// 0x185f634
	function TouchCancelSkillLock();// 0x185f620
	function SyncLatestPlayerStatus();// 0x185f56c
	function SyncDeadTombBoxToController();// 0x181a25c
	function SwitchCameraToParachuteOpening();// 0x185f550
	function SwitchCameraToParachuteFalling();// 0x185f534
	function SwitchCameraToNormal();// 0x185f518
	function SwitchCameraFromParachuteOpeningToTPPUpdate();// 0x185f4a0
	function SwitchCameraFromParachuteOpeningToTPPStop();// 0x206ccd8
	function SwitchCameraFromParachuteOpeningToTPPFinish();// 0x185f48c
	function SwitchCameraFromParachuteOpeningToTPPBeginPlay();// 0x206ccd8
	function StopCamShake();// 0x185f470
	function StartUpdatingParachuteFallingCameraDistance();// 0x185f3f8
	function StartCamShake();// 0x185f3dc
	function ShowNightVisionFrame();// 0x181926c
	function ShowConfirmDialogOfMisKill();// 0x18191d8
	function ShouldTriggerEntryEvent();// 0x185f35c
	function ShouldDropBagItem();// 0x185f2c4
	function SetSwimRotateX_Ex();// 0x185f24c
	function SetRainyEffectParam();// 0x185f190
	function SetRainyEffectEnable();// 0x185f084
	function SetPitchViewAngle();// 0x185efc0
	function SetParachuteState();// 0x185ef40
	function SetFPPDeafultFov();// 0x185eec8
	function SetBodyIndoor();// 0x185ee48
	function ServerUpdateParachuteState();// 0x185ed54
	function ServerSetBulletFlySoundData();// 0x185ebf8
	function ServerOnApplicationactivated();// 0x185eb30
	function RPC_Server_OnMiniGameEnd();// 0x185e9ec
	function RequestLoadParachuteAnim();// 0x185e9d0
	function ReqSetShoulderCameraMode();// 0x185e908
	function RemoveParachuteAnim();// 0x185e8f4
	function ReleaseTrigger();// 0x185e874
	function PushTrigger();// 0x185e7f4
	function ProneWithTerrain();// 0x185e6a0
	function ParachutePlaySound();// 0x206ccd8
	function OnSkillFinishedDelegate__DelegateSignature();// 0x206ccd8
	function OnScopeOutDelegate__DelegateSignature();// 0x206ccd8
	function OnScopeInDelegate__DelegateSignature();// 0x206ccd8
	function OnRep_STPlayerController();// 0x185e68c
	function OnRep_ParachuteState();// 0x185e60c
	function OnRank();// 0x185e550
	function OnPlayerControllerStateChanged();// 0x185e4d0
	function OnMiniTreeTriggerServerLogicCPP();// 0x185e4b4
	function OnLockUpdateAroundPickupEnd();// 0x185e4a0
	function OnLoadParachuteAnimCompleted();// 0x185e48c
	function OnHasTombBoxesAvailableChanged__DelegateSignature();// 0x206ccd8
	function OnHasPickupPropsAvailableChanged__DelegateSignature();// 0x206ccd8
	function OnAvatarEquippedSucc();// 0x185e380
	function OnAllAvatarEquippedSucc();// 0x185e36c
	function MulticastSetShoulderCameraMode();// 0x185e2e4
	function MiniTreeTriggerServerLogic();// 0x185e288
	function IsInLaunchSeat();// 0x185e258
	function IsGrenadeEmpty();// 0x185e230
	function IsBodyIndoorFuc();// 0x185e210
	function IsBodyIndoorCheck();// 0x185e1e8
	function InitAirAttackLocatorComponent();// 0x185e1d4
	function HideNightVisionFrame();// 0x180f57c
	function HasParachuteAnimLoaded();// 0x185e1ac
	function HandleParachuteStateChanged();// 0x185e12c
	function HandleParachuteAnimChanged();// 0x185e068
	function HandleBulletOverlap();// 0x185def0
	function HandleAIInstigateBulletOverlap();// 0x185dd78
	function GetThirdPersonSpringArm();// 0x206ccd8
	function GetThirdPersonCamera();// 0x206ccd8
	function GetSwimRotateX_Ex();// 0x185dd50
	function GetScopeSpringArm();// 0x206ccd8
	function GetScopeCamera();// 0x206ccd8
	function GetPlayerParachuteAnimByAnimType();// 0x185dcd0
	function GetPlayerControllerSafety();// 0x180e70c
	function GetIsInDoor();// 0x185dca0
	function GetIsGunADS();// 0x185dc70
	function GetFPPSpringArm();// 0x206ccd8
	function GetFPPDeafultFov();// 0x185dc48
	function GetFPPCamera();// 0x206ccd8
	function GetFirstPersonSpringArm();// 0x206ccd8
	function GetFirstPersonCamera();// 0x206ccd8
	function GetBonePos();// 0x185dbb4
	function FreeFallShakeCam();// 0x185dba0
	function FinishUpdatingParachuteFallingCameraDistance();// 0x185db28
	function EnablePet();// 0x185daa0
	function DynamicCreateComponents();// 0x185da8c
	function DumpCharacterAnimBPVars();// 0x185da78
	function DelayRemoveParachuteAnim();// 0x185da64
	function ClientPlayEarSound();// 0x185d960
	function ClientInitParachuteLaunchStatus();// 0x185d8e8
	function ClearHPUI();// 0x180b3d0
	function CanAnimInstanceCacheParachuteAnim();// 0x185d868
	function AnimInstanceCacheParachuteAnimVars();// 0x185d854

--------------------------------
Class: WeaponAutoAimingComponent.ActorComponent.Object
	Vector2D AimTargetScreenPos;//[Offset: 0xf8 , Size: 8]
	bool LastAimSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]
	PlayerController* PlayerController;//[Offset: 0x104 , Size: 4]
	STExtraBaseCharacter* PlayerPawn;//[Offset: 0x108 , Size: 4]
	float AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;//[Offset: 0x118 , Size: 4]
	float AIM_HOLD_WHEN_OPEN_FIRE;//[Offset: 0x11c , Size: 4]
	float DEFAULT_CD_TIME;//[Offset: 0x120 , Size: 4]
	Bones(NameProperty)[] Bones;//[Offset: 0x130 , Size: 12]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13c , Size: 1]
	bool bEquipWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13d , Size: 1]
	bool BInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13e , Size: 1]
	STExtraPlayerController* extraPlayerController;//[Offset: 0x140 , Size: 4]
	function OnUnEquipWeapon();// 0x191c258
	function OnShoot();// 0x191c1e0
	function OnEquipWeapon();// 0x191c1cc
	function IsCurrentWeaponSupportAutoAim();// 0x191c1a4
	function Init();// 0x191c12c
	function CheckSmoke();// 0x191c060
	function CheckInAngle();// 0x191bf50
	function CheckBuffStun();// 0x191bf28
	function CanEnemeyRaycastReach();// 0x191be5c

--------------------------------
Class: STScreenAppearanceComponent.ActorComponent.Object
	StaticMesh* AppearanceMeshTemplate;//[Offset: 0xbc , Size: 4]
	AppearancePresentList(StructProperty)[] AppearancePresentList;//[Offset: 0xc0 , Size: 12]
	StaticMeshComponent* OwnerAppearanceMesh;//[Offset: 0xcc , Size: 4]
	AppearanceMeshDataList(StructProperty)[] AppearanceMeshDataList;//[Offset: 0xd0 , Size: 12]
	ScreenParticleEffectList(StructProperty)[] ScreenParticleEffectList;//[Offset: 0xdc , Size: 12]
	FName ScreenPlane;//[Offset: 0xe8 , Size: 8]
	MultiAppearancePresentList(StructProperty)[] MultiAppearancePresentList;//[Offset: 0xf0 , Size: 12]
	CurAppearanceList(StructProperty)[] CurAppearanceList;//[Offset: 0xfc , Size: 12]
	CameraComponent* CurActiveCameraCache;//[Offset: 0x108 , Size: 4]
	function UpdateMultiAppearancePresentList();// 0x18b9dc4
	function StopScreenParticleEffect();// 0x18b9d4c
	function StopScreenAppearance();// 0x18b9c44
	function StopAllScreenParticleEffect();// 0x18b9c30
	function StopAllScreenAppearance();// 0x18b9c1c
	function SetScreenParticleParam();// 0x18b9b60
	function SetAppearanceActive();// 0x18b9a34
	function SetAllAppearancesActive();// 0x18b9964
	function PlayScreenParticleEffect();// 0x18b98a8
	function PlayPresentScreenAppearance();// 0x18b9748
	function PlayGraduallyShowOut();// 0x18b9568
	function PlayGraduallyShowIn();// 0x18b9340
	function PlayCustomScreenAppearance();// 0x18b91a4
	function OnAsyncLoadingFinished();// 0x18b912c
	function IsScreenAppearancePlaying();// 0x18b9068
	function HandleEffectLoadFinish();// 0x18b8ff0

--------------------------------
Class: NightVisionComponent.StaticMeshComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Transform TPPRelativeTransform;//[Offset: 0x610 , Size: 48]
	Transform FPPRelativeTransform;//[Offset: 0x640 , Size: 48]
	function SetActivate();// 0x17879bc

--------------------------------
Class: CustomParticleSystemComponent.ParticleSystemComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	CollisionIgnoreActors(ObjectProperty)[] CollisionIgnoreActors;//[Offset: 0x744 , Size: 12]
	bool bShowImpactInfo;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x750 , Size: 1]
	function AddCollisionIgnoreActor();// 0x1714e7c

--------------------------------
Class: SpringArmParams
	CameraParams CameraParam;//[Offset: 0x0 , Size: 8]
	SceneComponent* ParentComp;//[Offset: 0x8 , Size: 4]
	FName ParentSocketName;//[Offset: 0x10 , Size: 8]
	float TargetArmALength;//[Offset: 0x18 , Size: 4]
	Vector SocketOffset;//[Offset: 0x1c , Size: 12]
	Vector TargetOffset;//[Offset: 0x28 , Size: 12]
	Vector RelativeLocation;//[Offset: 0x34 , Size: 12]
	float ProbeSize;//[Offset: 0x40 , Size: 4]
	byte ProbeChannel;//[Offset: 0x44 , Size: 1]
	bool bDoCollisionTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45 , Size: 1]
	bool bUsePawnControlRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46 , Size: 1]
	bool bEnableCameraLag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x47 , Size: 1]
	float CameraLagSpeed;//[Offset: 0x48 , Size: 4]
	bool bEnableCustomSpringArm;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]

--------------------------------
Class: CameraParams
	float FieldOfView;//[Offset: 0x0 , Size: 4]
	bool bLocktoHmd;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]

--------------------------------
Class: AirAttackLocatorComponent.ActorComponent.Object
	float AALOpenMotionSensibility;//[Offset: 0xbc , Size: 4]
	float AALOpenSensibility;//[Offset: 0xc0 , Size: 4]
	float OpenAALFOV;//[Offset: 0xc4 , Size: 4]
	int MaxDist;//[Offset: 0xc8 , Size: 4]
	int minDist;//[Offset: 0xcc , Size: 4]
	int DangerDist;//[Offset: 0xd0 , Size: 4]
	ParticleSystem* FreeArrowParticle;//[Offset: 0xd8 , Size: 40]
	class AirAttackLocatorCalledActor* AirAttackActorTemplate;//[Offset: 0x100 , Size: 40]
	AirAttackLocatorCalledActor* AirAttackLocatorCalledActor;//[Offset: 0x128 , Size: 4]
	ParticleSystemComponent* FreeArrowComp;//[Offset: 0x12c , Size: 4]
	ParticleSystemComponent* FixedArrowComp;//[Offset: 0x130 , Size: 4]
	float FixArrowScaleDistance;//[Offset: 0x138 , Size: 4]
	float ArrowScaleFactor1;//[Offset: 0x13c , Size: 4]
	float ArrowScalePlus1;//[Offset: 0x140 , Size: 4]
	float ArrowScaleFactor2;//[Offset: 0x144 , Size: 4]
	float ArrowScalePlus2;//[Offset: 0x148 , Size: 4]
	float ShortDis;//[Offset: 0x14c , Size: 4]
	byte ChannelType;//[Offset: 0x150 , Size: 1]
	Vector TargetLocation;//[Offset: 0x154 , Size: 12]
	function SetItemExsist();// 0x169ef60
	function SetFinalLocation();// 0x169ef4c
	function SetAALFov();// 0x169eecc
	function ServerSetAirAttackLocation();// 0x169edb4
	function OnFreeArrowLoadFinsh();// 0x169eda0
	function OnCalledActorLoadFinsh();// 0x169ed30
	function GetTargetDistance();// 0x169ed08
	function GetAALAvaliable();// 0x169ece0

--------------------------------
Class: AirAttackLocatorCalledActor.Pawn.Actor.Object
	float DestoryTime;//[Offset: 0x308 , Size: 4]
	float AirAttackDelayTime;//[Offset: 0x30c , Size: 4]
	int IconID;//[Offset: 0x310 , Size: 4]
	float AttackAreaRadius;//[Offset: 0x314 , Size: 4]

--------------------------------
Class: VehicleDamageComponent.VehicleComponent.ActorComponent.Object
	CurveFloat* VehicleHitCharacterDamageCurve;//[Offset: 0xbc , Size: 4]
	float LaunchVelocityFactorOnHitCharacter;//[Offset: 0xc0 , Size: 4]
	float ImpactModifier;//[Offset: 0xc4 , Size: 4]
	float ImpactAbsorption;//[Offset: 0xc8 , Size: 4]
	float ImpactAbsorptionPassenger;//[Offset: 0xcc , Size: 4]
	float ImpactModifierUpsideDown;//[Offset: 0xd0 , Size: 4]
	float ImpactAbsorptionUpsideDown;//[Offset: 0xd4 , Size: 4]
	float ImpactAbsorptionPassengerUpsideDown;//[Offset: 0xd8 , Size: 4]
	float HitIgnoreImpulseThreshold;//[Offset: 0xdc , Size: 4]
	float DamageCharacterCD;//[Offset: 0xe0 , Size: 4]
	float DamageSelfCD;//[Offset: 0xe8 , Size: 4]
	float AllowedMaxHitDistanceSqAtServer;//[Offset: 0xf0 , Size: 4]
	float DamageReduce;//[Offset: 0xf4 , Size: 4]
	float ExplosionBaseDamage;//[Offset: 0xf8 , Size: 4]
	float ExplosionMinimumDamage;//[Offset: 0xfc , Size: 4]
	float ExplosionRadiusInner;//[Offset: 0x100 , Size: 4]
	float ExplosionRadiusOuter;//[Offset: 0x104 , Size: 4]
	float ExplosionDamageFalloff;//[Offset: 0x108 , Size: 4]
	float ExplosionBaseMomentumMag;//[Offset: 0x10c , Size: 4]
	class DamageType* ExplosionDamageType;//[Offset: 0x110 , Size: 4]
	bool OnlyBreakWindowThroughDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	float HitStoneVelocityDamp;//[Offset: 0x118 , Size: 4]
	RigidBodyState CachedRigidBodyState;//[Offset: 0x120 , Size: 64]
	bool bEnableVehicleHitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x160 , Size: 1]
	CurveFloat* VehicleHitVehicleDamageCurve;//[Offset: 0x164 , Size: 4]
	Vector2D ImpactModifierVehicle;//[Offset: 0x168 , Size: 8]
	Vector2D ImpactModifierOtherVehicle;//[Offset: 0x170 , Size: 8]
	float ImpactAbsorptionVehicle;//[Offset: 0x178 , Size: 4]
	float ImpactAbsorptionAmplitude;//[Offset: 0x17c , Size: 4]
	float DotProductFrontThreshold;//[Offset: 0x180 , Size: 4]
	float DotProductRearThreshold;//[Offset: 0x184 , Size: 4]
	float ImpactModifierFront;//[Offset: 0x188 , Size: 4]
	float ImpactModifierRear;//[Offset: 0x18c , Size: 4]
	float ImpactModifierFrontSide;//[Offset: 0x190 , Size: 4]
	float ImpactModifierRearSide;//[Offset: 0x194 , Size: 4]
	Vector2D DamageCorrection;//[Offset: 0x198 , Size: 8]
	float SameCampDamangeAttenuationCoefficient;//[Offset: 0x1a0 , Size: 4]
	float SameCampDamangeLimit;//[Offset: 0x1a4 , Size: 4]
	function SendHitCaveStoneToServer();// 0x1900630
	function HandleOnVehicleHit();// 0x19004c0

--------------------------------
Class: RigidBodyState
	Vector_NetQuantize100 Position;//[Offset: 0x0 , Size: 12]
	Quat Quaternion;//[Offset: 0x10 , Size: 16]
	Vector_NetQuantize100 LinVel;//[Offset: 0x20 , Size: 12]
	Vector_NetQuantize100 AngVel;//[Offset: 0x2c , Size: 12]
	byte Flags;//[Offset: 0x38 , Size: 1]

--------------------------------
Class: VehicleCommonComponent.VehicleComponent.ActorComponent.Object
	delegate VehicleHPChangedDelegate;//[Offset: 0xbc , Size: 12]
	delegate VehicleFuelChangedDelegate;//[Offset: 0xc8 , Size: 12]
	delegate VehicleWheelsHPChangedDelegate;//[Offset: 0xd4 , Size: 12]
	delegate VehicleHPFuelChangedDelegate;//[Offset: 0xe0 , Size: 12]
	delegate UnmannedVehicleHPChangedDelegate;//[Offset: 0xec , Size: 12]
	delegate UnmannedVehicleFuelChangedDelegate;//[Offset: 0xf8 , Size: 12]
	bool DontDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	float HPMax;//[Offset: 0x108 , Size: 4]
	float HP;//[Offset: 0x10c , Size: 4]
	WheelsCurrentHP(FloatProperty)[] WheelsCurrentHP;//[Offset: 0x110 , Size: 12]
	bool DontConsumeFuel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11c , Size: 1]
	float FuelMax;//[Offset: 0x120 , Size: 4]
	float Fuel;//[Offset: 0x124 , Size: 4]
	float FuelConsumeFactor;//[Offset: 0x128 , Size: 4]
	WheelsHP(StructProperty)[] WheelsHP;//[Offset: 0x12c , Size: 12]
	function VehicleTakeDamage();// 0x18ff3c4
	function TakeDamageByHitPart();// 0x18ff1c0
	function TakeDamageByBoneName();// 0x18fefa4
	function RefreshWheelState();// 0x18fef90
	function OnRep_WheelsCurrentHP();// 0x18fef7c
	function OnRep_HP();// 0x18fef68
	function OnRep_Fuel();// 0x18fef54
	function NoFuel();// 0x18fef2c
	function Maintenance();// 0x18fee68
	function IsDontDamage();// 0x18fee4c
	function IsDontConsumeFuel();// 0x18fee30
	function IsDestroyed();// 0x18fee08
	function GetWheelsHPNum();// 0x18fede0
	function GetWheelHPMax();// 0x18fed60
	function GetWheelHP();// 0x18fece0
	function GetVehicleHPMax();// 0x18fecb8
	function GetVehicleHP();// 0x18fec90
	function GetFuelMax();// 0x18fec68
	function GetFuelConsumeFactor();// 0x18fec40
	function GetFuel();// 0x18fec18

--------------------------------
Class: BuoyancyForceComponent.SceneComponent.ActorComponent.Object
	OceanManager* OceanManager;//[Offset: 0x260 , Size: 4]
	float MeshDensity;//[Offset: 0x264 , Size: 4]
	float FluidDensity;//[Offset: 0x268 , Size: 4]
	float FluidLinearDamping;//[Offset: 0x26c , Size: 4]
	float FluidAngularDamping;//[Offset: 0x270 , Size: 4]
	Vector VelocityDamper;//[Offset: 0x274 , Size: 12]
	bool ClampMaxVelocity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x280 , Size: 1]
	float MaxUnderwaterVelocity;//[Offset: 0x284 , Size: 4]
	float TestPointRadius;//[Offset: 0x288 , Size: 4]
	TestPoints(StructProperty)[] TestPoints;//[Offset: 0x28c , Size: 12]
	bool ApplyForceToBones;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x298 , Size: 1]
	bool SnapToSurfaceIfNoPhysics;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x299 , Size: 1]
	bool TwoGerstnerIterations;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x29a , Size: 1]
	PointDensityOverride(FloatProperty)[] PointDensityOverride;//[Offset: 0x29c , Size: 12]
	BoneOverride(StructProperty)[] BoneOverride;//[Offset: 0x2a8 , Size: 12]
	bool DrawDebugPoints;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b4 , Size: 1]
	bool EnableStayUprightConstraint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2b5 , Size: 1]
	float StayUprightStiffness;//[Offset: 0x2b8 , Size: 4]
	float StayUprightDamping;//[Offset: 0x2bc , Size: 4]
	Rotator StayUprightDesiredRotation;//[Offset: 0x2c0 , Size: 12]
	bool EnableWaveForces;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cc , Size: 1]
	float WaveForceMultiplier;//[Offset: 0x2d0 , Size: 4]
	SceneComponent* UpdatedComponent;//[Offset: 0x2d4 , Size: 4]
	byte TickGroup;//[Offset: 0x2d8 , Size: 1]
	function IsEntirelyUnderWater();// 0x42256a8
	function IsContactedWater();// 0x4225680

--------------------------------
Class: OceanManager.Actor.Object
	bool EnableGerstnerWaves;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	Vector2D GlobalWaveDirection;//[Offset: 0x2c8 , Size: 8]
	float GlobalWaveSpeed;//[Offset: 0x2d0 , Size: 4]
	float GlobalWaveAmplitude;//[Offset: 0x2d4 , Size: 4]
	float DistanceCheck;//[Offset: 0x2d8 , Size: 4]
	WaveClusters(StructProperty)[] WaveClusters;//[Offset: 0x2dc , Size: 12]
	WaveSetOffsetsOverride(StructProperty)[] WaveSetOffsetsOverride;//[Offset: 0x2e8 , Size: 12]
	float NetWorkTimeOffset;//[Offset: 0x2f4 , Size: 4]
	bool bEnableLandscapeModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8 , Size: 1]
	float ModulationStartHeight;//[Offset: 0x2fc , Size: 4]
	float ModulationMaxHeight;//[Offset: 0x300 , Size: 4]
	float ModulationPower;//[Offset: 0x304 , Size: 4]
	Landscape* Landscape;//[Offset: 0x308 , Size: 4]
	Texture2D* HeightmapTexture;//[Offset: 0x30c , Size: 4]
	bool bEnableWaterBoxModulation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x330 , Size: 1]
	WaterBoxes(StructProperty)[] WaterBoxes;//[Offset: 0x334 , Size: 12]
	function LoadLandscapeHeightmap();// 0x4226974
	function GetWaveHeightValue();// 0x42267f0
	function GetHeightmapPixel();// 0x4226720

--------------------------------
Class: Landscape.LandscapeProxy.Actor.Object

--------------------------------
Class: LandscapeProxy.Actor.Object
	LandscapeSplinesComponent* SplineComponent;//[Offset: 0x2c4 , Size: 4]
	Guid LandscapeGuid;//[Offset: 0x2c8 , Size: 16]
	IntPoint LandscapeSectionOffset;//[Offset: 0x2d8 , Size: 8]
	int MaxLODLevel;//[Offset: 0x2e0 , Size: 4]
	float LODDistanceFactor;//[Offset: 0x2e4 , Size: 4]
	byte LODFalloff;//[Offset: 0x2e8 , Size: 1]
	bool bUseScreenSizeLOD;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e9 , Size: 1]
	float LOD0DistributionSetting;//[Offset: 0x2ec , Size: 4]
	float LODDistributionSetting;//[Offset: 0x2f0 , Size: 4]
	int StaticLightingLOD;//[Offset: 0x2f4 , Size: 4]
	PhysicalMaterial* DefaultPhysMaterial;//[Offset: 0x2f8 , Size: 4]
	float StreamingDistanceMultiplier;//[Offset: 0x2fc , Size: 4]
	bool bCacheHeightData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x300 , Size: 1]
	MaterialInterface* LandscapeMaterial;//[Offset: 0x304 , Size: 4]
	MaterialInterface* LandscapeHoleMaterial;//[Offset: 0x308 , Size: 4]
	float NegativeZBoundsExtension;//[Offset: 0x30c , Size: 4]
	float PositiveZBoundsExtension;//[Offset: 0x310 , Size: 4]
	LandscapeComponents(ObjectProperty)[] LandscapeComponents;//[Offset: 0x314 , Size: 12]
	CollisionComponents(ObjectProperty)[] CollisionComponents;//[Offset: 0x320 , Size: 12]
	FoliageComponents(ObjectProperty)[] FoliageComponents;//[Offset: 0x32c , Size: 12]
	bool bHasLandscapeGrass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380 , Size: 1]
	float StaticLightingResolution;//[Offset: 0x384 , Size: 4]
	bool bCastStaticShadow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x388 , Size: 1]
	bool bCastShadowAsTwoSided;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x388 , Size: 1]
	bool bCastFarShadow;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x388 , Size: 1]
	LightingChannels LightingChannels;//[Offset: 0x389 , Size: 1]
	bool bUseMaterialPositionOffsetInStaticLighting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x38a , Size: 1]
	bool bRenderCustomDepth;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x38a , Size: 1]
	int CustomDepthStencilValue;//[Offset: 0x38c , Size: 4]
	LightmassPrimitiveSettings LightmassSettings;//[Offset: 0x390 , Size: 24]
	int CollisionMipLevel;//[Offset: 0x3a8 , Size: 4]
	int SimpleCollisionMipLevel;//[Offset: 0x3ac , Size: 4]
	float CollisionThickness;//[Offset: 0x3b0 , Size: 4]
	BodyInstance BodyInstance;//[Offset: 0x3b8 , Size: 320]
	bool bGenerateOverlapEvents;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x4f8 , Size: 1]
	bool bBakeMaterialPositionOffsetIntoCollision;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x4f8 , Size: 1]
	bool bUseHoleConsistent;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x4f8 , Size: 1]
	int ComponentSizeQuads;//[Offset: 0x4fc , Size: 4]
	int SubsectionSizeQuads;//[Offset: 0x500 , Size: 4]
	int NumSubsections;//[Offset: 0x504 , Size: 4]
	bool bUsedForNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x508 , Size: 1]
	enum NavigationGeometryGatheringMode;//[Offset: 0x509 , Size: 1]
	bool bUseLandscapeForCullingInvisibleHLODVertices;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50a , Size: 1]
	function EditorApplySpline();// 0x29b1020
	function ChangeLODDistributionSettingConsoleVariable();// 0x16fae60
	function ChangeLODDistanceFactor();// 0x16a81fc
	function ChangeLOD0DistributionSettingConsoleVariable();// 0x16a8160
	function ChangebUseScreenSizeLOD();// 0x17ce174

--------------------------------
Class: LandscapeSplinesComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	ControlPoints(ObjectProperty)[] ControlPoints;//[Offset: 0x54c , Size: 12]
	Segments(ObjectProperty)[] Segments;//[Offset: 0x558 , Size: 12]
	CookedForeignMeshComponents(ObjectProperty)[] CookedForeignMeshComponents;//[Offset: 0x564 , Size: 12]

--------------------------------
Class: VehicleSyncComponent.VehicleComponent.ActorComponent.Object
	delegate OnActorHit;//[Offset: 0xbc , Size: 12]
	float MinCorrectionInterval;//[Offset: 0xc8 , Size: 4]
	float MinSendingStateChangedIntervalAtClient;//[Offset: 0xcc , Size: 4]
	float MinDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd0 , Size: 4]
	float MaxDeltaTimeSinceLastPhysicStateAtClient;//[Offset: 0xd4 , Size: 4]
	float SendingToServerIntervalAtClient;//[Offset: 0xd8 , Size: 4]
	float SendingReliableHitToServerInterval;//[Offset: 0xdc , Size: 4]
	float AllowMaxDiatanceSqAtServer;//[Offset: 0xe0 , Size: 4]
	float StationaryCorrectIntervalAtClient;//[Offset: 0xe4 , Size: 4]
	float StationaryCorrectSpeedThresholdSq;//[Offset: 0xe8 , Size: 4]
	float StationaryCorrectThresholdDistanceSq;//[Offset: 0xec , Size: 4]
	float MinCorrectionDistanceSqAtClient;//[Offset: 0xf0 , Size: 4]
	float MinCorrectionVelocitySqAtClient;//[Offset: 0xf4 , Size: 4]
	float MinCorrectionAngleVelocitySqAtClient;//[Offset: 0xf8 , Size: 4]
	float IdleForceUpdateThreshold;//[Offset: 0xfc , Size: 4]
	float IdleForceSyncInterval;//[Offset: 0x100 , Size: 4]
	bool bUseStaticRotFix;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x104 , Size: 1]
	float StaticFixLocation;//[Offset: 0x108 , Size: 4]
	float StaticFixAngel;//[Offset: 0x10c , Size: 4]
	float StaticStopFixTorelence;//[Offset: 0x110 , Size: 4]
	float MaxCalculatedStartZVeolcity;//[Offset: 0x114 , Size: 4]
	bool bVehicleNeedFlyVelCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	bool SendClientMoveToServerOverLapUseRoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11a , Size: 1]
	bool AutonomousPullUpWhilePassWall;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11b , Size: 1]
	float AutonomousPullUpWhilePassWallZThres;//[Offset: 0x11c , Size: 4]
	float SimulatedFloorUpDistance;//[Offset: 0x120 , Size: 4]
	VehicleSyncPostPhysxTick PostPhysxComponentTick;//[Offset: 0x21c , Size: 60]
	function VerifyClientTimeStamp();// 0x1905f24
	function SendServerMoveToClient();// 0x1905d68
	function SendClientMoveToServerUnreliably();// 0x1905b70
	function SendClientMoveToServerReliably();// 0x1905978
	function SendClientMoveToServerInternal();// 0x190571c
	function SendClientMoveToServer_WithDelay();// 0x1905510
	function SendClientMoveToServer_DoWork();// 0x1905300
	function SendClientHitToServerUnreliably();// 0x190502c
	function SendClientHitToServerReliably();// 0x1904d58
	function OnHitAtServer();// 0x1904bf0
	function OnHitAtClient();// 0x1904a88
	function OnDriverRide();// 0x1904a74
	function HandleOnSeatDetached();// 0x190496c
	function HandleOnSeatChanged();// 0x19047d4
	function HandleOnSeatAttached();// 0x19046cc
	function GetRiders();// 0x190460c
	function GetLanscapeHeight();// 0x1904580
	function GetFloorPosition();// 0x19044a0
	function DragUnderGround();// 0x190448c
	function Correct();// 0x1904374
	function ClientHitActor();// 0x1904240
	function CheckAndLoadLandscape();// 0x189c4e8
	function ApplyRigidBodyState();// 0x1904170
	function AdjustFloorPosition();// 0x1903ff4

--------------------------------
Class: VehicleSyncPostPhysxTick.TickFunction

--------------------------------
Class: VehicleSimViewData
	byte ViewPitch;//[Offset: 0x0 , Size: 1]
	byte ViewYaw;//[Offset: 0x1 , Size: 1]
	byte ViewRoll;//[Offset: 0x2 , Size: 1]
	bool FreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3 , Size: 1]

--------------------------------
Class: VehicleSpringArmComponent.SpringArmComponent.SceneComponent.ActorComponent.Object
	float MinForwardSpeedToRotationKMH;//[Offset: 0x318 , Size: 4]
	float ForwardSpeedToRotSpeed;//[Offset: 0x31c , Size: 4]
	float StayTimeBeforeReturning;//[Offset: 0x320 , Size: 4]
	bool bNeverAutoReturnSmartCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x324 , Size: 1]
	Rotator RelativeToOwnerRotator;//[Offset: 0x328 , Size: 12]
	Rotator SmartCamRotationExtra;//[Offset: 0x334 , Size: 12]
	bool bDrawDebugLineAndShap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x348 , Size: 1]
	float MinPitch;//[Offset: 0x34c , Size: 4]
	float MaxPitch;//[Offset: 0x350 , Size: 4]
	bool bDontFollowParent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354 , Size: 1]
	float RevoerTimefromFreeTime;//[Offset: 0x358 , Size: 4]
	float ResultMinPitch;//[Offset: 0x39c , Size: 4]
	float ResultMaxPitch;//[Offset: 0x3a0 , Size: 4]
	float LeaveMaxDistance;//[Offset: 0x3a4 , Size: 4]
	float LeaveMaxTime;//[Offset: 0x3a8 , Size: 4]
	float MaxDistanceStayTime;//[Offset: 0x3b4 , Size: 4]
	float ApproachTime;//[Offset: 0x3bc , Size: 4]
	STExtraVehicleBase* OwnerVehicle;//[Offset: 0x3cc , Size: 4]
	float FreeCamRotationReturnRate;//[Offset: 0x3d0 , Size: 4]
	function SetSmartCameraInput();// 0x190365c
	function SetSmartCameraAutoReturn();// 0x19035dc
	function SetFreeCameraInput();// 0x190356c
	function SetFreeCameraAutoReturn();// 0x19034ec
	function ResetSmartCamera();// 0x19034d8
	function ForceUpdateDesiredArmLocation();// 0x1716170
	function DelayRotationLagEnabledEnd();// 0x16ad21c
	function DelayRotationLagEnabled();// 0x19033cc
	function AddSmartCameraInput();// 0x1903310

--------------------------------
Class: ESTAINoiseEventParams
	enum NoiseType;//[Offset: 0x0 , Size: 1]
	float Loudness;//[Offset: 0x4 , Size: 4]
	float StartAttenuationDist;//[Offset: 0x8 , Size: 4]
	float MaxRange;//[Offset: 0xc , Size: 4]

--------------------------------
Class: VehicleAvatarComponent.ItemAvatarComponentBase.AvatarComponentBase.SceneComponent.ActorComponent.Object
	delegate VehicleAvatarEqiuped;//[Offset: 0x468 , Size: 12]
	delegate VehicleLoadedBrokenMat;//[Offset: 0x474 , Size: 12]
	bool bFPPMeshLoading;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x480 , Size: 1]
	bool bFPPMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x481 , Size: 1]
	delegate VehicleLoadedFPPMesh;//[Offset: 0x484 , Size: 12]
	FName FrontMatSlotName;//[Offset: 0x490 , Size: 8]
	FName TailMatSlotName;//[Offset: 0x498 , Size: 8]
	FName FPPMatSlotName;//[Offset: 0x4a0 , Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x4a8 , Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x4ac , Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x4b0 , Size: 4]
	function PreChangeVehicleFPPMode();// 0x18fd15c
	function PreChangeVehicleBrokenMataterial();// 0x18fd148
	function PreChangeVehicleAvatar();// 0x1746810
	function PreChangeItemAvatar();// 0x17561cc
	function PostChangeItemAvatar();// 0x17467f4
	function GetVehicleFPPStaticMeshPath();// 0x18fd0c4
	function GetVehicleFPPSkeletalMeshPath();// 0x18fd040
	function GetVehicleFPPMatPath();// 0x18fcfdc
	function GetVehicleBrokenMatPath();// 0x18fcf78
	function GetItemAvatarHandlePath();// 0x206ccd8
	function GetItemAvatarHandle();// 0x206ccd8
	function ExitFPPVehicle();// 0x18fcf64
	function EnterFPPVehicle();// 0x18fcf50
	function CheckIsNeedEnterFPPVehicle();// 0x18fcf28

--------------------------------
Class: VehicleAdvanceAvatarComponent.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	bool bAvatarFPPMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x689 , Size: 1]
	bool bAvatarBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68a , Size: 1]
	int MasterCompLODLevel;//[Offset: 0x68c , Size: 4]
	int VehicleSkinID;//[Offset: 0x690 , Size: 4]
	bool bMasterBaseMeshLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x694 , Size: 1]
	SkeletalMesh* MasterBaseMesh;//[Offset: 0x698 , Size: 40]
	class AnimInstance* BaseAnimBP;//[Offset: 0x6c0 , Size: 40]
	LogicStyleData(StructProperty)[] LogicStyleData;//[Offset: 0x6e8 , Size: 12]
	delegate OnStyleEquippedEvent;//[Offset: 0x6f4 , Size: 12]
	delegate OnStyleUnequippedEvent;//[Offset: 0x700 , Size: 12]
	AccessoryPartSlotTypes(EnumProperty)[] AccessoryPartSlotTypes;//[Offset: 0x70c , Size: 12]
	FName FrontMatSlotName;//[Offset: 0x718 , Size: 8]
	FName TailMatSlotName;//[Offset: 0x720 , Size: 8]
	FName FPPMatSlotName;//[Offset: 0x728 , Size: 8]
	MaterialInstanceDynamic* FrontLightDIM;//[Offset: 0x730 , Size: 4]
	MaterialInstanceDynamic* TailLightDIM;//[Offset: 0x734 , Size: 4]
	MaterialInstanceDynamic* FPPLightDIM;//[Offset: 0x738 , Size: 4]
	function UpdateStaticMeshLOD();// 0x18fa8b4
	function Streamable_RequestAsyncLoadMeshes();// 0x17da0e4
	function SetVehicleAvatarNormalMode();// 0x18fa8a0
	function SetVehicleAvatarFPPMode();// 0x18fa88c
	function SetVehicleAvatarBroken();// 0x18fa878
	function SetMasterBaseMeshPath();// 0x18fa7bc
	function SetMasterBaseMeshAnimBP();// 0x18fa700
	function ResetAdvanceVehicleSkinID();// 0x18fa6e4
	function RemoveAllEquippedStyle();// 0x18fa6d0
	function ProcessHandleUnequip();// 0x18fa650
	function ProcessHandleEquip();// 0x18fa5d0
	function PreProcessBeforeLoadMesh();// 0x16a1d28
	function PostProcessAfterLoadMesh();// 0x16a1cf8
	function PerChangeVehicleAvatar_Old();// 0x18fa558
	function PerChangeVehicleAvatar();// 0x18fa4e0
	function OnStyleUnequippedEvent__DelegateSignature();// 0x206ccd8
	function OnStyleEquippedEvent__DelegateSignature();// 0x206ccd8
	function OnRep_BodySlotStateChanged();// 0x17000e4
	function MakeVehicleStyleData();// 0x206ccd8
	function IsValidAvatar();// 0x18fa4b8
	function IsStyleHasModelConfig();// 0x18fa3dc
	function IsAvatarFPPMode();// 0x18fa3b4
	function IsAvatarBroken();// 0x18fa38c
	function IsAdvanceVehicleInsideSlot();// 0x17d9998
	function IsAdvanceVehicleBodySlot();// 0x17d9910
	function InitVehicleAvatarBySkinID_Old();// 0x18528f8
	function InitVehicleAvatarBySkinID();// 0x18fa304
	function InitVehicleAvatar_Old();// 0x18fa1f8
	function InitVehicleAvatar();// 0x18fa0a0
	function InitMasterComponent();// 0x18fa08c
	function Initialize();// 0x16ff194
	function InitialAvatarParam();// 0x16ad21c
	function HasStyleEquipped();// 0x18fa00c
	function HasEquippedSameStyle();// 0x18f9f8c
	function HandleUnequipStyle();// 0x18f9f0c
	function HandleMaterialDiff();// 0x17d984c
	function HandleEquipStyle();// 0x18f9e8c
	function GetVehicleWheelMeshComp();// 0x18f9e64
	function GetVehicleBodyMeshComp();// 0x18f9e3c
	function GetSlotMeshType();// 0x16fea98
	function CanBeMeshMerge();// 0x18f9dbc

--------------------------------
Class: SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	MeshComponent* MasterBoneComponent;//[Offset: 0x428 , Size: 4]
	<slotToSocket_Key(IntProperty) , slotToSocket(NameProperty)> slotToSocket;//[Offset: 0x42c , Size: 60]
	<DefaultAvataConfig_Key(IntProperty) , DefaultAvataConfig(StructProperty)> DefaultAvataConfig;//[Offset: 0x468 , Size: 60]
	<LoadedMeshComps_Key(IntProperty) , LoadedMeshComps(StructProperty)> LoadedMeshComps;//[Offset: 0x4a4 , Size: 60]
	<LoadedHandleDescs_Key(IntProperty) , LoadedHandleDescs(StructProperty)> LoadedHandleDescs;//[Offset: 0x4e0 , Size: 60]
	delegate OnAvatarAllMeshLoaded;//[Offset: 0x51c , Size: 12]
	delegate OnAvatarMeshEquipped;//[Offset: 0x528 , Size: 12]
	bool EnableMaterialOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x534 , Size: 1]
	LoadedAvatarHandlerPool(ObjectProperty)[] LoadedAvatarHandlerPool;//[Offset: 0x538 , Size: 12]
	int AsyncLoadReqID;//[Offset: 0x5dc , Size: 4]
	int LastAsyncLoadReqID;//[Offset: 0x5e0 , Size: 4]
	bool bAutonomousLoadRes;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5f8 , Size: 1]
	EntityTickList(ObjectProperty)[] EntityTickList;//[Offset: 0x5fc , Size: 12]
	<AvatarEntityList_Key(IntProperty) , AvatarEntityList(ObjectProperty)> AvatarEntityList;//[Offset: 0x608 , Size: 60]
	AvatarEntityFactory* EntityFactory;//[Offset: 0x644 , Size: 4]
	function Streamable_RequestAsyncLoadMeshes();// 0x17da0e4
	function Streamable_RequestAsyncLoadHandles();// 0x1700eec
	function SetMeshVisibleByID();// 0x1700b34
	function ResetSlotSyncData();// 0x16a8160
	function RequestSyncLoadMeshes();// 0x17da0d0
	function RequestAsyncLoadMeshes();// 0x17da0bc
	function RequestAsyncLoadHandles();// 0x17da0a8
	function RemoveEquippedAvatar();// 0x17da028
	function RemoveAllEquippedAvatar();// 0x17d9fa0
	function ReloadLogicAvatar();// 0x17d9e90
	function ReloadAllLogicAvatar();// 0x17d9e10
	function ReloadAllEquippedAvatar();// 0x17d9d90
	function PutOnEquipmentByResID();// 0x17d9d08
	function PutOffEquimentByResID();// 0x16b42c4
	function PreProcessBeforeLoadMesh();// 0x16a1d28
	function PostProcessAfterLoadMesh();// 0x16a1cf8
	function OnSyncLoadMeshesDone();// 0x17d9cf4
	function OnRep_BodySlotStateChanged();// 0x17000e4
	function OnAvatarMeshEquippedEvent();// 0x16ffdcc
	function OnAvatarMeshEquipped__DelegateSignature();// 0x206ccd8
	function OnAvatarAllMeshLoaded__DelegateSignature();// 0x206ccd8
	function OnAsyncLoadMeshesDone();// 0x16ffa3c
	function OnAsyncLoadHandlesDone();// 0x17d9b94
	function OnAllAvatarHandleLoadedDoneSync();// 0x17d9b80
	function OnAllAvatarHandleLoadedDone();// 0x17d9b6c
	function LoadAvatarMeshData();// 0x16ff804
	function IsSlotHasEquipped();// 0x17d9aa0
	function IsMasterMeshSlotID();// 0x16ff368
	function IsItemHasEquipped();// 0x17d9a20
	function IsDefautlAvatarID();// 0x17d7134
	function IsAdvanceVehicleInsideSlot();// 0x17d9998
	function IsAdvanceVehicleBodySlot();// 0x17d9910
	function HandleMaterialDiff();// 0x17d984c
	function GetSlotMeshType();// 0x16fea98
	function GetMeshCompBySlotID();// 0x17d97cc
	function GetMeshCompBySlot();// 0x16fe92c
	function GetLoadedItemHandlePool();// 0x17d975c
	function GetFakeAvatarHandleItem_InDev();// 0x17d964c
	function GetFakeAvatarHandleItem();// 0x17d953c
	function GetEntityFactory();// 0x17d950c
	function GetAvatarHandleExternal();// 0x17d9428
	function GetAvatarEntity();// 0x17d9320
	function GetAdvanceVehicleInsideSlotID();// 0x17d92f0
	function GenerateDefaultAvatarConfig();// 0x206ccd8
	function DeleteAvatarMeshData();// 0x16fdf1c
	function CreateAvatarHandle();// 0x16fde38
	function CreateAvatarEntity();// 0x17d922c
	function CheckSlotInfo();// 0x17d9044
	function BuildLoadHandleList();// 0x17d8f78
	function BPGetSlotMeshType();// 0x17d8e68
	function BPCreateAvatarCustomHandle();// 0x206ccd8

--------------------------------
Class: SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	<LogicSlotDesc_Key(IntProperty) , LogicSlotDesc(StructProperty)> LogicSlotDesc;//[Offset: 0x29c , Size: 60]
	<ViewSlotDesc_Key(IntProperty) , ViewSlotDesc(StructProperty)> ViewSlotDesc;//[Offset: 0x2d8 , Size: 60]
	NetAvatarSyncData NetAvatarData;//[Offset: 0x314 , Size: 24]
	PendingEquipItemLogic(StructProperty)[] PendingEquipItemLogic;//[Offset: 0x32c , Size: 12]
	PendingUnEquipItemLogic(StructProperty)[] PendingUnEquipItemLogic;//[Offset: 0x338 , Size: 12]
	delegate OnAvatarEquippedEvent;//[Offset: 0x344 , Size: 12]
	delegate OnAvatarUnequippedEvent;//[Offset: 0x350 , Size: 12]
	delegate OnAvatarEquippedFailedEvent;//[Offset: 0x35c , Size: 12]
	int itemType;//[Offset: 0x368 , Size: 4]
	enum CustomType;//[Offset: 0x36c , Size: 1]
	bool forceClientMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x36d , Size: 1]
	bool bEnableRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374 , Size: 1]
	bool bEnableBPModifyRelation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x375 , Size: 1]
	bool bEnableBPModifySlotType;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x376 , Size: 1]
	bool bEnableBPModifySlotName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x377 , Size: 1]
	int SubSlotStartNum;//[Offset: 0x378 , Size: 4]
	int SubSlotIntervalNum;//[Offset: 0x37c , Size: 4]
	AlawysHideResetOperation(IntProperty)[] AlawysHideResetOperation;//[Offset: 0x404 , Size: 12]
	bool bEnableConflictRule;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x410 , Size: 1]
	delegate OnAvatarConflictProcess;//[Offset: 0x414 , Size: 12]
	function RemoveAllEquippedItem();// 0x17d7a58
	function OnRep_BodySlotStateChanged();// 0x17000e4
	function OnLoadAvatarSlotDesc();// 0x1700014
	function OnHandleUnequipSlot();// 0x17d79e0
	function OnHandleUnequipItem();// 0x17d793c
	function OnHandleEquipItem();// 0x17d7898
	function OnDeleteAvatarSlotDesc();// 0x16ffef8
	function OnAvatarUnequippedEvent__DelegateSignature();// 0x206ccd8
	function OnAvatarLogicUnequippedEvent();// 0x16ffcf4
	function OnAvatarLogicEquippedEvent();// 0x16ffbc8
	function OnAvatarEquippedFailedEvent__DelegateSignature();// 0x206ccd8
	function OnAvatarEquippedEvent__DelegateSignature();// 0x206ccd8
	function OnAvatarConflictProcess__DelegateSignature();// 0x206ccd8
	function ModifyViewDataByReplace();// 0x17d7788
	function ModifyViewDataByHide();// 0x17d7678
	function ModifySyncDataByReplace();// 0x17d7568
	function ModifySyncDataByHide();// 0x17d7458
	function MakeStateInfo();// 0x17d7384
	function MakeAvatarTableData();// 0x17d72b8
	function IsSameAvatarItem();// 0x16ff5b0
	function IsItemHasMutilReplaceMesh();// 0x17d71d4
	function IsItemBlueprintExist();// 0x16ff238
	function IsDefautlAvatarID();// 0x17d7134
	function HasLogicEquipped();// 0x17d709c
	function HandleUnequipSlot();// 0x17d701c
	function HandleUnequipItem();// 0x17d6f84
	function HandleItemSlotState();// 0x17d6da4
	function HandleItemResetOrderDesc();// 0x17d6d90
	function HandleItemResetOperation();// 0x17d6d7c
	function HandleItemReplaceRelation();// 0x17d6d68
	function HandleItemHideRelation();// 0x17d6d54
	function HandleEquipItem();// 0x17d6c58
	function GetViewDataStateFor();// 0x17d6ab0
	function GetViewDataStateBy();// 0x17d6908
	function GetViewDataItemID();// 0x17d682c
	function GetViewDataBySlot();// 0x17d6718
	function GetSyncDataStateFor();// 0x17d6570
	function GetSyncDataStateBy();// 0x17d63c8
	function GetSyncDataItemID();// 0x17d62ec
	function GetSyncDataBySlot();// 0x17d61fc
	function GetLogicEquippedSlot();// 0x17d6164
	function GetItemTemplateID();// 0x17d60c4
	function GetEquippedItemDefineID();// 0x17d6030
	function GetAvatarSlotID();// 0x17d5fb0
	function ClientPostProcessViewDataMiddle();// 0x17d5f94
	function ClientPostProcessViewDataBefore();// 0x17d5f78
	function ClientPostProcessViewDataAfter();// 0x17d5f5c
	function ClientBodySlotStateChanged();// 0x17d5f48
	function CheckItemConflictRule();// 0x17d5e00
	function BuildAvatarItemMap();// 0x17d5c20
	function BPClientPostProcessViewDataMiddle();// 0x17d5bf0
	function BPClientPostProcessViewDataBefore();// 0x17d5bc0
	function BPClientPostProcessViewDataAfter();// 0x17d5b90

--------------------------------
Class: NetAvatarSyncData
	SlotSyncData(StructProperty)[] SlotSyncData;//[Offset: 0x0 , Size: 12]
	int gender;//[Offset: 0xc , Size: 4]
	int BaseID;//[Offset: 0x10 , Size: 4]
	int UpdateFlag;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: AvatarEntityFactory.Object
	function CreateEntity();// 0x16b97cc

--------------------------------
Class: WeaponManagerBaseComponent.WeaponManagerComponent.ActorComponent.Object
	PreWeaponReconnectReplicateDataWrapperList(StructProperty)[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x478 , Size: 12]
	WeaponReconnectReplicateDataWrapperList(StructProperty)[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x484 , Size: 12]
	WeaponInfoList(StructProperty)[] WeaponInfoList;//[Offset: 0x490 , Size: 12]
	function StopFireFilter();// 0x19221ac
	function StopFire();// 0x1922134
	function StartFireFilter();// 0x19220ac
	function StartFireBySlot();// 0x1921ff0
	function SpawnWeaponOnServer();// 0x1921db0
	function SpawnAndBackpackWeaponOnServer();// 0x1921b9c
	function ReloadWeaponFilter();// 0x1921b14
	function ReloadCurrentWeapon();// 0x1921a94
	function OnRep_CurrentWeaponReplicated();// 0x1921a78
	function OnReconnectOnServer();// 0x1705f08
	function LocalStopFire();// 0x1921a00
	function LocalStartFire();// 0x19218b4
	function LocalStartBarrel();// 0x192183c
	function LocalHandleWeaponSystemDataOnSimulate();// 0x192178c
	function LocalEquipWeapon();// 0x19216d0
	function DoAutoReloadCurrentWeapon();// 0x1921658
	function DelayFire();// 0x1921594

--------------------------------
Class: WeaponManagerComponent.ActorComponent.Object
	<LogicSocketToWeaponAttachSocketMap_Key(NameProperty) , LogicSocketToWeaponAttachSocketMap(NameProperty)> LogicSocketToWeaponAttachSocketMap;//[Offset: 0xbc , Size: 60]
	FName LeftLogicSocketName;//[Offset: 0xf8 , Size: 8]
	FName RightLogicSocketName;//[Offset: 0x100 , Size: 8]
	<LogicSocketToWeaponAttachSocketMapNoBag_Key(NameProperty) , LogicSocketToWeaponAttachSocketMapNoBag(NameProperty)> LogicSocketToWeaponAttachSocketMapNoBag;//[Offset: 0x108 , Size: 60]
	<LogicSocketToPropSlotMap_Key(NameProperty) , LogicSocketToPropSlotMap(ByteProperty)> LogicSocketToPropSlotMap;//[Offset: 0x144 , Size: 60]
	<GrenadeLogicSocketToWeaponClassMap_Key(NameProperty) , GrenadeLogicSocketToWeaponClassMap(ClassProperty)> GrenadeLogicSocketToWeaponClassMap;//[Offset: 0x180 , Size: 60]
	float CheckHasAnyGrenadeTimerSetting;//[Offset: 0x1bc , Size: 4]
	FName CurUseWeaponLogicSocket;//[Offset: 0x1c0 , Size: 8]
	FName CurUseShieldWeaponLogicSocket;//[Offset: 0x1c8 , Size: 8]
	bool bIsSwitching;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d0 , Size: 1]
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x1d8 , Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x1e0 , Size: 8]
	bool bUIHasBoundDelegate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e8 , Size: 1]
	bool bClientHasFinishedHandleSpawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1e9 , Size: 1]
	bool GM_CloseMaxCreateWeaponTimeLimit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1ea , Size: 1]
	bool GM_NewWeaponCreateIG170;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1eb , Size: 1]
	float MaxSpawnWeaponTime;//[Offset: 0x1ec , Size: 4]
	float StartSpawnWeaponTime;//[Offset: 0x1f0 , Size: 4]
	delegate LocalBackpackCurerrentWeaponFinishDelegate;//[Offset: 0x1f4 , Size: 12]
	delegate ChangeCurrentUsingWeaponDelegate;//[Offset: 0x200 , Size: 12]
	delegate ChangeInventoryDataDelegate;//[Offset: 0x20c , Size: 12]
	delegate LocalEquipWeaponFromBackpackFinishedDelegate;//[Offset: 0x218 , Size: 12]
	delegate SwapWeaponByPropSlotFinishedDelegate;//[Offset: 0x224 , Size: 12]
	<InventoryData_Key(NameProperty) , InventoryData(ObjectProperty)> InventoryData;//[Offset: 0x248 , Size: 60]
	<GrenadeLogicSlotAndDefineIDData_Key(NameProperty) , GrenadeLogicSlotAndDefineIDData(StructProperty)> GrenadeLogicSlotAndDefineIDData;//[Offset: 0x284 , Size: 60]
	BackpackPistolList(ObjectProperty)[] BackpackPistolList;//[Offset: 0x2c0 , Size: 12]
	TargetCreateArray(StructProperty)[] TargetCreateArray;//[Offset: 0x2d0 , Size: 12]
	WeaponCreatePool(StructProperty)[] WeaponCreatePool;//[Offset: 0x2e0 , Size: 12]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot1;//[Offset: 0x2f0 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSlot2;//[Offset: 0x328 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientSubSlot;//[Offset: 0x360 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientMeleeSlot;//[Offset: 0x398 , Size: 56]
	WeaponSystemDataOnSimulateClient WeaponSystemDataOnSimulateClientHandPropSlot;//[Offset: 0x3d0 , Size: 56]
	STExtraWeapon* CurrentWeaponReplicated;//[Offset: 0x40c , Size: 4]
	STExtraWeapon* CurrentWeaponSimulate;//[Offset: 0x410 , Size: 4]
	STExtraWeapon* CurrentShieldWeaponReplicated;//[Offset: 0x414 , Size: 4]
	STExtraWeapon* CurrentShieldWeaponSimulate;//[Offset: 0x418 , Size: 4]
	STExtraWeapon* OldGrenadeWeaponNeedDestroy;//[Offset: 0x44c , Size: 4]
	FString MainWeaponTableName;//[Offset: 0x468 , Size: 12]
	function WeaponSystemDataChangedDelegate__DelegateSignature();// 0x206ccd8
	function UpdateOwnerClientCreateWeapon();// 0x1923c4c
	function SwitchWeaponBySlot();// 0x1923b88
	function SwitchWeaponByLogicSocket_IdleToBackpackFinished();// 0x1923b74
	function SwapWeaponByPropSlotFinishedDelegate__DelegateSignature();// 0x206ccd8
	function SpawnAndBackpackWeaponOnServer();// 0x1921b9c
	function SimulatedWeaponChangedDelegate__DelegateSignature();// 0x206ccd8
	function RefreshWeaponLogicSocketInSpawnDataCacheByPropSlotOnServer();// 0x1923afc
	function OnRep_WeaponSystemDataOnSimulateMeleeSlot();// 0x1923ae8
	function OnRep_WeaponSystemDataOnSimulateHandPropSlot();// 0x1923ad4
	function OnRep_WeaponSystemDataOnSimulateClientSubSlot();// 0x1923ac0
	function OnRep_WeaponSystemDataOnSimulateClientSlot2();// 0x1923aac
	function OnRep_WeaponSystemDataOnSimulateClientSlot1();// 0x1923a98
	function OnRep_CurrentWeaponReplicated();// 0x1921a78
	function OnRep_CurrentWeaponLogicSocket();// 0x1923a84
	function OnRep_CurrentShieldWeaponReplicated();// 0x1923a70
	function OnReconnectOnServer();// 0x1705f08
	function OnReconnectOnClient();// 0x1705eec
	function LogInventoryDataInfo();// 0x1923a5c
	function LocalSwapWeaponByPropSlot();// 0x192394c
	function LocalHandleWeaponSystemDataOnSimulate();// 0x192178c
	function LocalForceFinishSwitchWeapon();// 0x1923938
	function LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();// 0x206ccd8
	function LocalEquipWeaponFromBackpackFinishedCallback();// 0x1923924
	function LocalDestroyWeapon();// 0x1923848
	function LocalBackpackCurerrentWeaponFinishedCallback();// 0x1923834
	function LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();// 0x206ccd8
	function IsWeaponSpawnDataCacheIsEmpty();// 0x192380c
	function IsCreatingWeaponOnServer();// 0x19237d8
	function InitializeTable();// 0x1923688
	function GetShieldWeaponSlot();// 0x1923648
	function GetShieldWeapon();// 0x1923620
	function GetPropSlotByLogicSocket();// 0x19235a0
	function GetMainWeaponTableRow();// 0x1923498
	function GetLogicSocketBySlot();// 0x1923410
	function GetInventoryWeaponByPropSlotOnServerOrAutonomousClient();// 0x1923390
	function GetInventoryWeaponByPropSlot();// 0x1923310
	function GetInventoryWeaponByLogicSocket();// 0x1923290
	function GetInventoryWeaponByDefineID();// 0x1923200
	function GetGrenadeSpecificSlotNameByWeapon();// 0x1923178
	function GetGrenadeDefindIDBySlot();// 0x19230e0
	function GetCurrentUsingWeapon();// 0x19230b8
	function GetCurrentUsingPropSlot();// 0x1923090
	function GetCurrentUsingLogicSocketOnServer();// 0x1923050
	function GetCurrentUsingLogicSocket();// 0x1923050
	function GetBagLevel();// 0x1705ea8
	function GetAllInventoryWeaponList();// 0x1922f40
	function GetAllInventoryWeaponIDList();// 0x1922e30
	function ForceBroadcastChangeAllInventoryDataEvent();// 0x1922e1c
	function EnableAllBroadcast();// 0x1922da0
	function DropWeapon();// 0x1922cdc
	function DeleteGrenadeSlotAndDefindID();// 0x1922c64
	function DebugReconnectToClientOnServer();// 0x1922c50
	function DebugDisconnetToServerOnClient();// 0x1922c3c
	function ChangeInventoryDataDelegate__DelegateSignature();// 0x206ccd8
	function ChangeCurrentUsingWeaponDelegate__DelegateSignature();// 0x206ccd8
	function AddOrSetGrenadeSlotAndDefindID();// 0x1922b68

--------------------------------
Class: WeaponSystemDataOnSimulateClient
	STExtraWeapon* TargetWeapon;//[Offset: 0x0 , Size: 4]
	FName LogicSocket;//[Offset: 0x8 , Size: 8]
	bool bAutoUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	ItemDefineID ID;//[Offset: 0x18 , Size: 24]
	int OperationIndex;//[Offset: 0x30 , Size: 4]
	int BagLevel;//[Offset: 0x34 , Size: 4]

--------------------------------
Class: PlayerSwimComponent.ActorComponent.Object
	delegate OnPlayerTouchWater;//[Offset: 0xbc , Size: 12]
	float MaxBreathAmount;//[Offset: 0xc8 , Size: 4]
	float DrowningHurtHight;//[Offset: 0xcc , Size: 4]
	float SwimWaterSufaceOffset;//[Offset: 0xd0 , Size: 4]
	float BreathVauleChangeoffset;//[Offset: 0xd4 , Size: 4]
	float OpBreathVauleChangeoffset;//[Offset: 0xd8 , Size: 4]
	float BreathDeltaTime;//[Offset: 0xdc , Size: 4]
	float MaxSpeedScaleHeightOffset;//[Offset: 0xe0 , Size: 4]
	float MinSpeedScale;//[Offset: 0xe4 , Size: 4]
	float MaxCrouchWaterHeight;//[Offset: 0xe8 , Size: 4]
	float MaxProneWaterHeight;//[Offset: 0xec , Size: 4]
	float DeadInWaterLocZOffset;//[Offset: 0xf0 , Size: 4]
	float RollMaxAngle;//[Offset: 0xf4 , Size: 4]
	float DistoVolume;//[Offset: 0xf8 , Size: 4]
	CharacterMovementComponent* CharaterMovement;//[Offset: 0x114 , Size: 4]
	function UpdateSwimCollisionHeightCpp();// 0x179ddac
	function LeaveWater();// 0x179dd98
	function GetWaterObject();// 0x179dd70
	function EnterWater_BluePrint();// 0x206ccd8
	function EnterWater();// 0x179dcf8
	function BP_UnderWaterStateChanged();// 0x206ccd8

--------------------------------
Class: PoseChangeTime
	float PoseChange_Prone_Stand;//[Offset: 0x0 , Size: 4]
	float PoseChange_Prone_Move;//[Offset: 0x4 , Size: 4]
	float PoseChange_UnProne_Stand;//[Offset: 0x8 , Size: 4]
	float PoseChange_UnProne_Move;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BaseCharacterPickupProxy.PickupProxy.Object
	STExtraBaseCharacter* ProxyOwnerCharacter;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: PickupProxy.Object
	Actor* ProxyOwner;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterWeaponManagerComponent.WeaponManagerComponent.ActorComponent.Object
	float AttachCheckInterval;//[Offset: 0x478 , Size: 4]
	float AttachCheckDistance;//[Offset: 0x47c , Size: 4]
	float RefreshUIIntervalAfterReconnect;//[Offset: 0x480 , Size: 4]
	int RefreshUITimesAfterReconnect;//[Offset: 0x484 , Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x488 , Size: 4]
	PreWeaponReconnectReplicateDataWrapperList(StructProperty)[] PreWeaponReconnectReplicateDataWrapperList;//[Offset: 0x4a4 , Size: 12]
	WeaponReconnectReplicateDataWrapperList(StructProperty)[] WeaponReconnectReplicateDataWrapperList;//[Offset: 0x4b0 , Size: 12]
	function UpdateDataWhenBagChangedOnServer();// 0x1705f54
	function UpdateDataWhenBagChangedOnAutonomous();// 0x1705f40
	function OnRecoverOnServer();// 0x1705f24
	function OnReconnectOnServer();// 0x1705f08
	function OnReconnectOnClient();// 0x1705eec
	function OnDisconnectToClientOnServer();// 0x1705ed8
	function GetBagLevel();// 0x1705ea8

--------------------------------
Class: PlayerAnimList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	PlayerAnimData MovementAnim;//[Offset: 0x4 , Size: 8]
	PlayerAnimData AimAnim;//[Offset: 0xc , Size: 8]
	PlayerAnimData ReloadAnim;//[Offset: 0x14 , Size: 8]
	PlayerAnimData EquipWeaponAnim;//[Offset: 0x1c , Size: 8]
	PlayerAnimData ChangePoseAnim;//[Offset: 0x24 , Size: 8]
	PlayerAnimData PickUpAnim;//[Offset: 0x2c , Size: 8]
	PlayerAnimData FireAnim;//[Offset: 0x34 , Size: 8]
	PlayerAnimData HurtAnim;//[Offset: 0x3c , Size: 8]
	PlayerAnimData TurnAnim;//[Offset: 0x44 , Size: 8]
	PlayerAnimData PullingPlugAnim;//[Offset: 0x4c , Size: 8]
	PlayerAnimData PutDownWeaponAnim;//[Offset: 0x54 , Size: 8]
	PlayerAnimData WeaponIdle;//[Offset: 0x5c , Size: 8]
	PlayerAnimData ForegripAnim;//[Offset: 0x64 , Size: 8]
	JumpAnimList(StructProperty)[] JumpAnimList;//[Offset: 0x6c , Size: 12]
	ExtraAnimList(StructProperty)[] ExtraAnimList;//[Offset: 0x78 , Size: 12]

--------------------------------
Class: PlayerAnimData
	AnimationAsset* Animation;//[Offset: 0x0 , Size: 4]
	float Rate;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: AnimParamList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	Vector Velocity;//[Offset: 0x4 , Size: 12]
	Vector movedir;//[Offset: 0x10 , Size: 12]
	byte MovementMode;//[Offset: 0x1c , Size: 1]
	byte PoseType;//[Offset: 0x1d , Size: 1]
	Rotator ViewRotation;//[Offset: 0x20 , Size: 12]
	Rotator ControlRotation;//[Offset: 0x2c , Size: 12]
	byte WeaponType;//[Offset: 0x38 , Size: 1]
	byte WeaponHoldType;//[Offset: 0x39 , Size: 1]
	byte WeaponState;//[Offset: 0x3a , Size: 1]
	byte WeaponReloadMethod;//[Offset: 0x3b , Size: 1]
	byte SightType;//[Offset: 0x3c , Size: 1]
	float RecoilKickADS;//[Offset: 0x40 , Size: 4]
	float ForegripParam;//[Offset: 0x44 , Size: 4]
	Vector OffsetFPPLocation;//[Offset: 0x4c , Size: 12]
	Rotator OffsetFPPRotation;//[Offset: 0x58 , Size: 12]
	Vector OffsetFPPCrouchLocation;//[Offset: 0x64 , Size: 12]
	Rotator OffsetFPPCrouchRotation;//[Offset: 0x70 , Size: 12]
	Vector OffsetFPPProneLocation;//[Offset: 0x7c , Size: 12]
	Rotator OffsetFPPProneRotation;//[Offset: 0x88 , Size: 12]
	Vector OffsetAngledFPPLocation;//[Offset: 0x94 , Size: 12]
	Rotator OffsetAngledFPPRotation;//[Offset: 0xa0 , Size: 12]
	Vector OffsetAngledFPPCrouchLocation;//[Offset: 0xac , Size: 12]
	Rotator OffsetAngledFPPCrouchRotation;//[Offset: 0xb8 , Size: 12]
	Vector OffsetAngledFPPProneLocation;//[Offset: 0xc4 , Size: 12]
	Rotator OffsetAngledFPPProneRotation;//[Offset: 0xd0 , Size: 12]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdc , Size: 1]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdd , Size: 1]
	bool IsNearDeathStatus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xde , Size: 1]
	bool IsRescueing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdf , Size: 1]
	bool IsSprinting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe0 , Size: 1]
	bool IsCastingGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe1 , Size: 1]
	Vector HurtDir;//[Offset: 0xe4 , Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	byte JumpType;//[Offset: 0xf2 , Size: 1]
	byte ParachuteState;//[Offset: 0xf3 , Size: 1]
	bool bIsParachuteLanding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf4 , Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf5 , Size: 1]
	bool IsOnVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf6 , Size: 1]
	bool IsDisableAim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf7 , Size: 1]
	float HandleFolderFactor;//[Offset: 0xf8 , Size: 4]
	float CharacterYawRotateRate;//[Offset: 0xfc , Size: 4]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x100 , Size: 1]

--------------------------------
Class: PlayerVehAnimList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	AnimationAsset* IdleAnim;//[Offset: 0x4 , Size: 4]
	AnimationAsset* IdleMotorbikeAnim;//[Offset: 0x8 , Size: 4]
	AnimationAsset* VacateMotorbikeAnim;//[Offset: 0xc , Size: 4]
	AnimationAsset* LeanOutAnim;//[Offset: 0x10 , Size: 4]
	AnimationAsset* LeanInAnim;//[Offset: 0x14 , Size: 4]
	AnimationAsset* AimAnim;//[Offset: 0x18 , Size: 4]
	AnimationAsset* WeaponIdleAddition;//[Offset: 0x1c , Size: 4]
	AnimationAsset* WeaponAimAddition;//[Offset: 0x20 , Size: 4]
	AnimationAsset* WeaponReloadAddition;//[Offset: 0x24 , Size: 4]
	AnimationAsset* SurfBoard_IdleAnim;//[Offset: 0x28 , Size: 4]
	AnimationAsset* SurfBoard_MoveAnim;//[Offset: 0x2c , Size: 4]
	AnimationAsset* SurfBoard_JumpAnim;//[Offset: 0x30 , Size: 4]
	AnimationAsset* SurfBoard_LandAnim;//[Offset: 0x34 , Size: 4]
	AnimationAsset* SurfBoard_JumpLeftTurnAnim;//[Offset: 0x38 , Size: 4]
	AnimationAsset* SurfBoard_JumpRightTurnAnim;//[Offset: 0x3c , Size: 4]
	AnimationAsset* Ski_JumpStationary;//[Offset: 0x40 , Size: 4]
	AnimationAsset* Ski_DownTurnLR;//[Offset: 0x44 , Size: 4]
	AnimationAsset* Ski_DownTurnRL;//[Offset: 0x48 , Size: 4]
	AnimationAsset* Ski_DownTurnFD;//[Offset: 0x4c , Size: 4]
	AnimationAsset* Ski_Falling;//[Offset: 0x50 , Size: 4]
	AnimationAsset* Ski_DownFallLandingAdditive;//[Offset: 0x54 , Size: 4]
	AnimationAsset* Ski_DownFallLandingHard;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: AnimVehParamList
	int FrameCounter;//[Offset: 0x0 , Size: 4]
	bool IsLeanOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	bool IsDriver;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5 , Size: 1]
	bool IsSwitchingSeat;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6 , Size: 1]
	bool IsIdleAnimReplaced;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7 , Size: 1]
	float VacateHight;//[Offset: 0x8 , Size: 4]
	bool IsVehicleMotorbike;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Rotator VehViewRotation;//[Offset: 0x10 , Size: 12]
	Vector VehMoveVelocity;//[Offset: 0x1c , Size: 12]
	byte SeatWeaponHoldType;//[Offset: 0x28 , Size: 1]
	byte SeatSpecialType;//[Offset: 0x29 , Size: 1]
	enum VehicleType;//[Offset: 0x2a , Size: 1]
	float LeanOutPercentage;//[Offset: 0x2c , Size: 4]

--------------------------------
Class: AnimStatusKeyList
	STExtraWeapon* EquipWeapon;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: CharacterEnergyData
	EnergyEffactPhase(StructProperty)[] EnergyEffactPhase;//[Offset: 0x0 , Size: 12]
	float EnergyMax;//[Offset: 0xc , Size: 4]
	float EnergyCurrent;//[Offset: 0x10 , Size: 4]
	float AttenuationPeriod;//[Offset: 0x14 , Size: 4]
	float AttenuationAmount;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: STDamageCameraShake.CameraShake.Object
	float DamageShakeScale;//[Offset: 0x140 , Size: 4]

--------------------------------
Class: SecuryInfoComponent.ActorComponent.Object
	UAEGameMode* UAEGM;//[Offset: 0x150 , Size: 4]
	function ReportVerifyInfoFlow();// 0x17c7bdc
	function ReportSecAttackFlow();// 0x17c7b0c
	function ReportPlayerKillFlow();// 0x17c79e4
	function ReportMrpcsFlow();// 0x17c78f4
	function ReportJumpFlow();// 0x17c7824
	function ReportHurtFlow();// 0x17c7754
	function ReportGvoiceTeamQuit();// 0x17c7624
	function ReportGvoiceTeamCreate();// 0x17c74f4
	function ReportGameStartFlow();// 0x17c73f0
	function ReportGameSetting();// 0x17c7300
	function ReportGameEndFlow();// 0x17c7230
	function ReportGameBaseInfo();// 0x17c7130
	function ReportCircleFlow();// 0x17c7060
	function ReportAttackFlow();// 0x17c6f90
	function ReportAimFlow();// 0x17c6ec0
	function GetWeaponProperty();// 0x17c6cfc

--------------------------------
Class: UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	GameModePatchTableData PatchTableData;//[Offset: 0x350 , Size: 240]
	float GridCheckSize;//[Offset: 0x440 , Size: 4]
	float DeepCheckSize;//[Offset: 0x444 , Size: 4]
	float HeightCheckSize;//[Offset: 0x448 , Size: 4]
	int MaxPlayerLimit;//[Offset: 0x44c , Size: 4]
	bool bEnableClimbing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x450 , Size: 1]
	bool IsUseFpsVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x451 , Size: 1]
	bool bBornWithApple;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x452 , Size: 1]
	int AntiDataCD;//[Offset: 0x454 , Size: 4]
	int WeatherID;//[Offset: 0x458 , Size: 4]
	FString WeatherName;//[Offset: 0x45c , Size: 12]
	int RoomMode;//[Offset: 0x468 , Size: 4]
	int SeasonIdx;//[Offset: 0x46c , Size: 4]
	float MeteorShowerRatio;//[Offset: 0x470 , Size: 4]
	FString ItemTableName;//[Offset: 0x474 , Size: 12]
	FString ItemClassPath;//[Offset: 0x480 , Size: 12]
	FString ReplayPushURL;//[Offset: 0x48c , Size: 12]
	IgnoreItemClassPathList(StrProperty)[] IgnoreItemClassPathList;//[Offset: 0x498 , Size: 12]
	uint32 ServerStartTime;//[Offset: 0x4a4 , Size: 4]
	bool bOpenChangeWearing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a8 , Size: 1]
	bool bEnableVehicleInReady;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a9 , Size: 1]
	FString PickupBoxConfigClassPath;//[Offset: 0x4ac , Size: 12]
	bool bUseAutoGroupParachuteTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b8 , Size: 1]
	FString PickupBoxConfigDataTableName;//[Offset: 0x4bc , Size: 12]
	FString VehicleTableName;//[Offset: 0x4c8 , Size: 12]
	FString VehicleClassPath;//[Offset: 0x4d4 , Size: 12]
	bool IsUsingSceneDropWeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e0 , Size: 1]
	bool IsRegionItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4e1 , Size: 1]
	Vector RegionCenter;//[Offset: 0x4e4 , Size: 12]
	float RegionRadius;//[Offset: 0x4f0 , Size: 4]
	<BattleCustomConfig_Key(StrProperty) , BattleCustomConfig(FloatProperty)> BattleCustomConfig;//[Offset: 0x4f4 , Size: 60]
	int MaxAllowReplicatedCharacterCount;//[Offset: 0x530 , Size: 4]
	int AINoRepTimeInReady;//[Offset: 0x534 , Size: 4]
	class UAEOBState* ObserverPlayerStateClass;//[Offset: 0x538 , Size: 4]
	bool bEnableDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x53c , Size: 1]
	float NearDeathRestoredOriginHealth;//[Offset: 0x540 , Size: 4]
	float NearDeathDecreateBreathRate;//[Offset: 0x544 , Size: 4]
	float RescueOtherRestoreDuration;//[Offset: 0x548 , Size: 4]
	float DeadTombBoxLifeSpan;//[Offset: 0x54c , Size: 4]
	int DefaultPlayerBornPointID;//[Offset: 0x550 , Size: 4]
	bool bPlayerExitClearPlayerData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x554 , Size: 1]
	ItemGroupComponents(ObjectProperty)[] ItemGroupComponents;//[Offset: 0x558 , Size: 12]
	Actor* ChosenPlayerStartBuildingGroup;//[Offset: 0x564 , Size: 4]
	DynamicTriggerConfigs(StructProperty)[] DynamicTriggerConfigs;//[Offset: 0x568 , Size: 12]
	DynamicTriggers(ObjectProperty)[] DynamicTriggers;//[Offset: 0x574 , Size: 12]
	int IsGameModeFpp;//[Offset: 0x580 , Size: 4]
	bool IsGameModeBandSpot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x584 , Size: 1]
	DynamicLoadItemArray(StructProperty)[] DynamicLoadItemArray;//[Offset: 0x588 , Size: 12]
	<DynamicLoadItemMap_Key(StructProperty) , DynamicLoadItemMap(StructProperty)> DynamicLoadItemMap;//[Offset: 0x594 , Size: 60]
	BornItems(StructProperty)[] BornItems;//[Offset: 0x5d0 , Size: 12]
	bool IsOpenItemGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc , Size: 1]
	bool IsOpenVehicleGenerate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dd , Size: 1]
	BuffEffectIDArray(IntProperty)[] BuffEffectIDArray;//[Offset: 0x5e0 , Size: 12]
	BuffEffectDisplayIDArray(IntProperty)[] BuffEffectDisplayIDArray;//[Offset: 0x5ec , Size: 12]
	DynamicLevelArray(IntProperty)[] DynamicLevelArray;//[Offset: 0x5f8 , Size: 12]
	FString RoomType;//[Offset: 0x604 , Size: 12]
	bool bCanLedgeGrab;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x610 , Size: 1]
	bool bOpenForbitTeammatePickUp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x611 , Size: 1]
	bool bOpenTeammateImprisonment;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x612 , Size: 1]
	bool bIsPreCreatingPlayerController;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81c , Size: 1]
	float OBInfoTimeStep;//[Offset: 0x8b8 , Size: 4]
	AirDropBoxInfoList(StructProperty)[] AirDropBoxInfoList;//[Offset: 0x8d8 , Size: 12]
	FiringPlayerList(UInt32Property)[] FiringPlayerList;//[Offset: 0x8e4 , Size: 12]
	ObserverControllerList(ObjectProperty)[] ObserverControllerList;//[Offset: 0x8f0 , Size: 12]
	AdvConfigList(StructProperty)[] AdvConfigList;//[Offset: 0x990 , Size: 12]
	AdvActorList(ObjectProperty)[] AdvActorList;//[Offset: 0x99c , Size: 12]
	bool bEnablePlaneBanner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9a8 , Size: 1]
	FString HttpPlaneBannerLeftImgPath;//[Offset: 0x9ac , Size: 12]
	FString HttpPlaneBannerRightImgPath;//[Offset: 0x9b8 , Size: 12]
	FString GrenadeEffectPath;//[Offset: 0x9c4 , Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d0 , Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d1 , Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d2 , Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d3 , Size: 1]
	bool bOpenAnniversaryActivity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9d4 , Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x9d8 , Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9e4 , Size: 1]
	float FestivalAirDropProb;//[Offset: 0x9e8 , Size: 4]
	float MonsterDropPar;//[Offset: 0x9ec , Size: 4]
	float SceneDropParam;//[Offset: 0x9f0 , Size: 4]
	ItemGeneratorComponent* ItemGenerator;//[Offset: 0x9f4 , Size: 4]
	VehicleAndTreasureBoxGeneratorComponent* VehicleGenerator;//[Offset: 0x9f8 , Size: 4]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9fc , Size: 1]
	NeedReplayPlayers(UInt32Property)[] NeedReplayPlayers;//[Offset: 0xa00 , Size: 12]
	SeasonStatueList(StructProperty)[] SeasonStatueList;//[Offset: 0xa0c , Size: 12]
	FString SeasonStatueClassPath;//[Offset: 0xa18 , Size: 12]
	FString StatueBaseClassPath;//[Offset: 0xa24 , Size: 12]
	StatueBaseData StatueBaseInfo;//[Offset: 0xa30 , Size: 84]
	int BattleStopJoin;//[Offset: 0xa84 , Size: 4]
	CharacterOverrideAttrs(StructProperty)[] CharacterOverrideAttrs;//[Offset: 0xa88 , Size: 12]
	function SyncPlayerNames();// 0x1c8d4fc
	function SyncNewCorpsData();// 0x1c8d3c0
	function SpawnUAEPawnFor();// 0x1c8d280
	function SetPlayerOpenId();// 0x1c8d170
	function SetGameEndReportData();// 0x16e3c54
	function RetrieveTeamBattleResultData();// 0x1c8d0bc
	function RetrieveBattleData();// 0x1c8d028
	function RestartPlayerAtPlayerStart();// 0x17b109c
	function Rescue();// 0x1c8cf64
	function RegisterItemGroupSpotsByTag();// 0x1c8cea0
	function RegisterItemGroupSpots();// 0x1c8ce20
	function RefreshWorldActiveRange();// 0x1c8ce04
	function RefreshWatchTeammates();// 0x1c8cd40
	function RefreshPlayerNames();// 0x1c8cab0
	function RecoardAlivePlayerNum();// 0x1c8ca80
	function PreCreatePlayerController();// 0x1c8c9f8
	function OnPlayerFiring();// 0x1c8c980
	function OnPlayerControlDestroyEnd();// 0x16e37f4
	function OnObserverLogout();// 0x1c8c908
	function OnObserverLogin();// 0x1c8c890
	function OnMsg();// 0x1c8c7cc
	function OnAirDropBoxLanded();// 0x1c8c6fc
	function OnAirDropBoxEmpty();// 0x1c8c67c
	function NotifyPlayerExit();// 0x1c8c380
	function NotifyPlayerAbleToExitSafely();// 0x1c8c2bc
	function NotifyGameModeInit();// 0x192d99c
	function NotifyAIPlayerEnter();// 0x1c8c23c
	function ModifyVehicleDamage();// 0x190c5c0
	function ModifyDamage();// 0x1c8c078
	function Killed();// 0x1c8bf04
	function IsSatisfyGeneratorArea();// 0x1c8be78
	function InitWorldActiveRange();// 0x1c8be5c
	function InitSeasonStatue();// 0x1c8be40
	function InitPatchTableData();// 0x180f988
	function InitGenerator();// 0x1c8be24
	function InitGameParamsFromGameMode();// 0x1c8be08
	function InitDynamicTriggers();// 0x1c8bdec
	function InitDynamicBuildingGroups();// 0x1c8bdd0
	function InitBornWithApple();// 0x18ae2e0
	function InitAdvertisement();// 0x1c8bdb4
	function Heartbeat();// 0x1c8bda0
	function HasDynamicBuildingGroup();// 0x1c8bd78
	function HandlePlayerPaintDecalResponse();// 0x1c8bbdc
	function GotoNearDeath();// 0x1c8bb18
	function GetSurvivingTeamCount();// 0x1c8bae8
	function GetSurvivingCharacterCount();// 0x1c8bab8
	function GetPlayerStateListWithTeamID();// 0x1c8b964
	function GetPlayerControllerListWithTeamID();// 0x1c8b810
	function GetPlayerAndRealAiNum();// 0x1c8b728
	function GetPlaneDirection();// 0x1c8b6d8
	function GetObserverControllerList();// 0x1c8b618
	function GetMonsterNum();// 0x1c8b588
	function FindPlayerStateWithPlayerKey();// 0x1c8b4c4
	function FindPlayerControllerWithPlayerKey();// 0x1c8b400
	function DestroyNoActiveWorldActor();// 0x1c8b31c
	function DestroyCharacterForPlayerController();// 0x1c8b29c
	function DestroyAllPickUpObjs();// 0x16ad21c
	function DeleteSeasonStatue();// 0x1811aa8
	function DeleteDynamicLoadItem();// 0x1c8b280
	function DebugEnterFriendObserver();// 0x1c8b200
	function CollectAllPlayerInfo();// 0x1c8b134
	function ChangeName();// 0x1c8afe0
	function AddAirDropBox();// 0x1c8af10

--------------------------------
Class: GameModePatchTableData
	<Item_Key(IntProperty) , Item(StructProperty)> Item;//[Offset: 0x0 , Size: 60]
	<PickUpCountSetting_Key(IntProperty) , PickUpCountSetting(StructProperty)> PickUpCountSetting;//[Offset: 0x3c , Size: 60]
	<BackpackMapping_Key(IntProperty) , BackpackMapping(StructProperty)> BackpackMapping;//[Offset: 0x78 , Size: 60]
	<WeaponAttachments_Key(IntProperty) , WeaponAttachments(StructProperty)> WeaponAttachments;//[Offset: 0xb4 , Size: 60]

--------------------------------
Class: UAEOBState.PlayerState.Info.Actor.Object

--------------------------------
Class: VehicleAndTreasureBoxGeneratorComponent.BaseGeneratorComponent.ItemActorComponent.ActorComponent.Object
	bool bUseLocalSpotFile;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	VehicleSpotSceneComponentList(ObjectProperty)[] VehicleSpotSceneComponentList;//[Offset: 0x16c , Size: 12]
	byte RegionType;//[Offset: 0x178 , Size: 1]
	VehicleSpotPropertys(StructProperty)[] VehicleSpotPropertys;//[Offset: 0x17c , Size: 12]
	TreasureBoxSpotPropertys(StructProperty)[] TreasureBoxSpotPropertys;//[Offset: 0x188 , Size: 12]
	bool bStatisticsValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x194 , Size: 1]
	bool bIsRandom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x195 , Size: 1]
	<AllVehicleSpots_Key(ByteProperty) , AllVehicleSpots(StructProperty)> AllVehicleSpots;//[Offset: 0x198 , Size: 60]
	<AllTreasureBoxSpots_Key(ByteProperty) , AllTreasureBoxSpots(StructProperty)> AllTreasureBoxSpots;//[Offset: 0x1d4 , Size: 60]
	<VehicleGenerateSpawnDatas_Key(StrProperty) , VehicleGenerateSpawnDatas(StructProperty)> VehicleGenerateSpawnDatas;//[Offset: 0x210 , Size: 60]
	VehicleGenerateStatisticsData VehicleStatisticsData;//[Offset: 0x24c , Size: 72]
	UAEDataTable* VehicleDataTable;//[Offset: 0x294 , Size: 4]
	function WriteVehicleSpotStatisticsDatas_V15();// 0x16ad21c
	function WriteVehicleSpotStatisticsDatas();// 0x16ad21c
	function WriteVehicleClassStatisticsDatas_V15();// 0x16ad21c
	function WriteVehicleClassStatisticsDatas();// 0x16ad21c
	function WriteAllVehicleStatisticsDatasToLog();// 0x16ad21c
	function WriteAllVehicleStatisticsDatas_V15();// 0x16ad21c
	function WriteAllVehicleStatisticsDatas();// 0x16ad21c
	function RegisterVehicleGenerateSpawnData();// 0x1c9c0a0
	function RegisterGroupSpotComponent();// 0x16fba78
	function RandomTreasureBoxSpotsByType();// 0x1c9becc
	function RandomTreasureBoxSingleSpots();// 0x1c9bcf8
	function RandomSpotsByType();// 0x1c9bb24
	function RandomSingleSpots();// 0x1c9b950
	function RandomGroups();// 0x1698f30
	function LoadVehicleGenerateTable();// 0x206ccd8
	function GetVehicleSpotRandomInfoBySpotType();// 0x1c9b7c0
	function GetVehicleSpotRandomInfo();// 0x1c9b578
	function GetTreasureBoxSpotRandomInfo();// 0x1c9b330
	function GetRandomVehicleClass();// 0x1c9b0c4
	function GetRandomCategory();// 0x1c621dc
	function GenerateSpotOnTick();// 0x16fbc78
	function DeleteGroups();// 0x1c9b0b0
	function AddVehicleSpotCount();// 0x1c9ae38
	function AddVehicleClassCount();// 0x1c9ac4c

--------------------------------
Class: VehicleGenerateStatisticsData
	VehicleSpotStatisticsData(StructProperty)[] VehicleSpotStatisticsData;//[Offset: 0x0 , Size: 12]
	<VehicleClassStatisticsData_Key(StrProperty) , VehicleClassStatisticsData(StructProperty)> VehicleClassStatisticsData;//[Offset: 0xc , Size: 60]

--------------------------------
Class: StatueBaseData
	FString ClassPath;//[Offset: 0x0 , Size: 12]
	FString MatPath;//[Offset: 0xc , Size: 12]
	FString TeamFlag;//[Offset: 0x18 , Size: 12]
	FString TeamName;//[Offset: 0x24 , Size: 12]
	Vector Loc;//[Offset: 0x30 , Size: 12]
	Rotator Rot;//[Offset: 0x3c , Size: 12]
	Vector Scale;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: UnmannedVehicleSyncData
	enum EUAVUseType;//[Offset: 0x0 , Size: 1]
	STExtraVehicleBase* CurrentUnmannedVehicle;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: CharacterAvatarComponent2.SlotViewAvatarComponent.SlotAvatarComponent.AvatarComponentBase.SceneComponent.ActorComponent.Object
	int gender;//[Offset: 0x68c , Size: 4]
	delegate OnAvatarHeadVisible;//[Offset: 0x690 , Size: 12]
	delegate OnAvatarEquipped;//[Offset: 0x69c , Size: 12]
	bool bSyncAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a8 , Size: 1]
	int HeadAvatarID;//[Offset: 0x6c0 , Size: 4]
	int PreHeadAvatarID;//[Offset: 0x6c4 , Size: 4]
	bool forceLodMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d8 , Size: 1]
	bool bEnableCameraModeLODControll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6d9 , Size: 1]
	<HadHideBoneNames(NameProperty)> HadHideBoneNames;//[Offset: 0x6dc , Size: 60]
	OpenResetHideBone(EnumProperty)[] OpenResetHideBone;//[Offset: 0x718 , Size: 12]
	<AvatarHideBoneMap_Key(EnumProperty) , AvatarHideBoneMap(StructProperty)> AvatarHideBoneMap;//[Offset: 0x724 , Size: 60]
	ignoreSlots(IntProperty)[] ignoreSlots;//[Offset: 0x760 , Size: 12]
	int WholeBodyModelID;//[Offset: 0x76c , Size: 4]
	int CurrentClothID;//[Offset: 0x770 , Size: 4]
	LastSuitItems(IntProperty)[] LastSuitItems;//[Offset: 0x774 , Size: 12]
	NeedRemoveSlot(IntProperty)[] NeedRemoveSlot;//[Offset: 0x780 , Size: 12]
	bool bWearingSuit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78c , Size: 1]
	<ClothMaterialColorName_Key(EnumProperty) , ClothMaterialColorName(NameProperty)> ClothMaterialColorName;//[Offset: 0x790 , Size: 60]
	<ClothMaterialSkinName_Key(EnumProperty) , ClothMaterialSkinName(NameProperty)> ClothMaterialSkinName;//[Offset: 0x7cc , Size: 60]
	<RunningColorHandle_Key(EnumProperty) , RunningColorHandle(ObjectProperty)> RunningColorHandle;//[Offset: 0x808 , Size: 60]
	<RunningPatternHandle_Key(EnumProperty) , RunningPatternHandle(ObjectProperty)> RunningPatternHandle;//[Offset: 0x844 , Size: 60]
	<LoadedEffectGroup_Key(IntProperty) , LoadedEffectGroup(StructProperty)> LoadedEffectGroup;//[Offset: 0x880 , Size: 60]
	delegate OnAvatarAttachEquipped;//[Offset: 0x8bc , Size: 12]
	delegate OnClothParticleEquipped;//[Offset: 0x8c8 , Size: 12]
	<LoadedAttachMeshGroup_Key(IntProperty) , LoadedAttachMeshGroup(StructProperty)> LoadedAttachMeshGroup;//[Offset: 0x8d4 , Size: 60]
	int ConfigMinDistFromMainChar;//[Offset: 0x910 , Size: 4]
	int ConfigMaxDistFromMainChar;//[Offset: 0x914 , Size: 4]
	int ConfigBaseNonRenderedUpdateRate;//[Offset: 0x918 , Size: 4]
	ConfigBaseVisibleDistanceFactorThesholds(FloatProperty)[] ConfigBaseVisibleDistanceFactorThesholds;//[Offset: 0x91c , Size: 12]
	ConfigLODToFrameSkipMap(StructProperty)[] ConfigLODToFrameSkipMap;//[Offset: 0x928 , Size: 12]
	int EnableEquipAvatarPendant;//[Offset: 0x934 , Size: 4]
	bool bConsiderDefaultReplaceModel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x938 , Size: 1]
	bool bAllowSetInvincible;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x939 , Size: 1]
	function TypeToInt();// 0x1700fc0
	function Streamable_RequestAsyncLoadHandles();// 0x1700eec
	function SetSkinMaterial();// 0x1700dd0
	function SetNormalMaterial();// 0x1700c58
	function SetMeshVisibleByID();// 0x1700b34
	function SetIgnoreSlots();// 0x1700abc
	function SetClothParticleVisibility();// 0x17009a8
	function SetBodySuitsMaterial();// 0x170086c
	function SetAvatarVisibility();// 0x1700758
	function SetAvatarGender();// 0x17006e0
	function SetAvatarForceLOD();// 0x1700624
	function SetAllMeshCharMode();// 0x17005a4
	function ResetBackpackPendant();// 0x17004e8
	function ResetAnimDynamicsByMeshComp();// 0x1700468
	function ResetAllAnimDynamics();// 0x170044c
	function RequestSyncLoadHandles();// 0x1700380
	function RemoveClothParticleEffect();// 0x1700308
	function RemoveAttachMesh();// 0x1700290
	function ProcessClothSuits();// 0x1700274
	function ProcessAvatarRectify();// 0x1700258
	function PreProcessBeforeLoadMesh();// 0x16a1d28
	function PostProcessAfterLoadMesh();// 0x16a1cf8
	function OnSyncLoadBattleHandlesDone();// 0x1700100
	function OnRep_BodySlotStateChanged();// 0x17000e4
	function OnLoadAvatarSlotDesc();// 0x1700014
	function OnDeleteAvatarSlotDesc();// 0x16ffef8
	function OnClothParticleEquipped__DelegateSignature();// 0x206ccd8
	function OnAvatarMeshEquippedEvent();// 0x16ffdcc
	function OnAvatarLogicUnequippedEvent();// 0x16ffcf4
	function OnAvatarLogicEquippedEvent();// 0x16ffbc8
	function OnAvatarHeadVisible__DelegateSignature();// 0x206ccd8
	function OnAvatarEquippedCall();// 0x16ffabc
	function OnAvatarEquipped__DelegateSignature();// 0x206ccd8
	function OnAvatarAttachEquipped__DelegateSignature();// 0x206ccd8
	function OnAsyncLoadMeshesDone();// 0x16ffa3c
	function OnAsyncLoadBattleHandlesDone();// 0x16ff8dc
	function LoadAvatarMeshData();// 0x16ff804
	function IsUseDefaultReplaceModel();// 0x16ff6dc
	function IsTeammate();// 0x16ff6ac
	function IsSameAvatarItem();// 0x16ff5b0
	function IsSameAvatarHandle();// 0x16ff4b4
	function IsPendantExistAndBackpackHided();// 0x16ff434
	function IsMasterMeshSlotID();// 0x16ff368
	function IsItemBlueprintExist();// 0x16ff238
	function IntToType();// 0x16ff1c4
	function InitMasterComponent();// 0x16ff1b0
	function Initialize();// 0x16ff194
	function InitialAvatarParam();// 0x16ff11c
	function InitDefaultMesh();// 0x16ff0a4
	function InitDefaultAvatarByResID();// 0x16fefa4
	function InitBodyMeshByHead();// 0x16feec0
	function HandleUnEquipCloth();// 0x16fee28
	function HandleHeadEquipped();// 0x16fedb0
	function HandleEquipInitalCloth();// 0x16fed38
	function HandleEquipCloth();// 0x16fec5c
	function GetStaticMesh();// 0x16feba8
	function GetSlotMeshType();// 0x16fea98
	function GetSkeletalMesh();// 0x16fe9e4
	function GetPendantSlotType();// 0x16fe9b4
	function GetMeshCompBySlot();// 0x16fe92c
	function GetMaterialBySlotName();// 0x16fe868
	function GetMaterial();// 0x16fe7b4
	function GetLoadedHandle();// 0x16fe734
	function GetEquipmentSkinItemID();// 0x16fe6ac
	function GetEquimentMeshBySlot();// 0x16fe5b4
	function GetDefaultBodyItemIDList();// 0x16fe4f4
	function GetClothMaterialSkinName();// 0x16fe420
	function GetClothMaterialColorName();// 0x16fe34c
	function GetCharSkinMaterial();// 0x206ccd8
	function GetAvatarItemPattern();// 0x16fe244
	function GetAvatarItemColor();// 0x16fe180
	function GetAttachPartSlotType();// 0x16fe150
	function GetAttachMeshResRef();// 0x16fdfcc
	function GenerateClientDefaultAvatar();// 0x206ccd8
	function EnableEquipAvatarPendantFeature();// 0x16fdfa4
	function DeleteAvatarMeshData();// 0x16fdf1c
	function CreateAvatarItemPattern();// 0x206ccd8
	function CreateAvatarItemColor();// 0x206ccd8
	function CreateAvatarHandle();// 0x16fde38
	function ClearAvatarHandlerFromPool();// 0x16fdda0
	function CheckShouldEquipDefaultItem();// 0x16fdd18
	function CheckIsHiddenByOther();// 0x16fdc98
	function AsyncLoadClothParticleEffect();// 0x16fdbdc
	function AsyncLoadAttachMesh();// 0x16fdb20
	function ApplyMeshCompCollision();// 0x16fdaa8
	function ApplyMaterial();// 0x16fd9dc
	function ApplyClothParticleEffect();// 0x16fd920
	function ApplyAvatarCustomInfo();// 0x16fd7d8
	function ApplyAttachMesh();// 0x16fd71c
	function ApplyAnimListOverride();// 0x16fd650
	function AddAvatarHandleToPool();// 0x16fd5d0

--------------------------------
Class: HalloweenVampireCloth
	bool bWearingHalloweenVampireCloth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	int HalloweenVampireClothItemID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: STParachuteState
	float ThrottleInput;//[Offset: 0x0 , Size: 4]
	float SteerInput;//[Offset: 0x4 , Size: 4]
	int8 State;//[Offset: 0x8 , Size: 1]
	Rotator CameraRotation;//[Offset: 0xc , Size: 12]

--------------------------------
Class: UAEChaParachuteAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharParachuteAnimDataList(StructProperty)[] CharParachuteAnimDataList;//[Offset: 0x17c , Size: 12]
	function ReleaseParachuteAnimAssets();// 0x1c82694
	function OnParachuteAnimAsyncLoadingFinished();// 0x1c8253c
	function OnAnimListAsyncLoadingFinished();// 0x1c82528
	function HasAnimAsyncLoadingFinished();// 0x1c82500
	function HandleAsyncLoadingFinishedEvent();// 0x1c824ec
	function GetOwnerName();// 0x1c82424
	function GetCharacterParachuteAnim();// 0x1c823a4

--------------------------------
Class: UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterAsynLoadedAnims(StructProperty)[] CharacterAsynLoadedAnims;//[Offset: 0x170 , Size: 12]

--------------------------------
Class: UAEAnimListComponentBase.ActorComponent.Object
	<AnimListMap_Key(IntProperty) , AnimListMap(StructProperty)> AnimListMap;//[Offset: 0x10c , Size: 60]
	AnimationCatcheList(ObjectProperty)[] AnimationCatcheList;//[Offset: 0x148 , Size: 12]

--------------------------------
Class: STReplicatedMoveState
	Vector_NetQuantize Location;//[Offset: 0x0 , Size: 12]
	byte Roll;//[Offset: 0xc , Size: 1]
	uint32 View;//[Offset: 0x10 , Size: 4]
	Vector_NetQuantize Velocity;//[Offset: 0x14 , Size: 12]

--------------------------------
Class: ParachuteFollowComponent.ActorComponent.Object

--------------------------------
Class: UAECharacterAnimListComponent.UAECharAnimListCompBase.UAEAnimListComponentBase.ActorComponent.Object
	CharacterMovementAnimEditList(StructProperty)[] CharacterMovementAnimEditList;//[Offset: 0x17c , Size: 12]
	CharacterFPPAnimEditList(StructProperty)[] CharacterFPPAnimEditList;//[Offset: 0x188 , Size: 12]
	CharacterShieldAnimEditList(StructProperty)[] CharacterShieldAnimEditList;//[Offset: 0x194 , Size: 12]
	CharacterJumpEditList(StructProperty)[] CharacterJumpEditList;//[Offset: 0x1a0 , Size: 12]
	CharacterJumpEditListFPP(StructProperty)[] CharacterJumpEditListFPP;//[Offset: 0x1ac , Size: 12]
	CurveFloat* FallingIKCurve;//[Offset: 0x1b8 , Size: 4]
	CharAnimModifyList(StructProperty)[] CharAnimModifyList;//[Offset: 0x1bc , Size: 12]
	CharVehAnimModifyList(StructProperty)[] CharVehAnimModifyList;//[Offset: 0x1c8 , Size: 12]
	bool IsInitByBeginPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4 , Size: 1]
	bool EnablePreLoadingFinish;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d5 , Size: 1]
	bool CurrentIsTPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d6 , Size: 1]
	bool CurrentHoldShield;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d7 , Size: 1]
	function OnPreLoadingFinished();// 0x1c84634
	function OnAsyncLoadingFinished();// 0x1c84398
	function GetCharacterJumpAnim();// 0x1c84290

--------------------------------
Class: WeaponOverrideAttrs
	float GameModeOverride_DeviationMoveModifier;//[Offset: 0x0 , Size: 4]
	float GameModeOverride_DeviationStanceJumpModifier;//[Offset: 0x4 , Size: 4]
	float GameModeOverride_MeleeDamageAmountModifier;//[Offset: 0x8 , Size: 4]
	float GameModeOverride_GrenadeDamageRadiusModifier;//[Offset: 0xc , Size: 4]
	float GameModeOverride_GrenadeDamageAmountModifier;//[Offset: 0x10 , Size: 4]
	float GameModeOverride_GunsDamageAmountModifier;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: CharacterOverrideAttrs
	float GameModeOverride_SpeedScaleModifier;//[Offset: 0x0 , Size: 4]
	float GameModeOverride_SwimSpeedScaleModifier;//[Offset: 0x4 , Size: 4]
	float GameModeOverride_EnergySpeedScaleModifier;//[Offset: 0x8 , Size: 4]
	float GameModeOverride_LastBreathSpeedScaleModifier;//[Offset: 0xc , Size: 4]

--------------------------------
Class: BonfireActor.UAEBuffApplierActor.Actor.Object
	float RemainingLifeTime;//[Offset: 0x2cc , Size: 4]
	bool bHasBeenLit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d0 , Size: 1]
	bool bHasBurnOut;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2d1 , Size: 1]
	RoastMeatActor* curRoastMeat;//[Offset: 0x2d4 , Size: 4]
	function RemingLifeTimeChanged();// 0x16e6f24
	function RecordBonFireSuccess();// 0x16e6f10
	function OnRep_RemainingLifeTime();// 0x16e6e98
	function OnRep_HasBurnOut();// 0x16e6e84
	function OnRep_HasBeenLit();// 0x16e6e70
	function OnRep_CurRoastMeat();// 0x16e6e5c
	function IsBurnOutChanged();// 0x16e6e40
	function CastMsg_Implementation();// 0x16e6cf4

--------------------------------
Class: UAEBuffApplierActor.Actor.Object
	Controller* InstigatorController;//[Offset: 0x2c4 , Size: 4]
	function GetTheInstigatorController();// 0x192ce78

--------------------------------
Class: RoastMeatActor.Actor.Object
	BonfireActor* parentBonfire;//[Offset: 0x2c4 , Size: 8]
	enum AnimalType;//[Offset: 0x2cc , Size: 1]
	bool IsDone;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2cd , Size: 1]
	function RecordRoastMeatSuccess();// 0x17c3244
	function OnRep_IsDone();// 0x17c3230
	function CastActorMsg();// 0x17c316c

--------------------------------
Class: STCharacterBonfireLinkComp.ActorComponent.Object
	BonfireFanPickerData FanData;//[Offset: 0xbc , Size: 20]
	float ReturnToFindNewTimer;//[Offset: 0xd0 , Size: 4]
	STExtraBaseCharacter* PawnOwner;//[Offset: 0xd8 , Size: 8]
	bonFireCandidates(WeakObjectProperty)[] bonFireCandidates;//[Offset: 0xe0 , Size: 12]
	function RemoveBonfireCandidate();// 0x17f2d40
	function InitializeOwner();// 0x17f2cc8
	function AddBonfireCandidate();// 0x17f2c50

--------------------------------
Class: BonfireFanPickerData
	float Radius;//[Offset: 0x0 , Size: 4]
	float HightDiff;//[Offset: 0x4 , Size: 4]
	float Angle;//[Offset: 0x8 , Size: 4]
	bool IsShowDebugFan;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool bEnableTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	float LowerTraceRatio;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: PlayerRespawnData
	byte RespawnCount;//[Offset: 0x0 , Size: 1]
	Vector Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: TimerHandle
	uint64 Handle;//[Offset: 0x0 , Size: 8]

--------------------------------
Class: PlayerVaultComponent.ActorComponent.Object
	bool isInVaultingCpp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	bool hasSendStopVault;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbd , Size: 1]
	<VaultAnimSoftPtrMap_Key(ByteProperty) , VaultAnimSoftPtrMap(StructProperty)> VaultAnimSoftPtrMap;//[Offset: 0xc0 , Size: 60]
	AnimMontage* VaultMontage;//[Offset: 0xfc , Size: 4]
	AnimMontage* TeamVaultMontage;//[Offset: 0x100 , Size: 4]
	STExtraPlayerCharacter* OwnerCharacter;//[Offset: 0x108 , Size: 4]
	function VaultFromCPP();// 0x17a7874
	function UpdateVault_BluePrint();// 0x170e77c
	function StartAsyncLoadVaultAnimRes();// 0x17a77f4
	function StartAsyncLoadTeamVaultAnimRes();// 0x17a77e0
	function GetVaultKeyByBlockHeight();// 0x17a76d0
	function GetRelicateRotator();// 0x17a7688
	function FpsVaultToAll();// 0x17a7444
	function FpsVaultServer();// 0x17a7200
	function AsyncLoadVaultAnimResFinish();// 0x17a7188

--------------------------------
Class: NewbieGuideComponent.ActorComponent.Object
	int CurTipsID;//[Offset: 0xbc , Size: 4]
	bool IsStartShowingGuide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0 , Size: 1]
	bool OpenNewbieGuideSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1 , Size: 1]
	float GuideInterval;//[Offset: 0xc4 , Size: 4]
	int MaxGuideLevel;//[Offset: 0xc8 , Size: 4]
	items(StructProperty)[] items;//[Offset: 0xcc , Size: 12]
	STExtraPlayerController* OwnerController;//[Offset: 0xd8 , Size: 4]
	FinishedTips(IntProperty)[] FinishedTips;//[Offset: 0xdc , Size: 12]
	FinishedCounts(IntProperty)[] FinishedCounts;//[Offset: 0xe8 , Size: 12]
	function TriggerNewbieEvent();// 0x1782cc4
	function SendNewbieMsg();// 0x1782bb8
	function OnUIAssetLoadFinsh();// 0x1782b3c
	function OnNewbieEventMapUpdate__DelegateSignature();// 0x206ccd8
	function InitComponent();// 0x17827f8
	function GetIsAllowNewGuide();// 0x17827d0

--------------------------------
Class: TimeLineSyncComponent.ActorComponent.Object
	function RPC_SrvSyncTimeLine_UnReliable();// 0x18c3ba4
	function RPC_SrvSyncTimeLine();// 0x18c3a90
	function RPC_GetClientTimeRespond();// 0x18c38e4
	function RPC_GetClientTimeRequest();// 0x18c3830
	function RPC_ClientSyncTimeLine_UnReliable();// 0x18c3734
	function RPC_ClientSyncTimeLine();// 0x18c3674
	function ReportDebugInfo();// 0x18c35c0
	function OnServerAboutToReconnect();// 0x18c35ac
	function GetClientTimeInterval();// 0x18c3598
	function CheckTimeLine();// 0x18c3584

--------------------------------
Class: TimeWatchDogComponent.ActorComponent.Object
	bool bUseTimeSync;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	float TimeStartDelay;//[Offset: 0xc0 , Size: 4]
	float SyncInterval;//[Offset: 0xc4 , Size: 4]
	function RPC_SrvSyncTimeLine();// 0x18c4b98
	function RPC_ClientSyncTimeLine();// 0x1698f4c
	function OnTimeInspectorColdMove_Vehicle();// 0x18c4b84
	function OnTimeInspectorColdMove_Own();// 0x18c4b70
	function OnServerAboutToReconnect();// 0x18c4b5c
	function CheckTimeLine();// 0x18c4b48

--------------------------------
Class: PlayerAntiCheatManager.ActorComponent.Object
	VerifySwitch VsHitDetail;//[Offset: 0x130 , Size: 12]
	VerifySwitch VsFlyDist2D;//[Offset: 0x13c , Size: 12]
	VerifySwitch VsFlyDist3D;//[Offset: 0x148 , Size: 12]
	VerifySwitch VsFlyGravitySimple;//[Offset: 0x154 , Size: 12]
	VerifySwitch VsFlyGravityDetail;//[Offset: 0x160 , Size: 12]
	VerifySwitch VsRelMoveFailed;//[Offset: 0x16c , Size: 12]
	VerifySwitch VsPureMoveSpeed;//[Offset: 0x178 , Size: 12]
	VerifySwitch VsNoHitDetail;//[Offset: 0x184 , Size: 12]
	VerifySwitch VsFakeTraceMissMatch;//[Offset: 0x190 , Size: 12]
	VerifySwitch VsSilentProtect01;//[Offset: 0x19c , Size: 12]
	VerifySwitch VsSilentProtect02;//[Offset: 0x1a8 , Size: 12]
	VerifySwitch VsLocusCheckHorizon;//[Offset: 0x1b4 , Size: 12]
	VerifySwitch VsLocusCheckZ;//[Offset: 0x1c0 , Size: 12]
	VerifySwitch VsLocusCheckHorizonSingle;//[Offset: 0x1cc , Size: 12]
	VerifySwitch VsLocusCheckHorizonBigBox;//[Offset: 0x1d8 , Size: 12]
	VerifySwitch VsMuzzleDataWrong;//[Offset: 0x1e4 , Size: 12]
	VerifySwitch VsMuzzleRangeCircle;//[Offset: 0x1f0 , Size: 12]
	VerifySwitch VsMuzzleRangeUp;//[Offset: 0x1fc , Size: 12]
	VerifySwitch VsMuzzleRangeForward;//[Offset: 0x208 , Size: 12]
	VerifySwitch VsMuzzleRangeRight;//[Offset: 0x214 , Size: 12]
	VerifySwitch VsDeConAndTimeOld;//[Offset: 0x220 , Size: 12]
	VerifySwitch VsMaxWeaponToBaseFailed;//[Offset: 0x22c , Size: 12]
	VerifySwitch VsBulletDirFailed;//[Offset: 0x238 , Size: 12]
	VerifySwitch VsBulletBornFailed;//[Offset: 0x244 , Size: 12]
	VerifySwitch VsBoneScale;//[Offset: 0x250 , Size: 12]
	VerifySwitch VsHitBoneNameNone;//[Offset: 0x25c , Size: 12]
	VerifySwitch VsHitBoneHitMissMatch;//[Offset: 0x268 , Size: 12]
	VerifySwitch VsWeaponHasNoBase;//[Offset: 0x274 , Size: 12]
	VerifySwitch VsBlockStaticToDynamic;//[Offset: 0x280 , Size: 12]
	VerifySwitch VsHighMuzzleShootDown;//[Offset: 0x28c , Size: 12]
	VerifySwitch VsMoveTimeStampError;//[Offset: 0x298 , Size: 12]
	VerifySwitch VsVehicleTimeStampError;//[Offset: 0x2a4 , Size: 12]
	VerifySwitch VsWatchTimeStampError;//[Offset: 0x2b0 , Size: 12]
	int MaxShootPointPassWall;//[Offset: 0x2bc , Size: 4]
	int MaxMuzzleHeightTime;//[Offset: 0x2c0 , Size: 4]
	int MaxLocusFailTime;//[Offset: 0x2c4 , Size: 4]
	int MaxBulletVictimClientPassWallTimes;//[Offset: 0x2c8 , Size: 4]
	int MaxGunPosErrorTimes;//[Offset: 0x2cc , Size: 4]
	float MaxSkeletonLength;//[Offset: 0x2d0 , Size: 4]
	int MaxAllowVehicleTimeSpeedRawTime;//[Offset: 0x2d4 , Size: 4]
	int MaxAllowVehicleTimeSpeedConvTime;//[Offset: 0x2d8 , Size: 4]
	int MaxAllowVehicleAccTime;//[Offset: 0x2dc , Size: 4]
	int MaxShooterDataNumErrorCnt;//[Offset: 0x2e0 , Size: 4]
	VerifySwitch VsBoneInfo;//[Offset: 0x2e4 , Size: 12]
	VerifySwitch VsJumpMaxHeight;//[Offset: 0x2f0 , Size: 12]
	VerifySwitch VsJumpMaxHeight15;//[Offset: 0x2fc , Size: 12]
	VerifySwitch VsJumpMaxHeight2;//[Offset: 0x308 , Size: 12]
	VerifySwitch VsTimeLineUpFailed;//[Offset: 0x314 , Size: 12]
	VerifySwitch VsTimeLineDnFailed;//[Offset: 0x320 , Size: 12]
	VerifySwitch VsTimeLineBlock;//[Offset: 0x32c , Size: 12]
	VerifySwitch VsSysTimeCheckNoBack;//[Offset: 0x338 , Size: 12]
	VerifySwitch VsSysTimeRateCheck;//[Offset: 0x344 , Size: 12]
	VerifySwitch VsShootRpgShootTimeVerify;//[Offset: 0x350 , Size: 12]
	VerifySwitch VsShootLockShootTimeVerify;//[Offset: 0x35c , Size: 12]
	VerifySwitch VsShootRpgHitNewVerify;//[Offset: 0x368 , Size: 12]
	VerifySwitch VsShootGunInfoCheck;//[Offset: 0x374 , Size: 12]
	VerifySwitch VsDynamicBasePassWall;//[Offset: 0x380 , Size: 12]
	VerifySwitch VsShootTimeConDelta;//[Offset: 0x38c , Size: 12]
	VerifySwitch VsShootTimeDeConMerged;//[Offset: 0x398 , Size: 12]
	int MaxMergedStrategy1;//[Offset: 0x3a4 , Size: 4]
	int MaxMergedStrategy2;//[Offset: 0x3a8 , Size: 4]
	VerifySwitch VsShootTimeDeConFrameControl;//[Offset: 0x3ac , Size: 12]
	VerifySwitch VsShootTimeServerNoConnSpan;//[Offset: 0x3b8 , Size: 12]
	VerifySwitch VsServerNoOldShoot;//[Offset: 0x3c4 , Size: 12]
	VerifySwitch VsSkeletonLengthCheck;//[Offset: 0x3d0 , Size: 12]
	VerifySwitch VsParachuteVelocityCheck;//[Offset: 0x3dc , Size: 12]
	float MaxFuelConsume;//[Offset: 0x3e8 , Size: 4]
	VerifySwitch VsClientImpactActorOffset;//[Offset: 0x46c , Size: 12]
	VerifySwitch VsClientBulletOffset;//[Offset: 0x478 , Size: 12]
	VerifySwitch VsClientBulletDir;//[Offset: 0x484 , Size: 12]
	VerifySwitch VsClientWeaponHeight;//[Offset: 0x490 , Size: 12]
	VerifySwitch VsClientDownShoot;//[Offset: 0x49c , Size: 12]
	VerifySwitch VsImpactActorPosWithNoHisPos;//[Offset: 0x4a8 , Size: 12]
	VerifySwitch VsShootAngleInVaild;//[Offset: 0x4b4 , Size: 12]
	VerifySwitch VsMuzzleHeightInVaild;//[Offset: 0x4c0 , Size: 12]
	VerifySwitch VsMuzzleAndTailPosInVaild;//[Offset: 0x4cc , Size: 12]
	VerifySwitch VsMuzzleAndImpactPassWall;//[Offset: 0x4d8 , Size: 12]
	VerifySwitch VsMuzzleAndTailPassWall;//[Offset: 0x4e4 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig;//[Offset: 0x4f0 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetBig2;//[Offset: 0x4fc , Size: 12]
	VerifySwitch VsImpactActorPosOffsetSmall;//[Offset: 0x508 , Size: 12]
	VerifySwitch VsImpactActorPosOffsetChangeSmall;//[Offset: 0x514 , Size: 12]
	VerifySwitch VsFirstImpactActorPosOffsetChangeSmall;//[Offset: 0x520 , Size: 12]
	VerifySwitch VsImpactPointChangeSmall;//[Offset: 0x52c , Size: 12]
	VerifySwitch VsImpactBulletPosOffsetBig;//[Offset: 0x538 , Size: 12]
	VerifySwitch VsImpactBulletPosOffsetSmall;//[Offset: 0x544 , Size: 12]
	VerifySwitch VsTotalImactCharacterNum;//[Offset: 0x550 , Size: 12]
	VerifySwitch ClientTimeSpeedAcc;//[Offset: 0x55c , Size: 12]
	function OnRecoverOnServer();// 0x179885c
	function OnPreReconnectOnServer();// 0x1798848

--------------------------------
Class: CommonCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0 , Size: 36]

--------------------------------
Class: SwitchCameraData.CameraData
	float StartCameraSwitchDelayTimeFrom_Normal;//[Offset: 0x14 , Size: 4]
	float StartCameraSwitchDelayTimeFrom_Near;//[Offset: 0x18 , Size: 4]
	float StartCameraSwitchDelayTimeFrom_Aim;//[Offset: 0x1c , Size: 4]
	float CameraSwitchTime;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: CameraData
	float CameraFOV;//[Offset: 0x0 , Size: 4]
	Vector SpringArmSocketOffset;//[Offset: 0x4 , Size: 12]
	float SpringArmLength;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: AimCameraModeData
	SwitchCameraData SwitchCameraData;//[Offset: 0x0 , Size: 36]

--------------------------------
Class: ServerHitEnemyReplicatedData
	STExtraBaseCharacter* HitTargetPawn;//[Offset: 0x0 , Size: 4]
	uint32 EventID;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: WeaponSystemReconnectReplicateData
	FName LastUseNoneGrenadeLogicSlot;//[Offset: 0x0 , Size: 8]
	FName LastUseLogicSlot;//[Offset: 0x8 , Size: 8]
	GrenadeLogicSlotList(NameProperty)[] GrenadeLogicSlotList;//[Offset: 0x10 , Size: 12]
	GrenadeDefineIDList(StructProperty)[] GrenadeDefineIDList;//[Offset: 0x1c , Size: 12]

--------------------------------
Class: TeamateStateUAVChangedCompressData
	Vector_NetQuantize100 Location;//[Offset: 0x0 , Size: 12]
	uint32 View;//[Offset: 0xc , Size: 4]
	byte Roll;//[Offset: 0x10 , Size: 1]
	byte uavType;//[Offset: 0x11 , Size: 1]

--------------------------------
Class: CommonBtnComponent.ActorComponent.Object
	float CheckDoorDistanceSqr;//[Offset: 0xbc , Size: 4]
	PUBGDoor* TriggeredDoor;//[Offset: 0xc0 , Size: 4]
	PUBGDoor* TriggeredDoorAux;//[Offset: 0xc4 , Size: 4]
	function SetAutoOpenDoorMode();// 0x170d020
	function SetAutoOpenDoorEnable();// 0x170cfa0
	function RPC_Server_DoorState();// 0x170cea4
	function RPC_Client_DoorState();// 0x170cda8
	function IsAimingExtraDoor();// 0x170cd28
	function GetPriorityDoor();// 0x170cd00
	function DoorRequireRPC();// 0x170cba8
	function BP_SimulateUIClick();// 0x206ccd8
	function BP_ShowDoorBtn();// 0x206ccd8

--------------------------------
Class: PUBGDoor.UAENetActor.Actor.Object
	int iRegionDoor;//[Offset: 0x31c , Size: 4]
	bool EnableForceAutoOpenDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	bool EnableCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x321 , Size: 1]
	float MaxNetCullDistanceSquared;//[Offset: 0x324 , Size: 4]
	bool EnableRPCCheckDoorState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x328 , Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x329 , Size: 1]
	float autoOpenDistanceSquared;//[Offset: 0x32c , Size: 4]
	float autoOpenAngel;//[Offset: 0x330 , Size: 4]
	float forwardSpeedRatio;//[Offset: 0x334 , Size: 4]
	int doorState;//[Offset: 0x338 , Size: 4]
	bool DoorBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c , Size: 1]
	float DoorOperateTime;//[Offset: 0x340 , Size: 4]
	StaticMeshComponent* doorMesh;//[Offset: 0x344 , Size: 4]
	BoxComponent* interactionBox;//[Offset: 0x348 , Size: 4]
	BoxComponent* interForceBox;//[Offset: 0x34c , Size: 4]
	bool bDoubleDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x350 , Size: 1]
	int DoorStateEx;//[Offset: 0x354 , Size: 4]
	bool DoorBrokenEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x358 , Size: 1]
	StaticMeshComponent* doorMeshEx;//[Offset: 0x35c , Size: 4]
	BoxComponent* interactionBoxEx;//[Offset: 0x360 , Size: 4]
	BoxComponent* interForceBoxEx;//[Offset: 0x364 , Size: 4]
	bool bUseDoorWaitPush;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x368 , Size: 1]
	DamageableGameObjectTypeList(EnumProperty)[] DamageableGameObjectTypeList;//[Offset: 0x36c , Size: 12]
	float NetCullingDistanceOnVeryLowDevice;//[Offset: 0x378 , Size: 4]
	bool bAutoOpenTriggered;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	bool bAutoOpenStated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37d , Size: 1]
	bool bTriggeredDoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37e , Size: 1]
	bool bAutoOpenTriggeredEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37f , Size: 1]
	bool bAutoOpenStatedEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x380 , Size: 1]
	bool bTriggeredDoorEx;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x381 , Size: 1]
	Character* PlayerCharacter;//[Offset: 0x384 , Size: 4]
	float autoOpenAngelCosinValue;//[Offset: 0x388 , Size: 4]
	StaticMesh* InitialMesh_C;//[Offset: 0x394 , Size: 4]
	bool bInitedDataBeforeBroken;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x398 , Size: 1]
	FName DoorMeshCollisionProfileBeforeBroken;//[Offset: 0x3a0 , Size: 8]
	FName DoorMeshBoxCollisionProfileBeforeBroken;//[Offset: 0x3a8 , Size: 8]
	CollisionResponseContainer DoorMeshBoxCollisionResponses;//[Offset: 0x3b8 , Size: 32]
	bool WasBrokenForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d8 , Size: 1]
	function SetDoorBroken();// 0x17ae0ac
	function RefreshUIOnClient();// 0x17ae098
	function OpenDoorBy();// 0x17adfd4
	function OnRep_RepDoorStateEx();// 0x17adfc0
	function OnRep_RepDoorState();// 0x17adfac
	function OnRep_RepDoorBrokenEx();// 0x17adf98
	function OnRep_RepDoorBroken();// 0x17adf84
	function OnEndOverlapEx();// 0x17ade3c
	function OnEndOverlap();// 0x17adcf4
	function OnDoorRPC();// 0x17adc30
	function OnBPRespawned();// 0x17231a0
	function OnBeginOverlapEx();// 0x17ada34
	function OnBeginOverlap();// 0x17ad838
	function On_DoorAniFinsih();// 0x17ad774
	function IsSameDoorState();// 0x17ad6f4
	function Init();// 0x17ad4d0
	function GetDamageableGameObjectType();// 0x17ad408
	function ForceNetUpdate();// 0x1795538
	function CloseDoorBy();// 0x17ad344
	function ClientDoorRPC();// 0x17ad1e0
	function BPSetObjectPoolInitialData();// 0x16fae60
	function BP_DoorBroken();// 0x206ccd8
	function ActionDoorOnClient();// 0x206ccd8
	function ActionDoorImmediatly();// 0x206ccd8

--------------------------------
Class: ChatComponent.ActorComponent.Object
	int end_time;//[Offset: 0xc0 , Size: 4]
	FString Reason;//[Offset: 0xc4 , Size: 12]
	audioChat(IntProperty)[] audioChat;//[Offset: 0xd0 , Size: 12]
	chatQuickList(StructProperty)[] chatQuickList;//[Offset: 0xdc , Size: 12]
	TurnplateChatQuickList(StructProperty)[] TurnplateChatQuickList;//[Offset: 0xe8 , Size: 12]
	allChatOption(StructProperty)[] allChatOption;//[Offset: 0xf4 , Size: 12]
	FString TeammateColor;//[Offset: 0x100 , Size: 12]
	FString MyColor;//[Offset: 0x10c , Size: 12]
	<ActorNameList_Key(IntProperty) , ActorNameList(StrProperty)> ActorNameList;//[Offset: 0x118 , Size: 60]
	<FriendChatInfo_Key(StrProperty) , FriendChatInfo(StructProperty)> FriendChatInfo;//[Offset: 0x154 , Size: 60]
	ChatFlagList(StructProperty)[] ChatFlagList;//[Offset: 0x190 , Size: 12]
	float SendMsgCD;//[Offset: 0x19c , Size: 4]
	float lastShowChatTime;//[Offset: 0x1a0 , Size: 4]
	float ShowChatDuration;//[Offset: 0x1a4 , Size: 4]
	groundFlags(StructProperty)[] groundFlags;//[Offset: 0x1a8 , Size: 12]
	FString EndChar;//[Offset: 0x1b4 , Size: 12]
	FString ColonChar;//[Offset: 0x1c0 , Size: 12]
	<TextID2AudioID_Key(IntProperty) , TextID2AudioID(IntProperty)> TextID2AudioID;//[Offset: 0x1cc , Size: 60]
	ChatFilterList(StructProperty)[] ChatFilterList;//[Offset: 0x208 , Size: 12]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x214 , Size: 4]
	int itemIDOnGround;//[Offset: 0x228 , Size: 4]
	PickUpWrapperActor* itemOnGround;//[Offset: 0x22c , Size: 4]
	Vector hitItemPosition;//[Offset: 0x230 , Size: 12]
	bool hitGroundValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x23c , Size: 1]
	Vector hitGroundPosition;//[Offset: 0x240 , Size: 12]
	FString CongregationPlayerName;//[Offset: 0x24c , Size: 12]
	FString CongregationPlayerKey;//[Offset: 0x258 , Size: 12]
	function UpdateQuickItemText();// 0x206ccd8
	function ShowQuickPanel();// 0x1708f74
	function ServerSendMsg();// 0x1708e34
	function SendDirtyFilterContent();// 0x206ccd8
	function SendDirtyFilter();// 0x206ccd8
	function ReportBattleChat();// 0x206ccd8
	function OnInviteNextBattle();// 0x1708cf4
	function OnFilterFinish();// 0x206ccd8
	function NotifyFriendReplyInvite();// 0x206ccd8
	function NotifyFriendInvite();// 0x206ccd8
	function NotifyFriendChat();// 0x206ccd8
	function LoadBankAndPlay();// 0x1708bb4
	function InviteNextBattleReply();// 0x1708a28
	function FindTextIDByAudioID();// 0x206ccd8
	function CloseChatHistoryList();// 0x206ccd8
	function ClientReceiveMsg();// 0x17088cc
	function AddQuickAudio();// 0x1708810
	function AddOneMsgToUI1();// 0x206ccd8
	function AddFriendChat();// 0x1708438

--------------------------------
Class: PickupManagerComponent.ActorComponent.Object
	float CheckPickUpInterval;//[Offset: 0xbc , Size: 4]
	float PickUpZLimit;//[Offset: 0xc0 , Size: 4]
	bool bApplyVisibleTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	FindPutDownPointSearchRadiusGroupArray(StructProperty)[] FindPutDownPointSearchRadiusGroupArray;//[Offset: 0xc8 , Size: 12]
	int FindPutDownPointCircleSplitNum;//[Offset: 0xd4 , Size: 4]
	float FindPutDownPointZThreshold;//[Offset: 0xd8 , Size: 4]
	float FindPutDownPointZTraceOffset;//[Offset: 0xdc , Size: 4]
	Vector2D RegionXRange;//[Offset: 0xe0 , Size: 8]
	Vector2D RegionYRange;//[Offset: 0xe8 , Size: 8]
	bool bDrawDebugSearchLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	bool bDrawDebugSearchedPutDownPointsSphere;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	Vector DebugSearchedPutDownPointsBoxExtent;//[Offset: 0xf4 , Size: 12]
	float DebugSearchedPutDownPointsSphereRadius;//[Offset: 0x100 , Size: 4]
	float DebugSearchedPutDownPointsPointSize;//[Offset: 0x104 , Size: 4]
	float DrawTime;//[Offset: 0x108 , Size: 4]
	bool bDebugGetLocWithOutClamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	Actor* CacheRepActorForGetRandomLoc;//[Offset: 0x110 , Size: 4]
	PickupAvailableActorPool(WeakObjectProperty)[] PickupAvailableActorPool;//[Offset: 0x114 , Size: 12]
	ConfirmedPickupActorPool(ObjectProperty)[] ConfirmedPickupActorPool;//[Offset: 0x120 , Size: 12]
	function ServerPutDownTargetWithLocation();// 0x1794460
	function ServerPutDownTarget();// 0x17943ac
	function ServerPickUpTarget();// 0x1794268
	function PutDownTargetWithLocation();// 0x17941a8
	function PutDownTarget();// 0x1794130
	function PickUpTarget();// 0x1794030
	function NotifyMissPickupAvailableActor();// 0x1793fb8
	function NotifyMeetPickupAvailableActor();// 0x1793f40
	function GetRandomPutDownLocation();// 0x1793eb0
	function GetConfirmedPickupAvailableActors();// 0x1793da4
	function ControlClientPutDownTargetWithLocation();// 0x1793ca0
	function ControlClientPutDownTarget();// 0x1793bec
	function ControlClientPickUpTarget();// 0x1793af0
	function ClampWorldLocation();// 0x1793a6c

--------------------------------
Class: GuideComponent.ActorComponent.Object
	WidgetList(StructProperty)[] WidgetList;//[Offset: 0xbc , Size: 12]
	Widget* MaskWidget;//[Offset: 0xc8 , Size: 8]
	function SetMaskWidgetOnTop();// 0x174aaf8
	function CreateGuideUI();// 0x206ccd8

--------------------------------
Class: QuickSignComponent.ActorComponent.Object
	delegate OnAddSignMarkDelegate;//[Offset: 0xbc , Size: 12]
	delegate OnDelSignMarkDelegate;//[Offset: 0xc8 , Size: 12]
	bool IsBlockWhomInVoiceBlackList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	int TextID_OutRange;//[Offset: 0xd8 , Size: 4]
	FString PreFix_Command;//[Offset: 0xdc , Size: 12]
	FString PreFix_Command_Res;//[Offset: 0xe8 , Size: 12]
	FString PreFix_Mark;//[Offset: 0xf4 , Size: 12]
	int MaxTraceDist;//[Offset: 0x100 , Size: 4]
	int ItemTraceDist;//[Offset: 0x104 , Size: 4]
	int MarkMutualExclusionDist;//[Offset: 0x108 , Size: 4]
	PickupManagerComponent* PickupMgrComp;//[Offset: 0x10c , Size: 4]
	<CommandTypeIDMap_Key(IntProperty) , CommandTypeIDMap(StrProperty)> CommandTypeIDMap;//[Offset: 0x110 , Size: 60]
	<MarkNameClassMap_Key(StrProperty) , MarkNameClassMap(ClassProperty)> MarkNameClassMap;//[Offset: 0x14c , Size: 60]
	<MarkInfoMap_Key(StrProperty) , MarkInfoMap(StructProperty)> MarkInfoMap;//[Offset: 0x188 , Size: 60]
	<MarkLifeTimeMap_Key(StrProperty) , MarkLifeTimeMap(FloatProperty)> MarkLifeTimeMap;//[Offset: 0x1c4 , Size: 60]
	<MarkTypeArrayMap_Key(StrProperty) , MarkTypeArrayMap(StructProperty)> MarkTypeArrayMap;//[Offset: 0x200 , Size: 60]
	<MsgIDActorNetGUIDMap_Key(StrProperty) , MsgIDActorNetGUIDMap(IntProperty)> MsgIDActorNetGUIDMap;//[Offset: 0x23c , Size: 60]
	ActorNetGUIDTrashArray(IntProperty)[] ActorNetGUIDTrashArray;//[Offset: 0x278 , Size: 12]
	TempIDArray(StrProperty)[] TempIDArray;//[Offset: 0x284 , Size: 12]
	<ConfigKeyToTextID_Key(StrProperty) , ConfigKeyToTextID(IntProperty)> ConfigKeyToTextID;//[Offset: 0x2d4 , Size: 60]
	function SwitchAndLoadBankAndPlay();// 0x17bdee0
	function ShowMsgTipsVoice();// 0x206ccd8
	function ServerSendMsg();// 0x17bdda8
	function ServerDelMsg();// 0x17bdcb4
	function RemoveActorMask();// 0x17bdc00
	function OperMark();// 0x17bdb44
	function MakeQuickMark_PickupActor();// 0x17bdacc
	function MakeQuickMark();// 0x17bdab8
	function MakeQuickCommand();// 0x17bda40
	function IsSelfMark();// 0x17bd97c
	function GenerateMarkInfo();// 0x206ccd8
	function DelMarkFromPool();// 0x17bd8c0
	function DealWithNewMsg();// 0x17bd75c
	function ClientReceiveMsg();// 0x17bd650
	function ClientDelMsg();// 0x17bd58c
	function AnalysisConfigKeyClass();// 0x17bd44c
	function AddMarkToPool();// 0x17bd37c
	function AddActorMask();// 0x17bd2c8

--------------------------------
Class: BaseTaskComponent.ActorComponent.Object
	STExtraPlayerController* OwningPC;//[Offset: 0xbc , Size: 4]
	FString OwningPlayerName;//[Offset: 0xc0 , Size: 12]
	TaskTriggerObjects(ObjectProperty)[] TaskTriggerObjects;//[Offset: 0xcc , Size: 12]
	<TriggerEvents_Key(StrProperty) , TriggerEvents(ObjectProperty)> TriggerEvents;//[Offset: 0xd8 , Size: 60]
	function RetrieveTaskAreaType();// 0x16df220
	function RetrieveTaskAreaList();// 0x16df114
	function RetrieveLandLocType();// 0x16defb4
	function ReportTaskAndSpecialCollection();// 0x16deeac
	function RegisterEvent();// 0x16ded9c
	function IsTriggerActive();// 0x16ded1c
	function IsSpecialPickItem();// 0x16dec9c
	function IsInSpecifiedArea();// 0x16de8b4
	function HandlePlayerPickupItem();// 0x16de7b4
	function HandlePlayerKilling();// 0x16de7a0
	function HandlePlayerDropItem();// 0x16de6a0
	function HandlePlayerDoEmote();// 0x16de628
	function HandleInitTaskData();// 0x16de440
	function HandleInitCollectionData();// 0x16de340
	function HandleDeathBoxSpawned();// 0x16de260
	function GetTriggerObject();// 0x16de1d4
	function GetTaskSubTypeFromDataTable();// 0x206ccd8
	function GetTaskParamsFromDataTable();// 0x206ccd8
	function GetTaskParams();// 0x16de064
	function GetTaskClassPath();// 0x16ddf10
	function GetTaskAreaListFromDataTable();// 0x206ccd8
	function GetTaskAreaIDFromDataTable();// 0x206ccd8
	function GetOwningPlayerName();// 0x16dde50
	function GetMapName();// 0x16ddd90
	function GetLandLocIDFromDataTable();// 0x206ccd8
	function FireEvent();// 0x16ddba4
	function DeactiveCondition();// 0x16ddae0
	function CreateTriggerObject();// 0x16dda14
	function AddTrigger();// 0x16dd7d4
	function AddEventToTrigger();// 0x16dd6cc
	function ActiveCondition();// 0x16dd608

--------------------------------
Class: ObservedData
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PicUrl;//[Offset: 0xc , Size: 12]
	bool ShowPicUrl;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	int TeamID;//[Offset: 0x1c , Size: 4]
	uint64 UID;//[Offset: 0x20 , Size: 8]
	PosList(StructProperty)[] PosList;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: OwnerClientCreateWeaponCache
	IDList(StructProperty)[] IDList;//[Offset: 0x0 , Size: 12]
	uint32 CharacterGUID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: KillerTracker.Actor.Object
	Actor* TargetKiller;//[Offset: 0x2c4 , Size: 4]
	Rotator TargetKillerRotation;//[Offset: 0x2c8 , Size: 12]
	Actor* ReturnActor;//[Offset: 0x2d4 , Size: 4]
	SpringArmComponent* CameraSpringArm;//[Offset: 0x2f8 , Size: 4]
	CameraComponent* ObservingCamera;//[Offset: 0x2fc , Size: 4]
	delegate OnTrackingEnd;//[Offset: 0x300 , Size: 12]
	float MinMovingSpeed;//[Offset: 0x30c , Size: 4]
	float MaxMovingTime;//[Offset: 0x310 , Size: 4]
	float ObservingTime;//[Offset: 0x314 , Size: 4]
	float TrackingDelay;//[Offset: 0x318 , Size: 4]
	float ExpectedMinObservingDistance;//[Offset: 0x31c , Size: 4]
	float CameraAdjustSpeed;//[Offset: 0x320 , Size: 4]
	float TrackerToTargetMaxTime;//[Offset: 0x328 , Size: 4]
	bool bAdjustTargetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	float MinRotatingngSpeed;//[Offset: 0x330 , Size: 4]
	function StartTrackingKiller();// 0x175ad2c
	function ForceEnd();// 0x175ad18

--------------------------------
Class: VehicleUserComponent.ActorComponent.Object
	bool bGameModeHasMobs;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	ItemDefineID LastUsedItemDefineID;//[Offset: 0xc0 , Size: 24]
	float LastFinishCD;//[Offset: 0xd8 , Size: 4]
	STExtraVehicleBase* Vehicle;//[Offset: 0xdc , Size: 4]
	STExtraVehicleBase* UnmannedVehicle;//[Offset: 0xe0 , Size: 4]
	STExtraPlayerCharacter* Character;//[Offset: 0xe4 , Size: 4]
	enum VehicleUserState;//[Offset: 0xe8 , Size: 1]
	STExtraVehicleBase* LastDriveVehicle;//[Offset: 0xec , Size: 4]
	float UpdateVehicleSpeedGUIInterval;//[Offset: 0xf0 , Size: 4]
	float UpdateClosestVehicleInterval;//[Offset: 0xf8 , Size: 4]
	OverlappingVehicles(ObjectProperty)[] OverlappingVehicles;//[Offset: 0x104 , Size: 12]
	CullWaterRangeVehicles(ObjectProperty)[] CullWaterRangeVehicles;//[Offset: 0x110 , Size: 12]
	STExtraVehicleBase* CurrentClosestVehicle;//[Offset: 0x11c , Size: 4]
	bool EnableVehicleShoot;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	float MaxAllowedExitSpeedDiff;//[Offset: 0x134 , Size: 4]
	bool bRotateToViewOnExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x144 , Size: 1]
	float NoFuelTipsDisplayCooldown;//[Offset: 0x148 , Size: 4]
	bool bExitVehicleCheckEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	float ExitVehicleCheckInterval;//[Offset: 0x158 , Size: 4]
	float CurrentMoveForwardRate;//[Offset: 0x168 , Size: 4]
	float CurrentMoveRightRate;//[Offset: 0x16c , Size: 4]
	float CurrentMoveUpRate;//[Offset: 0x170 , Size: 4]
	float MaxCanAimAngle;//[Offset: 0x174 , Size: 4]
	bool bPlayMusicEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x178 , Size: 1]
	bool EnableTestPawnSimulate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x179 , Size: 1]
	float BaseVehicleLockTime;//[Offset: 0x17c , Size: 4]
	float BaseVehicleServerAuTime;//[Offset: 0x180 , Size: 4]
	float MaxVehicleLockTime;//[Offset: 0x184 , Size: 4]
	float MaxVehicleServerAuTime;//[Offset: 0x188 , Size: 4]
	bool UAVFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18c , Size: 1]
	float UAVSpeedPercent;//[Offset: 0x190 , Size: 4]
	bool bTestModeOn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c , Size: 1]
	STExtraVehicleBase* CullWaterVehicle;//[Offset: 0x1a0 , Size: 4]
	STExtraVehicleBase* LastCullWaterVehicle;//[Offset: 0x1a4 , Size: 4]
	Rotator InputExtraRot;//[Offset: 0x1a8 , Size: 12]
	Rotator CharRotVsVehiRot;//[Offset: 0x1b4 , Size: 12]
	float ResetInputExtraRotTime;//[Offset: 0x1c4 , Size: 4]
	bool isHelicopterFreeCamera;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1cd , Size: 1]
	float DelayLeanOutTimeAfterChangeSeat;//[Offset: 0x1fc , Size: 4]
	float DelayScopeInTimeAfterChangeSeat;//[Offset: 0x204 , Size: 4]
	float ControllerYawClampMin;//[Offset: 0x20c , Size: 4]
	float ControllerYawClampMax;//[Offset: 0x210 , Size: 4]
	enum CurrentSeatType;//[Offset: 0x214 , Size: 1]
	STExtraVehicleBase* BornLandSpawnedVehicle;//[Offset: 0x238 , Size: 4]
	float ForbidNightVehicleTipsCooldown;//[Offset: 0x23c , Size: 4]
	bool bBornInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x249 , Size: 1]
	bool bIgnoreVehicleLookInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24b , Size: 1]
	delegate OnReceiveReqQuickSwitchSeat;//[Offset: 0x24c , Size: 12]
	delegate OnReceiveReqDriverLostSwitchSeat;//[Offset: 0x258 , Size: 12]
	function UpdatePassengerViewPitchLimit();// 0x190a3bc
	function TurnVehicle();// 0x190a344
	function TryUseHorn();// 0x190a2c4
	function TryShutDownUnmannedVehicle();// 0x190a2b0
	function TryPauseUnmannedVehicle();// 0x190a29c
	function TryLeanOutOrIn();// 0x190a214
	function TryLaunchUnmannedVehicle();// 0x190a19c
	function TryLaunchCurrentUnmannedVehicle();// 0x190a17c
	function TryExitVehicle();// 0x190a168
	function TryEnterVehicle();// 0x190a0ac
	function TryChangeVehicleSeat();// 0x190a098
	function TryChangeToVehicleSeat();// 0x190a018
	function TryChangeFreeFireSeatAndScopeIn();// 0x1909ff0
	function TryChangeFreeFireSeatAndLeanOut();// 0x1909fc8
	function TickVehicleCullWater();// 0x206ccd8
	function TestForceTurnVehicle();// 0x1909f04
	function SetVehicleUserState();// 0x1909e90
	function SetVehicleIgnoreLookInput();// 0x1909e10
	function SetIsAutoMoveForward();// 0x1909d90
	function SetBrake();// 0x1909d18
	function SetBoosting();// 0x1909c98
	function SetAirControlF();// 0x1909c20
	function SetAirControlB();// 0x1909ba8
	function ServerReqQuickSwitchSeat();// 0x1909af4
	function ServerForceEnterVehicle();// 0x1909a30
	function ServerDriverLostReqSwitchSeat();// 0x19099b8
	function ServerAgreeQuickSwitchSeat();// 0x19098f0
	function Server_JoystickCenterClickHandler();// 0x1909894
	function SendToServerUnmannedVehicleUse();// 0x1909838
	function SendToServerUnmannedVehicleRecall();// 0x19097dc
	function SendToServerUnmannedVehiclePause();// 0x1909780
	function RspShutDownUnmannedVehicle();// 0x19096f8
	function RspPauseUnmannedVehicle();// 0x190962c
	function RspLeanOut();// 0x19095a4
	function RspLaunchUnmannedVehicle();// 0x19094d8
	function RspExitVehicle();// 0x1909450
	function RspExchangeVehicleSeat();// 0x1909344
	function RspEnterVehicle();// 0x19091e8
	function RspChangeVehicleSeat();// 0x1909034
	function ReqSyncViewTargetLastDriveInfo();// 0x1908f38
	function ReqShutDownUnmannedVehicle();// 0x1908edc
	function ReqQuickSwitchSeat();// 0x1908ec8
	function ReqPauseUnmannedVehicle();// 0x1908e6c
	function ReqMarkLastestVehicle();// 0x1908d70
	function ReqLeanOut();// 0x1908ca8
	function ReqLaunchUnmannedVehicle();// 0x1908bf4
	function ReqExitVehicle();// 0x1908b48
	function ReqExchangeVehicleSeat();// 0x1908aec
	function ReqEraseLastDriveVehicle();// 0x1908a90
	function ReqEnterVehicle();// 0x1908994
	function ReqChangeVehicleSeat();// 0x19088e0
	function ReqChangeFreeFireSeatAndScopeIn();// 0x1908818
	function ReqChangeFreeFireSeatAndLeanOut();// 0x1908750
	function ReqAcceptExchangeVehicleSeat();// 0x1908688
	function OnUnmannedVehicleDriverDead();// 0x1908610
	function OnUnmannedVehicle_Standby_Reconnet();// 0x206ccd8
	function OnShutDownUnmannedVehicleCompleted();// 0x206ccd8
	function OnServerReconnected();// 0x19085fc
	function OnScopeInAfterChangeSeat();// 0x19085e8
	function OnRep_DefineID();// 0x19085d4
	function OnRep_BornInVehicle();// 0x19085c0
	function OnReceiveReqQuickSwitchSeatDelegate__DelegateSignature();// 0x206ccd8
	function OnReceiveReqDriverLostSwitchSeatDelegate__DelegateSignature();// 0x206ccd8
	function OnPauseUnmannedVehicleCompleted();// 0x206ccd8
	function OnLeanOutAfterChangeSeat();// 0x19085ac
	function OnLaunchUnmannedVehicleCompleted();// 0x206ccd8
	function OnInputAxisMoveRight();// 0x206ccd8
	function OnInputAxisMoveForward();// 0x206ccd8
	function OnExitVehicleCompleted();// 0x206ccd8
	function OnEnterVehicleCompleted();// 0x206ccd8
	function OnCurrrentClosestVehicleChanged();// 0x206ccd8
	function OnClientReconnected();// 0x1908598
	function OnChangeVehicleSeatCompleted();// 0x206ccd8
	function NotifyLeaveVehicleFailed();// 0x190857c
	function MoveVehicleUp();// 0x1908504
	function MoveVehicleRight();// 0x190848c
	function MoveVehicleForward();// 0x1908414
	function MaintenanceVehicle();// 0x1908350
	function IsControllingUnmannedVehicle();// 0x1908328
	function IgnoreVehicleLookInput();// 0x1908300
	function HandleClientReconnecting();// 0x19082d8
	function GetVehicleUserState();// 0x19082bc
	function GetCurrentClosestVehicle();// 0x19082a0
	function FobidRspEnterVehicle();// 0x1908144
	function DoExitVehicle();// 0x1908074
	function ClientReqQuickSwitchSeat();// 0x1907fc0
	function ClientDriverLostReqSwitchSeat();// 0x1698eb0
	function Client_UnbindTouchEvents();// 0x1907f64
	function Client_ShouldBindTouchEvents();// 0x1907f08
	function CheckCanLeanOutVehicle();// 0x1907ee0
	function CanVehicleShoot();// 0x1907e60
	function CanUseVehicleHorn();// 0x1907e38
	function AgreeQuickSwitchSeat();// 0x1907db8
	function AddVehicleFuel();// 0x1907d40

--------------------------------
Class: StateMachineComponent.ActorComponent.Object
	AllStateList(ObjectProperty)[] AllStateList;//[Offset: 0xbc , Size: 12]
	enum StartStateType;//[Offset: 0xc8 , Size: 1]
	enum FinishStateType;//[Offset: 0xc9 , Size: 1]
	State* CurrentState;//[Offset: 0xcc , Size: 4]
	enum CurrentStateType;//[Offset: 0xd0 , Size: 1]
	enum LastStateType;//[Offset: 0xd1 , Size: 1]

--------------------------------
Class: State.Object

--------------------------------
Class: MonsterTreasureBox.UAEHouseActor.UAENetActor.Actor.Object
	DamageableGameObjectTypeList(EnumProperty)[] DamageableGameObjectTypeList;//[Offset: 0x3d0 , Size: 12]
	FString TreasureBoxName;//[Offset: 0x3dc , Size: 12]
	float TotalHP;//[Offset: 0x3e8 , Size: 4]
	float BrokenHPPropotion;//[Offset: 0x3ec , Size: 4]
	float TotalTime;//[Offset: 0x3f0 , Size: 4]
	int boxId;//[Offset: 0x3f4 , Size: 4]
	Vector GroupLoc;//[Offset: 0x3f8 , Size: 12]
	float DestroyTime;//[Offset: 0x404 , Size: 4]
	float OperationalDistance;//[Offset: 0x408 , Size: 4]
	float VisibleHUDlDistance;//[Offset: 0x40c , Size: 4]
	ParticleSystem* StandbyEffect;//[Offset: 0x410 , Size: 4]
	Transform StandbyEffectTrans;//[Offset: 0x420 , Size: 48]
	ParticleSystem* OpenningEffect;//[Offset: 0x450 , Size: 4]
	Transform OpenningEffectTrans;//[Offset: 0x460 , Size: 48]
	ParticleSystem* OpennedEffect;//[Offset: 0x490 , Size: 4]
	Transform OpennedEffectTrans;//[Offset: 0x4a0 , Size: 48]
	ParticleSystem* BrokenEffect1;//[Offset: 0x4d0 , Size: 4]
	Transform BrokenEffect1Trans;//[Offset: 0x4e0 , Size: 48]
	ParticleSystem* BrokenEffect2;//[Offset: 0x510 , Size: 4]
	Transform BrokenEffect2Trans;//[Offset: 0x520 , Size: 48]
	MaterialInterface* BlackMat;//[Offset: 0x550 , Size: 4]
	ProduceDropItemComponent* ProduceComponent;//[Offset: 0x554 , Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x558 , Size: 4]
	InstigatorList(SoftClassProperty)[] InstigatorList;//[Offset: 0x55c , Size: 12]
	DamageCauserList(SoftClassProperty)[] DamageCauserList;//[Offset: 0x568 , Size: 12]
	enum PickUpBoxType;//[Offset: 0x574 , Size: 1]
	bool bIconInstanceID;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575 , Size: 1]
	int IconID;//[Offset: 0x578 , Size: 4]
	bool bHideLightColumn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5cc , Size: 1]
	bool bAutoActiveBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ce , Size: 1]
	int ClientAutoActiveBoxCD;//[Offset: 0x5d0 , Size: 4]
	int AutoActiveBoxCD;//[Offset: 0x5d4 , Size: 4]
	int HideLightColumn;//[Offset: 0x5d8 , Size: 4]
	float GoUpAnimationWait;//[Offset: 0x5dc , Size: 4]
	float GoUpAnimationSpeed;//[Offset: 0x5e0 , Size: 4]
	float GoUpAnimationHight;//[Offset: 0x5e4 , Size: 4]
	float GoUpAnimationYawSpeed;//[Offset: 0x5ec , Size: 4]
	float GoUpAnimationYawTotal;//[Offset: 0x5f0 , Size: 4]
	Vector BoxCoverLoc;//[Offset: 0x5f4 , Size: 12]
	Rotator BoxCoverRot;//[Offset: 0x600 , Size: 12]
	bool GoUpAnimationAkAudioStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60c , Size: 1]
	SkeletalMeshComponent* NeedAnimationBoxMesh;//[Offset: 0x610 , Size: 4]
	BoxComponent* NeedAnimationBoxCover;//[Offset: 0x614 , Size: 4]
	float StartedTime;//[Offset: 0x630 , Size: 4]
	enum CurState;//[Offset: 0x634 , Size: 1]
	int StartedTeamId;//[Offset: 0x63c , Size: 4]
	float CountDownTime;//[Offset: 0x640 , Size: 4]
	float StartDestroytime;//[Offset: 0x644 , Size: 4]
	int MonsterBoxId;//[Offset: 0x648 , Size: 4]
	int MonsterBoxTempleteId;//[Offset: 0x64c , Size: 4]
	<DataStrs_Key(StrProperty) , DataStrs(StrProperty)> DataStrs;//[Offset: 0x650 , Size: 60]
	ParticleSystemComponent* StandbyEffectComp;//[Offset: 0x690 , Size: 4]
	ParticleSystemComponent* OpenningEffectComp;//[Offset: 0x694 , Size: 4]
	ParticleSystemComponent* OpenedEffectComp;//[Offset: 0x698 , Size: 4]
	ParticleSystemComponent* BrokenEffect1Comp;//[Offset: 0x69c , Size: 4]
	ParticleSystemComponent* BrokenEffect2Comp;//[Offset: 0x6a0 , Size: 4]
	MaterialInstanceDynamic* DynamicMat;//[Offset: 0x6a4 , Size: 4]
	Object* TriggerActionHost;//[Offset: 0x6d8 , Size: 4]
	function ShowMonsterTreasureBoxSkelemesh();// 0x206ccd8
	function ShowMonsterTreasureBox();// 0x177428c
	function SetClientClientAutoActiveBoxCD();// 0x1774214
	function OnSomeonePickItem();// 0x177419c
	function OnRep_HideLightColumn();// 0x1774188
	function OnRep_CurState();// 0x1774174
	function OnBoxEmpty();// 0x1774160
	function IsShowIcon();// 0x1774138
	function GetMonsterBoxId();// 0x1774110
	function GetDamageableGameObjectType();// 0x1774048
	function GetCurState();// 0x1774020
	function GetClientClientAutoActiveBoxCD();// 0x1773ff8
	function DeActiveMonsterTreasureBox();// 0x1773fe4
	function CanBeDamaged();// 0x1773fbc
	function BPOnStopMonsterTreasureBox();// 0x206ccd8
	function BPOnStartMonsterTreasureBox();// 0x206ccd8
	function BPOnHideLightColumn();// 0x206ccd8
	function BPOnCountdownEnd();// 0x206ccd8
	function BPOnBreakMonsterTreasureBox();// 0x206ccd8
	function BPOnAnimationStop();// 0x206ccd8
	function BPOnAnimationAkAudioStop();// 0x206ccd8
	function BPOnAnimationAkAudioStart();// 0x206ccd8
	function BPGetTreasureBoxName();// 0x206ccd8

--------------------------------
Class: UAEHouseActor.UAENetActor.Actor.Object
	int iRegionHouse;//[Offset: 0x2d0 , Size: 4]
	float WindowHideDistanceSquared;//[Offset: 0x2d4 , Size: 4]
	float WindowLoadDistanceSquared;//[Offset: 0x2d8 , Size: 4]
	float WindowLoadDistanceSquaredOnVeryLowDevice;//[Offset: 0x2dc , Size: 4]
	float WindowLoadDistanceSquaredOnServer;//[Offset: 0x2e0 , Size: 4]
	WindowList(StructProperty)[] WindowList;//[Offset: 0x2e4 , Size: 12]
	<WindowComponents_Key(IntProperty) , WindowComponents(ObjectProperty)> WindowComponents;//[Offset: 0x2f0 , Size: 60]
	bool bEnableWindow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x32c , Size: 1]
	bool SerializeDataUse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x37c , Size: 1]
	SerializeData(ByteProperty)[] SerializeData;//[Offset: 0x380 , Size: 12]
	function OnRep_WindowList();// 0x1c8f478
	function BroadcastWindowRepDataUpdated();// 0x1c8f250

--------------------------------
Class: ProduceDropItemComponent.ActorComponent.Object
	FString DropItemCfgTableName;//[Offset: 0xc0 , Size: 12]
	int ProduceID;//[Offset: 0xcc , Size: 4]
	float DropGroundItemLifeSpan;//[Offset: 0xd0 , Size: 4]
	bool IsDropped;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd4 , Size: 1]
	GenerateActorList(ObjectProperty)[] GenerateActorList;//[Offset: 0xd8 , Size: 12]
	int GridStep;//[Offset: 0xe4 , Size: 4]
	STExtraCharacter* OwnerPawn;//[Offset: 0xe8 , Size: 4]
	FString DropItemRuleTableName;//[Offset: 0xec , Size: 12]
	bool IsDropSuc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	DropPlanIDList(IntProperty)[] DropPlanIDList;//[Offset: 0xfc , Size: 12]
	NightDropPlanIDList(IntProperty)[] NightDropPlanIDList;//[Offset: 0x108 , Size: 12]
	DayDropPlanIDList(IntProperty)[] DayDropPlanIDList;//[Offset: 0x114 , Size: 12]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x120 , Size: 4]
	function StartDrop();// 0x17aaacc
	function SetNightDropPlanIDList();// 0x17aa968
	function SetDropPlanIDList();// 0x17aa89c
	function SetDropItemLifeSpan();// 0x17aa824
	function PickItemByUnionRandom();// 0x17aa72c
	function PickItemByIndependentRandom();// 0x17aa6ac
	function OnOwnerPawnDead();// 0x17aa4b0
	function NineGridDrop();// 0x17aa340
	function GetWrapperActorPath();// 0x1759058
	function GetWrapperActorClass();// 0x1758fc0
	function GetGenerateWrapperList();// 0x17aa224
	function GetDropItemCfgList();// 0x17aa0c8
	function GenerateDropItemByOwner();// 0x17aa01c
	function GenerateDropItemByCfg();// 0x17a9ee8
	function DropToTreasureBox();// 0x17a9c34
	function DropToTombBox();// 0x17a9b38
	function DropToTarget();// 0x17a9a20
	function DropToGround();// 0x17a9810
	function DropOutProps();// 0x17a96d0
	function CalcDropItemListByDropRuleByCfg();// 0x17a95a0
	function CalcDropItemListByDropRule();// 0x17a94a4

--------------------------------
Class: AvatarCapture.Actor.Object
	SkeletalMeshComponent* DisplayMesh;//[Offset: 0x2c4 , Size: 4]
	MeshComponent* WeaponMesh;//[Offset: 0x2c8 , Size: 4]
	STExtraPlayerController* ASTPC;//[Offset: 0x2cc , Size: 4]
	<WeaponAnimList_Key(IntProperty) , WeaponAnimList(StructProperty)> WeaponAnimList;//[Offset: 0x2d0 , Size: 60]
	class AnimInstance* animBP;//[Offset: 0x30c , Size: 4]
	delegate OnWeaponBlendAnim;//[Offset: 0x310 , Size: 12]
	int CurUseWeaponSkinID;//[Offset: 0x31c , Size: 4]
	bool bIsNewViewTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x320 , Size: 1]
	<slotToSocket_Key(IntProperty) , slotToSocket(NameProperty)> slotToSocket;//[Offset: 0x324 , Size: 60]
	FName OBPlayerName;//[Offset: 0x360 , Size: 8]
	STExtraCharacter* OBPlayerPawn;//[Offset: 0x368 , Size: 4]
	CharacterAvatarComponent2* OBAvatar;//[Offset: 0x36c , Size: 4]
	WeaponManagerComponent* OBWeaponMgr;//[Offset: 0x370 , Size: 4]
	StMeshList(ObjectProperty)[] StMeshList;//[Offset: 0x374 , Size: 12]
	SkMeshList(ObjectProperty)[] SkMeshList;//[Offset: 0x380 , Size: 12]
	SkeletalMeshComponent* PendantComponent;//[Offset: 0x38c , Size: 4]
	HideBoneNames(NameProperty)[] HideBoneNames;//[Offset: 0x390 , Size: 12]
	SkMeshResList(ObjectProperty)[] SkMeshResList;//[Offset: 0x39c , Size: 12]
	WeaponAttachmentList(ObjectProperty)[] WeaponAttachmentList;//[Offset: 0x3a8 , Size: 12]
	SceneCaptureComponent2D* Capture2D;//[Offset: 0x3b4 , Size: 4]
	DirectionalLightComponent* DirectionalLight;//[Offset: 0x3b8 , Size: 4]
	bool IsCaptureEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3bc , Size: 1]
	function SetOBTarget();// 0x16b1ee4
	function SetEnable();// 0x16b1e64
	function ResetBackpackPendant();// 0x16b1dec
	function RenderCaptureScene();// 0x16b1dd8
	function RefreshAvatar();// 0x16b1dc4
	function OnWeaponSystemDataChanged();// 0x16b1d1c
	function OnWeaponAvatarEquipped();// 0x16b1c4c
	function OnSimulatedWeaponChanged();// 0x16b1c38
	function OnAvatarEquipped();// 0x16b1b2c
	function OnAvatarAllMeshLoaded();// 0x16b1b18
	function MergeMesh();// 0x16b19fc
	function GetWeaponSkinIDs();// 0x16b193c
	function GetOBAvatarComponent();// 0x16b1914
	function GetAnimSeqAsset();// 0x16b17a0
	function EquipWeapon();// 0x16b178c
	function EquipPlayerAvatar();// 0x16b1714
	function DisplayAvatar();// 0x16b164c
	function CreateWeapon();// 0x16b15cc
	function BluePrintSetEnable();// 0x206ccd8
	function ApplyAnimation();// 0x16b15b8

--------------------------------
Class: ClientSettingBaseOnGameMode
	bool bEnableBulletImpactFXTargetCullingByQualityLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	BulletImpactFXTargetCullingByQualityLeveConfigList(StructProperty)[] BulletImpactFXTargetCullingByQualityLeveConfigList;//[Offset: 0x4 , Size: 12]
	bool bBulletImpactFXAttachToTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bSimulateClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool bAutonomousClientEnableOBBulletTrackEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	DisableBulletTrackDeviceQualityLevelConfigList(IntProperty)[] DisableBulletTrackDeviceQualityLevelConfigList;//[Offset: 0x14 , Size: 12]
	DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList(IntProperty)[] DisableSimulateClientBulletImpactFXDeviceQualityLevelConfigList;//[Offset: 0x20 , Size: 12]
	DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList(IntProperty)[] DisableSimulateClientMuzzleFXDeviceQualityLevelConfigList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: IdeaDecalManager.Actor.Object
	<DecalMaterialsLookupTable_Key(StructProperty) , DecalMaterialsLookupTable(ObjectProperty)> DecalMaterialsLookupTable;//[Offset: 0x2c4 , Size: 60]
	IgnoreActorClass(ClassProperty)[] IgnoreActorClass;//[Offset: 0x300 , Size: 12]
	DecalComponents(ObjectProperty)[] DecalComponents;//[Offset: 0x348 , Size: 12]
	RuntimeMeshComponent* Decal;//[Offset: 0x5f0 , Size: 4]
	function RemoveDecalOnTimer();// 0x1752a64

--------------------------------
Class: SupplySpot.Actor.Object
	int TotalSupplyTimes;//[Offset: 0x2c4 , Size: 4]
	int RemainSupplyTimes;//[Offset: 0x2c8 , Size: 4]
	int SupplyBulletNum;//[Offset: 0x2cc , Size: 4]
	float ValidDistance;//[Offset: 0x2d0 , Size: 4]
	delegate SupplySpotTimesChange;//[Offset: 0x2d4 , Size: 12]
	function ReqUseSupplySpot();// 0x16a817c

--------------------------------
Class: EnhancerSpot.Actor.Object
	SkillIdConfig(StructProperty)[] SkillIdConfig;//[Offset: 0x2c4 , Size: 12]
	int AddMonsterExpNum;//[Offset: 0x2d0 , Size: 4]
	int RemainEnhancerTimesConfig;//[Offset: 0x2d4 , Size: 4]
	int RemainEnhancerTimes;//[Offset: 0x2d8 , Size: 4]
	int UseSuccessTipsId;//[Offset: 0x2dc , Size: 4]
	float ValidDistance;//[Offset: 0x2e0 , Size: 4]
	float SelfResetTime;//[Offset: 0x2e4 , Size: 4]
	bool IsAutoResetSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e8 , Size: 1]
	enum EnhancerState;//[Offset: 0x2e9 , Size: 1]
	float ReadyTime;//[Offset: 0x2ec , Size: 4]
	float FixReadyTime;//[Offset: 0x2f0 , Size: 4]
	delegate EnhancerSpotTimesChange;//[Offset: 0x2f4 , Size: 12]
	function StateChangeDelegate();// 0x16fae60
	function SetReadyTime();// 0x17233cc
	function SetEState();// 0x1723354
	function RPC_Broadcast_NotifyReadyTime();// 0x1723258
	function ResetTimes();// 0x1723244
	function ResetSelf();// 0x1723230
	function ReqUseEnhancerSpot();// 0x16ffa3c
	function ReadyTimeChangeDelegate();// 0x16a8160
	function OpenEffect();// 0x1723214
	function OnRep_StateChange();// 0x1723200
	function OnRep_ReadyTimeChange();// 0x17231ec
	function OnRep_FixReadyTimeChange();// 0x17231ec
	function GetSpotState();// 0x17231d0
	function DelayResetSelf();// 0x17231bc
	function CloseEffect();// 0x17231a0

--------------------------------
Class: PlayerRevivalComponent.ActorComponent.Object
	int RevivalCountDownTime;//[Offset: 0xbc , Size: 4]
	int GotoSpectatingTime;//[Offset: 0xc0 , Size: 4]
	int64 FinishRevivalTime;//[Offset: 0xc8 , Size: 8]
	int64 StartObserverTime;//[Offset: 0xd0 , Size: 8]
	STExtraPlayerController* OwningPC;//[Offset: 0xd8 , Size: 4]
	RevivalPointActor* CurServerRevivalPoint;//[Offset: 0xdc , Size: 8]
	GameBaseInfo GameBaseInfo;//[Offset: 0xe8 , Size: 104]
	DateTime BePickupTime;//[Offset: 0x150 , Size: 8]
	function TickRevival();// 0x179c918
	function SetRemainingRevivalTime();// 0x179c8a0
	function SetCaptureIDCardStatus();// 0x179c820
	function OnPlayerRevived();// 0x179c7a8
	function OnPlayerQuitSpectating();// 0x179c794
	function OnPlayerGotoSpectating();// 0x179c780
	function OnPlayerExitGame();// 0x179c76c
	function OnPlayerEscapeWhenGameEnd();// 0x179c6ec
	function LeaveRevivalState();// 0x179c674
	function IsInWaittingRevivalState();// 0x179c64c
	function GetRevivalCountDownTime();// 0x179c630
	function GetRemainingRevivalTime();// 0x179c608
	function GetCaptureIDCardStatus();// 0x179c5e0
	function FindPlayerUIDFromKey();// 0x179c560
	function EnterRevivalState();// 0x179c54c
	function CaptureIDCard();// 0x179c450
	function BePickupRevivalCard();// 0x179c354

--------------------------------
Class: RevivalPointActor.Actor.Object
	SceneComponent* DefaultRoot;//[Offset: 0x2c4 , Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x2c8 , Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x2cc , Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x2d0 , Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x2d4 , Size: 4]
	enum CurState;//[Offset: 0x2d8 , Size: 1]
	enum PreState;//[Offset: 0x2d9 , Size: 1]
	int RevivalTime;//[Offset: 0x2dc , Size: 4]
	int CurRevivalTime;//[Offset: 0x2e0 , Size: 4]
	bool CanBeShowSmoking;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4 , Size: 1]
	int OperationalDistance;//[Offset: 0x2e8 , Size: 4]
	<RevivalPointPS_Key(EnumProperty) , RevivalPointPS(ObjectProperty)> RevivalPointPS;//[Offset: 0x2ec , Size: 60]
	<RevivalPointSounds_Key(EnumProperty) , RevivalPointSounds(ObjectProperty)> RevivalPointSounds;//[Offset: 0x328 , Size: 60]
	AkAudioEvent* RevivalInterruptSound;//[Offset: 0x364 , Size: 4]
	int SmokingdisappearTime;//[Offset: 0x368 , Size: 4]
	int IconID;//[Offset: 0x36c , Size: 4]
	CurrentRevivingPlayers(UInt32Property)[] CurrentRevivingPlayers;//[Offset: 0x370 , Size: 12]
	STExtraPlayerController* CurRevivalPC;//[Offset: 0x37c , Size: 8]
	ParticleSystemComponent* DestoryStatePSCom;//[Offset: 0x398 , Size: 8]
	function StartRevival();// 0x17c298c
	function RevivalPlayers();// 0x17c290c
	function RecheckCurrentRevivingPlayers();// 0x17c28e4
	function OnRep_ShowSmoking();// 0x17c28d0
	function OnRep_RevivalPointState();// 0x17c2858
	function OnRep_CurrentRevivingPlayers();// 0x17c2844
	function IsPlayerRevivedCurrently();// 0x17c27c4
	function GiveUpRevivalPlayers();// 0x17c2744
	function DistanceChangedEvent();// 0x206ccd8

--------------------------------
Class: GameBaseInfo
	FString GameSvrId;//[Offset: 0x0 , Size: 12]
	FString GameAppID;//[Offset: 0xc , Size: 12]
	FString OpenID;//[Offset: 0x18 , Size: 12]
	uint16 AreaID;//[Offset: 0x24 , Size: 2]
	int8 PlatID;//[Offset: 0x26 , Size: 1]
	FString ZoneID;//[Offset: 0x28 , Size: 12]
	uint64 BattleID;//[Offset: 0x38 , Size: 8]
	FString UserName;//[Offset: 0x40 , Size: 12]
	uint64 RoleID;//[Offset: 0x50 , Size: 8]
	int8 RoleType;//[Offset: 0x58 , Size: 1]
	FString PicUrl;//[Offset: 0x5c , Size: 12]

--------------------------------
Class: FloatingTextComponent.ActorComponent.Object
	int MaxWidgetNum;//[Offset: 0xd0 , Size: 4]
	CurveFloat* OffsetXCurve;//[Offset: 0xd4 , Size: 4]
	CurveFloat* OffsetYCurve;//[Offset: 0xd8 , Size: 4]
	Vector RandomVector;//[Offset: 0xdc , Size: 12]
	float TextScale;//[Offset: 0xe8 , Size: 4]
	LinearColor NormalTextColor;//[Offset: 0xec , Size: 16]
	float HeadShotTextScale;//[Offset: 0xfc , Size: 4]
	LinearColor HeadShotTextColor;//[Offset: 0x100 , Size: 16]
	float BigDamageTextScale;//[Offset: 0x110 , Size: 4]
	float BigDamage;//[Offset: 0x114 , Size: 4]
	LinearColor BigDamageTextColor;//[Offset: 0x118 , Size: 16]
	float MaxWidgetRemianTime;//[Offset: 0x128 , Size: 4]
	int FloatTextZorder;//[Offset: 0x12c , Size: 4]
	bool bIgnoreZeorDamageSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x130 , Size: 1]
	IdleWidgetList(ObjectProperty)[] IdleWidgetList;//[Offset: 0x134 , Size: 12]
	ShowWidgetList(StructProperty)[] ShowWidgetList;//[Offset: 0x140 , Size: 12]
	RecycleTimeList(FloatProperty)[] RecycleTimeList;//[Offset: 0x14c , Size: 12]
	float RecycleTime;//[Offset: 0x158 , Size: 4]
	STExtraPlayerController* PC;//[Offset: 0x15c , Size: 4]
	function UpdateTextWidgetPos();// 0x172a264
	function ShowFloatingText();// 0x172a1d8
	function SetFloatingText();// 0x206ccd8
	function ReycleFloatingTextWidget();// 0x172a1c4
	function PlayFloatingTextAnim();// 0x172a0a4
	function OnFloatingDamageText();// 0x1729ec0
	function GetShowTextWidgetData();// 0x1729e18
	function ClientHandleFloatingTextArray();// 0x1729d24

--------------------------------
Class: WeatherConfigComponent.ActorComponent.Object
	WeatherInfo WeatherLevelInfo;//[Offset: 0xc0 , Size: 20]
	FString LastLoadedWeatherLevelName;//[Offset: 0xd4 , Size: 12]
	FString DefaultWeatherLevelName;//[Offset: 0xe0 , Size: 12]
	bool bLoadWeatherLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xec , Size: 1]
	bool bDefaulLevelLoaded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xed , Size: 1]
	function UnloadStreamLevel();// 0x1c9ec70
	function SyncWeatherLevelInfo();// 0x1c9ec5c
	function OnWeatherLevelChanged();// 0x206ccd8
	function OnUnLoadStreamLevelCompleted();// 0x1c9ec48
	function OnRep_WeatherSyncCount();// 0x1c9ec34
	function OnLoadStreamLevelCompleted();// 0x1c9ec20
	function LoadWeatherLevel();// 0x1c9ec0c
	function LoadStreamLevel();// 0x1c9ea70
	function LoadDefaultWeatherLevel();// 0x1c9ea5c
	function Init();// 0x1723de0

--------------------------------
Class: AdjustSmokeCirclePostMatComponent.ActorComponent.Object
	float CircleInRadius;//[Offset: 0xbc , Size: 4]
	float CircleOutRadius;//[Offset: 0xc0 , Size: 4]
	float DistanceForHideSmoke;//[Offset: 0xc4 , Size: 4]
	float TickInternal;//[Offset: 0xc8 , Size: 4]
	MaterialInterface* ParentMaterial;//[Offset: 0xcc , Size: 4]
	FName ShaderUniformName;//[Offset: 0xd0 , Size: 8]
	FString TagName;//[Offset: 0xd8 , Size: 12]
	CurveFloat* AlphaCurve;//[Offset: 0xe4 , Size: 4]
	float DefaultSmokeTime;//[Offset: 0xe8 , Size: 4]
	float FadeOutStartTime;//[Offset: 0xec , Size: 4]
	float RealFadeOutStartTime;//[Offset: 0xf0 , Size: 4]
	Actor* SmokeActor;//[Offset: 0xf4 , Size: 4]
	STScreenAppearanceComponentAdditional* SCAppearComp;//[Offset: 0x118 , Size: 4]
	SmokeParticles(ObjectProperty)[] SmokeParticles;//[Offset: 0x11c , Size: 12]
	function FadeOutParticle();// 0x1699cb0

--------------------------------
Class: STScreenAppearanceComponentAdditional.STScreenAppearanceComponent.ActorComponent.Object
	FName ShaderUniformName;//[Offset: 0x118 , Size: 8]
	MaterialInstanceDynamic* currentMatInstanceDynamic;//[Offset: 0x15c , Size: 4]
	function StopScreenAppearanceWithTag();// 0x18ba714
	function PlayCustomScreenAppearanceWithTag();// 0x18ba4f4

--------------------------------
Class: AgentBoundComponent.ActorComponent.Object
	Vector LocalCenter;//[Offset: 0xbc , Size: 12]
	Vector LocalSize;//[Offset: 0xc8 , Size: 12]

--------------------------------
Class: AIAbilityComponent.ActorComponent.Object

--------------------------------
Class: AIActingComponent.ActorComponent.Object
	CandidateAIList(StructProperty)[] CandidateAIList;//[Offset: 0xd0 , Size: 12]
	int MaxActiveAI;//[Offset: 0x170 , Size: 4]
	int ActiveAI_n;//[Offset: 0x174 , Size: 4]
	int ActiveAI_m;//[Offset: 0x178 , Size: 4]
	float AISpawnCircleOriginOffset;//[Offset: 0x17c , Size: 4]
	float NoWhiteCirclesRadius;//[Offset: 0x180 , Size: 4]
	float SelectActionPeriod;//[Offset: 0x184 , Size: 4]
	float SpawnCheckHumanRadiusSquare;//[Offset: 0x188 , Size: 4]
	int TryFindSpawnAILocNum;//[Offset: 0x18c , Size: 4]
	AIActingItemList(StructProperty)[] AIActingItemList;//[Offset: 0x190 , Size: 12]
	AIAttackEachOtherRatingTimeConfig(StructProperty)[] AIAttackEachOtherRatingTimeConfig;//[Offset: 0x19c , Size: 12]
	int FullFeedLimit;//[Offset: 0x1a8 , Size: 4]
	DeliveryWaveInterval(StructProperty)[] DeliveryWaveInterval;//[Offset: 0x1ac , Size: 12]
	float DeliveryBeginTime;//[Offset: 0x1b8 , Size: 4]
	float DeliveryFreq;//[Offset: 0x1bc , Size: 4]
	int DeliveryAINumEachPeriod;//[Offset: 0x1c0 , Size: 4]
	float MinimumWarmScore;//[Offset: 0x1c4 , Size: 4]
	AIDeliveryAreaLimit(StructProperty)[] AIDeliveryAreaLimit;//[Offset: 0x1c8 , Size: 12]
	AIRatingDamageConfig(StructProperty)[] AIRatingDamageConfig;//[Offset: 0x1d4 , Size: 12]
	AIAttackAIRatingDamage(StructProperty)[] AIAttackAIRatingDamage;//[Offset: 0x1e0 , Size: 12]
	AIDeliveryPlayerConfig(StructProperty)[] AIDeliveryPlayerConfig;//[Offset: 0x1ec , Size: 12]
	AIAttackAnimalRatingDamage(StructProperty)[] AIAttackAnimalRatingDamage;//[Offset: 0x1f8 , Size: 12]
	int MaxMoveRequestExecutePerFrame;//[Offset: 0x204 , Size: 4]
	int MaxQueuingMoveRequests;//[Offset: 0x208 , Size: 4]
	int MaxClearTroubleRequestExecutePerFrame;//[Offset: 0x20c , Size: 4]
	CirleAreaVolume* CircleAreaVolume;//[Offset: 0x210 , Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0x214 , Size: 4]
	int CircleIndexFakeAIPoisonDamage;//[Offset: 0x2a0 , Size: 4]
	int AIAttackAnimalRatingDamageIndex;//[Offset: 0x2a4 , Size: 4]
	bool IsCheckVisibilityReverse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c0 , Size: 1]
	function GetNoWhiteCirclesRadius();// 0x169b588
	function BroadFinishLastBreathFunction();// 0x169b098
	function AdjustAIAttackAnimalRatingDamage();// 0x169b018

--------------------------------
Class: CirleAreaVolume.Actor.Object
	BoxComponent* CircleBoxArea;//[Offset: 0x2c4 , Size: 4]

--------------------------------
Class: CircleMgrComponent.TimerRegistComponent.ActorComponent.Object
	bool GM_IsEnableNarrowCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x101 , Size: 1]
	bool IsInActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102 , Size: 1]
	CircleConfigs(StructProperty)[] CircleConfigs;//[Offset: 0x104 , Size: 12]
	float DestinyThreshold;//[Offset: 0x110 , Size: 4]
	int RoundNum;//[Offset: 0x114 , Size: 4]
	bool bEnableDebugMultiCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x118 , Size: 1]
	CirleAreaVolume* BindedCirleAreaVolume;//[Offset: 0x18c , Size: 4]
	function SetGMCicleTime();// 0x17099a4
	function RetriveGetCircleInfo();// 0x17098e0
	function RetriveCircleInfo();// 0x17097e8

--------------------------------
Class: TimerRegistComponent.ActorComponent.Object
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	TimerRegister(StructProperty)[] TimerRegister;//[Offset: 0xc0 , Size: 12]
	FString TimerName;//[Offset: 0xcc , Size: 12]

--------------------------------
Class: AIBuildingComponent.AIAbilityComponent.ActorComponent.Object
	<CanBuildActorNums_Key(IntProperty) , CanBuildActorNums(IntProperty)> CanBuildActorNums;//[Offset: 0xe0 , Size: 60]
	float TotalCD;//[Offset: 0x11c , Size: 4]
	float SoloCD;//[Offset: 0x120 , Size: 4]

--------------------------------
Class: AIChooseEnemyComponent.AIAbilityComponent.ActorComponent.Object

--------------------------------
Class: AICrowdMoveComponent.AIAbilityComponent.ActorComponent.Object

--------------------------------
Class: AIGroupManagerComponent.ActorComponent.Object
	AnimalGroupRespawnConfig(StructProperty)[] AnimalGroupRespawnConfig;//[Offset: 0xbc , Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0x140 , Size: 8]

--------------------------------
Class: AIHoleUpComponent.AIAbilityComponent.ActorComponent.Object
	float OccludeBuildingActorByRemoveTime;//[Offset: 0xf8 , Size: 4]
	float OccludeBuildingActorInvalidDis;//[Offset: 0xfc , Size: 4]
	float InvalidOccludeBuildingPosAgainCheckCD;//[Offset: 0x100 , Size: 4]
	float OccludePosInvalidDis;//[Offset: 0x104 , Size: 4]

--------------------------------
Class: AimOffsetViewComponent.ActorComponent.Object

--------------------------------
Class: AIParachutePoint.Actor.Object

--------------------------------
Class: AIPathNode.Actor.Object
	AIPathNode* NextPathNode;//[Offset: 0x2c4 , Size: 4]
	AIPathNode* PrevPathNode;//[Offset: 0x2c8 , Size: 4]

--------------------------------
Class: AIPickupResouce.Actor.Object
	int GroupID;//[Offset: 0x2c4 , Size: 4]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2c8 , Size: 4]
	BillboardComponent* SignSprite;//[Offset: 0x2cc , Size: 4]
	BillboardComponent* GoodSprite;//[Offset: 0x2d0 , Size: 4]
	BillboardComponent* BadSprite;//[Offset: 0x2d4 , Size: 4]

--------------------------------
Class: GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: AIProbeComponent.GameModeProbeComponent.ActorComponent.Object

--------------------------------
Class: AirAttackBombActor.Pawn.Actor.Object
	float LifeSpan;//[Offset: 0x308 , Size: 4]

--------------------------------
Class: AirAttackComponent.TimerRegistComponent.ActorComponent.Object
	Vector MapOriginal;//[Offset: 0x104 , Size: 12]
	float MapRadius;//[Offset: 0x110 , Size: 4]
	float FlightHeight;//[Offset: 0x114 , Size: 4]
	float SeaLevelHeight;//[Offset: 0x118 , Size: 4]
	float DelayTime;//[Offset: 0x11c , Size: 4]
	int WaveCount;//[Offset: 0x120 , Size: 4]
	enum DefaultAirAttackGenerateType;//[Offset: 0x124 , Size: 1]
	AirAttackGenerateTypeList(EnumProperty)[] AirAttackGenerateTypeList;//[Offset: 0x128 , Size: 12]
	bool bAirAttackUseModifier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x134 , Size: 1]
	CurveFloat* AttackAreaSizeModifierCurve;//[Offset: 0x138 , Size: 4]
	CurveFloat* BombCountModifierCurve;//[Offset: 0x13c , Size: 4]
	int WaveInternal;//[Offset: 0x140 , Size: 4]
	AirAttackCfg AirAttackConfig;//[Offset: 0x144 , Size: 24]
	float BroadcastClientDistance;//[Offset: 0x15c , Size: 4]

--------------------------------
Class: AirAttackCfg
	float EscapeTime;//[Offset: 0x0 , Size: 4]
	float AttackLastingTime;//[Offset: 0x4 , Size: 4]
	float AttackAreaRadius;//[Offset: 0x8 , Size: 4]
	float OuterRadius;//[Offset: 0xc , Size: 4]
	int TotalBombs;//[Offset: 0x10 , Size: 4]
	int BombsRadius;//[Offset: 0x14 , Size: 4]

--------------------------------
Class: AirAttackCS.TimerRegistComponent.ActorComponent.Object
	class STExtraExplosionEffect* ExplosionEffectTemplate;//[Offset: 0x104 , Size: 4]
	function OnAirAttack();// 0x169e68c
	function DoBombHarmAtLocation();// 0x169e608
	function AirAttackThrowBomb();// 0x169e590

--------------------------------
Class: STExtraExplosionEffect.Actor.Object
	ParticleSystem* FarComplexEffect;//[Offset: 0x2c4 , Size: 4]
	ParticleSystem* NearSimpleEffect;//[Offset: 0x2c8 , Size: 4]
	float NearToFarDistance;//[Offset: 0x2cc , Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x2d0 , Size: 4]
	float PlayEffectDelayTime;//[Offset: 0x2d4 , Size: 4]
	HitResult SurfaceHit;//[Offset: 0x2d8 , Size: 136]
	bool bPlayFallbackEffectIfFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x360 , Size: 1]

--------------------------------
Class: AirAttackLocatorWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	TextBlock* TextBlock_Distance1;//[Offset: 0x2f4 , Size: 4]
	Image* Image_DisableTips1;//[Offset: 0x2f8 , Size: 4]
	function SetAALOpen();// 0x169f458

--------------------------------
Class: Image.Widget.Visual.Object
	SlateBrush Brush;//[Offset: 0xd0 , Size: 144]
	delegate BrushDelegate;//[Offset: 0x160 , Size: 16]
	LinearColor ColorAndOpacity;//[Offset: 0x170 , Size: 16]
	delegate ColorAndOpacityDelegate;//[Offset: 0x180 , Size: 16]
	bool bIsUseEnhancedHitTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190 , Size: 1]
	bool bVersionImg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x191 , Size: 1]
	FString imageSrcPath;//[Offset: 0x194 , Size: 12]
	float HitTestAreaRadius;//[Offset: 0x1a0 , Size: 4]
	delegate OnMouseButtonDownEvent;//[Offset: 0x1a8 , Size: 16]
	function SetOpacity();// 0x2bd5d18
	function SetColorAndOpacity();// 0x2bd5c9c
	function SetBrushFromTextureDynamic();// 0x2bd5bd8
	function SetBrushFromTexture();// 0x2bd5b14
	function SetBrushFromPathAsync();// 0x2bd5a58
	function SetBrushFromMaterial();// 0x2bd59e0
	function SetBrushFromAsset();// 0x2bd5968
	function SetBrush();// 0x2bd56b8
	function GetDynamicMaterial();// 0x2bd5690

--------------------------------
Class: AirDropBoxActor.Actor.Object
	float DroppingSpeed;//[Offset: 0x2c4 , Size: 4]
	bool bIsHitTheGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	float HitGroundHeight;//[Offset: 0x2cc , Size: 4]
	float SmokeStartScaleDistance;//[Offset: 0x2d0 , Size: 4]
	float SmokeEndScaleDistance;//[Offset: 0x2d4 , Size: 4]
	float SmokeStartScaleValue;//[Offset: 0x2d8 , Size: 4]
	float SmokeEndScaleValue;//[Offset: 0x2dc , Size: 4]
	float PrevSmokeCurrentDistanceScaler;//[Offset: 0x2e0 , Size: 4]
	bool bIsShowingSmoke;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4 , Size: 1]
	float ForceUpdateLocInterval;//[Offset: 0x2e8 , Size: 4]
	float ForceUpdateLocDissqThreshold;//[Offset: 0x2ec , Size: 4]
	class PlayerTombBox* DeadInventoryBoxTemplate;//[Offset: 0x2f0 , Size: 4]
	FName WrapperBoxName;//[Offset: 0x2f8 , Size: 8]
	BuoyancyForceComponent* BuoyancyForceComponent;//[Offset: 0x300 , Size: 4]
	int AirDropBoxID;//[Offset: 0x304 , Size: 4]
	float OBUIShowDistance;//[Offset: 0x308 , Size: 4]
	bool bIsSuperAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	FString FestivalAirDropBoxMesh;//[Offset: 0x310 , Size: 12]
	bool bUseFestivalAirDropBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	AirDropResource NormalAirdropBoxResource;//[Offset: 0x320 , Size: 176]
	AirDropResource SuperAirdropBoxResource;//[Offset: 0x3d0 , Size: 176]
	enum DropType;//[Offset: 0x481 , Size: 1]
	uint32 SummonerKey;//[Offset: 0x484 , Size: 4]
	bool bIsAirOpen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x488 , Size: 1]
	bool bIsEmptyAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x489 , Size: 1]
	SwimObjectArray(ObjectProperty)[] SwimObjectArray;//[Offset: 0x48c , Size: 12]
	float CheckWaterOverlapInterval;//[Offset: 0x498 , Size: 4]
	function SetBuoyancyUpdatedComponent();// 0x169ffb8
	function OnRep_bUseFestivalAirDropBox();// 0x169ffa4
	function OnRep_BoxId();// 0x169ff90
	function OnRep_AirdropTypeChange();// 0x169ff7c
	function OnBoxDropIntoWater();// 0x206ccd8
	function IsDropIntoWater();// 0x169fefc
	function GenerateWrappersBox();// 0x169fde4
	function ForceUpdateAirdropLoc();// 0x169fdbc
	function DistanceScalerChangedEvent();// 0x206ccd8
	function ChangeFestivalAirDropBoxMesh();// 0x206ccd8
	function ChangeAirdropAppearance();// 0x206ccd8
	function BoxReachGround();// 0x206ccd8
	function AsyncLoadBoxResourceFinish();// 0x206ccd8
	function AsyncLoadBoxResource();// 0x169fc78
	function AddToAIList();// 0x169fc64

--------------------------------
Class: AirDropResource
	StaticMesh* AirdropBoxMesh;//[Offset: 0x0 , Size: 4]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x4 , Size: 4]
	ParticleSystem* AirdropSmoke;//[Offset: 0x8 , Size: 4]
	ParticleSystem* AirdropFlash;//[Offset: 0xc , Size: 4]
	StaticMesh* SoftAirdropBoxMesh;//[Offset: 0x10 , Size: 40]
	StaticMesh* SoftAirdropParachuteMesh;//[Offset: 0x38 , Size: 40]
	ParticleSystem* SoftAirdropSmoke;//[Offset: 0x60 , Size: 40]
	ParticleSystem* SoftAirdropFlash;//[Offset: 0x88 , Size: 40]

--------------------------------
Class: DropStuffStrategy.Object

--------------------------------
Class: DropVehicleStrategy.DropStuffStrategy.Object
	function Apply();// 0x16a0960

--------------------------------
Class: DropZombieStrategy.DropStuffStrategy.Object
	function Apply();// 0x16a0c84

--------------------------------
Class: DropBoxStrategy.DropStuffStrategy.Object
	function Apply();// 0x16a0fa8

--------------------------------
Class: AirDropComponent.TimerRegistComponent.ActorComponent.Object
	AirDropPlaneParams AirDropPlaneParams;//[Offset: 0x104 , Size: 28]
	AirDropPlaneParams SuperAirDropPlaneParams;//[Offset: 0x120 , Size: 28]
	AirDropPlaneParams VehicleAirDropPlaneParams;//[Offset: 0x13c , Size: 28]
	AirDropPlaneParams ZombieAirDropPlaneParams;//[Offset: 0x158 , Size: 28]
	BackupEnterAirDropPlaneParams BackupEnterAirDropPlaneParams;//[Offset: 0x174 , Size: 52]
	AirDropConfigs(StructProperty)[] AirDropConfigs;//[Offset: 0x1a8 , Size: 12]
	bool bCanUseDelayDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b4 , Size: 1]
	class AirDropPlane* AirDropPlaneBluePrint;//[Offset: 0x1b8 , Size: 4]
	class AirDropBoxActor* AirDropBoxBlueprint;//[Offset: 0x1bc , Size: 4]
	FlareGunAirDropRandomParams SuperAirDropRandomParams;//[Offset: 0x1c0 , Size: 12]
	FlareGunAirDropRandomParams VehicleAirDropRandomParams;//[Offset: 0x1cc , Size: 12]
	FlareGunAirDropRandomParams ZombieAirDropRandomParams;//[Offset: 0x1d8 , Size: 12]
	SpotType(ByteProperty)[] SpotType;//[Offset: 0x1e4 , Size: 12]
	float StuffBoxToWorldBoundaryMinDis;//[Offset: 0x1f0 , Size: 4]
	DataTable* AirDropBoxDataTable;//[Offset: 0x200 , Size: 4]
	FSuperAirDropBoxDataSet(StructProperty)[] FSuperAirDropBoxDataSet;//[Offset: 0x204 , Size: 12]
	AirDropOrder AirDropOrder;//[Offset: 0x210 , Size: 80]
	AirDropOrder SuperAirDropOrder;//[Offset: 0x260 , Size: 80]
	AirDropOrder ZombieAirDropOrder;//[Offset: 0x2b0 , Size: 80]
	DelayOrder(StructProperty)[] DelayOrder;//[Offset: 0x300 , Size: 12]
	function OnAirDropStart();// 0x16a15cc
	function CallZombieAirDrop();// 0x16a1484
	function CallSuperAirDrop();// 0x16a13cc
	function CallFlareGunAirDrop();// 0x16a12cc

--------------------------------
Class: AirDropPlaneParams
	float FlyingHeight;//[Offset: 0x0 , Size: 4]
	float FlyingSpeed;//[Offset: 0x4 , Size: 4]
	float AirDropFallingSpeed;//[Offset: 0x8 , Size: 4]
	bool bIsUseDebugLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Vector DebugDroppingLocation;//[Offset: 0x10 , Size: 12]

--------------------------------
Class: BackupEnterAirDropPlaneParams
	float FlyingHeight;//[Offset: 0x0 , Size: 4]
	float FlyingSpeed;//[Offset: 0x4 , Size: 4]
	float AirDropFallingSpeed;//[Offset: 0x8 , Size: 4]
	Vector DroppingLocationOffset;//[Offset: 0xc , Size: 12]
	PlaneSpawnOffset(StructProperty)[] PlaneSpawnOffset;//[Offset: 0x18 , Size: 12]
	DropTimeOffset(FloatProperty)[] DropTimeOffset;//[Offset: 0x24 , Size: 12]
	int MaxPlaneNum;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: AirDropPlane.FlightVehicle.Actor.Object
	FlyingParam FlyingParam;//[Offset: 0x2c4 , Size: 20]
	Vector DroppingStuffLocation;//[Offset: 0x2d8 , Size: 12]
	float DroppingSpeed;//[Offset: 0x2e4 , Size: 4]
	float LifeSpanAfterDrop;//[Offset: 0x2e8 , Size: 4]
	DropStrategyArray(ObjectProperty)[] DropStrategyArray;//[Offset: 0x344 , Size: 12]
	DropStuffStrategy* DropStrategy;//[Offset: 0x350 , Size: 4]
	ProjectileMovementComponent* PMComp;//[Offset: 0x354 , Size: 4]
	function SetDropStrategy();// 0x16a3b10
	function OnRep_FlyingParams();// 0x16a3afc
	function GetDropStrategyArray();// 0x16a39e4
	function GetDropStrategy();// 0x16a39bc
	function GetDroppingIndex();// 0x16a393c

--------------------------------
Class: FlightVehicle.Actor.Object

--------------------------------
Class: FlyingParam
	float FlyingSpeed;//[Offset: 0x0 , Size: 4]
	Vector FlyingDirection;//[Offset: 0x4 , Size: 12]
	float AirPlaneSpawnServerTime;//[Offset: 0x10 , Size: 4]

--------------------------------
Class: FlareGunAirDropRandomParams
	float SuperAirDropRandomRadius;//[Offset: 0x0 , Size: 4]
	float SuperAirDropRouteRandomRadiusMin;//[Offset: 0x4 , Size: 4]
	float SuperAirDropRouteRandomRadiusMax;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: AirDropOrder
	Vector AirDropPlaneSpawnPosition;//[Offset: 0x0 , Size: 12]
	Vector AirDropPlaneFlyingDirection;//[Offset: 0xc , Size: 12]
	float AirDropPlaneFlyingSpeed;//[Offset: 0x18 , Size: 4]
	Vector AirDropStuffFallingPosition;//[Offset: 0x1c , Size: 12]
	BoxFallingPositionArray(StructProperty)[] BoxFallingPositionArray;//[Offset: 0x28 , Size: 12]
	float AirDropStuffFallingSpeed;//[Offset: 0x34 , Size: 4]
	bool bIsSpecialAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	int DropType;//[Offset: 0x3c , Size: 4]
	uint32 AirDropSummoner;//[Offset: 0x40 , Size: 4]
	int ZombieID;//[Offset: 0x44 , Size: 4]
	int FlowId;//[Offset: 0x48 , Size: 4]
	bool bIsEmptyAirdrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]

--------------------------------
Class: AirDropDecoratorActor.DecoratorActor.Actor.Object
	bool bIsAirDropping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e4 , Size: 1]
	float fDistanceSquare;//[Offset: 0x2e8 , Size: 4]
	int iParticleCountForLimit;//[Offset: 0x2ec , Size: 4]
	float DropSpeed;//[Offset: 0x2f0 , Size: 4]
	StaticMesh* AirDropParachuteMesh;//[Offset: 0x2f4 , Size: 4]
	FName AirDropParachuteSocketName;//[Offset: 0x2f8 , Size: 8]
	Vector AirDropParachuteMeshScale;//[Offset: 0x300 , Size: 12]
	StaticMeshComponent* AirDropParachuteMeshComp;//[Offset: 0x30c , Size: 4]
	StaticMeshComponent* Mesh;//[Offset: 0x310 , Size: 4]
	ProjectileMovementComponent* ProjectileMovement;//[Offset: 0x314 , Size: 4]
	bool bClosedParachuteForObjectPoolReset;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x318 , Size: 1]
	function UpdateParticleVisible();// 0x16a1da8
	function StopAirDrop();// 0x16a1d94
	function StartAirDrop();// 0x16a1d80
	function RemoveStaticMesh();// 0x16a1d6c
	function QueryVisibility();// 0x16a1d44
	function OnRep_IsAirDropping();// 0x206ccd8
	function DropAirDropParachute();// 0x16a1d28
	function ClearCache();// 0x16a1d14
	function AttachAirDropParachute();// 0x16a1cf8
	function AddStaticMesh();// 0x16a1ce4

--------------------------------
Class: AirDropListWrapperActor.PickUpListWrapperActor.PickUpWrapperActor.UAENetActor.Actor.Object

--------------------------------
Class: AirplaneCharacter.Character.Pawn.Actor.Object
	bool bStopAllowed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63c , Size: 1]
	bool bForceControllerRelevant;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x63d , Size: 1]
	function SetStopAllowed();// 0x16a40b0
	function IsStopAllowed();// 0x16a4088
	function CheckAirplanePos();// 0x16a4010

--------------------------------
Class: AIWayPointActor.Actor.Object
	int ID;//[Offset: 0x2c4 , Size: 4]
	TeamLinks(StructProperty)[] TeamLinks;//[Offset: 0x2c8 , Size: 12]
	CapsuleComponent* CapsuleComponent;//[Offset: 0x2d4 , Size: 4]
	BillboardComponent* ShowSprite;//[Offset: 0x2d8 , Size: 4]

--------------------------------
Class: AIWorldSoundManagerComponent.ActorComponent.Object
	<SoundConfig_Key(EnumProperty) , SoundConfig(StructProperty)> SoundConfig;//[Offset: 0xbc , Size: 60]
	HearSoundCharacterTypes(EnumProperty)[] HearSoundCharacterTypes;//[Offset: 0xf8 , Size: 12]
	AIWorldVolume* AIWorldVolume;//[Offset: 0x104 , Size: 8]
	function OnProjectileExplode();// 0x16a4980

--------------------------------
Class: AIWorldVolume.AIWorldVolumeBase.Volume.Brush.Actor.Object
	FString AIOcclusionFilePath;//[Offset: 0x2f4 , Size: 12]
	FString HousePathFilePath;//[Offset: 0x300 , Size: 12]
	bool bDebugOnClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x30c , Size: 1]
	<AllAIWayPointActors_Key(IntProperty) , AllAIWayPointActors(ObjectProperty)> AllAIWayPointActors;//[Offset: 0x348 , Size: 60]
	ItemSpotSceneComponent* LastRegisteredItemSpot;//[Offset: 0x384 , Size: 4]

--------------------------------
Class: AIWorldVolumeBase.Volume.Brush.Actor.Object
	float CellSize;//[Offset: 0x2ec , Size: 4]

--------------------------------
Class: AkSoundPlayerSceneComponent.SceneComponent.ActorComponent.Object
	AkAudioEvent* AkSoundEvent;//[Offset: 0x260 , Size: 4]
	Actor* BindActor;//[Offset: 0x268 , Size: 4]

--------------------------------
Class: AnchorFlagWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	Vector4 Limit;//[Offset: 0x300 , Size: 16]
	Vector LocOffset;//[Offset: 0x310 , Size: 12]
	Vector2D UIOffset;//[Offset: 0x31c , Size: 8]
	Vector2D UITeamOffset;//[Offset: 0x324 , Size: 8]
	int AnchorShowDistLimit;//[Offset: 0x32c , Size: 4]
	int CorpShowDistLimit;//[Offset: 0x330 , Size: 4]
	int rightPlus;//[Offset: 0x334 , Size: 4]
	float opacityFactor;//[Offset: 0x338 , Size: 4]
	CanvasPanelSlot* CanvasPanel;//[Offset: 0x33c , Size: 4]
	STExtraPlayerController* STExtraPlayerController;//[Offset: 0x340 , Size: 4]
	STExtraBaseCharacter* BaseCharacter;//[Offset: 0x344 , Size: 4]
	int heightPlus;//[Offset: 0x34c , Size: 4]
	GridPanel* NameGridPanel;//[Offset: 0x354 , Size: 4]
	CanvasPanel* AnchorCanvas;//[Offset: 0x358 , Size: 4]
	CanvasPanel* CorpCanvas;//[Offset: 0x35c , Size: 4]
	Image* HideOrCollapsed;//[Offset: 0x360 , Size: 4]
	TextBlock* CorpName;//[Offset: 0x364 , Size: 4]
	function SetBaseCharacter();// 0x16a5068

--------------------------------
Class: GridPanel.PanelWidget.Widget.Visual.Object
	ColumnFill(FloatProperty)[] ColumnFill;//[Offset: 0xdc , Size: 12]
	RowFill(FloatProperty)[] RowFill;//[Offset: 0xe8 , Size: 12]
	function AddChildToGrid();// 0x2bd4248

--------------------------------
Class: CanvasPanel.PanelWidget.Widget.Visual.Object
	function AddChildToCanvas();// 0x2bcd200

--------------------------------
Class: AIController.Controller.Actor.Object
	bool bStopAILogicOnUnposses;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x32c , Size: 1]
	bool bLOSflag;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x32c , Size: 1]
	bool bSkipExtraLOSChecks;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x32c , Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x32c , Size: 1]
	bool bWantsPlayerState;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x32c , Size: 1]
	bool bSetControlRotationFromPawnOrientation;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x32c , Size: 1]
	PathFollowingComponent* PathFollowingComponent;//[Offset: 0x330 , Size: 4]
	BrainComponent* BrainComponent;//[Offset: 0x334 , Size: 4]
	AIPerceptionComponent* PerceptionComponent;//[Offset: 0x338 , Size: 4]
	PawnActionsComponent* ActionsComp;//[Offset: 0x33c , Size: 4]
	BlackboardComponent* Blackboard;//[Offset: 0x340 , Size: 4]
	GameplayTasksComponent* CachedGameplayTasksComponent;//[Offset: 0x344 , Size: 4]
	class NavigationQueryFilter* DefaultNavigationFilterClass;//[Offset: 0x348 , Size: 4]
	delegate ReceiveMoveCompleted;//[Offset: 0x34c , Size: 12]
	bool UseGameplayTasksComponent;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x359 , Size: 1]
	function UseBlackboard();// 0x2d6579c
	function UnclaimTaskResource();// 0x2d65724
	function SetMoveBlockDetection();// 0x2d656a4
	function RunBehaviorTree();// 0x2d6561c
	function OnUsingBlackBoard();// 0x206ccd8
	function OnUnpossess();// 0x206ccd8
	function OnPossess();// 0x206ccd8
	function OnGameplayTaskResourcesClaimed();// 0x2d65558
	function MoveToLocation();// 0x2d652b0
	function MoveToActor();// 0x2d65068
	function K2_SetFocus();// 0x2d64ff0
	function K2_SetFocalPoint();// 0x2d64f80
	function K2_ClearFocus();// 0x2d64f6c
	function HasPartialPath();// 0x2d64f44
	function GetPathFollowingComponent();// 0x2d64f28
	function GetMoveStatus();// 0x2d64f00
	function GetImmediateMoveDestination();// 0x2d64eb8
	function GetFocusActor();// 0x2d64e90
	function GetFocalPointOnActor();// 0x2d64df8
	function GetFocalPoint();// 0x2d64db0
	function GetAIPerceptionComponent();// 0x29fd438
	function ClaimTaskResource();// 0x2d64d38

--------------------------------
Class: PathFollowingComponent.ActorComponent.Object
	NavMovementComponent* MovementComp;//[Offset: 0xf0 , Size: 4]
	NavigationData* MyNavData;//[Offset: 0xfc , Size: 4]
	function OnNavDataRegistered();// 0x2d826b8
	function OnActorBump();// 0x2d82548
	function GetPathDestination();// 0x2d82500
	function GetPathActionType();// 0x2d824d8

--------------------------------
Class: BrainComponent.ActorComponent.Object
	BlackboardComponent* BlackboardComp;//[Offset: 0xc0 , Size: 4]
	AIController* AIOwner;//[Offset: 0xc4 , Size: 4]
	function StopLogic();// 0x2d719fc
	function RestartLogic();// 0x1698f30
	function IsRunning();// 0x2d719cc
	function IsPaused();// 0x2d7199c

--------------------------------
Class: BlackboardComponent.ActorComponent.Object
	BrainComponent* BrainComp;//[Offset: 0xbc , Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0xc0 , Size: 4]
	KeyInstances(ObjectProperty)[] KeyInstances;//[Offset: 0xdc , Size: 12]
	function SetValueAsVector();// 0x2d6ff88
	function SetValueAsString();// 0x2d6fdd4
	function SetValueAsRotator();// 0x2d6fd00
	function SetValueAsObject();// 0x2d6fc2c
	function SetValueAsName();// 0x2d6fb58
	function SetValueAsInt();// 0x2d6fa84
	function SetValueAsFloat();// 0x2d6f9b0
	function SetValueAsEnum();// 0x2d6f8dc
	function SetValueAsClass();// 0x2d6f808
	function SetValueAsBool();// 0x2d6f72c
	function IsVectorValueSet();// 0x2d6f698
	function GetValueAsVector();// 0x2d6f5f4
	function GetValueAsString();// 0x2d6f4d8
	function GetValueAsRotator();// 0x2d6f434
	function GetValueAsObject();// 0x2d6f3a0
	function GetValueAsName();// 0x2d6f304
	function GetValueAsInt();// 0x2d6f270
	function GetValueAsFloat();// 0x2d6f1dc
	function GetValueAsEnum();// 0x2d6f148
	function GetValueAsClass();// 0x2d6f0b4
	function GetValueAsBool();// 0x2d6f020
	function GetRotationFromEntry();// 0x2d6ef38
	function GetLocationFromEntry();// 0x2d6ee50
	function ClearValue();// 0x2d6edc4

--------------------------------
Class: BlackboardData.DataAsset.Object
	BlackboardData* Parent;//[Offset: 0x20 , Size: 4]
	Keys(StructProperty)[] Keys;//[Offset: 0x24 , Size: 12]
	bool bHasSynchronizedKeys;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x30 , Size: 1]

--------------------------------
Class: AIPerceptionComponent.ActorComponent.Object
	SensesConfig(ObjectProperty)[] SensesConfig;//[Offset: 0xbc , Size: 12]
	class AISense* DominantSense;//[Offset: 0xc8 , Size: 4]
	AIController* AIOwner;//[Offset: 0xe0 , Size: 4]
	delegate OnPerceptionUpdated;//[Offset: 0x140 , Size: 12]
	delegate OnTargetPerceptionUpdated;//[Offset: 0x14c , Size: 12]
	function SetSenseEnabled();// 0x2d67604
	function RequestStimuliListenerUpdate();// 0x2d675f0
	function OnOwnerEndPlay();// 0x2d67534
	function GetPerceivedHostileActors();// 0x2d67468
	function GetPerceivedActors();// 0x2d67358
	function GetKnownPerceivedActors();// 0x2d67248
	function GetCurrentlyPerceivedActors();// 0x2d67138
	function GetActorsPerception();// 0x2d67010

--------------------------------
Class: AISense.Object
	float DefaultExpirationAge;//[Offset: 0x1c , Size: 4]
	enum NotifyType;//[Offset: 0x20 , Size: 1]
	bool bWantsNewPawnNotification;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x21 , Size: 1]
	bool bAutoRegisterAllPawnsAsSources;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x21 , Size: 1]
	AIPerceptionSystem* PerceptionSystemInstance;//[Offset: 0x24 , Size: 4]

--------------------------------
Class: AIPerceptionSystem.Object
	Senses(ObjectProperty)[] Senses;//[Offset: 0x5c , Size: 12]
	float PerceptionAgingRate;//[Offset: 0x68 , Size: 4]
	function ReportPerceptionEvent();// 0x2d685bc
	function ReportEvent();// 0x2d68544
	function RegisterPerceptionStimuliSource();// 0x2d68444
	function OnPerceptionStimuliSourceEndPlay();// 0x2d68388
	function GetSenseClassForStimulus();// 0x2d681b4

--------------------------------
Class: PawnActionsComponent.ActorComponent.Object
	Pawn* ControlledPawn;//[Offset: 0xbc , Size: 4]
	ActionStacks(StructProperty)[] ActionStacks;//[Offset: 0xc0 , Size: 12]
	ActionEvents(StructProperty)[] ActionEvents;//[Offset: 0xcc , Size: 12]
	PawnAction* CurrentAction;//[Offset: 0xd8 , Size: 4]
	function K2_PushAction();// 0x2d83eb8
	function K2_PerformAction();// 0x2d83db0
	function K2_ForceAbortAction();// 0x2d83d30
	function K2_AbortAction();// 0x2d83cb0

--------------------------------
Class: PawnAction.Object
	PawnAction* ChildAction;//[Offset: 0x1c , Size: 4]
	PawnAction* ParentAction;//[Offset: 0x20 , Size: 4]
	PawnActionsComponent* OwnerComponent;//[Offset: 0x24 , Size: 4]
	Object* Instigator;//[Offset: 0x28 , Size: 4]
	BrainComponent* BrainComp;//[Offset: 0x2c , Size: 4]
	bool bAllowNewSameClassInstance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x50 , Size: 1]
	bool bReplaceActiveSameClassInstance;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x50 , Size: 1]
	bool bShouldPauseMovement;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x50 , Size: 1]
	bool bAlwaysNotifyOnFinished;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x50 , Size: 1]
	function GetActionPriority();// 0x2d82d94
	function Finish();// 0x2d82d0c
	function CreateActionInstance();// 0x2d82c50

--------------------------------
Class: GameplayTasksComponent.ActorComponent.Object
	SimulatedTasks(ObjectProperty)[] SimulatedTasks;//[Offset: 0xc0 , Size: 12]
	TaskPriorityQueue(ObjectProperty)[] TaskPriorityQueue;//[Offset: 0xcc , Size: 12]
	TickingTasks(ObjectProperty)[] TickingTasks;//[Offset: 0xe4 , Size: 12]
	KnownTasks(ObjectProperty)[] KnownTasks;//[Offset: 0xf0 , Size: 12]
	delegate OnClaimedResourcesChange;//[Offset: 0x100 , Size: 12]
	function OnRep_SimulatedTasks();// 0x2cb6938
	function K2_RunGameplayTask();// 0x2cb65c4

--------------------------------
Class: BasicAIController.AIController.Controller.Actor.Object
	BehaviorTreeComponent* BehaviorComp;//[Offset: 0x360 , Size: 4]
	BlackboardComponent* BlackboardComp;//[Offset: 0x364 , Size: 4]
	BehaviorTreePath(SoftObjectProperty)[] BehaviorTreePath;//[Offset: 0x368 , Size: 12]
	float ActorLocationTetherDistance;//[Offset: 0x374 , Size: 4]
	OnlyActorCompManagerComponent* CompManagerComponent;//[Offset: 0x378 , Size: 4]
	function GetBlackboardComponent();// 0x16e0f14

--------------------------------
Class: BehaviorTreeComponent.BrainComponent.ActorComponent.Object
	NodeInstances(ObjectProperty)[] NodeInstances;//[Offset: 0x110 , Size: 12]
	function SetDynamicSubtree();// 0x2d6e33c
	function GetTagCooldownEndTime();// 0x2d6e2bc
	function AddCooldownTagDuration();// 0x2d6e1a8

--------------------------------
Class: OnlyActorCompManagerComponent.ActorComponent.Object
	<CacheComponents_Key(StrProperty) , CacheComponents(ObjectProperty)> CacheComponents;//[Offset: 0xbc , Size: 60]
	CacheUpdateComponents(ObjectProperty)[] CacheUpdateComponents;//[Offset: 0xf8 , Size: 12]

--------------------------------
Class: AnimalAIController.BasicAIController.AIController.Controller.Actor.Object
	NewPathFollowingComponent* NewFollowingComponent;//[Offset: 0x3b0 , Size: 4]
	float TurnVelocity;//[Offset: 0x3b4 , Size: 4]
	float SetAirDropTargetInterval;//[Offset: 0x3b8 , Size: 4]
	float IgnoreMoveCollisionTimeWhenBlocked;//[Offset: 0x3bc , Size: 4]
	float IgnoreMoveCollisionSetInterval;//[Offset: 0x3c0 , Size: 4]
	float DragOnGroundCheckInterval;//[Offset: 0x3c4 , Size: 4]
	float DragOnGroundMaxOverGroundHeight;//[Offset: 0x3c8 , Size: 4]
	float DragOnGroundMaxRayLen;//[Offset: 0x3cc , Size: 4]
	float DragOnGroundMaxFloorThickness;//[Offset: 0x3d0 , Size: 4]
	float DragOnGroundMaxSubsidenceDepth;//[Offset: 0x3d4 , Size: 4]
	float DragOnGroundNavRandomRadius;//[Offset: 0x3d8 , Size: 4]
	bool EnableUpdateRotatition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3dc , Size: 1]
	FindMovePointLimitArea(StructProperty)[] FindMovePointLimitArea;//[Offset: 0x420 , Size: 12]
	TickControlComponent* TickControlComp;//[Offset: 0x42c , Size: 4]
	function SetMoveTargetLoc();// 0x16a560c
	function SetCaughtOwner();// 0x16a558c
	function RunBehaviorTreeWithIndex();// 0x16a550c
	function OnAirDropLandGroup();// 0x16a5448

--------------------------------
Class: NewPathFollowingComponent.PathFollowingComponent.ActorComponent.Object
	float maxCheckDis;//[Offset: 0x248 , Size: 4]
	float maxCheckDisTime;//[Offset: 0x24c , Size: 4]
	bool isUseFixedPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x254 , Size: 1]
	float PlayerHalfHeight;//[Offset: 0x258 , Size: 4]
	float PlayerNewHalfHeight;//[Offset: 0x25c , Size: 4]
	float MaxTransferDis;//[Offset: 0x260 , Size: 4]

--------------------------------
Class: SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimDataPairs(StructProperty)[] AnimDataPairs;//[Offset: 0x170 , Size: 12]
	CurveFloat* hitPoseAndDistanceCurve;//[Offset: 0x17c , Size: 4]
	<moveAnimSpeed_Key(IntProperty) , moveAnimSpeed(FloatProperty)> moveAnimSpeed;//[Offset: 0x180 , Size: 60]
	float PlayMoveDeathMinimumDist;//[Offset: 0x1bc , Size: 4]
	delegate OnAnimLoadedFinished;//[Offset: 0x1c0 , Size: 12]
	function SortAnimations();// 0x17d0a20
	function RemoveChildComponent();// 0x16fbb78
	function OnAsyncLoadingFinished();// 0x17d079c
	function AddChildComponent();// 0x17d06d8

--------------------------------
Class: AnimalAnimListComponent.SimpleAnimListBaseComponent.UAEAnimListComponentBase.ActorComponent.Object
	AnimalAnimDatas(StructProperty)[] AnimalAnimDatas;//[Offset: 0x1dc , Size: 12]
	AnimalMoveAnimSpeeds(StructProperty)[] AnimalMoveAnimSpeeds;//[Offset: 0x1e8 , Size: 12]

--------------------------------
Class: AnimalDeliverStrategy.Object
	byte Priority;//[Offset: 0x1c , Size: 1]
	enum SortStrategy;//[Offset: 0x5c , Size: 1]
	enum SelectStrategy;//[Offset: 0x5d , Size: 1]

--------------------------------
Class: AnimalDeliverStrategy_NotHandleAnimal.AnimalDeliverStrategy.Object

--------------------------------
Class: AnimalDeliverStrategy_NotDeliverAnimal.AnimalDeliverStrategy.Object
	enum AnimalType;//[Offset: 0x5e , Size: 1]

--------------------------------
Class: AnimalDeliverStrategy_KillNum.AnimalDeliverStrategy.Object

--------------------------------
Class: AnimalDeliverStrategy_WarmScore.AnimalDeliverStrategy.Object

--------------------------------
Class: AnimalDeliverConfiguration.Object
	TeamDeliverStrategies(ObjectProperty)[] TeamDeliverStrategies;//[Offset: 0x1c , Size: 12]
	IndividualDeliverStrategies(ObjectProperty)[] IndividualDeliverStrategies;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: AnimalTeleportComponent.ActorComponent.Object
	bool bDeliverToInDoorPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	ChickDeliverConfig(StructProperty)[] ChickDeliverConfig;//[Offset: 0xc0 , Size: 12]
	DeerDeliverConfig(StructProperty)[] DeerDeliverConfig;//[Offset: 0xcc , Size: 12]
	GoblinDeliverConfig(StructProperty)[] GoblinDeliverConfig;//[Offset: 0xd8 , Size: 12]
	IceDeliverConfig(StructProperty)[] IceDeliverConfig;//[Offset: 0xe4 , Size: 12]
	DeliveryAreaLimit(StructProperty)[] DeliveryAreaLimit;//[Offset: 0xf0 , Size: 12]
	AIActingComponent* AIActingComp;//[Offset: 0xfc , Size: 8]
	AIGroupManagerComponent* AIGroupMgrComp;//[Offset: 0x104 , Size: 8]
	AnimalDeliverConfiguration* GoblinDeliverConfiguration;//[Offset: 0x10c , Size: 4]
	AnimalDeliverConfiguration* IceDeliverConfiguration;//[Offset: 0x110 , Size: 4]
	<DeliveredGoblinPlayers(WeakObjectProperty)> DeliveredGoblinPlayers;//[Offset: 0x114 , Size: 60]
	<DeliveredIcePlayers(WeakObjectProperty)> DeliveredIcePlayers;//[Offset: 0x150 , Size: 60]
	<DeleverCountPerWave_Key(EnumProperty) , DeleverCountPerWave(IntProperty)> DeleverCountPerWave;//[Offset: 0x294 , Size: 60]

--------------------------------
Class: AnimationMotionCurveComponent.ActorComponent.Object
	AnimationMotionCurveDataAsset* MotionCurveDataAsset;//[Offset: 0xbc , Size: 4]

--------------------------------
Class: AnimationMotionCurveDataAsset.DataAsset.Object
	<AnimationFloatCurves_Key(StrProperty) , AnimationFloatCurves(StructProperty)> AnimationFloatCurves;//[Offset: 0x20 , Size: 60]

--------------------------------
Class: AnniversaryWorldSceneActor.ActivityInteractiveActor.ActivityActorBase.DecoratorActor.Actor.Object
	int FinalAwardResId;//[Offset: 0x3e0 , Size: 4]
	bool bIsTown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3e4 , Size: 1]
	delegate OnFinalRewardResId;//[Offset: 0x3e8 , Size: 12]
	function SetFinalAwardResId();// 0x16a6f28
	function OnRep_FinalAward();// 0x16a6f14

--------------------------------
Class: AntiCheatConfig.Object

--------------------------------
Class: AntiCheatUtils.BlueprintFunctionLibrary.Object
	function GetSafeName();// 0x16a75b0

--------------------------------
Class: AObjectPoolManager.Actor.Object
	Preloads(StructProperty)[] Preloads;//[Offset: 0x2c4 , Size: 12]
	PreloadTblRes(StructProperty)[] PreloadTblRes;//[Offset: 0x2d0 , Size: 12]
	PreLoadConfigTable(StructProperty)[] PreLoadConfigTable;//[Offset: 0x2dc , Size: 12]
	PreLoadQuotes(ObjectProperty)[] PreLoadQuotes;//[Offset: 0x2e8 , Size: 12]
	function PreSpawnToPool();// 0x16a7c8c
	function PreLoadObjectsFinish();// 0x16a7c14
	function OnOpenObjectPool();// 0x16a7c00

--------------------------------
Class: AreaTrigger.Actor.Object
	BoxComponent* Area;//[Offset: 0x2c4 , Size: 4]
	int AreaID;//[Offset: 0x2c8 , Size: 4]
	FString TriggerTag;//[Offset: 0x2cc , Size: 12]
	int TriggerTimes;//[Offset: 0x2d8 , Size: 4]
	int ExitTimes;//[Offset: 0x2dc , Size: 4]
	bool IsExcuteOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	bool IsTimesDestroy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e1 , Size: 1]
	bool IsIgnoreAi;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e2 , Size: 1]
	float AfterFightingTime;//[Offset: 0x2e4 , Size: 4]
	function ResetTriggerTimes();// 0x16a85c0
	function OnEndOverlap();// 0x16a8478
	function OnBeginOverlap();// 0x16a827c
	function FireExitEvent();// 0x16a81fc
	function FireEnterEvent();// 0x16a817c
	function CheckRecord();// 0x16a8160
	function CheckGameModeState();// 0x16a8138

--------------------------------
Class: AreaTriggerGroup.Actor.Object
	int AreaID;//[Offset: 0x2c4 , Size: 4]
	FString TriggerTag;//[Offset: 0x2c8 , Size: 12]
	int TriggerTimes;//[Offset: 0x2d4 , Size: 4]
	int ExitTimes;//[Offset: 0x2d8 , Size: 4]
	bool IsExcuteOnlyInFightingState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc , Size: 1]
	float AfterFightingTime;//[Offset: 0x2e0 , Size: 4]
	ChildActors(ObjectProperty)[] ChildActors;//[Offset: 0x2e4 , Size: 12]
	function ResetTriggerTimes();// 0x16a8ba4
	function EndOverlapDelegate();// 0x16a8ae8
	function BeginOverlapDelegate();// 0x16a8a2c

--------------------------------
Class: AreaTriggerSphere.AreaTrigger.Actor.Object
	SphereComponent* SphereArea;//[Offset: 0x31c , Size: 4]
	function OnEndOverlap();// 0x16a90d0
	function OnBeginOverlap();// 0x16a8ed4

--------------------------------
Class: AreaTriggerWithPoints.AreaTrigger.Actor.Object
	function GetAttachPoints();// 0x16a94e4
	function FireExitEvent();// 0x16a81fc
	function FireEnterEvent();// 0x16a817c

--------------------------------
Class: ASTExtraRangeActor.Actor.Object
	float RangeRadius;//[Offset: 0x2c4 , Size: 4]
	bool UseRangeActorAsCenter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	bool DrawDebugTraceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c9 , Size: 1]
	function MakeRange();// 0x16aa1c8
	function MakeEffectToOverlappedActor();// 0x16aa0dc
	function MakeEffectToAllOverlappedActors();// 0x16a9af8

--------------------------------
Class: ASTExtraNoiseRangeActor.ASTExtraRangeActor.Actor.Object
	PropSkillNoiseRangeParam NoiseRangeParamCfg;//[Offset: 0x2d4 , Size: 32]
	function MakeEffectToAllOverlappedActors();// 0x16a9af8
	function InitRangeParam();// 0x16a9a28

--------------------------------
Class: PropSkillNoiseRangeParam
	float GenProbility;//[Offset: 0x0 , Size: 4]
	int PropSkillLevel;//[Offset: 0x4 , Size: 4]
	float RangeLifeSpan;//[Offset: 0x8 , Size: 4]
	float MarkerLifeSpan;//[Offset: 0xc , Size: 4]
	float RangeRadius;//[Offset: 0x10 , Size: 4]
	int HumanBuffID;//[Offset: 0x14 , Size: 4]
	int ZombieBuffID;//[Offset: 0x18 , Size: 4]
	int ZombieWeakSpeakBuffID;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: ASTExtraSmokeRangeActor.ASTExtraRangeActor.Actor.Object
	PropSkillSmokeDamageParam SmokeDamageParamCfg;//[Offset: 0x2d4 , Size: 52]
	function MakeEffectToOverlappedActor();// 0x16aa0dc
	function InitRangeParam();// 0x16aa60c

--------------------------------
Class: PropSkillSmokeDamageParam
	float GenProbility;//[Offset: 0x0 , Size: 4]
	int PropSkillLevel;//[Offset: 0x4 , Size: 4]
	float PlayerInnerDamageHealth;//[Offset: 0x8 , Size: 4]
	float PlayerOuterDamageHealth;//[Offset: 0xc , Size: 4]
	float ZombieInnerDamageHealth;//[Offset: 0x10 , Size: 4]
	float ZombieOuterDamageHealth;//[Offset: 0x14 , Size: 4]
	float WallWeakenDamageRatio;//[Offset: 0x18 , Size: 4]
	float InnerDamageRadius;//[Offset: 0x1c , Size: 4]
	float OuterDamageRadius;//[Offset: 0x20 , Size: 4]
	float SomkeLifeSpan;//[Offset: 0x24 , Size: 4]
	float CheckPeriod;//[Offset: 0x28 , Size: 4]
	int HumanBuffID;//[Offset: 0x2c , Size: 4]
	int ZombieBuffID;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: AsyncCanvasPanel.CanvasPanel.PanelWidget.Widget.Visual.Object
	class UserWidget* WidgetClass;//[Offset: 0xe8 , Size: 40]
	delegate OnWidgetUpdate;//[Offset: 0x110 , Size: 16]
	delegate OnWidgetCreated;//[Offset: 0x120 , Size: 16]
	class UserWidget* WidgetClass_Loaded;//[Offset: 0x130 , Size: 4]
	UserWidget* ChildWidget;//[Offset: 0x134 , Size: 4]
	function RequestAsyncLoad();// 0x16ab964
	function OnWidgetUpdate__DelegateSignature();// 0x206ccd8
	function OnLoadAsynFinished();// 0x16ab7f8
	function NotifyUpdate();// 0x16ab7e4

--------------------------------
Class: AttrModifyProbeComponent.GameModeProbeComponent.ActorComponent.Object
	CharacterOverrideAttrConfigs(StructProperty)[] CharacterOverrideAttrConfigs;//[Offset: 0xbc , Size: 12]
	WeaponOverrideAttrConfigs(StructProperty)[] WeaponOverrideAttrConfigs;//[Offset: 0xc8 , Size: 12]
	function SetCharacterOverrideAttrValue();// 0x16ac20c
	function RemoveDynamicModifier();// 0x16ac06c
	function EnableGameModeOverrideAttrs();// 0x16abff4
	function AddDynamicModifier();// 0x16abe10

--------------------------------
Class: AutoRunPlayerTestActor.Actor.Object
	float Interval;//[Offset: 0x2c4 , Size: 4]
	PortalLoctions(StructProperty)[] PortalLoctions;//[Offset: 0x2c8 , Size: 12]

--------------------------------
Class: AutoRunTest.ActorComponent.Object
	bool IsSimulateZombieBoom;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]

--------------------------------
Class: ScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0xe0 , Size: 584]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x328 , Size: 1304]
	SlateWidgetStyleAsset* Style;//[Offset: 0x840 , Size: 4]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x844 , Size: 4]
	byte Orientation;//[Offset: 0x848 , Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x849 , Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x84a , Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x84c , Size: 8]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854 , Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855 , Size: 1]
	enum NavigationDestination;//[Offset: 0x856 , Size: 1]
	float NavigationScrollPadding;//[Offset: 0x858 , Size: 4]
	bool bAllowRightClickDragScrolling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85c , Size: 1]
	delegate OnUserScrolled;//[Offset: 0x860 , Size: 12]
	delegate OnUserScrolledUnused;//[Offset: 0x86c , Size: 12]
	function StopScroll();// 0x2bde2b0
	function SetScrollOffset();// 0x2bde238
	function SetScrollBarVisibility();// 0x2bde1c0
	function SetScrollbarThickness();// 0x2bde13c
	function SetOrientation();// 0x2bde0c4
	function SetAlwaysShowScrollbar();// 0x2bde044
	function SetAllowOverscroll();// 0x2bddfc4
	function ScrollWidgetIntoView();// 0x2bddeb8
	function ScrollToStart();// 0x2bddea4
	function ScrollToEnd();// 0x2bdde90
	function GetScrollOffset();// 0x2bdde68

--------------------------------
Class: ScrollBoxStyle.SlateWidgetStyle
	SlateBrush TopShadowBrush;//[Offset: 0x8 , Size: 144]
	SlateBrush BottomShadowBrush;//[Offset: 0x98 , Size: 144]
	SlateBrush LeftShadowBrush;//[Offset: 0x128 , Size: 144]
	SlateBrush RightShadowBrush;//[Offset: 0x1b8 , Size: 144]

--------------------------------
Class: ScrollBarStyle.SlateWidgetStyle
	SlateBrush HorizontalBackgroundImage;//[Offset: 0x8 , Size: 144]
	SlateBrush VerticalBackgroundImage;//[Offset: 0x98 , Size: 144]
	SlateBrush VerticalTopSlotImage;//[Offset: 0x128 , Size: 144]
	SlateBrush HorizontalTopSlotImage;//[Offset: 0x1b8 , Size: 144]
	SlateBrush VerticalBottomSlotImage;//[Offset: 0x248 , Size: 144]
	SlateBrush HorizontalBottomSlotImage;//[Offset: 0x2d8 , Size: 144]
	SlateBrush NormalThumbImage;//[Offset: 0x368 , Size: 144]
	SlateBrush HoveredThumbImage;//[Offset: 0x3f8 , Size: 144]
	SlateBrush DraggedThumbImage;//[Offset: 0x488 , Size: 144]

--------------------------------
Class: SlateWidgetStyleAsset.Object
	SlateWidgetStyleContainerBase* CustomStyle;//[Offset: 0x1c , Size: 4]

--------------------------------
Class: SlateWidgetStyleContainerBase.Object

--------------------------------
Class: AutoScrollBox.ScrollBox.PanelWidget.Widget.Visual.Object
	enum AutoScrollType;//[Offset: 0x884 , Size: 1]
	float RollSpeed;//[Offset: 0x888 , Size: 4]
	float StayTimeWhenStart;//[Offset: 0x88c , Size: 4]
	float StayTimeWhenEnd;//[Offset: 0x890 , Size: 4]

--------------------------------
Class: AutoTestInterface.ActorComponent.Object
	function StarJumpPlane();// 0x16acba4

--------------------------------
Class: AutoWeaponAutoAimingComponent.ActorComponent.Object
	Vector2D TargetScreenPos;//[Offset: 0xbc , Size: 8]
	bool bShowDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool bUseAimPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	float TraceUpOffset;//[Offset: 0xc8 , Size: 4]
	float DebugRectSize;//[Offset: 0xcc , Size: 4]
	AutoAimInfo AutoAimInfo;//[Offset: 0xd0 , Size: 56]
	byte CurLockState;//[Offset: 0x108 , Size: 1]
	byte PreLockState;//[Offset: 0x109 , Size: 1]
	Vector WorldLocToAim;//[Offset: 0x10c , Size: 12]
	delegate OnAutoAimInfoDelegate;//[Offset: 0x118 , Size: 12]
	delegate OnAutoAimLockStateDelegate;//[Offset: 0x124 , Size: 12]
	bool bHasInitCacheTargetList;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	bool bLostAutoAimTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155 , Size: 1]
	float RotateBackSpeed;//[Offset: 0x158 , Size: 4]
	float SimulateRotateSpeed;//[Offset: 0x15c , Size: 4]
	float RpcRotationTime;//[Offset: 0x160 , Size: 4]
	float LastRpcRotationTime;//[Offset: 0x164 , Size: 4]
	function TryDoAutoAim();// 0x16ad3b0
	function SetLockDelayTime();// 0x16ad338
	function ResetLockDelayTime();// 0x16ad324
	function RemoveTarget();// 0x16ad2ac
	function OnLockTimerOver();// 0x1698f30
	function InitCacheTargetList();// 0x16ad298
	function GetCacheTargetList();// 0x16ad230
	function DrawDebugInfo();// 0x16ad21c
	function ChangeLockState();// 0x16ad19c
	function CalcLockActor();// 0x1698eb0
	function AddTarget();// 0x16ad124

--------------------------------
Class: AutoAimInfo
	class Actor* AimClass;//[Offset: 0x0 , Size: 4]
	Vector AimOffset;//[Offset: 0x4 , Size: 12]
	float MaxAimDistance;//[Offset: 0x10 , Size: 4]
	float MaxAimScreenDis;//[Offset: 0x14 , Size: 4]
	Vector2D ScreenAimRect;//[Offset: 0x18 , Size: 8]
	float DefaultLockDelay;//[Offset: 0x24 , Size: 4]
	FName LockSocketName;//[Offset: 0x28 , Size: 8]
	float DotValue;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: BaseInterface.Interface.Object

--------------------------------
Class: AvatarAssetInterface.BaseInterface.Interface.Object

--------------------------------
Class: AvatarAssetUtils.BlueprintFunctionLibrary.Object
	function SetParticleComponentParam();// 0x16af4f4
	function SetCustomMatParam();// 0x16af330
	function RequestLoadParticleAssetWithCallback();// 0x16af0ec
	function RequestLoadParticleAsset();// 0x16aef1c
	function RequestLoadMeshAssetWithCallback();// 0x16aecd8
	function RequestLoadMeshAsset();// 0x16aeb04
	function RemoveParticleComponent();// 0x16ae9ac
	function RemoveMeshComponent();// 0x16ae850
	function RefreshMeshComponentTransform();// 0x16ae6f4
	function GetOrCreateDynamicMaterial();// 0x16ae624
	function GetBPUtils();// 0x16ae5fc
	function CreateParticleComponent();// 0x16ae4a4
	function CreateMeshComponent();// 0x16ae348

--------------------------------
Class: AvatarAssetBPUtils.Object
	<PendingMeshRequestList_Key(IntProperty) , PendingMeshRequestList(StructProperty)> PendingMeshRequestList;//[Offset: 0xb4 , Size: 60]
	<PendingParticleRequestList_Key(IntProperty) , PendingParticleRequestList(StructProperty)> PendingParticleRequestList;//[Offset: 0xf0 , Size: 60]
	function SetParticleComponentParam();// 0x16b0b34
	function SetCustomMatParam();// 0x16b0968
	function RequestLoadParticleAsset();// 0x16b0718
	function RequestLoadMeshAsset();// 0x16b04c8
	function RemoveParticleComponent();// 0x16b0368
	function RemoveMeshComponent();// 0x16b0204
	function RefreshMeshComponentTransform();// 0x16b00a0
	function OnAsynParticleAssetLoaded();// 0x16b0028
	function OnAsynMeshAssetLoaded();// 0x16affb0
	function GetOrCreateDynamicMaterial();// 0x16afed8
	function CreateParticleComponent();// 0x16afd78
	function CreateMeshComponent();// 0x16afc14

--------------------------------
Class: AvatarCharacterEffect.BaseInterface.Interface.Object
	function OnIsInvincibleChange();// 0x16b28b4
	function DrawOutlineEffect();// 0x16b27e4

--------------------------------
Class: AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	AnimMontage* AnimMontage;//[Offset: 0x260 , Size: 4]
	FString PlayerName;//[Offset: 0x264 , Size: 12]
	int gender;//[Offset: 0x270 , Size: 4]
	InitialAvatarItem(IntProperty)[] InitialAvatarItem;//[Offset: 0x274 , Size: 12]
	InitialWeaponItem(IntProperty)[] InitialWeaponItem;//[Offset: 0x280 , Size: 12]
	STExtraLobbyCharacter* LobbyPawn;//[Offset: 0x28c , Size: 4]
	CharacterAvatarComponent2* PlayerAvatar;//[Offset: 0x290 , Size: 4]
	function SpawnAvatar();// 0x16b7c50

--------------------------------
Class: STExtraLobbyCharacter.Character.Pawn.Actor.Object
	bool UseAvatarComponent2;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5d4 , Size: 1]
	FString LobbyPlayerKey;//[Offset: 0x5d8 , Size: 12]
	bool bWeaponAnimOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5e4 , Size: 1]
	delegate lobbyCharacterSceneTypeChangeEvent;//[Offset: 0x5e8 , Size: 12]
	byte charSceneType;//[Offset: 0x5f4 , Size: 1]
	byte lobbyPosIdx;//[Offset: 0x5f5 , Size: 1]
	int localLobbyPos;//[Offset: 0x5f8 , Size: 4]
	delegate lobbyCharGenderChangeDelegate;//[Offset: 0x5fc , Size: 12]
	byte lobbyGender;//[Offset: 0x608 , Size: 1]
	class AnimInstance* LobbyMaleAnimClass;//[Offset: 0x610 , Size: 40]
	class AnimInstance* LobbyFemaleAnimClass;//[Offset: 0x638 , Size: 40]
	STExtraWeapon* curEquipWeapon;//[Offset: 0x660 , Size: 4]
	WeaponOwnerProxy* WeaponOwnerProxy;//[Offset: 0x664 , Size: 4]
	int resultAvatarPoseIndex;//[Offset: 0x668 , Size: 4]
	delegate lobbyAnimMontagePlayDelegate;//[Offset: 0x66c , Size: 12]
	delegate lobbyAnimWeaponChangeDelegate;//[Offset: 0x678 , Size: 12]
	delegate lobbyCharPosChangeDelegate;//[Offset: 0x684 , Size: 12]
	CurEmotePathList(StructProperty)[] CurEmotePathList;//[Offset: 0x6ac , Size: 12]
	CurEmoteAnimList(SoftObjectProperty)[] CurEmoteAnimList;//[Offset: 0x6b8 , Size: 12]
	<loadedEmoteMontageMap_Key(StrProperty) , loadedEmoteMontageMap(ObjectProperty)> loadedEmoteMontageMap;//[Offset: 0x6c4 , Size: 60]
	int CurrentEmoteIndex;//[Offset: 0x700 , Size: 4]
	AnimMontage* CurrentLoadedEmoteMontage;//[Offset: 0x704 , Size: 4]
	BackpackEmoteHandle* curHandle;//[Offset: 0x708 , Size: 4]
	BackpackEmoteHandle* lastHandle;//[Offset: 0x70c , Size: 4]
	delegate EmoteMontageStartEvent;//[Offset: 0x710 , Size: 12]
	delegate EmoteMontageFinishedEvent;//[Offset: 0x71c , Size: 12]
	AkComponent* emoteSound_Comp;//[Offset: 0x728 , Size: 4]
	delegate SimulateHurtEvent;//[Offset: 0x72c , Size: 12]
	class LobbyGodEffectComponent* GodEffectComponentPath;//[Offset: 0x740 , Size: 40]
	bool IsMale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x768 , Size: 1]
	delegate LobbyPoseWithFriend;//[Offset: 0x76c , Size: 12]
	delegate LobbyCancelPoseWithFriend;//[Offset: 0x778 , Size: 12]
	function UnequipWeapon();// 0x1850d5c
	function SimulateHurt();// 0x1850cdc
	function SetStatueInfo();// 0x1850bf8
	function SetResultAvatarPosIndex();// 0x1850b80
	function SetMaleAnimClass();// 0x1850b64
	function SetLobbyPosIndexInAvatarScene();// 0x1850aec
	function SetLobbyPosIndex();// 0x1850a6c
	function SetLobbyCharacterProperty();// 0x1850954
	function SetLobbyAnimGender();// 0x18508d4
	function SetFemaleAnimClass();// 0x18508b8
	function SetCharSceneType();// 0x1850838
	function PlayGodEffect();// 0x18507c0
	function PlayEmoteSound();// 0x18507ac
	function PlayEmoteInterruptSound();// 0x1850798
	function OnStopEmote();// 0x1850770
	function OnPlayEmote();// 0x18506f0
	function OnAsyncLoadEmoteAnimList();// 0x18506dc
	function OnAsyncLoadEmoteAnim();// 0x185055c
	function LoopEmoteAnimFinishedFirstSection();// 0x1850534
	function LoadAnimSoftPtrListFromIndex();// 0x1850520
	function LoadAnimSoftPtrFromIndex();// 0x185043c
	function HandleOnCharAnimLoadingFinished();// 0x1850428
	function GetWeaponAnimComponent();// 0x1850400
	function GetWeaponAnimByAnimTypeAndPosType();// 0x18502f8
	function GetLobbyPosIndex();// 0x18502d0
	function GetLobbyAnimGender();// 0x18502a8
	function GetEmoteHandle();// 0x206ccd8
	function GetCurrentWeapon();// 0x1850280
	function GetCurrentMontage();// 0x1850258
	function GetCurrentEmoteId();// 0x1850230
	function GetCharSceneType();// 0x1850208
	function GetCharacterAnimByAnimTypeAndPosType();// 0x1850100
	function EquipWeapon();// 0x1850088
	function EmoteAnimFinishedSuccessfully();// 0x1850060
	function CallGlobalLuaFunction();// 0x184ffa4

--------------------------------
Class: BackpackEmoteHandle.BattleItemHandleBase.ItemHandleBase.Object
	AnimationAsset* AnimAsset;//[Offset: 0xa0 , Size: 40]
	float blendTime;//[Offset: 0xc8 , Size: 4]
	bool ShowWeaponWhenPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	LobbyEnterEmoteAnimAssetList(StructProperty)[] LobbyEnterEmoteAnimAssetList;//[Offset: 0xd0 , Size: 12]
	LobbyLeaveEmoteAnimAssetList(StructProperty)[] LobbyLeaveEmoteAnimAssetList;//[Offset: 0xdc , Size: 12]
	AkAudioEvent* EmoteSoundStartEvent;//[Offset: 0xe8 , Size: 4]
	AkAudioEvent* EmoteSoundInterruptEvent;//[Offset: 0xec , Size: 4]
	bool IsGenderEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf0 , Size: 1]
	MaleEmoteSoundStartEventList(ObjectProperty)[] MaleEmoteSoundStartEventList;//[Offset: 0xf4 , Size: 12]
	FemaleEmoteSoundStartEventList(ObjectProperty)[] FemaleEmoteSoundStartEventList;//[Offset: 0x100 , Size: 12]
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function GetBackpackComponent();// 0x16c4ce0
	function CheckCanPickUp();// 0x16c4c1c

--------------------------------
Class: LobbyGodEffectComponent.SceneComponent.ActorComponent.Object
	ParticleSystem* ParticleEffect1;//[Offset: 0x260 , Size: 40]
	ParticleSystem* ParticleEffect2;//[Offset: 0x288 , Size: 40]
	ParticleSystem* ParticleEffect3;//[Offset: 0x2b0 , Size: 40]
	class UserWidget* GodEffectWidget;//[Offset: 0x2d8 , Size: 4]
	WidgetComponent* WidgetComponent;//[Offset: 0x2dc , Size: 4]
	function StopEffect();// 0x1762570
	function SetNameText();// 0x17624f0
	function PlayGodEffect();// 0x1762430
	function OnAsyncLoadEffectFinish();// 0x1762370

--------------------------------
Class: WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	enum Space;//[Offset: 0x565 , Size: 1]
	enum TimingPolicy;//[Offset: 0x566 , Size: 1]
	class UserWidget* WidgetClass;//[Offset: 0x568 , Size: 4]
	IntPoint DrawSize;//[Offset: 0x56c , Size: 8]
	bool bManuallyRedraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x574 , Size: 1]
	bool bRedrawRequested;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x575 , Size: 1]
	float RedrawTime;//[Offset: 0x578 , Size: 4]
	IntPoint CurrentDrawSize;//[Offset: 0x588 , Size: 8]
	bool bDrawAtDesiredSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x590 , Size: 1]
	Vector2D Pivot;//[Offset: 0x594 , Size: 8]
	bool bReceiveHardwareInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59c , Size: 1]
	bool bWindowFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59d , Size: 1]
	LocalPlayer* OwnerPlayer;//[Offset: 0x5a0 , Size: 4]
	LinearColor BackgroundColor;//[Offset: 0x5a4 , Size: 16]
	LinearColor TintColorAndOpacity;//[Offset: 0x5b4 , Size: 16]
	float OpacityFromTexture;//[Offset: 0x5c4 , Size: 4]
	enum BlendMode;//[Offset: 0x5c8 , Size: 1]
	bool bIsTwoSided;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c9 , Size: 1]
	bool TickWhenOffscreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ca , Size: 1]
	UserWidget* Widget;//[Offset: 0x5cc , Size: 4]
	BodySetup* BodySetup;//[Offset: 0x5e0 , Size: 4]
	MaterialInterface* TranslucentMaterial;//[Offset: 0x5e4 , Size: 4]
	MaterialInterface* TranslucentMaterial_OneSided;//[Offset: 0x5e8 , Size: 4]
	MaterialInterface* OpaqueMaterial;//[Offset: 0x5ec , Size: 4]
	MaterialInterface* OpaqueMaterial_OneSided;//[Offset: 0x5f0 , Size: 4]
	MaterialInterface* MaskedMaterial;//[Offset: 0x5f4 , Size: 4]
	MaterialInterface* MaskedMaterial_OneSided;//[Offset: 0x5f8 , Size: 4]
	TextureRenderTarget2D* RenderTarget;//[Offset: 0x5fc , Size: 4]
	MaterialInstanceDynamic* MaterialInstance;//[Offset: 0x600 , Size: 4]
	bool bAddedToScreen;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x604 , Size: 1]
	bool bEditTimeUsable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x605 , Size: 1]
	FName SharedLayerName;//[Offset: 0x608 , Size: 8]
	int LayerZOrder;//[Offset: 0x610 , Size: 4]
	enum GeometryMode;//[Offset: 0x614 , Size: 1]
	float CylinderArcAngle;//[Offset: 0x618 , Size: 4]
	function SetWidget();// 0x2bfc5b8
	function SetTintColorAndOpacity();// 0x2bfc53c
	function SetOwnerPlayer();// 0x2bfc4c4
	function SetDrawSize();// 0x2bfc454
	function SetBackgroundColor();// 0x2bfc3d8
	function RequestRedraw();// 0x2bfc3bc
	function GetUserWidgetObject();// 0x2bfc394
	function GetRenderTarget();// 0x2bfc36c
	function GetOwnerPlayer();// 0x2bfc344
	function GetMaterialInstance();// 0x2bfc31c
	function GetDrawSize();// 0x2bfc2dc

--------------------------------
Class: AvatarDynamicAnimInstance.AnimInstance.Object
	enum InGameSimulationSpace;//[Offset: 0x2ec , Size: 1]
	enum LobbySimulationSpace;//[Offset: 0x2ed , Size: 1]
	float AnimDynAlpha;//[Offset: 0x2f0 , Size: 4]
	enum CurrentSimulateSpace;//[Offset: 0x2f4 , Size: 1]
	SkeletalMeshComponent* OwnerCharacterMesh;//[Offset: 0x2f8 , Size: 4]

--------------------------------
Class: AvatarEntity.Object
	int SlotID;//[Offset: 0x1c , Size: 4]
	int subSlotID;//[Offset: 0x20 , Size: 4]
	BattleItemHandleBase* LoadedHandle;//[Offset: 0x24 , Size: 4]
	BattleItemHandleBase* CachedLoadedHandle;//[Offset: 0x28 , Size: 4]
	SlotViewAvatarComponent* AvatarComponent;//[Offset: 0x2c , Size: 4]
	MeshComponent* MeshComponent;//[Offset: 0x30 , Size: 4]
	MeshData EntityMeshData;//[Offset: 0x38 , Size: 96]
	MeshData CachedEntityMeshData;//[Offset: 0x98 , Size: 96]
	bool RenderDirtyFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	bool InnerVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf9 , Size: 1]
	bool OuterVisibility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfa , Size: 1]
	bool IsDrawOutline;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfb , Size: 1]
	FName SocketName;//[Offset: 0x100 , Size: 8]
	ParticleComponents(ObjectProperty)[] ParticleComponents;//[Offset: 0x108 , Size: 12]
	SoftObjectPath MeshAssetPath;//[Offset: 0x118 , Size: 24]
	ItemDefineID ParentDefineID;//[Offset: 0x130 , Size: 24]
	<SubEntityList_Key(StrProperty) , SubEntityList(ObjectProperty)> SubEntityList;//[Offset: 0x148 , Size: 60]
	function UpdateVisibility();// 0x16b8bc8
	function UnRegisterTick();// 0x16b8bac
	function TickEntity();// 0x16b8b90
	function SetSocketName();// 0x16b8b74
	function SetParentDefineID();// 0x16b8ae8
	function SetAvatarVisibility();// 0x16b8a10
	function RevertEntityMeshData();// 0x16b89fc
	function RenderEntity();// 0x16b8920
	function RegisterTick();// 0x16b8904
	function PutOnEquipmentLogic();// 0x16b887c
	function PutOnDefaultEquipment();// 0x16b87fc
	function OnPostRender();// 0x16b87e0
	function IsEntityAvailable();// 0x16b8758
	function InitWidgetComponent();// 0x16b868c
	function Init();// 0x16b8584
	function GetMeshType();// 0x16b8554
	function GetMeshData();// 0x16b84f0
	function GetLoadedHandle();// 0x16b84c8
	function GetDefineID();// 0x16b8474
	function EnterRenderPipeline();// 0x16b8458
	function EnterLogicPipeline();// 0x16b843c
	function DrawOutline();// 0x16b83b4
	function CreateAndApplyResource();// 0x16b82d0
	function ClearEquipmentRenderData();// 0x16b8204
	function ClearEquipmentLogic();// 0x16b817c
	function ClearEntity();// 0x16b80f4
	function ApplyAnimation();// 0x16b80d8
	function ApplaySocketRelativeTransform();// 0x16b8058

--------------------------------
Class: MeshData
	StaticMesh* stMesh;//[Offset: 0x0 , Size: 4]
	SkeletalMesh* skMesh;//[Offset: 0x4 , Size: 4]
	MaterialInstance* matIns;//[Offset: 0x8 , Size: 4]
	additionalMats(ObjectProperty)[] additionalMats;//[Offset: 0xc , Size: 12]
	enum meshType;//[Offset: 0x18 , Size: 1]
	hiddenSlots(IntProperty)[] hiddenSlots;//[Offset: 0x1c , Size: 12]
	replacedSlots(StructProperty)[] replacedSlots;//[Offset: 0x28 , Size: 12]
	hideBoneSlots(StructProperty)[] hideBoneSlots;//[Offset: 0x34 , Size: 12]
	ItemDefineID definedID;//[Offset: 0x40 , Size: 24]
	enum subSlot;//[Offset: 0x58 , Size: 1]
	bool functionValid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x59 , Size: 1]

--------------------------------
Class: CharacterEntityFactory.AvatarEntityFactory.Object
	function CreateEntity();// 0x16b97cc

--------------------------------
Class: AvatarHandleBase.ItemHandleBase.Object
	bool bEnableBPModify;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	int SlotID;//[Offset: 0x88 , Size: 4]
	function HandlePreApplyResource();// 0x16ba144
	function HandlePostApplyResource();// 0x16ba078

--------------------------------
Class: AvatarLightMatInterface.BaseInterface.Interface.Object

--------------------------------
Class: AvatarPendantAnimInstance.AnimInstance.Object
	bool bUseDynamicAngularLimits;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2ec , Size: 1]
	Vector Dynamic_AngularLimitsMin;//[Offset: 0x2f0 , Size: 12]
	Vector Dynamic_AngularLimitsMax;//[Offset: 0x2fc , Size: 12]
	Vector LocalJointOffset;//[Offset: 0x308 , Size: 12]
	Vector HighSpeedLocalJointOffset;//[Offset: 0x314 , Size: 12]
	Vector LowSpeedLocalJointOffset;//[Offset: 0x320 , Size: 12]
	float HighSpeed;//[Offset: 0x32c , Size: 4]
	TimerHandle UpdateLocalJointOffsetTimerHandle;//[Offset: 0x330 , Size: 8]
	float LocalJointOffsetUpdateInterval;//[Offset: 0x338 , Size: 4]
	STExtraVehicleBase* CharacterVechicle;//[Offset: 0x33c , Size: 8]
	STExtraBaseCharacter* AvatarCharacter;//[Offset: 0x344 , Size: 8]
	function UpdateLocalJointOffset();// 0x16ba810
	function StopUpdateLocalJointOffset();// 0x16b8b90
	function StartUpdateLocalJointOffset();// 0x16b87e0
	function SetDynamicAngularLimits();// 0x16ba6f0
	function OnCharacterDetachedFromVehicle();// 0x16ba678
	function OnCharacterAttachedToVehcicle();// 0x16ba600

--------------------------------
Class: AvatarPoolInterface.BaseInterface.Interface.Object
	function IsSameAvatarHandle();// 0x16baf10
	function GetAvatarHandleFromPool();// 0x16bade0
	function CreateAvatarHandle();// 0x16bacfc
	function ClearAvatarHandlerFromPool();// 0x16bac64
	function AddAvatarHandleToPool();// 0x16965a8

--------------------------------
Class: AvatarUtils.BlueprintFunctionLibrary.Object
	function IsAvatarHandlePathExist();// 0x16bc6a0
	function GetVehicleShapeBySkinID();// 0x16bc628
	function GetVehicleDefaultStyleID();// 0x16bc518
	function GetVehicleBPPathBySkinID();// 0x16bc418
	function GetVehicleAvatarTemplateID();// 0x16bc388
	function GetVehicleAvatarModifyEnterSocket();// 0x16bc280
	function GetClothAvatarTemplateID();// 0x16bc1f0
	function GetClothAvatarSuits();// 0x16bc08c
	function GetBPUtils();// 0x16bc064
	function GetBPIDByResID();// 0x16bbfec
	function GetAvatarReplaceState();// 0x16bbe5c
	function GetAvatarHideState();// 0x16bbe5c
	function GetAvatarHandlePath();// 0x16bbd08
	function GetAvatarDataFromTable();// 0x16bbba4
	function CreateAvatarHandleListAsync();// 0x16bba28
	function CreateAvatarHandleAsync();// 0x16bb8f4
	function CreateAvatarHandle();// 0x16bb830

--------------------------------
Class: AvatarBPUtils.Object
	PendingAsyncRequests(StructProperty)[] PendingAsyncRequests;//[Offset: 0xf0 , Size: 12]
	<PendingAsyncRequestList_Key(IntProperty) , PendingAsyncRequestList(StructProperty)> PendingAsyncRequestList;//[Offset: 0xfc , Size: 60]
	function StringToArrayName();// 0x16be558
	function StringToArray();// 0x16be368
	function GetVehicleShapeBySkinID();// 0x16be2e0
	function GetVehicleDefaultStyleID();// 0x16be1c0
	function GetVehicleBPPathBySkinID();// 0x16be0b0
	function GetVehicleAvatarTemplateID();// 0x16be010
	function GetVehicleAvatarModifyEnterSocket();// 0x16bdef8
	function GetClothAvatarTemplateID();// 0x16bde58
	function GetClothAvatarSuits();// 0x16bdce4
	function GetBPIDByResID();// 0x16bdc5c
	function GetAvatarHandlePath();// 0x16bdaf8
	function GetAvatarDataFromTable();// 0x16bd98c
	function CreateAvatarHandle();// 0x16bd8b0
	function ConstructAvatarDataFromTable();// 0x16bd73c

--------------------------------
Class: AvatarVehicleEffect.BaseInterface.Interface.Object
	function OnIsInvincibleChange();// 0x16b28b4
	function DrawOutlineEffect();// 0x16bed78

--------------------------------
Class: BackpackAvatarInterface.Interface.Object
	function IsVirtualAvatarHandle();// 0x16966e0
	function IsForceIgnoreSlotSocket();// 0x16bf140
	function GetSubSlotID();// 0x16bf110
	function GetSlotID();// 0x1696628

--------------------------------
Class: BackpackAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	enum SlotID;//[Offset: 0x9b , Size: 1]
	enum subSlot;//[Offset: 0x9c , Size: 1]
	enum specialType;//[Offset: 0x9d , Size: 1]
	<SuitConfig_Key(EnumProperty) , SuitConfig(IntProperty)> SuitConfig;//[Offset: 0xa0 , Size: 60]
	MeshPackage meshPack;//[Offset: 0xe0 , Size: 408]
	MeshPackage replacedMeshPack;//[Offset: 0x278 , Size: 408]
	MutilReplacedMeshPack(StructProperty)[] MutilReplacedMeshPack;//[Offset: 0x410 , Size: 12]
	hiddenFlags(EnumProperty)[] hiddenFlags;//[Offset: 0x41c , Size: 12]
	subHiddenFlags(EnumProperty)[] subHiddenFlags;//[Offset: 0x428 , Size: 12]
	ReplaceFlags(EnumProperty)[] ReplaceFlags;//[Offset: 0x434 , Size: 12]
	ignoreFlags(EnumProperty)[] ignoreFlags;//[Offset: 0x440 , Size: 12]
	postOperation(StructProperty)[] postOperation;//[Offset: 0x44c , Size: 12]
	BackpackComponent* pBackpackComp;//[Offset: 0x458 , Size: 4]
	int itemCapacity;//[Offset: 0x45c , Size: 4]
	int Durability;//[Offset: 0x460 , Size: 4]
	BodyAttachmentConfig BodyAttachmentConfig;//[Offset: 0x46c , Size: 36]
	enum hideBoneSlot;//[Offset: 0x490 , Size: 1]
	FName hideBoneName;//[Offset: 0x498 , Size: 8]
	hideBoneNameArray(NameProperty)[] hideBoneNameArray;//[Offset: 0x4a0 , Size: 12]
	enum HideBoneType;//[Offset: 0x4ac , Size: 1]
	<PendantSpecialConfigMap_Key(IntProperty) , PendantSpecialConfigMap(StructProperty)> PendantSpecialConfigMap;//[Offset: 0x4b0 , Size: 60]
	PendantConfigList(StructProperty)[] PendantConfigList;//[Offset: 0x4ec , Size: 12]
	int PendantConfigIndex;//[Offset: 0x4f8 , Size: 4]
	float PendantScale;//[Offset: 0x4fc , Size: 4]
	int DefaultExtendPendantID;//[Offset: 0x500 , Size: 4]
	CharacterAnimListOverrideList(StructProperty)[] CharacterAnimListOverrideList;//[Offset: 0x504 , Size: 12]
	byte CharacterAnimOverrideType;//[Offset: 0x510 , Size: 1]
	function OnCharacterAttrChangedWithDetailEvent();// 0x16c11b8
	function HasCustomInfo();// 0x16c1190
	function HandleUse();// 0x16c108c
	function HandleRealShowMeshpack();// 0x16c0f78
	function HandlePickup();// 0x16c0c74
	function HandleMutilReplaceMeshPack();// 0x16c0b30
	function HandleMutilMeshPack();// 0x16c0a30
	function HandleMeshpackPostProcess();// 0x16c09a8
	function HandleMeshAttached();// 0x16c08dc
	function HandleEnable();// 0x16c084c
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function GetBackpackComponent();// 0x16c06d0
	function CheckCanPickUp();// 0x16c060c

--------------------------------
Class: MeshPackage.AssetPackage
	StaticMesh* maleStMesh;//[Offset: 0x8 , Size: 40]
	StaticMesh* femaleStMesh;//[Offset: 0x30 , Size: 40]
	SkeletalMesh* maleSkMesh;//[Offset: 0x58 , Size: 40]
	SkeletalMesh* femaleSkMesh;//[Offset: 0x80 , Size: 40]
	SkeletalMesh* maleLODSkMesh;//[Offset: 0xa8 , Size: 40]
	SkeletalMesh* femaleLODSkMesh;//[Offset: 0xd0 , Size: 40]
	MaterialInterface* maleMat;//[Offset: 0xf8 , Size: 40]
	MaterialInterface* femaleMat;//[Offset: 0x120 , Size: 40]
	additionalMaleMats(StructProperty)[] additionalMaleMats;//[Offset: 0x148 , Size: 12]
	additionalFemaleMats(StructProperty)[] additionalFemaleMats;//[Offset: 0x154 , Size: 12]
	MaterialInterface* baseMat;//[Offset: 0x160 , Size: 4]
	class AnimInstance* animBP;//[Offset: 0x164 , Size: 4]
	bool IsEffectOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x168 , Size: 1]
	enum EffectCreateType;//[Offset: 0x169 , Size: 1]
	EffectDataList(StructProperty)[] EffectDataList;//[Offset: 0x16c , Size: 12]
	AttachMeshDataList(StructProperty)[] AttachMeshDataList;//[Offset: 0x178 , Size: 12]

--------------------------------
Class: AssetPackage

--------------------------------
Class: BodyAttachmentConfig
	FText AttachmentID;//[Offset: 0x0 , Size: 12]
	BodyAttachmentAttrModifiers(StructProperty)[] BodyAttachmentAttrModifiers;//[Offset: 0xc , Size: 12]
	FString BodyDurabilityIndexName;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: CustomHandleBase.Object
	CharacterAvatarComponent2* OwnerComponent;//[Offset: 0x1c , Size: 8]
	function SetMaterialTexture();// 0x16c3680
	function SetMaterialScalar();// 0x16c3578
	function SetMaterialColor();// 0x16c3464
	function GetOwnerComponent();// 0x16c343c

--------------------------------
Class: BackpackAvatarItemColor.CustomHandleBase.Object
	SlotMatColorArray(StructProperty)[] SlotMatColorArray;//[Offset: 0x24 , Size: 12]
	function SetCustomColorDeffered();// 0x16c3d50
	function SetAvatarCustomInfo();// 0x16c3c94

--------------------------------
Class: BackpackAvatarItemPattern.CustomHandleBase.Object
	SlotMatPatternArray(StructProperty)[] SlotMatPatternArray;//[Offset: 0x24 , Size: 12]
	SoftObjectPath SoftRefPath1;//[Offset: 0x30 , Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x48 , Size: 24]
	function SetCustomPatternDeffered();// 0x16c45b4
	function SetAvatarCustomInfo();// 0x16c44f8
	function IsPatternNumMode();// 0x16c44d0
	function InitPatternNumID();// 0x16c445c
	function GetPatternNumTexturePath();// 0x206ccd8

--------------------------------
Class: BackpackDecalHandle.BattleItemHandleBase.ItemHandleBase.Object
	MaterialInterface* DecalMaterial;//[Offset: 0x9c , Size: 4]
	Texture* DecalTexure;//[Offset: 0xa0 , Size: 4]
	int CoordX;//[Offset: 0xa4 , Size: 4]
	int CoordY;//[Offset: 0xa8 , Size: 4]

--------------------------------
Class: BackpackGrenadeAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	ItemDefineID ParentID;//[Offset: 0xf8 , Size: 24]
	ItemDefineID AvatarDefaultCfg;//[Offset: 0x110 , Size: 24]
	SupportChangeTypes(EnumProperty)[] SupportChangeTypes;//[Offset: 0x128 , Size: 12]
	GrenadeParticleSystemArray(StructProperty)[] GrenadeParticleSystemArray;//[Offset: 0x134 , Size: 12]
	GrenadeSoundArray(StructProperty)[] GrenadeSoundArray;//[Offset: 0x140 , Size: 12]

--------------------------------
Class: BackpackPlaneAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	PlaneAvatarMats(StructProperty)[] PlaneAvatarMats;//[Offset: 0x9c , Size: 12]
	SkeletalMesh* PlaneSkletalMesh;//[Offset: 0xa8 , Size: 40]
	StaticMesh* PlaneStaticMesh;//[Offset: 0xd0 , Size: 40]
	NeedDestroyEffectNames(NameProperty)[] NeedDestroyEffectNames;//[Offset: 0xf8 , Size: 12]
	PlaneEffectDataList(StructProperty)[] PlaneEffectDataList;//[Offset: 0x104 , Size: 12]
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function GetBackpackComponent();// 0x16c4ce0
	function CheckCanPickUp();// 0x16c4c1c

--------------------------------
Class: BackpackSkillHandleBase.BattleItemHandleBase.ItemHandleBase.Object
	SkillsConfig(StructProperty)[] SkillsConfig;//[Offset: 0xa0 , Size: 12]
	STExtraBaseCharacter* OwnerBaseCharacter;//[Offset: 0xac , Size: 4]
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function GetSkillTemplates_Implementation();// 0x16c6354

--------------------------------
Class: BackpackSnowboardItemHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0x9c , Size: 4]
	class STExtraVehicleBase* SpawnVehicle;//[Offset: 0xa0 , Size: 40]
	STExtraVehicleBase* CreatedVehicle;//[Offset: 0xc8 , Size: 4]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	class PickUpWrapperActor* WrapperClass;//[Offset: 0xd0 , Size: 4]
	Transform WrapperPutdownTrans;//[Offset: 0xe0 , Size: 48]
	function SpawnWrapperOnGround();// 0x16c6c00
	function SetDelayDestroy();// 0x16c6b88
	function OnEnterVehicle();// 0x16c6b08
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleEnable();// 0x16c084c
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function GetBackpackComponent();// 0x16c6ae0
	function ExtractItemData();// 0x16c6a74
	function DelayDestroy();// 0x16c6a60
	function CheckDropPreHandle();// 0x16c6a38
	function CheckCanEnable();// 0x16c6a08

--------------------------------
Class: BackpackSurfboardHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* BackpackComp;//[Offset: 0x9c , Size: 4]
	class STExtraVehicleBase* SpawnVehicle;//[Offset: 0xa0 , Size: 40]
	STExtraVehicleBase* CreatedVehicle;//[Offset: 0xc8 , Size: 4]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	function OnEnterVehicle();// 0x16c73d8
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleEnable();// 0x16c084c
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function GetBackpackComponent();// 0x16c6ae0
	function ExtractItemData();// 0x16c6a74
	function DelayDestroy();// 0x16c73c4
	function CheckCanEnable();// 0x16c739c

--------------------------------
Class: BackpackUAVHandle.BattleItemHandleBase.ItemHandleBase.Object
	BackpackComponent* pBackpackComp;//[Offset: 0x9c , Size: 4]
	bool IsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]
	int Electricity;//[Offset: 0xa4 , Size: 4]
	int Durability;//[Offset: 0xa8 , Size: 4]
	int UAVClassID;//[Offset: 0xac , Size: 4]
	float enteruavdelaytime;//[Offset: 0xb0 , Size: 4]
	Vector uavcreatepos;//[Offset: 0xb4 , Size: 12]
	FString CreatedVehicleClassPath;//[Offset: 0xc0 , Size: 12]
	STExtraVehicleBase* CreatedVehicle;//[Offset: 0xcc , Size: 4]
	float spawnValidHeight;//[Offset: 0xd0 , Size: 4]
	enum UAVVehicleType;//[Offset: 0xd4 , Size: 1]
	function TryEnterVehicle();// 0x16c7b88
	function OnEnterVehicle();// 0x16c7b08
	function OnAttrChange();// 0x16c7a4c
	function HandleUse();// 0x16c108c
	function HandlePickup();// 0x16c0c74
	function HandleEnable();// 0x16c084c
	function HandleDrop();// 0x16c0780
	function HandleDisuse();// 0x16c06f8
	function DelayShowVehicle();// 0x16c7a38
	function CheckCanEnable();// 0x16c7a10

--------------------------------
Class: ReuseListForUI.Object
	List(IntProperty)[] List;//[Offset: 0x1c , Size: 12]
	function ShiftRound();// 0x16c8a44
	function Reset();// 0x16c89cc
	function Get();// 0x16c894c

--------------------------------
Class: BackpackUtils.BlueprintFunctionLibrary.Object
	function UpdateAddtionData();// 0x16cf498
	function SwitchBackpack();// 0x16cf2ac
	function SortDefineIDByWeight();// 0x16cf160
	function SortBattleSearchItemList();// 0x16cf090
	function SortBattleSearchBoxList();// 0x16cf090
	function SortBattleItemList();// 0x16cef44
	function ShouldAutoPickItem();// 0x16cecfc
	function SetIsNeedInitTable();// 0x16cec78
	function ReturnIteratively();// 0x16ceb14
	function PickUpListSearchTombCache();// 0x16ce930
	function PickUpListSearchPickupGroundCache();// 0x16ce7b4
	function PickUpListItemMakeSureListEnough();// 0x16ce65c
	function PickUpListBoxCheckSum();// 0x16ce51c
	function PickupFromGround();// 0x16ce34c
	function ItemNet2Data();// 0x16ce198
	function IsValidRevivalCard();// 0x16ce120
	function IsValidDefineType();// 0x16ce0a8
	function IsUAV();// 0x16ce030
	function IsTaskItemType();// 0x16cdfb8
	function IsScoreItemType();// 0x16cdf40
	function IsSameItem();// 0x16cde54
	function IsSameInstance();// 0x16cdd68
	function IsRevivalCardID();// 0x16cdcf0
	function IsPatchItem();// 0x16cdc78
	function IsPatchDefineItem();// 0x16cdbe8
	function IsNoDropItemType();// 0x16cdb70
	function IsGunItemType();// 0x16cdaf8
	function IsGrenadeCanAutoSwitch();// 0x16cda80
	function IsGlideItemType();// 0x16cda08
	function IsGhillieSuitItemType();// 0x16cd990
	function IsElectricity();// 0x16cd918
	function IsCharacterVirtualItem();// 0x16cd848
	function IsCanUseInBackpack();// 0x16cd7d0
	function IsBattleItemHandlePathExist();// 0x16cd714
	function IsBattleItemHandleExist();// 0x16cd638
	function IsBatteryChipItem();// 0x16cd5c0
	function IsBackpackNeedToShowItem();// 0x16cd45c
	function InitialItemTable();// 0x16cd448
	function HasSkillPropsBySubTypeInBackpack();// 0x16cd38c
	function HasItemBySubType();// 0x16cd2d0
	function GetWrapperActorPath();// 0x16cd1c0
	function GetWrapperActorClass();// 0x16cd140
	function GetWeaponSkinMappingID();// 0x16cd0c8
	function GetWeaponsInBackpack();// 0x16ccf78
	function GetWeaponAttachmentsInBackpack();// 0x16cce28
	function GetWeaponAttachmentHandles();// 0x16ccd28
	function GetVehiclePropsItemInBackpack();// 0x16ccbd8
	function GetVehiclePropsItemByItemIDInBackpack();// 0x16ccaf0
	function getSocketByAttachResID();// 0x16cca78
	function GetSkillPropsCountBySubType();// 0x16cc9bc
	function GetSkillPropsBySubTypeInBackpack();// 0x16cc828
	function GetRevivalCardValidTime();// 0x16cc800
	function GetRevivalCardID();// 0x16cc7d8
	function GetRawBattleTextByType();// 0x16cc6d8
	function GetRawBattleTextByRawTextID();// 0x16cc5d8
	function GetPickupItemResultIndentify();// 0x16cc480
	function GetOneSkillPropIDBySubTypeInBackpack();// 0x16cc3c4
	function GetItemUseful();// 0x16cc188
	function GetItemRecord();// 0x16cc0e4
	function GetItemOperationSoundAndBank();// 0x16cbef8
	function GetItemIDs();// 0x16cbe40
	function GetItemCountByType();// 0x16cbd84
	function GetItemCountByDefineIDUnEquip();// 0x16cbc64
	function GetItemCountByDefineID();// 0x16cbb44
	function GetHalloweenPumpkinLanternLevel();// 0x16cbacc
	function GetHalloweenPumpkinLanternItem();// 0x16cba88
	function GetHalloweenPumpkinEnergyItem();// 0x16cba44
	function GetHalloweenPumpkinEnergyCount();// 0x16cb9cc
	function GetHalloweenPumpkinEnergyConsumeCount();// 0x16cb910
	function GetEquipmentLevel();// 0x16cb898
	function GetEquipmentBriefMapItem();// 0x16cb71c
	function GetEquipmentBagLevel();// 0x16cb6a4
	function GetEmoteItemInBackpack();// 0x16cb554
	function GetDecalItemInBackpack();// 0x16cb404
	function GetConsumablesInBackpack();// 0x16cb2b4
	function GetColdModeItemNum();// 0x16cb1f8
	function GetColdModeItem();// 0x16cb110
	function GetClothingAndArmorInBackpack();// 0x16cafc0
	function GetCharacterVirtualItemInBackpack();// 0x16caf1c
	function GetCharacterVirtualItemHandleInBackpack();// 0x16caea4
	function GetBPUtils();// 0x16cae7c
	function GetBPIDByResID();// 0x16cae04
	function GetBattleWeaponItemDisplayDataByDefineID();// 0x16cac94
	function GetBattleItemHandlePath();// 0x16cab84
	function GetBattleItemFeatureDataByDefineID();// 0x16caae0
	function GetBatteryChipID();// 0x16caab8
	function GetBackpackItemType();// 0x16caa28
	function GetAttackTipDataByDamageEventType();// 0x16ca844
	function GetAllSkillPropsInBackpack();// 0x16ca6f4
	function GetAllItemsInBackpackWithSubType();// 0x16ca510
	function GetAllItemsInBackpack();// 0x16ca374
	function GetAddtionalData();// 0x16ca14c
	function GenerateRandomInstanceID();// 0x16ca124
	function GenerateItemDefineIDWithRandomInstanceID();// 0x16ca054
	function GenerateItemDefineIDByItemTableIDWithRandomInstanceID();// 0x16c9fc8
	function ForceDropUnEquipItem();// 0x16c9f58
	function ForceDropItemsWithType();// 0x16c9ea4
	function ForceDropItems();// 0x16c9d9c
	function ForceDropItemCannotCarryOnPlane();// 0x16c9d2c
	function ForceDropAll();// 0x16c9cbc
	function ExtractPickupWrapperItems();// 0x16c9c18
	function EnableItemBySubType();// 0x16c9b14
	function CreateLobbyItemHandle();// 0x16c9a50
	function CreateBattleItemHandleListAsync();// 0x16c98d4
	function CreateBattleItemHandleAsync();// 0x16c97a0
	function CreateBattleItemHandle();// 0x16c96dc
	function ConstructBattleItemDataByItemTableID();// 0x16c9638
	function ConstructBattleItemDataByDefineID();// 0x16c9584
	function ClearItemUsefulCacheByDefineID();// 0x16c94fc
	function ClearItemUsefulCache();// 0x16c94e8
	function ClearItemRecord();// 0x16c94d4
	function ClearEquipmentBriefMap();// 0x16c94c0
	function CheckItemUseful();// 0x16c9284
	function CheckItemSubType();// 0x16c91c8
	function CheckCapacityForSwapOrDrop();// 0x16c90c8
	function CanSkillPropsItemBePickedUp();// 0x16c8ff8
	function AddEquipmentBriefMapItem();// 0x16c8ebc
	function AddCharacterVirtualItemHandleToBackpack();// 0x16c8e08

--------------------------------
Class: BackpackBlueprintUtils.Object
	PendingAsyncRequests(StructProperty)[] PendingAsyncRequests;//[Offset: 0xb4 , Size: 12]
	<PendingAsyncRequestList_Key(IntProperty) , PendingAsyncRequestList(StructProperty)> PendingAsyncRequestList;//[Offset: 0xc0 , Size: 60]
	<mapItemRecord_Key(IntProperty) , mapItemRecord(StructProperty)> mapItemRecord;//[Offset: 0xfc , Size: 60]
	<mapPickupBullet_Key(IntProperty) , mapPickupBullet(IntProperty)> mapPickupBullet;//[Offset: 0x138 , Size: 60]
	<mapAttachPos_Key(IntProperty) , mapAttachPos(EnumProperty)> mapAttachPos;//[Offset: 0x174 , Size: 60]
	PickupSetting PickupSetting;//[Offset: 0x1b0 , Size: 192]
	PickupProposeData proposeData;//[Offset: 0x270 , Size: 324]
	NeedToShowTypeList(IntProperty)[] NeedToShowTypeList;//[Offset: 0x3b4 , Size: 12]
	enum CurrentGameModeType;//[Offset: 0x3c0 , Size: 1]
	ActivityItemData ActivityData;//[Offset: 0x3c8 , Size: 48]
	ActivityConfigData ActivityConfig;//[Offset: 0x3f8 , Size: 60]
	SpecialItemData SpecialData;//[Offset: 0x434 , Size: 1]
	<itemGuid2Useful_Key(IntProperty) , itemGuid2Useful(IntProperty)> itemGuid2Useful;//[Offset: 0x438 , Size: 60]
	<gunMainTypeUseful_Key(IntProperty) , gunMainTypeUseful(IntProperty)> gunMainTypeUseful;//[Offset: 0x474 , Size: 60]
	<attachMainTypeUseful_Key(IntProperty) , attachMainTypeUseful(IntProperty)> attachMainTypeUseful;//[Offset: 0x4b0 , Size: 60]
	<bulletMainTypeUseful_Key(IntProperty) , bulletMainTypeUseful(IntProperty)> bulletMainTypeUseful;//[Offset: 0x4ec , Size: 60]
	<medicineAndGrenadeMainTypeUseful_Key(IntProperty) , medicineAndGrenadeMainTypeUseful(IntProperty)> medicineAndGrenadeMainTypeUseful;//[Offset: 0x528 , Size: 60]
	<skillpropsTypeUseful_Key(IntProperty) , skillpropsTypeUseful(IntProperty)> skillpropsTypeUseful;//[Offset: 0x564 , Size: 60]
	<itemPathExist_Key(IntProperty) , itemPathExist(BoolProperty)> itemPathExist;//[Offset: 0x5a0 , Size: 60]
	<EquipmentBriefMap_Key(IntProperty) , EquipmentBriefMap(StructProperty)> EquipmentBriefMap;//[Offset: 0x5dc , Size: 60]
	bool bEnableTableOptimization;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x618 , Size: 1]
	int CharacterVirtualItem_Type;//[Offset: 0x61c , Size: 4]
	int CharacterVirtualItem_TypeSpecificID;//[Offset: 0x620 , Size: 4]
	<BPTableNameMap_Key(IntProperty) , BPTableNameMap(StrProperty)> BPTableNameMap;//[Offset: 0x624 , Size: 60]
	function OnGameModeTypeChanged();// 0x16d3ec4
	function IsVirtualItemData();// 0x16d3e08
	function IsPatchItem();// 0x16d3d80
	function IsParachuteItemType();// 0x16d3cf8
	function IsInPveMode();// 0x206ccd8
	function IsGrenadeCanAutoSwitch();// 0x16d3c70
	function IsGlideItemType();// 0x16d3be8
	function IsGhillieSuitItemType();// 0x16b887c
	function IsBattleItemHandlePathExist();// 0x16d3b24
	function IsBattleItemHandleExist();// 0x16d3a40
	function Is3BackpackID();// 0x206ccd8
	function InitialItemTable();// 0x16d3a24
	function GetWeaponSkinMappingID();// 0x206ccd8
	function GetRawBattleTextByType();// 0x16d3914
	function GetRawBattleTextByRawTextID();// 0x16d3804
	function GetItemSubTypeID();// 0x206ccd8
	function GetItemOperationSoundAndBank();// 0x206ccd8
	function GetEquipmentLevel();// 0x16d377c
	function GetEquipmentBagLevel();// 0x16d36f4
	function GetCharacterVirtualItemInBackpack();// 0x16d3640
	function GetCharacterVirtualItemHandleInBackpack();// 0x16d35b8
	function GetBPTableNameInner();// 0x16d346c
	function GetBPIDByResID();// 0x16d33e4
	function GetBattleWeaponItemDisplayDataByDefineID();// 0x16d3264
	function GetBattleItemHandlePathInner();// 0x16d3144
	function GetBattleItemHandlePath();// 0x16d3024
	function GetBattleItemFeatureDataByDefineID();// 0x16d2f70
	function GenerateItemDefineIDByItemTableID();// 0x16d2e44
	function CreateLobbyItemHandle();// 0x16d2d68
	function CreateBattleItemHandleInner();// 0x16d2c8c
	function CreateBattleItemHandle();// 0x16d2bb0
	function ConstructBattleItemDataByItemTableID();// 0x16d2afc
	function ConstructBattleItemDataByDefineID();// 0x16d2a38
	function ClearItemRecord();// 0x16d2a24
	function AddCharacterVirtualItemToBackpack();// 0x16d2960

--------------------------------
Class: PickupSetting
	int LimitBandage;//[Offset: 0x0 , Size: 4]
	int LimitBandage_pve;//[Offset: 0x4 , Size: 4]
	int LimitMedical;//[Offset: 0x8 , Size: 4]
	int LimitMedical_pve;//[Offset: 0xc , Size: 4]
	int LimitFirstAidKit;//[Offset: 0x10 , Size: 4]
	int LimitFirstAidKit_pve;//[Offset: 0x14 , Size: 4]
	int LimitAnodyne;//[Offset: 0x18 , Size: 4]
	int LimitAnodyne_pve;//[Offset: 0x1c , Size: 4]
	int LimitEnergyDrinks;//[Offset: 0x20 , Size: 4]
	int LimitEnergyDrinks_pve;//[Offset: 0x24 , Size: 4]
	int LimitAdrenaline;//[Offset: 0x28 , Size: 4]
	int LimitAdrenaline_pve;//[Offset: 0x2c , Size: 4]
	int LimitShouliudan;//[Offset: 0x30 , Size: 4]
	int LimitShouliudan_pve;//[Offset: 0x34 , Size: 4]
	int LimitYanwudan;//[Offset: 0x38 , Size: 4]
	int LimitYanwudan_pve;//[Offset: 0x3c , Size: 4]
	int LimitZhenbaodan;//[Offset: 0x40 , Size: 4]
	int LimitZhenbaodan_pve;//[Offset: 0x44 , Size: 4]
	int LimitRanshaodan;//[Offset: 0x48 , Size: 4]
	int LimitRanshaodan_pve;//[Offset: 0x4c , Size: 4]
	int LimitGrenadeZombie;//[Offset: 0x50 , Size: 4]
	int LimitGrenadeYedan;//[Offset: 0x54 , Size: 4]
	int LimitAntidote;//[Offset: 0x58 , Size: 4]
	int LimitBatteryChip;//[Offset: 0x5c , Size: 4]
	int LimitGameCoin;//[Offset: 0x60 , Size: 4]
	int LimitBullet9mm;//[Offset: 0x64 , Size: 4]
	int LimitBullet7_62mm;//[Offset: 0x68 , Size: 4]
	int Limit12koujing;//[Offset: 0x6c , Size: 4]
	int Limit45koujing;//[Offset: 0x70 , Size: 4]
	int Limit300magenandanyao;//[Offset: 0x74 , Size: 4]
	int Limitbolt;//[Offset: 0x78 , Size: 4]
	int LimitBullet5;//[Offset: 0x7c , Size: 4]
	bool AutoPickupPistol;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	bool AutoPickupPistol_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x81 , Size: 1]
	bool AutoPickupLevel3Backpack;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x82 , Size: 1]
	bool AutoPickUpLevel3Backpack_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x83 , Size: 1]
	int LimitSniper2X;//[Offset: 0x84 , Size: 4]
	int LimitSniper2X_pve;//[Offset: 0x88 , Size: 4]
	int LimitSniper3X;//[Offset: 0x8c , Size: 4]
	int LimitSniper3X_pve;//[Offset: 0x90 , Size: 4]
	int LimitSniper4X;//[Offset: 0x94 , Size: 4]
	int LimitSniper4X_pve;//[Offset: 0x98 , Size: 4]
	int LimitSniper6X;//[Offset: 0x9c , Size: 4]
	int LimitSniper6X_pve;//[Offset: 0xa0 , Size: 4]
	int LimitSniper8X;//[Offset: 0xa4 , Size: 4]
	int LimitSniper8X_pve;//[Offset: 0xa8 , Size: 4]
	bool AutoPickupSkillProps;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	int LimitSkillProps;//[Offset: 0xb0 , Size: 4]
	bool AutoPickupSkillProps_pve;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	int LimitSkillProps_pve;//[Offset: 0xb8 , Size: 4]
	int LimitSnowMan;//[Offset: 0xbc , Size: 4]

--------------------------------
Class: PickupProposeData
	pickFirst(StructProperty)[] pickFirst;//[Offset: 0x0 , Size: 12]
	int closeSubType;//[Offset: 0xc , Size: 4]
	int crossbowSubType;//[Offset: 0x10 , Size: 4]
	int panID;//[Offset: 0x14 , Size: 4]
	int pistolSubType;//[Offset: 0x18 , Size: 4]
	int gunType;//[Offset: 0x1c , Size: 4]
	int specialType;//[Offset: 0x20 , Size: 4]
	int specialType2;//[Offset: 0x24 , Size: 4]
	int lens2ID;//[Offset: 0x28 , Size: 4]
	int lens3ID;//[Offset: 0x2c , Size: 4]
	int lens4ID;//[Offset: 0x30 , Size: 4]
	int lens6ID;//[Offset: 0x34 , Size: 4]
	int lens8ID;//[Offset: 0x38 , Size: 4]
	int ID2Type;//[Offset: 0x3c , Size: 4]
	int pistolClipSubType;//[Offset: 0x40 , Size: 4]
	int SubMachineGunClipSubType;//[Offset: 0x44 , Size: 4]
	int SniperClipSubType;//[Offset: 0x48 , Size: 4]
	int RifleClipSubType;//[Offset: 0x4c , Size: 4]
	int gasSubID;//[Offset: 0x50 , Size: 4]
	int backSubType;//[Offset: 0x54 , Size: 4]
	int back3ID;//[Offset: 0x58 , Size: 4]
	int BandageID;//[Offset: 0x5c , Size: 4]
	int EnergyDrinksID;//[Offset: 0x60 , Size: 4]
	int AdrenalineID;//[Offset: 0x64 , Size: 4]
	int AnodyneID;//[Offset: 0x68 , Size: 4]
	int Medical1ID;//[Offset: 0x6c , Size: 4]
	int Medical2ID;//[Offset: 0x70 , Size: 4]
	int AntidoteID;//[Offset: 0x74 , Size: 4]
	int BatteryChipID;//[Offset: 0x78 , Size: 4]
	int GameCoinID;//[Offset: 0x7c , Size: 4]
	int ZhenBaoDan;//[Offset: 0x80 , Size: 4]
	int YanWuDan;//[Offset: 0x84 , Size: 4]
	int RanShaoPing;//[Offset: 0x88 , Size: 4]
	int ShouLei;//[Offset: 0x8c , Size: 4]
	int GrenadeZombie;//[Offset: 0x90 , Size: 4]
	int GrenadeYedan;//[Offset: 0x94 , Size: 4]
	int DefaultMedicineNum;//[Offset: 0x98 , Size: 4]
	int Bullet9mmID;//[Offset: 0x9c , Size: 4]
	int koujing45ID;//[Offset: 0xa0 , Size: 4]
	int Bullet7_62mmID;//[Offset: 0xa4 , Size: 4]
	int Bullet5_56ID;//[Offset: 0xa8 , Size: 4]
	int koujing12ID;//[Offset: 0xac , Size: 4]
	int magenandanyao300ID;//[Offset: 0xb0 , Size: 4]
	int boltID;//[Offset: 0xb4 , Size: 4]
	int DefaultBulletNum;//[Offset: 0xb8 , Size: 4]
	int helmetSubType;//[Offset: 0xbc , Size: 4]
	int armorSubType;//[Offset: 0xc0 , Size: 4]
	int ScoreItemSubType;//[Offset: 0xc4 , Size: 4]
	int SpecialNoDropItemSubType;//[Offset: 0xc8 , Size: 4]
	carryOnPlane(IntProperty)[] carryOnPlane;//[Offset: 0xcc , Size: 12]
	int CapacityThreshold;//[Offset: 0xd8 , Size: 4]
	int GlideSubType;//[Offset: 0xdc , Size: 4]
	int ParachuteItemSubType;//[Offset: 0xe0 , Size: 4]
	int revivalCardID;//[Offset: 0xe4 , Size: 4]
	int SnowManID;//[Offset: 0xe8 , Size: 4]
	float revivalCardValidTime;//[Offset: 0xec , Size: 4]
	firewoodPriority(IntProperty)[] firewoodPriority;//[Offset: 0xf0 , Size: 12]
	meatPriority(IntProperty)[] meatPriority;//[Offset: 0xfc , Size: 12]
	UAVList(IntProperty)[] UAVList;//[Offset: 0x108 , Size: 12]
	ElectricityList(IntProperty)[] ElectricityList;//[Offset: 0x114 , Size: 12]
	ToUseInBackpackSubList(IntProperty)[] ToUseInBackpackSubList;//[Offset: 0x120 , Size: 12]
	ToUseInBackpackIDList(IntProperty)[] ToUseInBackpackIDList;//[Offset: 0x12c , Size: 12]
	notExtractItemIDList(IntProperty)[] notExtractItemIDList;//[Offset: 0x138 , Size: 12]

--------------------------------
Class: ActivityItemData
	ItemDefineID PumpkinLanternItem;//[Offset: 0x0 , Size: 24]
	ItemDefineID PumpkinEnergyItem;//[Offset: 0x18 , Size: 24]

--------------------------------
Class: ActivityConfigData
	<Lv2EnergyCount_Key(IntProperty) , Lv2EnergyCount(IntProperty)> Lv2EnergyCount;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: SpecialItemData

--------------------------------
Class: TableTraver.Object

--------------------------------
Class: ItemTraver.TableTraver.Object

--------------------------------
Class: AttachTraver.TableTraver.Object

--------------------------------
Class: BackpackUtilsEditorAgent.Object
	function SetBackpackNeedInitTable();// 0x16cec78
	function ReleaseBackpackUtils();// 0x16d6864
	function CreateItemIDByTableID();// 0x16d67c4

--------------------------------
Class: BackpackVehicleAvatarHandle.BackpackCommonAvatarHandle.BattleItemHandleBase.ItemHandleBase.Object
	SupportChangeTypes(EnumProperty)[] SupportChangeTypes;//[Offset: 0xf8 , Size: 12]
	BrokenMatData(StructProperty)[] BrokenMatData;//[Offset: 0x104 , Size: 12]
	SkeletalMesh* FPPSkeletalMesh;//[Offset: 0x110 , Size: 40]
	StaticMesh* FPPStaticMesh;//[Offset: 0x138 , Size: 40]
	FPPMatData(StructProperty)[] FPPMatData;//[Offset: 0x160 , Size: 12]
	class STExtraVehicleBase* lobbyWheeledVehicle;//[Offset: 0x170 , Size: 40]
	ParticleSystem* LightEffect;//[Offset: 0x198 , Size: 40]

--------------------------------
Class: BackpackWeaponAttachHandle.BattleItemHandleBase.ItemHandleBase.Object
	WeaponAttachmentConfig WeaponAttachmentConfig;//[Offset: 0xa8 , Size: 472]
	class AnimInstance* animBP;//[Offset: 0x280 , Size: 4]
	class AnimInstance* animBPClass;//[Offset: 0x288 , Size: 40]
	PendantConfigList(StructProperty)[] PendantConfigList;//[Offset: 0x2b0 , Size: 12]
	WeaponPendantMap(StructProperty)[] WeaponPendantMap;//[Offset: 0x2bc , Size: 12]
	BackpackComponent* BackpackComp;//[Offset: 0x2c8 , Size: 4]
	function ReturnWeaponAdditionalBulletsToBackpack();// 0x16d7548
	function ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();// 0x16d752c
	function IsVirtualAvatarHandle();// 0x16d74fc
	function HandleDisuseReplaceByNew();// 0x16d7484
	function GetWidgetList();// 0x16d73b0
	function GetSubSlotID();// 0x16d7380
	function GetSlotID();// 0x16d7350
	function GetMeshPackCfgCopy();// 0x16d72e4
	function GetMeshPackCfg();// 0x16d7124
	function GetAttachmentConfig();// 0x16d70b8
	function GetAnimationBP();// 0x16d7088
	function EquipOrUnEuipAttachment();// 0x16d6f74

--------------------------------
Class: WeaponAttachmentConfig
	FText AttachmentName;//[Offset: 0x0 , Size: 12]
	enum AttachmentSocketType;//[Offset: 0xc , Size: 1]
	enum subSlot;//[Offset: 0xd , Size: 1]
	enum SightType;//[Offset: 0xe , Size: 1]
	bool IsExtendMaxBulletNumInOneClip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	bool IsSilencer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool IsFireSuppressor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool IsCompensator;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	WeaponAttachmentAttrModifys(StructProperty)[] WeaponAttachmentAttrModifys;//[Offset: 0x14 , Size: 12]
	WeaponAttachmentDescs(StructProperty)[] WeaponAttachmentDescs;//[Offset: 0x20 , Size: 12]
	<socketTypeToName_Key(IntProperty) , socketTypeToName(NameProperty)> socketTypeToName;//[Offset: 0x2c , Size: 60]
	WeaponMeshCfg MeshPackage;//[Offset: 0x68 , Size: 320]
	replacementWeapon(StructProperty)[] replacementWeapon;//[Offset: 0x1a8 , Size: 12]
	AttachmentAnimList(ObjectProperty)[] AttachmentAnimList;//[Offset: 0x1b4 , Size: 12]
	ItemDefineID ParentID;//[Offset: 0x1c0 , Size: 24]

--------------------------------
Class: BackpackWeaponInterface.Interface.Object
	function GetWidgetList();// 0x16d9764
	function GetSubSlotID();// 0x16bf110
	function GetSlotID();// 0x1696628
	function GetMeshPackCfgCopy();// 0x16d96f8
	function GetMeshPackCfg();// 0x16d9538
	function GetDefaultAvatarList();// 0x16d9464
	function GetAttachmentConfig();// 0x16d93f8
	function GetAttachmentAvatarList();// 0x16d92e4
	function GetAnimationBP();// 0x16d92b4
	function ApplyAttrModify();// 0x16d91e8

--------------------------------
Class: BaseAIController.BasicAIController.AIController.Controller.Actor.Object
	BehaviorTree(ObjectProperty)[] BehaviorTree;//[Offset: 0x3b0 , Size: 12]
	float CheckPeriod;//[Offset: 0x3bc , Size: 4]
	float RandomDeviation;//[Offset: 0x3c0 , Size: 4]
	float ProtectCountdownTime;//[Offset: 0x3c4 , Size: 4]
	float SpawnEquipDelayTime;//[Offset: 0x3c8 , Size: 4]
	float SpawnEquipFreezeRadius;//[Offset: 0x3cc , Size: 4]
	Vector2D ProtectShootRadius;//[Offset: 0x3d0 , Size: 8]
	float TurnVelocity;//[Offset: 0x3d8 , Size: 4]
	Vector2D DarkMaxAttackDistRange;//[Offset: 0x3dc , Size: 8]
	<WeatherToAttackDist_Key(EnumProperty) , WeatherToAttackDist(EnumProperty)> WeatherToAttackDist;//[Offset: 0x3e4 , Size: 60]
	BackpackComponent* BackpackComponent;//[Offset: 0x688 , Size: 4]
	AIControllerCachedData AIControllerCachedData;//[Offset: 0x68c , Size: 40]
	AIHoleUpComponent* AIHoleUpComponent;//[Offset: 0x6b4 , Size: 4]
	AIBuildingComponent* AIBuildingComponent;//[Offset: 0x6b8 , Size: 4]
	float SpecialDamageScale;//[Offset: 0x6c8 , Size: 4]
	function Respawn();// 0x16da6dc

--------------------------------
Class: AIControllerCachedData
	STExtraBaseCharacter* ControlledPawn;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: BaseCharacterAvengerComp.ActorComponent.Object
	ConfigInitItems(StructProperty)[] ConfigInitItems;//[Offset: 0xbc , Size: 12]
	ConfigForbiddenStates(EnumProperty)[] ConfigForbiddenStates;//[Offset: 0xc8 , Size: 12]
	STExtraBaseCharacter* OwnerCharacter;//[Offset: 0xd4 , Size: 4]
	function ChangeToAvengerWhenPosses();// 0x16daa60

--------------------------------
Class: BaseFPPComponent.ActorComponent.Object
	bool bIsBoltAction;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	STExtraPlayerCharacter* Pawn;//[Offset: 0xcc , Size: 4]
	FName ScopeAimCameraSocketName;//[Offset: 0xd0 , Size: 8]
	FName FPPSocketName;//[Offset: 0xd8 , Size: 8]
	FName BoltActionCurveName;//[Offset: 0xe0 , Size: 8]
	float ScopeZoomSpringArmLength;//[Offset: 0xe8 , Size: 4]
	float BoltActionHoldTimeDefault;//[Offset: 0xf0 , Size: 4]
	float BoltActionFov;//[Offset: 0xf4 , Size: 4]
	float ScopeZoomAlpha;//[Offset: 0xf8 , Size: 4]
	<ScopeZoomBackupMap_Key(NameProperty) , ScopeZoomBackupMap(FloatProperty)> ScopeZoomBackupMap;//[Offset: 0xfc , Size: 60]
	float ScopeZoomSpeed;//[Offset: 0x138 , Size: 4]
	<ScopeZoomFovCurveMap_Key(IntProperty) , ScopeZoomFovCurveMap(ObjectProperty)> ScopeZoomFovCurveMap;//[Offset: 0x13c , Size: 60]
	int CurrentPlayAnimIndex;//[Offset: 0x178 , Size: 4]
	bool bIsAngledOpticalSight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x190 , Size: 1]
	<ScopeZoomMap_Key(NameProperty) , ScopeZoomMap(FloatProperty)> ScopeZoomMap;//[Offset: 0x194 , Size: 60]
	bool InScopeInProcess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1d4 , Size: 1]
	function UpdateScopeCameraOffsets();// 0x16dc1cc
	function SwitchSightConfigMaterial();// 0x206ccd8
	function SwitchScopeMeshAnim();// 0x16dc154
	function SwitchCameraMode();// 0x16dc0dc
	function StopScopeIn();// 0x206ccd8
	function ShowReflectorSightTPPMaterial();// 0x206ccd8
	function SetTagCulling();// 0x206ccd8
	function SetNearClipPlane();// 0x16dc05c
	function ScopingChange();// 0x16dbfdc
	function Scoping();// 0x16dbf64
	function ScopeZoomUpdate();// 0x16dbeec
	function ScopeZoomTick();// 0x16dbe74
	function ScopeZoomCalculate();// 0x16dbd94
	function ScopeTimelineUpdate();// 0x16dbd1c
	function ScopeOutSpeedChange();// 0x16dbc60
	function ScopeOutLogic();// 0x16dbc4c
	function ScopeOutEnd();// 0x206ccd8
	function ScopeOut();// 0x16dbbd4
	function ScopeNotHandFold();// 0x16dbbc0
	function ScopeInterrupt();// 0x16dbb48
	function ScopeInSpeedChange();// 0x16dba8c
	function ScopeInLogic();// 0x16dba78
	function ScopeInEnd();// 0x206ccd8
	function ScopeInContinue();// 0x16dba64
	function ScopeInAfterTimeline();// 0x16dba50
	function ScopeIn();// 0x16db9d8
	function ScopeHandFold();// 0x16db9c4
	function PlayScopeInTimeline();// 0x206ccd8
	function IsUseZoomScope();// 0x16db99c
	function IsRPGScopeIn();// 0x16db974
	function IsCurWeaponAttachedAngledSight();// 0x16db94c
	function IsAngledSight();// 0x16db924
	function InitScopeZoom();// 0x16db868
	function GetSightType();// 0x16db840
	function GetScopeZoomValue();// 0x16db77c
	function GetScopeZoomKey();// 0x16db6b0
	function GetScopeFov();// 0x206ccd8
	function DetachSightLens();// 0x206ccd8
	function BoltAction();// 0x16db638
	function AttachToSight();// 0x206ccd8
	function AttachSightLens();// 0x206ccd8
	function ActiveComponentTickable();// 0x16db624

--------------------------------
Class: BasicGameMode.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	class AIController* AIControllerClass;//[Offset: 0xae0 , Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0xae4 , Size: 4]
	float Radius0;//[Offset: 0xae8 , Size: 4]
	float Radius1;//[Offset: 0xaec , Size: 4]
	float Radius2;//[Offset: 0xaf0 , Size: 4]
	float Radius3;//[Offset: 0xaf4 , Size: 4]
	Vector MapCenter;//[Offset: 0xaf8 , Size: 12]
	float PlaneSpeed;//[Offset: 0xb04 , Size: 4]
	float PlaneHeight;//[Offset: 0xb08 , Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0xb0c , Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0xb10 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0xb14 , Size: 4]
	float BlueCircleRadius;//[Offset: 0xb18 , Size: 4]
	int StartReadyCountDownPlayerNum;//[Offset: 0xb1c , Size: 4]
	int PlayerNumPerTeam;//[Offset: 0xb20 , Size: 4]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb24 , Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb25 , Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb26 , Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb27 , Size: 1]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb28 , Size: 1]
	Vector BornLocation;//[Offset: 0xb2c , Size: 12]
	float BornRadius;//[Offset: 0xb38 , Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0xb3c , Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0xb40 , Size: 4]
	FString GameModeDisplayName;//[Offset: 0xb44 , Size: 12]
	int bIsAutoReloadWeaponGameMode;//[Offset: 0xb50 , Size: 4]
	int bIsPickUpFillBulletGameMode;//[Offset: 0xb54 , Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0xb58 , Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0xb5c , Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0xb60 , Size: 4]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0xb64 , Size: 4]
	float OutBoundDamage;//[Offset: 0xb68 , Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c , Size: 1]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6d , Size: 1]
	byte WorldLoadedType;//[Offset: 0xb6e , Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0xb70 , Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xb74 , Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb78 , Size: 1]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb79 , Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0xb7a , Size: 1]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0xb7c , Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xb84 , Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xb88 , Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xb8c , Size: 4]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xb90 , Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xb94 , Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb98 , Size: 1]
	enum GameModeType;//[Offset: 0xb99 , Size: 1]
	GameModeServiceBase* GameModeService;//[Offset: 0xb9c , Size: 4]
	UAEStateMachineComponent* SMComp;//[Offset: 0xba0 , Size: 4]
	AIActingComponent* AIActingComp;//[Offset: 0xba4 , Size: 4]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0xba8 , Size: 4]

--------------------------------
Class: GamemodeAIDataAsset.DataAsset.Object
	SpawnEquipDataBase(StructProperty)[] SpawnEquipDataBase;//[Offset: 0x20 , Size: 12]
	float RandomStartJumpTime;//[Offset: 0x2c , Size: 4]
	float RandomEndJumpTime;//[Offset: 0x30 , Size: 4]
	float JumpRadius;//[Offset: 0x34 , Size: 4]
	float JumpHeight;//[Offset: 0x38 , Size: 4]
	float RandomAccelerateStart;//[Offset: 0x3c , Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x40 , Size: 4]
	float OpenParachuteHeight;//[Offset: 0x44 , Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x48 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x4c , Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x50 , Size: 4]
	float CheckNoPlayerRadiusSquare;//[Offset: 0x54 , Size: 4]
	float WhiteCircleRaduisCanPrne;//[Offset: 0x58 , Size: 4]
	float WhiteCircleRaduisMedicine;//[Offset: 0x5c , Size: 4]
	float StopdeliverTime;//[Offset: 0x60 , Size: 4]
	float NoCirlceRadius;//[Offset: 0x64 , Size: 4]
	float TraceHeight;//[Offset: 0x68 , Size: 4]
	float RangeMin;//[Offset: 0x6c , Size: 4]
	float RangeMax;//[Offset: 0x70 , Size: 4]
	float OriginCheckSquare;//[Offset: 0x74 , Size: 4]
	float DestCheckSquare;//[Offset: 0x78 , Size: 4]
	Vector2D FlyToCenterOfCircle;//[Offset: 0x7c , Size: 8]
	float FlyToCircleRadius;//[Offset: 0x84 , Size: 4]

--------------------------------
Class: GameModeDataAsset.DataAsset.Object
	Probabilities(FloatProperty)[] Probabilities;//[Offset: 0x20 , Size: 12]
	GameModeParams(StructProperty)[] GameModeParams;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: GameModeServiceBase.Object

--------------------------------
Class: UAEStateMachineComponent.ActorComponent.Object
	delegate OnBeforeTransientEvent;//[Offset: 0xbc , Size: 12]
	delegate OnAfterTransientEvent;//[Offset: 0xc8 , Size: 12]
	FString Tag;//[Offset: 0xd4 , Size: 12]
	States(ObjectProperty)[] States;//[Offset: 0xe0 , Size: 12]
	<Transitions_Key(StrProperty) , Transitions(StructProperty)> Transitions;//[Offset: 0xec , Size: 60]
	UAETransitionState StartState;//[Offset: 0x128 , Size: 12]
	UAETransitionState EndState;//[Offset: 0x134 , Size: 12]
	UAEState* CurrentState;//[Offset: 0x140 , Size: 4]
	function Start();// 0x45c05a0
	function SetTag();// 0x45c0448
	function OnTransientEvent__DelegateSignature();// 0x206ccd8
	function IsInState();// 0x45c02e8
	function GetCurrentState();// 0x45c02cc
	function ForceDoEvent();// 0x45c0174
	function Finish();// 0x45c0160
	function DoEvent();// 0x45c0008
	function CanDoEvent();// 0x45bfea8

--------------------------------
Class: UAETransitionState
	FString StateName;//[Offset: 0x0 , Size: 12]

--------------------------------
Class: UAEState.Object
	function Update();// 0x16fb390
	function OnLeave();// 0x1728d44
	function OnEnter();// 0x18d1054

--------------------------------
Class: BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	bool bUseSpawnSpotAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf0 , Size: 1]
	bool bUseSpawnActorAdjustPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf1 , Size: 1]
	bool bSpawnAdjustCollisionConsiderHeight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf2 , Size: 1]
	GameModeParms GameModeParms;//[Offset: 0xaf4 , Size: 192]
	STEPlayerStartsList(ObjectProperty)[] STEPlayerStartsList;//[Offset: 0xbb4 , Size: 12]
	<BornIDToPlayerStartsMap_Key(IntProperty) , BornIDToPlayerStartsMap(StructProperty)> BornIDToPlayerStartsMap;//[Offset: 0xbc0 , Size: 60]
	enum GameModeType;//[Offset: 0xbfc , Size: 1]
	AIActingComponent* AIActingComp;//[Offset: 0xc00 , Size: 4]
	int bEnableAIPolicyDecisionLog;//[Offset: 0xc04 , Size: 4]
	int bEnableAIPolicyDecisionLogShipping;//[Offset: 0xc08 , Size: 4]
	bool IsDestroyNoActiveWorldActor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc0c , Size: 1]
	float AIPolicyDecisionRelevantUpdateInterval;//[Offset: 0xc10 , Size: 4]
	float RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;//[Offset: 0xc14 , Size: 4]
	int AIPolicyDecisionTargetPlayerNum;//[Offset: 0xc18 , Size: 4]
	bool bVisibleCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc1c , Size: 1]
	ItemsBoxConfigDataAsset* PickupBoxConfigDataAsset;//[Offset: 0xc20 , Size: 4]
	class AIController* AIControllerClass;//[Offset: 0xc24 , Size: 4]
	class AIController* NewAIControllerClass;//[Offset: 0xc28 , Size: 4]
	class UAELevelDirector* LevelDirectorClass;//[Offset: 0xc2c , Size: 4]
	UAELevelDirector* LevelDirector;//[Offset: 0xc30 , Size: 4]
	byte WorldLoadedType;//[Offset: 0xc34 , Size: 1]
	int MaxNoConsiderActorNum;//[Offset: 0xc38 , Size: 4]
	int MaxDestoryActorNumPerFrame;//[Offset: 0xc3c , Size: 4]
	int PlayerNumPerTeam;//[Offset: 0xc40 , Size: 4]
	bool IgnoreWorldLevelProbeUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc44 , Size: 1]
	bool IsRefreshWorldActiveRange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc45 , Size: 1]
	FString GameModeDisplayName;//[Offset: 0xc48 , Size: 12]
	float CircleSpeedMultiplicator;//[Offset: 0xc54 , Size: 4]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc58 , Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc59 , Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5a , Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5b , Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5c , Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5d , Size: 1]
	bool bForbitInvalidTeammateHurt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5e , Size: 1]
	bool bForbitFallingDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5f , Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc60 , Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc61 , Size: 1]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc62 , Size: 1]
	bool bDropDeadBoxWrappersToGround;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc63 , Size: 1]
	DropDeadBoxWrappersToGroundBlackList(IntProperty)[] DropDeadBoxWrappersToGroundBlackList;//[Offset: 0xc64 , Size: 12]
	float DropDeadBoxWrappersToGroundGridStep;//[Offset: 0xc70 , Size: 4]
	bool bEnableWeaponAttachmentBindDropToWeaponWrapper;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc74 , Size: 1]
	FString GameModeConfigPath;//[Offset: 0xc78 , Size: 12]
	bool bIsAutoReloadWeaponGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc84 , Size: 1]
	bool bIsPickUpFillBulletGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc85 , Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc86 , Size: 1]
	bool IsSkipNearDeath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc87 , Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc88 , Size: 1]
	GameModeParam CurPlaneRouteData;//[Offset: 0xc8c , Size: 68]
	Vector BornLocation;//[Offset: 0xcd0 , Size: 12]
	Vector AIBornLocation;//[Offset: 0xcdc , Size: 12]
	float BornRadius;//[Offset: 0xce8 , Size: 4]
	byte LastCircleCountToDestroyActorOnServer;//[Offset: 0xcec , Size: 1]
	byte LastCircleCountToDestroyActorOnServerConfig;//[Offset: 0xced , Size: 1]
	int MaxDynamicLoadingWorldPlayer;//[Offset: 0xcf0 , Size: 4]
	int MaxDynamicLoadingWorldPlayerConfig;//[Offset: 0xcf4 , Size: 4]
	AIWorldVolume* AIWorldVolume;//[Offset: 0xcf8 , Size: 4]
	bool bOpenWarModeSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcfc , Size: 1]
	float MaxAIAllowJumpRadius;//[Offset: 0xd18 , Size: 4]
	float HorizontalFlyDistanceAfterOpenParachute;//[Offset: 0xd1c , Size: 4]
	bool EditorGuidMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd20 , Size: 1]
	GameModeDataAsset* GameModeDataAsset;//[Offset: 0xd24 , Size: 4]
	bool bImmediatelySpawnAI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd28 , Size: 1]
	bool bRespawnAIPosWithTeam;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd29 , Size: 1]
	MonsterProbeComponent* RegisterMonsterProbe;//[Offset: 0xd2c , Size: 4]
	AIWorldSoundManagerComponent* AIWorldSoundManagerComp;//[Offset: 0xd30 , Size: 4]
	SeasonStatueBase* StatueBaseActor;//[Offset: 0xd34 , Size: 4]
	float OverrideBackpackCapacity;//[Offset: 0xd38 , Size: 4]
	bool bOverrideBackpackCapacity;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd3c , Size: 1]
	bool IsEnableLuaEnv;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd5c , Size: 1]
	FString GameScriptPath;//[Offset: 0xd60 , Size: 12]
	FString LuaFileEntryFile;//[Offset: 0xd6c , Size: 12]
	FString PreloadLuaFile;//[Offset: 0xd78 , Size: 12]
	FString LuaTriggersPath;//[Offset: 0xd84 , Size: 12]
	FString LuaModName;//[Offset: 0xd90 , Size: 12]
	FString LuaTriggersFile;//[Offset: 0xd9c , Size: 12]
	GameModeLuaEnv* LuaEnv;//[Offset: 0xda8 , Size: 4]
	CustomWidgets(StrProperty)[] CustomWidgets;//[Offset: 0xdac , Size: 12]
	FString CustomUIName;//[Offset: 0xdb8 , Size: 12]
	GameModeState* CurrentState;//[Offset: 0xdc4 , Size: 4]
	AllGameModeStates(ObjectProperty)[] AllGameModeStates;//[Offset: 0xdc8 , Size: 12]
	GameModeState* GameModeStateActive;//[Offset: 0xdd4 , Size: 4]
	GameModeState* GameModeStateReady;//[Offset: 0xdd8 , Size: 4]
	GameModeState* GameModeStateFighting;//[Offset: 0xddc , Size: 4]
	GameModeState* GameModeStateFinished;//[Offset: 0xde0 , Size: 4]
	FName CurGameModeState;//[Offset: 0xde8 , Size: 8]
	bool bInitGlobalConfig;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdfc , Size: 1]
	CircleMgrComponent* CircleMgrComponent;//[Offset: 0xe00 , Size: 4]
	Actor* PlanePawn;//[Offset: 0xe04 , Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe08 , Size: 1]
	AllProbeComps(ObjectProperty)[] AllProbeComps;//[Offset: 0xe0c , Size: 12]
	AIProbeComponent* RegisterAIProbe;//[Offset: 0xe18 , Size: 4]
	WorldLevelProbeComponent* RegisterWorldLevelProbe;//[Offset: 0xe1c , Size: 4]
	float OutBoundDamage;//[Offset: 0xe20 , Size: 4]
	AIGroupManagerComponent* AIGroupManagerComp;//[Offset: 0xea4 , Size: 4]
	AnimalTeleportComponent* AnimalTeleportComp;//[Offset: 0xea8 , Size: 4]
	<AISpawnTypeCache_Key(UInt32Property) , AISpawnTypeCache(ByteProperty)> AISpawnTypeCache;//[Offset: 0xeac , Size: 60]
	PlaneComponent* PlaneComp;//[Offset: 0xee8 , Size: 4]
	PlayerRespawnComponent* PlayerRespawnComponent;//[Offset: 0xeec , Size: 4]
	RespawnItemConfig* DefaultGeneratePlayerItemConfig;//[Offset: 0xef0 , Size: 4]
	SeasonPlanes(StructProperty)[] SeasonPlanes;//[Offset: 0xf7c , Size: 12]
	int MatchGoal;//[Offset: 0xfcc , Size: 4]
	bool bIsNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xfd0 , Size: 1]
	ClientSettingBaseOnGameMode ClientSettingBaseOnGameMode;//[Offset: 0xfe8 , Size: 56]
	ItemAttachListCfg(StructProperty)[] ItemAttachListCfg;//[Offset: 0x1020 , Size: 12]
	bool bShouldGenerateItemWhenStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x102c , Size: 1]
	RespawnItemConfigList(StructProperty)[] RespawnItemConfigList;//[Offset: 0x1030 , Size: 12]
	RespawnItemConfig* RespawnItemConfig;//[Offset: 0x103c , Size: 4]
	FakePlayerCustomComponent* FakePlayerCustomComponent;//[Offset: 0x1040 , Size: 4]
	FName FeatureDefaultPawnName;//[Offset: 0x1048 , Size: 8]
	FName FeaturePlayerControllerName;//[Offset: 0x1050 , Size: 8]
	FName FeatureWeaponName;//[Offset: 0x1058 , Size: 8]
	bool CallTeamMateStateChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1060 , Size: 1]
	bool CircleDefaultActive;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1061 , Size: 1]
	int VehicleExplosionLifeSpan;//[Offset: 0x1064 , Size: 4]
	bool IsEnableReqEnterVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1068 , Size: 1]
	bool IsEnableReqExitVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1069 , Size: 1]
	bool IsEnableReqChangeVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x106a , Size: 1]
	float DelaySpawnVehicleTime;//[Offset: 0x106c , Size: 4]
	float DelayDestroyVehicleTime;//[Offset: 0x1070 , Size: 4]
	int MaxAllowSpawnVehicleCount;//[Offset: 0x1074 , Size: 4]
	bool bIgnorePlayerStartWithVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1078 , Size: 1]
	<PlayerVehicleInReady_Key(UInt32Property) , PlayerVehicleInReady(ObjectProperty)> PlayerVehicleInReady;//[Offset: 0x107c , Size: 60]
	bool bDelayAddPawnWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10b8 , Size: 1]
	WaitAddWeaponPlayerList(ObjectProperty)[] WaitAddWeaponPlayerList;//[Offset: 0x10bc , Size: 12]
	CVarConfigs(StructProperty)[] CVarConfigs;//[Offset: 0x10c8 , Size: 12]
	function UseRoomCustomCircleParams();// 0x16e3fd8
	function UseFixedCircleParams();// 0x16e3e7c
	function StopAllFakePlayerAIBehaviorTree();// 0x16e3e68
	function StatisticsVehicleDamage();// 0x16e3d60
	function SpawnAI();// 0x16e3ce8
	function SetStateLeftTime();// 0x16e3c70
	function SetGameEndReportData();// 0x16e3c54
	function SetAITypeCache();// 0x16e3b98
	function RestartPlayer();// 0x16e3b18
	function ResetGameMode();// 0x16e3afc
	function RemoveUnuseComponent();// 0x16e3a48
	function RegisterComponentInternal();// 0x16e3938
	function OnVehicleKill();// 0x16e3874
	function OnPlayerControlDestroyEnd();// 0x16e37f4
	function OnGameModeStateChange();// 0x16e37d8
	function OnGameEnterFinish();// 0x16e37bc
	function OnGameEnterFight();// 0x16e37a0
	function IsVisualFieldFeatureSupported();// 0x16e3778
	function IsRevivalGameMode();// 0x16e3748
	function IsFeatureSupported();// 0x16e36c8
	function IsCanJump();// 0x16e3640
	function InitlializeRespawnItemConfig();// 0x16e362c
	function InitialGameModeState();// 0x16e3618
	function HandleGameEnd();// 0x16e35fc
	function GotoReadyState();// 0x16e35e8
	function GotoFinishedState();// 0x16e35cc
	function GotoFightingState();// 0x16e35b0
	function GotoActiveState();// 0x16e359c
	function GetGlobalOverrideClass();// 0x16e351c
	function GetDefaultAIType();// 0x16e349c
	function GetCurWeatherPhaseIndex();// 0x16e346c
	function GetCurGameModeState();// 0x16e3448
	function GetAIWorldSoundManagerComponent();// 0x16e3420
	function GetAITypeCache();// 0x16e3354
	function GenerateRespawnItemsForAllPlayers();// 0x16e3340
	function FindAIControllerWithPlayerKey();// 0x16e32c0
	function ExecuteCVarConfig();// 0x16e32ac
	function CreateGameModeComponents();// 0x16e3290
	function CreateAndRegisterComponent();// 0x16e31d4
	function ChoosePlayerStartByTeamId();// 0x16e314c
	function CheckNoHumanExist();// 0x16e311c
	function CheckMatchGoalAchieved();// 0x16e30ec
	function CheckGameEnd();// 0x16e30bc
	function ChangeStateGM();// 0x16e3044
	function CanCharacterCircleTakePain();// 0x16e2fbc
	function CalculateGameTerminatorInfo();// 0x16e2ef8

--------------------------------
Class: GameModeParms
	SubSystemConfig SSC_DeferredExitGame;//[Offset: 0x0 , Size: 24]
	SubSystemConfig SSC_RecallTeammate;//[Offset: 0x18 , Size: 24]
	SubSystemConfig SSC_RescueHelicopter;//[Offset: 0x30 , Size: 24]
	SubSystemConfig SSC_HeavyWeapon;//[Offset: 0x48 , Size: 24]
	SubSystemConfig SSC_TDMHardPoint;//[Offset: 0x60 , Size: 24]
	SubSystemConfig SSC_VisualField;//[Offset: 0x78 , Size: 24]
	SubSystemConfig SSC_WorldActorFlag;//[Offset: 0x90 , Size: 24]
	SubSystemConfig SSC_SuperCold;//[Offset: 0xa8 , Size: 24]

--------------------------------
Class: SubSystemConfig
	enum SubSystemId;//[Offset: 0x0 , Size: 1]
	bool bEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	enum ConstructType;//[Offset: 0x2 , Size: 1]
	class Object* SubSystemClass;//[Offset: 0x4 , Size: 4]
	DynamicCompConfig DCC_PlayerController;//[Offset: 0x8 , Size: 8]
	DynamicCompConfig DCC_PlayerPawn;//[Offset: 0x10 , Size: 8]

--------------------------------
Class: DynamicCompConfig
	bool bIsServerOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	class Object* DynamicCompClass;//[Offset: 0x4 , Size: 4]

--------------------------------
Class: ItemsBoxConfigDataAsset.DataAsset.Object
	DataTable* DataBase;//[Offset: 0x20 , Size: 4]
	FString TablePath;//[Offset: 0x24 , Size: 12]
	AirDropBoxGroupConfigs(StructProperty)[] AirDropBoxGroupConfigs;//[Offset: 0x30 , Size: 12]
	SuperAirDropBoxGroupConfigs(StructProperty)[] SuperAirDropBoxGroupConfigs;//[Offset: 0x3c , Size: 12]
	TreasureBoxGroupConfigs(StructProperty)[] TreasureBoxGroupConfigs;//[Offset: 0x48 , Size: 12]
	function GetTreasureBoxGenerateDataList();// 0x175a6b4
	function GetTargetItemsDataFromTableByCategoryFilter();// 0x175a4d4
	function GetSuperAirDropBoxGenerateDataList();// 0x175a414
	function GetAirDropBoxGenerateDataList();// 0x175a354

--------------------------------
Class: UAELevelDirector.Actor.Object
	bool IsEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	bool ClientEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c5 , Size: 1]
	bool ServerEnvEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c6 , Size: 1]
	InstanceActions(StructProperty)[] InstanceActions;//[Offset: 0x2c8 , Size: 12]
	ClassPaths(StrProperty)[] ClassPaths;//[Offset: 0x2d4 , Size: 12]
	FString ConfigFilePath;//[Offset: 0x2e0 , Size: 12]
	FString ClientConfigFilePath;//[Offset: 0x2ec , Size: 12]
	UAELevelDirectorRepData LevelDirectorRepData;//[Offset: 0x2f8 , Size: 16]
	FunctionLibList(ObjectProperty)[] FunctionLibList;//[Offset: 0x308 , Size: 12]
	TriggersFlowBase* TriggersFlowTree;//[Offset: 0x314 , Size: 4]
	<TriggerObjectMap_Key(StrProperty) , TriggerObjectMap(ObjectProperty)> TriggerObjectMap;//[Offset: 0x318 , Size: 60]
	VariableSet* AllVariableSet;//[Offset: 0x354 , Size: 4]
	UAETriggerParamFuncLib* TriggerParamFuncLib;//[Offset: 0x358 , Size: 4]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x35c , Size: 4]
	FString DescData;//[Offset: 0x360 , Size: 12]
	TaskRepData TaskData;//[Offset: 0x374 , Size: 16]
	function StartLevelDirector();// 0x4263ab4
	function SetTriggerRunType();// 0x4263918
	function SetEnable();// 0x426389c
	function S2Sim_CallExcuteAction();// 0x16f99b4
	function RequestTriggerComplete();// 0x42637e8
	function OnRep_LevelDirectorData();// 0x42637d4
	function InitialLevelDirector();// 0x42637a4
	function GetTrigger();// 0x426352c
	function GetHasBeenInit();// 0x4263504
	function GetDataSet();// 0x42634dc
	function GetCurTaskID();// 0x42634b4
	function ForceExecuteTrigger();// 0x173bc00
	function FlowControllSubControll();// 0x426324c
	function FlowControllOr();// 0x4262fe4
	function FlowControllOneSequence();// 0x4262d6c
	function FlowControllMultiSequence();// 0x4262b04
	function FlowControllAnd();// 0x426284c
	function DeactiveTrigger();// 0x42625dc
	function DeactiveNode();// 0x4262484
	function ClientExecuteAction();// 0x426230c
	function AddEventToTrigger();// 0x4262170
	function AddConditionToTrigger();// 0x4261fcc
	function AddActionToTrigger();// 0x4261e28
	function ActiveTrigger();// 0x4261bb8
	function ActiveNode();// 0x4261a60

--------------------------------
Class: UAELevelDirectorRepData
	UFlowNodeRepData FlowNodeRepData;//[Offset: 0x0 , Size: 16]

--------------------------------
Class: UFlowNodeRepData
	FString RepData;//[Offset: 0x0 , Size: 12]
	int NodeID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: TriggersFlowBase.Object
	UAELevelDirector* OwnerLevelDirector;//[Offset: 0x24 , Size: 4]
	<Nodes_Key(StrProperty) , Nodes(ObjectProperty)> Nodes;//[Offset: 0x28 , Size: 60]
	bool IsRun;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]

--------------------------------
Class: VariableSet.Object
	VariableSetCachedActors DataActors;//[Offset: 0x58 , Size: 64]

--------------------------------
Class: VariableSetCachedActors
	Actor* LastAccessActor;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: UAETriggerParamFuncLib.UAETriggerFuncLib.Object

--------------------------------
Class: UAETriggerFuncLib.Object
	ClassItemList(StructProperty)[] ClassItemList;//[Offset: 0x1c , Size: 12]
	VariableSet* DataSet;//[Offset: 0x28 , Size: 4]
	function GetLastIteratorActor();// 0x4264cfc

--------------------------------
Class: LevelEventCenter.Object
	<TriggerEvents_Key(StrProperty) , TriggerEvents(ObjectProperty)> TriggerEvents;//[Offset: 0x28 , Size: 60]
	<EventListeners_Key(StrProperty) , EventListeners(StructProperty)> EventListeners;//[Offset: 0x68 , Size: 60]

--------------------------------
Class: TaskRepData
	FString TaskName;//[Offset: 0x0 , Size: 12]
	int TaskID;//[Offset: 0xc , Size: 4]

--------------------------------
Class: GameModeParam
	float Radius0;//[Offset: 0x0 , Size: 4]
	float Radius1;//[Offset: 0x4 , Size: 4]
	float Radius3;//[Offset: 0x8 , Size: 4]
	bool bUsingPolygon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	float Radius2;//[Offset: 0x10 , Size: 4]
	PolygonPoints(StructProperty)[] PolygonPoints;//[Offset: 0x14 , Size: 12]
	float BlueCircleRadius;//[Offset: 0x20 , Size: 4]
	Vector MapCenter;//[Offset: 0x24 , Size: 12]
	float PlaneSpeed;//[Offset: 0x30 , Size: 4]
	float PlaneHeight;//[Offset: 0x34 , Size: 4]
	float CanOpenParachuteHeight;//[Offset: 0x38 , Size: 4]
	float ForceOpenParachuteHeight;//[Offset: 0x3c , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: MonsterProbeComponent.GameModeProbeComponent.ActorComponent.Object
	int TimeToSpawnPawn;//[Offset: 0xbc , Size: 4]
	SpawnGroupInfoList(StructProperty)[] SpawnGroupInfoList;//[Offset: 0xc0 , Size: 12]
	<PawnTableData_Key(IntProperty) , PawnTableData(StructProperty)> PawnTableData;//[Offset: 0xcc , Size: 60]
	function InitialItemTable();// 0x170e77c

--------------------------------
Class: SeasonStatueBase.Actor.Object
	function SetStatueBaseInfo();// 0x17c4064

--------------------------------
Class: GameModeLuaEnv.Object
	FString GameScriptPath;//[Offset: 0x1c , Size: 12]
	FString LuaFileEntryFile;//[Offset: 0x28 , Size: 12]
	FString PreloadLuaFile;//[Offset: 0x34 , Size: 12]
	FString LuaTriggersPath;//[Offset: 0x40 , Size: 12]
	FString LuaModName;//[Offset: 0x4c , Size: 12]
	FString LuaTriggersFile;//[Offset: 0x58 , Size: 12]
	LuaStateWrapper* LuaStateWrapper;//[Offset: 0x68 , Size: 4]
	LuaTimerManager* LuaTimerMgr;//[Offset: 0x70 , Size: 4]
	LuaTriggerManager* LuaTriggerMgr;//[Offset: 0x74 , Size: 4]
	GameLuaAPI* GameLuaAPI;//[Offset: 0x78 , Size: 4]
	function InitLuaGlobalVariable();// 0x1735730
	function InitLuaGlobalTools();// 0x173571c
	function InitLuaFile();// 0x1735708
	function InitLuaEnv();// 0x17356f4
	function GetLuaModPath();// 0x1735634
	function CreateSluaState();// 0x1735620
	function CallLuaWaitGlobalScriptFunction();// 0x1735564
	function CallLuaGlobalScriptFunction();// 0x17354a8

--------------------------------
Class: LuaStateWrapper.Object

--------------------------------
Class: LuaTimerManager.Object
	STExtraGameInstance* GameInstance;//[Offset: 0x1c , Size: 4]
	<_timers_Key(IntProperty) , _timers(StructProperty)> _timers;//[Offset: 0x24 , Size: 60]

--------------------------------
Class: STExtraGameInstance.UAEGameInstance.GameInstance.Object
	delegate OnUserQualitySettingChanged;//[Offset: 0x244 , Size: 12]
	delegate OnCampRoomChanged;//[Offset: 0x250 , Size: 12]
	RenderQualitySettings renderQualitySettingsLastSet;//[Offset: 0x25c , Size: 3]
	RenderQualitySettings renderQualitySettingsApplying;//[Offset: 0x25f , Size: 3]
	RenderQualitySettings renderQualitySettingsInit;//[Offset: 0x262 , Size: 3]
	UserDetailSetting UserDetailSetting;//[Offset: 0x268 , Size: 96]
	bool ExeCmdSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dc , Size: 1]
	bool LobbyRenderSwitch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2dd , Size: 1]
	bool LobbyRenderSwitchLow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2de , Size: 1]
	bool LobbyRenderSwitchMid;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2df , Size: 1]
	bool LobbyRenderSwitchHigh;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2e0 , Size: 1]
	int iEnableRegionID;//[Offset: 0x2e4 , Size: 4]
	SwitchesInMaps(StructProperty)[] SwitchesInMaps;//[Offset: 0x2e8 , Size: 12]
	LobbyBackupRenderSettings(StructProperty)[] LobbyBackupRenderSettings;//[Offset: 0x2f4 , Size: 12]
	LobbyRenderSettingsHigh(StructProperty)[] LobbyRenderSettingsHigh;//[Offset: 0x300 , Size: 12]
	LobbyRenderSettingsMid(StructProperty)[] LobbyRenderSettingsMid;//[Offset: 0x30c , Size: 12]
	LobbyRenderSettingsLow(StructProperty)[] LobbyRenderSettingsLow;//[Offset: 0x318 , Size: 12]
	LowFPSBackupRenderSettings(StructProperty)[] LowFPSBackupRenderSettings;//[Offset: 0x324 , Size: 12]
	LowFPSRenderSettingProfileHigh(StructProperty)[] LowFPSRenderSettingProfileHigh;//[Offset: 0x330 , Size: 12]
	LowFPSRenderSettingProfileMid(StructProperty)[] LowFPSRenderSettingProfileMid;//[Offset: 0x33c , Size: 12]
	MobileHDROpenConfig(StructProperty)[] MobileHDROpenConfig;//[Offset: 0x348 , Size: 12]
	MobileHDRCloseConfig(StructProperty)[] MobileHDRCloseConfig;//[Offset: 0x354 , Size: 12]
	MobileMSAAOpenConfig(StructProperty)[] MobileMSAAOpenConfig;//[Offset: 0x360 , Size: 12]
	Mobile2xMSAAOpenConfig(StructProperty)[] Mobile2xMSAAOpenConfig;//[Offset: 0x36c , Size: 12]
	MobileMSAACloseConfig(StructProperty)[] MobileMSAACloseConfig;//[Offset: 0x378 , Size: 12]
	MobilePPOpenConfig(StructProperty)[] MobilePPOpenConfig;//[Offset: 0x384 , Size: 12]
	MobilePPCloseConfig(StructProperty)[] MobilePPCloseConfig;//[Offset: 0x390 , Size: 12]
	RePairDeleteDir(StrProperty)[] RePairDeleteDir;//[Offset: 0x39c , Size: 12]
	RenderStyleParamsInMaps(StructProperty)[] RenderStyleParamsInMaps;//[Offset: 0x3a8 , Size: 12]
	ObjectPoolClassConfigs(StructProperty)[] ObjectPoolClassConfigs;//[Offset: 0x3b4 , Size: 12]
	ObjectPoolIgnoringProperties(NameProperty)[] ObjectPoolIgnoringProperties;//[Offset: 0x3c0 , Size: 12]
	FString AutoTestMissionType;//[Offset: 0x3cc , Size: 12]
	FString CustomLineStr;//[Offset: 0x3d8 , Size: 12]
	enum GamePlayMode;//[Offset: 0x3e4 , Size: 4]
	Vector2D FOVRange;//[Offset: 0x3e8 , Size: 8]
	Vector2D FOVScreenSizeCullingFactorRange;//[Offset: 0x3f0 , Size: 8]
	bool bFOVChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f8 , Size: 1]
	bool PVENightChangeCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3f9 , Size: 1]
	float SwimRotateX;//[Offset: 0x3fc , Size: 4]
	bool IsCutdownForHighTemp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x400 , Size: 1]
	WonderfulRecordingCut* WonderfulRecordingCut;//[Offset: 0x420 , Size: 4]
	DeathPlayback* DeathPlayback;//[Offset: 0x424 , Size: 4]
	CompletePlayback* CompletePlayback;//[Offset: 0x428 , Size: 4]
	ReplayUIManager* ReplayUIManager;//[Offset: 0x42c , Size: 4]
	MaterialInstanceDynamic* m_CustomTexMat;//[Offset: 0x430 , Size: 4]
	AntiCheatConfig* ACConfig;//[Offset: 0x480 , Size: 4]
	FeatureSetCollection* FeatureSetCollection;//[Offset: 0x490 , Size: 4]
	function UserQualitySettingChanged__DelegateSignature();// 0x206ccd8
	function UpdateWorldCullDistanceVolumes();// 0x18404a8
	function TestAyncLoad();// 0x1840494
	function SuperBattle();// 0x184033c
	function SetWorldDoorCullDistance();// 0x18402c4
	function SetWorldCullDistanceVolumeEnable();// 0x1840128
	function SetWorldCompositionRelativeDistance();// 0x184006c
	function SetUserVulkanSetting();// 0x183ffec
	function SetUserSetingShadowQuality();// 0x183ff6c
	function SetUserSetingMobilceContentSCale();// 0x183fef4
	function SetSoundEffectQuality();// 0x183fe74
	function SetRenderQuality();// 0x183fde0
	function SetKillZValue();// 0x183fd68
	function SetHZBMobileState();// 0x183fd54
	function SetFOVScreenSizeCullingFactor();// 0x183fcdc
	function SetEnableCullDistanceVolumeOffset();// 0x183fb34
	function SetEnableCullDistanceVolumeMovable();// 0x183f98c
	function SetCustomRouteLine();// 0x183f978
	function SetAutoMissionType();// 0x183f964
	function ReSetFOVScreenSizeCullingFactor();// 0x183f950
	function RenderForLowFPS();// 0x183f93c
	function RefuseRenderForLowFPS();// 0x183f928
	function QuitGame();// 0x183f914
	function PreSetRenderQuality();// 0x183f82c
	function OnStopAutoTest();// 0x183f818
	function OnStartAutoTest();// 0x183f804
	function ObjectPoolServerSwitch();// 0x183f784
	function ModifyAllLandscapeStreamingDistance();// 0x173e6cc
	function MakeLevelStreamingDistanceShorterWhenLanded();// 0x183f770
	function isUsingAssumedNameInReplay();// 0x183f748
	function IsSupportTagCulling();// 0x183f72c
	function IsSupportSwitchSoundEffectQuality();// 0x183f704
	function IsSupportSwitchRenderLevelRuntime();// 0x183f6dc
	function IsSupportMSAA();// 0x183f6b4
	function IsSupportLDR();// 0x183f68c
	function IsRunningOnVulkan();// 0x183f664
	function IsPVENightChangeCullDistance();// 0x183f63c
	function IsOpenHDR();// 0x183f614
	function IsIOSOneGigabyteDevice();// 0x180fad8
	function IsGAutomatorTest();// 0x183f5ec
	function IsAutoRunTestGamePVEProfile();// 0x183f5c4
	function IsAutoRunTestGamePVE();// 0x183f59c
	function IsAutoRunTestGameBindCompoment();// 0x183f574
	function IsAutoRunTestGame();// 0x183f54c
	function GVoiceCampRoomChanged__DelegateSignature();// 0x206ccd8
	function GMStandalone();// 0x183f3f4
	function GetWonderfulRecordingCut();// 0x183f3cc
	function GetUserVulkanSetting();// 0x183f3a4
	function GetUserSetingShadowQuality();// 0x183f37c
	function GetUserQualitySettingLevel();// 0x183f360
	function GetSoundEffectQuality();// 0x183f338
	function GetReplayUIManager();// 0x183f310
	function GetRenderQualityLastSet();// 0x183f2c0
	function GetRenderQualityApplying();// 0x183f270
	function GetInstance();// 0x183f248
	function GetExactDeviceLevel();// 0x183f220
	function GetDeviceUpdateVersionFlag();// 0x183f1f0
	function GetDeviceProfilerLevel();// 0x183f130
	function GetDeviceMaxSupportSoundEffect();// 0x183f108
	function GetDeviceMaxSupportLevel();// 0x183f0e0
	function GetDeviceMaxFPSByDeviceLevel();// 0x183f060
	function GetDeviceLimit();// 0x183f038
	function GetDeviceLevel();// 0x183f008
	function GetDefaultSoundEffectQuality();// 0x183efe0
	function GetDeathPlayback();// 0x183efb8
	function GetCurrentRHI();// 0x183eef8
	function GetCompletePlayback();// 0x183eed0
	function GetAutoRunTestServerIdx();// 0x183eea8
	function GetAutoRunPassWD();// 0x183edf0
	function GetAutoRunLuaTest();// 0x183ed38
	function GetAutoRunAccount();// 0x183ec80
	function GetApplyingShadowQuality();// 0x183ec58
	function GetActiveDeviceProfile();// 0x183eb98
	function ExecuteCMD();// 0x183e928
	function EnableStreamingLevelLOD();// 0x183e8a8
	function DrawMateritalToTexRenderTarget();// 0x183e7a8
	function DeleteSavedFiles();// 0x183e720
	function CreateTexRenderTarget();// 0x183e65c
	function CreateCustomTex();// 0x183e598
	function ChangeLevelFXActor();// 0x183e490
	function ChangeCullDistanceVolume();// 0x183e410
	function AutoActiveLDR();// 0x183e3fc
	function ActiveStyle_PPForDynamicRender();// 0x183e37c
	function ActiveStyle_PP();// 0x183e2fc
	function ActiveStyle_ACESForDynamicRender();// 0x183e27c
	function ActiveStyle();// 0x183e1fc
	function ActiveNightVision();// 0x183e17c
	function ActiveMSAA();// 0x183e0fc
	function ActiveDynamicStyle();// 0x183e02c

--------------------------------
Class: UAEGameInstance.GameInstance.Object
	ClientBaseInfo ClientBaseInfo;//[Offset: 0x140 , Size: 216]
	UAETableManager* TableManager;//[Offset: 0x230 , Size: 4]
	FrontendHUD* AssociatedFrontendHUD;//[Offset: 0x238 , Size: 4]
	UIMsgBus* AssociatedUIMsgBus;//[Offset: 0x240 , Size: 4]
	function LuaLeakDetect();// 0x199a260
	function LuaDoString();// 0x199a1a4
	function GetWeatherTime();// 0x199a188
	function GetWeatherID();// 0x199a168
	function GetUIMsgBus();// 0x199a140
	function GetDeviceLevel();// 0x183f008
	function GetDataTableFromCurentGI();// 0x199a084
	function GetDataTable();// 0x1999fc0
	function GetAssociatedFrontendHUD();// 0x1999f98

--------------------------------
Class: ClientBaseInfo
	FString OpenID;//[Offset: 0x0 , Size: 12]
	uint64 RoleID;//[Offset: 0x10 , Size: 8]
	FString GameSvrId;//[Offset: 0x18 , Size: 12]
	FString GameAppID;//[Offset: 0x24 , Size: 12]
	uint16 AreaID;//[Offset: 0x30 , Size: 2]
	int8 PlatID;//[Offset: 0x32 , Size: 1]
	FString ZoneID;//[Offset: 0x34 , Size: 12]
	uint64 BattleID;//[Offset: 0x40 , Size: 8]
	FString BattleServerIP;//[Offset: 0x48 , Size: 12]
	uint32 BattleServerPort;//[Offset: 0x54 , Size: 4]
	FString UserName;//[Offset: 0x58 , Size: 12]
	FString PicUrl;//[Offset: 0x64 , Size: 12]
	uint32 PlayerKey;//[Offset: 0x70 , Size: 4]
	int8 WeatherID;//[Offset: 0x78 , Size: 1]
	FString WeatherLevelName;//[Offset: 0x7c , Size: 12]
	float WeatherTime;//[Offset: 0x88 , Size: 4]
	MrpcsData(IntProperty)[] MrpcsData;//[Offset: 0x8c , Size: 12]
	<AdvConfig_Key(IntProperty) , AdvConfig(StrProperty)> AdvConfig;//[Offset: 0x9c , Size: 60]

--------------------------------
Class: RenderQualitySettings
	byte RenderQualitySetting;//[Offset: 0x0 , Size: 1]
	byte RenderStyleSetting;//[Offset: 0x1 , Size: 1]
	bool RenderMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2 , Size: 1]

--------------------------------
Class: UserDetailSetting
	int DeviceQualityLevel;//[Offset: 0x0 , Size: 4]
	int TCQualityGrade;//[Offset: 0x4 , Size: 4]
	int DeviceMaxSoundEffectLevel;//[Offset: 0x8 , Size: 4]
	int DeviceMaxQualityLevel;//[Offset: 0xc , Size: 4]
	int UserQualitySetting;//[Offset: 0x10 , Size: 4]
	int DeviceSupportHDR;//[Offset: 0x14 , Size: 4]
	int IsOpenHDR;//[Offset: 0x18 , Size: 4]
	int UserHDRSetting;//[Offset: 0x1c , Size: 4]
	int IsSupportMSAA;//[Offset: 0x20 , Size: 4]
	bool UserMSAASetting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	float UserMCSSetting;//[Offset: 0x28 , Size: 4]
	int UserShadowSetting;//[Offset: 0x2c , Size: 4]
	int UserShadowSwitch;//[Offset: 0x30 , Size: 4]
	int UserTeamQualityEnhanceSetting;//[Offset: 0x34 , Size: 4]
	int PUBGLimitSetting;//[Offset: 0x38 , Size: 4]
	int PUBGDeviceUpdateFlag;//[Offset: 0x3c , Size: 4]
	int PUBGDeviceFPSDef;//[Offset: 0x40 , Size: 4]
	int PUBGDeviceFPSLow;//[Offset: 0x44 , Size: 4]
	int PUBGDeviceFPSMid;//[Offset: 0x48 , Size: 4]
	int PUBGDeviceFPSHigh;//[Offset: 0x4c , Size: 4]
	int PUBGDeviceFPSHDR;//[Offset: 0x50 , Size: 4]
	bool IsSupportTagCulling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	int PUBGTeamQualityEnhance;//[Offset: 0x58 , Size: 4]
	int UserVulkanSetting;//[Offset: 0x5c , Size: 4]

--------------------------------
Class: UAETableManager.Object
	FString TableRelativeDir;//[Offset: 0x1c , Size: 12]
	TablesNeedReleasedInBattle(NameProperty)[] TablesNeedReleasedInBattle;//[Offset: 0x28 , Size: 12]
	TableObjList(ObjectProperty)[] TableObjList;//[Offset: 0x70 , Size: 12]
	World* CurWorld;//[Offset: 0x7c , Size: 4]
	<TableObjMap_Key(NameProperty) , TableObjMap(WeakObjectProperty)> TableObjMap;//[Offset: 0x80 , Size: 60]
	function ReleaseTable();// 0x199e508
	function GetTablePtr();// 0x199e488

--------------------------------
Class: UIMsgBus.CustomMsgBus.BlueprintFunctionLibrary.Object
	function GetUIMsgBus();// 0x19897ec

--------------------------------
Class: CustomMsgBus.BlueprintFunctionLibrary.Object
	<MsgListenerGroupMap_Key(StrProperty) , MsgListenerGroupMap(ObjectProperty)> MsgListenerGroupMap;//[Offset: 0x1c , Size: 60]
	<TaggedMsgListenerGroupMap_Key(StrProperty) , TaggedMsgListenerGroupMap(ObjectProperty)> TaggedMsgListenerGroupMap;//[Offset: 0x58 , Size: 60]
	function UnRegistTaggedMsgListener();// 0x19890d0
	function UnRegistMsgListener();// 0x1988f2c
	function RegistTaggedMsgListener();// 0x1988c70
	function RegistMsgListener();// 0x1988acc
	function PushTaggedMsg();// 0x19887c8
	function PushMsg();// 0x1988624

--------------------------------
Class: WonderfulRecordingCut.Object
	WonderfulCutOutputDataList(StructProperty)[] WonderfulCutOutputDataList;//[Offset: 0x1c , Size: 12]
	WonderfulCutContinuousKillOutputDataList(StructProperty)[] WonderfulCutContinuousKillOutputDataList;//[Offset: 0x28 , Size: 12]
	bool bIsChickenDinner;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	float ChickenDinnerTimeSecs;//[Offset: 0x60 , Size: 4]
	bool bIsShowSmallCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	float ShowSmallCircleTimeSecs;//[Offset: 0x68 , Size: 4]
	ShootDamageDataList(StructProperty)[] ShootDamageDataList;//[Offset: 0x6c , Size: 12]
	function StopRecord();// 0x192acbc
	function StartRecord();// 0x192aca8
	function SortShootDamageData();// 0x192aa6c
	function RemoveOutputDataInContinuousKillRange();// 0x192a938
	function CaptureRecordCut();// 0x192a65c
	function BuildOutputData();// 0x192a648
	function BuildContinuousKillOutputData();// 0x192a634

--------------------------------
Class: DeathPlayback.GameReplay.Object
	bool bDeathPlaybackEnable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	function IsSwitchedOffByDevice();// 0x171c56c
	function GetReplayTargetName();// 0x171c4ac
	function EnableDeathPlayback();// 0x171c42c

--------------------------------
Class: GameReplay.Object
	UserWidget* GMUI;//[Offset: 0x24 , Size: 4]
	class UserWidget* GMUIClass;//[Offset: 0x28 , Size: 40]
	ReplayUIManager* pReplayUIMgr;//[Offset: 0x58 , Size: 4]
	bool bIsPausePlaying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	STExtraPlayerController* PlayerController;//[Offset: 0xc0 , Size: 4]
	function StopRecordingReplay();// 0x17101ac
	function StopPlay();// 0x1738b28
	function StartRecordingReplay();// 0x1710168
	function SetSpectatorName();// 0x1738980
	function SetReplayStreamer();// 0x17387e8
	function SetIsGMSpectator();// 0x173876c
	function SetCurrentReplayTimeToSeconds();// 0x17386f4
	function ReplayUnbindBulletNumChangedDelegate();// 0x173867c
	function ReplayOnWeaponChanged();// 0x1738668
	function ReplayOnSimulatedWeaponChanged();// 0x1738654
	function ReplayOnBulletNumChanged();// 0x1738640
	function ReplayBindBulletNumChangedDelegate();// 0x17385c8
	function PlayReplay();// 0x1738598
	function PauseReplay();// 0x1738508
	function IsInRecordState();// 0x17384e0
	function IsInPlayState();// 0x17384b8
	function IsFastForwarding();// 0x1738490
	function HaveRecordingData();// 0x1738460
	function GetSpectatorName();// 0x171c4ac
	function GetCurrentReplayTotalTimeInSeconds();// 0x1738438
	function GetCurrentReplayCurTimeInSeconds();// 0x1738410

--------------------------------
Class: ReplayUIManager.Object
	STExtraPlayerController* pSTExtraPC;//[Offset: 0x20 , Size: 4]
	STExtraGameInstance* pExtraInst;//[Offset: 0x24 , Size: 4]
	STExtraPlayerState* pExtraPS;//[Offset: 0x28 , Size: 4]
	STExtraBaseCharacter* pViewCharacter;//[Offset: 0x2c , Size: 4]
	class UserWidget* ReplayUIPath;//[Offset: 0x30 , Size: 40]
	ReplayUserWidget* pReplayUserWidget;//[Offset: 0x58 , Size: 4]
	SavedTeammateInfoArray(StructProperty)[] SavedTeammateInfoArray;//[Offset: 0x5c , Size: 12]
	<AssumedMap_Key2name_Key(UInt32Property) , AssumedMap_Key2name(StrProperty)> AssumedMap_Key2name;//[Offset: 0x68 , Size: 60]
	<AssumedMap_Name2name_Key(StrProperty) , AssumedMap_Name2name(StrProperty)> AssumedMap_Name2name;//[Offset: 0xa4 , Size: 60]
	int ReplayTargetTeamID;//[Offset: 0xf0 , Size: 4]
	FString ReplayTargetName;//[Offset: 0xf4 , Size: 12]
	function UpdateReplayUI();// 0x17bf97c
	function ReplayUnbindBulletNumChangedDelegate();// 0x17bf904
	function ReplayOnWeaponChanged();// 0x17bf8f0
	function ReplayOnSimulatedWeaponChanged();// 0x17bf8dc
	function ReplayOnBulletNumChanged();// 0x17bf8c8
	function ReplayBindBulletNumChangedDelegate();// 0x17bf850
	function ReleaseManager();// 0x17bf83c
	function InitManager();// 0x17bf828
	function ChangeProgress();// 0x17bf814

--------------------------------
Class: ReplayUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	byte DemoType;//[Offset: 0x2f4 , Size: 1]
	FString ReplayNameStr;//[Offset: 0x2f8 , Size: 12]
	int ReplayTeamID;//[Offset: 0x304 , Size: 4]
	ReplayUIManager* pReplayUIManager;//[Offset: 0x308 , Size: 4]
	Vector UIOffsetVec;//[Offset: 0x30c , Size: 12]
	<CurEnemyUIMapTable_Key(IntProperty) , CurEnemyUIMapTable(StructProperty)> CurEnemyUIMapTable;//[Offset: 0x318 , Size: 60]
	function UpdateWeaponUI();// 0x17c06c4
	function UpdateReplayUI();// 0x1705f24
	function UpdateOneEnemyUI();// 0x17c05d4
	function UpdateBulletUI();// 0x17c05b8
	function OnReplayProgressChange();// 0x17c059c
	function InitIngameUI();// 0x17c0580
	function HideUnnecessaryUI();// 0x176b2fc
	function HideOneEnemyUI();// 0x1768994
	function ForceUpdateUI();// 0x17c0564
	function ClearLastReplayUI();// 0x17c0548
	function AddOneEnemyUI();// 0x17c04c0

--------------------------------
Class: CompletePlayback.GameReplay.Object
	class UserWidget* UIClass;//[Offset: 0xc8 , Size: 40]
	UAEUserWidget* ReplayUI;//[Offset: 0xf0 , Size: 4]
	int MaxHoursForKeepingFiles;//[Offset: 0xf4 , Size: 4]
	bool isUsingAssumedName;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf8 , Size: 1]
	ExcludedGameModes(StrProperty)[] ExcludedGameModes;//[Offset: 0xfc , Size: 12]
	bool isProgressChanged;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x108 , Size: 1]
	bool isForceUIMsg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x109 , Size: 1]
	TeammateKeyArray(UInt32Property)[] TeammateKeyArray;//[Offset: 0x110 , Size: 12]
	function PlayDemoWithFilename();// 0x170d8d0
	function GetDemoPlayTime();// 0x170d810

--------------------------------
Class: FeatureSetCollection.Object
	FeatureConfigItemList(StructProperty)[] FeatureConfigItemList;//[Offset: 0x1c , Size: 12]
	FeatureSetItemList(StructProperty)[] FeatureSetItemList;//[Offset: 0x28 , Size: 12]

--------------------------------
Class: LuaTriggerManager.Object
	<EventListenMap_Key(StrProperty) , EventListenMap(IntProperty)> EventListenMap;//[Offset: 0x1c , Size: 60]
	function SetEventListen();// 0x1767134
	function RemoveEventListen();// 0x1766f90
	function Init();// 0x16ad21c
	function AddEventListen();// 0x1766dec

--------------------------------
Class: GameLuaAPI.Object
	function UIShowTips();// 0x1732d94
	function UISetWidgetVisibility();// 0x1732b60
	function UISetWidgetText();// 0x17326f8
	function UIOperateWidget();// 0x17322d8
	function UICustomBehavior();// 0x1731f88
	function TeleportPlayerToVehicle();// 0x1731e80
	function TeleportPawn();// 0x1731d74
	function StopPlayerJoin();// 0x1731d60
	function SpawnVehicle();// 0x1731c4c
	function ShowMessage();// 0x1731af4
	function SetTeamID();// 0x1731a38
	function RevivePlayerAtPosition();// 0x173192c
	function RevivePlayer();// 0x17318b4
	function RemoveBuff();// 0x17317ac
	function RemoveActor();// 0x173172c
	function RemoteDestroyActor();// 0x1731624
	function RemoteCreateActor();// 0x1731440
	function IsVehicle();// 0x17313c0
	function IsValid();// 0x1731340
	function IsPlayerAlive();// 0x17312c0
	function IsPlayer();// 0x1731240
	function IsInArea();// 0x1731180
	function HasBuff();// 0x17310bc
	function GetWeaponBulletResId();// 0x173103c
	function GetPlayersOnVehicle();// 0x1730f34
	function GetPlayerControllerByPlayerKey();// 0x1730eb4
	function GetPlayerByPlayerKey();// 0x1730e34
	function GetOnePlayerBase();// 0x1730e0c
	function GetOnePlayer();// 0x1730de4
	function GetNetConnection();// 0x1730d64
	function GetItemNumByResID();// 0x1730ca0
	function GetEquipWeaponList();// 0x1730b98
	function GetDecratorActorsByVolume();// 0x1730a4c
	function GetDecratorActorsByShpere();// 0x1730900
	function GetDecratorActors();// 0x17307b4
	function GetCurrentUseWeapon();// 0x1730734
	function GetAllVehicles();// 0x1730674
	function GetAllPlayerStates();// 0x17305b4
	function GetAllPlayerPawns();// 0x17304f4
	function GetAllPlayerControllers();// 0x1730434
	function GetActorResId();// 0x17303b4
	function EndMatch();// 0x17302f8
	function DamageTarget();// 0x17301b0
	function CreatePickup();// 0x1730008
	function CreatePawn();// 0x172feac
	function CreateFakePlayer();// 0x172fd50
	function CreateAreaVolume();// 0x172fc38
	function CreateAreaSphere();// 0x172fb74
	function CreateActor();// 0x172fa18
	function CastToVehicle();// 0x172f998
	function CastToPlayerState();// 0x172f918
	function CastToPlayer();// 0x172f898
	function AddItemByResID();// 0x172f790
	function AddBuff();// 0x172f688

--------------------------------
Class: GameModeState.Object
	float StateTime;//[Offset: 0x30 , Size: 4]
	BattleRoyaleGameMode* OwningGameMode;//[Offset: 0x34 , Size: 4]
	GameStateBase* OwningGameState;//[Offset: 0x38 , Size: 4]
	function GotoNextState();// 0x1735f78

--------------------------------
Class: BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	delegate OnGameModeEnterFlying;//[Offset: 0x10d4 , Size: 12]
	delegate OnGameModeExitFlying;//[Offset: 0x10e0 , Size: 12]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1100 , Size: 1]
	int StartReadyCountDownPlayerNum;//[Offset: 0x1104 , Size: 4]
	bool bServerOpenPassWallCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1108 , Size: 1]
	float CharacterNetCullDistanceSquared;//[Offset: 0x110c , Size: 4]
	GamemodeAIDataAsset* GamemodeAIDataAsset;//[Offset: 0x1110 , Size: 4]
	float DragOnGroundDownTraceDistance;//[Offset: 0x1114 , Size: 4]
	float DragOnGroundUpTraceDistance;//[Offset: 0x1118 , Size: 4]
	bool EnableAIWorldVolume;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x111c , Size: 1]
	class ChallengeLevelRules* ChallengeLevelRulesClass;//[Offset: 0x1134 , Size: 4]
	ChallengeLevelRules* ChallengeLevelRules;//[Offset: 0x1138 , Size: 4]
	CrowdManagerComponent* CrowdManager;//[Offset: 0x113c , Size: 4]
	bool bReplacePistolWhenPickUpMainWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1140 , Size: 1]
	delegate OnGameModeEnterPlane;//[Offset: 0x1144 , Size: 12]
	function GetChallengeLevelRules();// 0x16e295c

--------------------------------
Class: ChallengeLevelRules.Object
	UAELevelDirector* LevelDirector;//[Offset: 0x1c , Size: 4]
	function SpawnLevelDirector();// 0x16fb390
	function OnReceiveTriggerMsg();// 0x16fb1e8
	function InitLevel();// 0x16d3ec4

--------------------------------
Class: CrowdManagerComponent.ActorComponent.Object
	float TimeHorizon;//[Offset: 0xbc , Size: 4]
	float AvoidanceWeight;//[Offset: 0xc0 , Size: 4]
	float CohesionWeight;//[Offset: 0xc4 , Size: 4]
	float AlignmentWeight;//[Offset: 0xc8 , Size: 4]
	float ArriveWeight;//[Offset: 0xcc , Size: 4]
	float PushedWeight;//[Offset: 0xd0 , Size: 4]
	float SeparationWeight;//[Offset: 0xd4 , Size: 4]
	bool bPauseTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	bool bSingleTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd9 , Size: 1]
	bool bFlipSegmentNormal;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xda , Size: 1]
	bool bOpenAvoidance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xdb , Size: 1]
	float DragDistanceWhenStuck;//[Offset: 0xdc , Size: 4]
	float DetermineAgentStuckTime;//[Offset: 0xe0 , Size: 4]
	float DetermineAgentStuckDistSq;//[Offset: 0xe4 , Size: 4]
	<actor2AgentIndex_Key(ObjectProperty) , actor2AgentIndex(IntProperty)> actor2AgentIndex;//[Offset: 0x4fc , Size: 60]
	function SetQueryInterfaceBlueprint();// 0x170f564
	function RemoveCrowdAgentBlueprint();// 0x170f4ec
	function MoveToPositionBlueprint();// 0x170f3dc
	function AddCrowdAgentBlueprint();// 0x170f174

--------------------------------
Class: WorldLevelProbeComponent.GameModeProbeComponent.ActorComponent.Object
	IgnoreClassesNeverRemove(ClassProperty)[] IgnoreClassesNeverRemove;//[Offset: 0xbc , Size: 12]
	bool IsIgnoreLastCircle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc8 , Size: 1]

--------------------------------
Class: PlaneComponent.ActorComponent.Object
	PlaneData CurPlaneData;//[Offset: 0xbc , Size: 116]
	class Pawn* PlaneClass;//[Offset: 0x130 , Size: 4]
	BehaviorTree* PlaneBT;//[Offset: 0x134 , Size: 4]
	bool bEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x138 , Size: 1]
	CachedTotalPlayer(ObjectProperty)[] CachedTotalPlayer;//[Offset: 0x13c , Size: 12]
	CachedTotalAI(ObjectProperty)[] CachedTotalAI;//[Offset: 0x148 , Size: 12]
	int FlightTimes;//[Offset: 0x154 , Size: 4]
	int NotifyEndFlightDelayTime;//[Offset: 0x158 , Size: 4]
	function NotifyEndFlight();// 0x1798464

--------------------------------
Class: PlaneData
	int FlightNo;//[Offset: 0x0 , Size: 4]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4 , Size: 1]
	Actor* ThePlane;//[Offset: 0x8 , Size: 4]
	bool bCanJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	Vector PlaneVelocity;//[Offset: 0x10 , Size: 12]
	Vector PlaneStartLoc;//[Offset: 0x1c , Size: 12]
	Vector PlaneEndLoc;//[Offset: 0x28 , Size: 12]
	Vector2D CanJumpLoc;//[Offset: 0x34 , Size: 8]
	Vector2D ForceJumpLoc;//[Offset: 0x3c , Size: 8]
	int TotalPlayerNum;//[Offset: 0x44 , Size: 4]
	TotalPlayers(ObjectProperty)[] TotalPlayers;//[Offset: 0x48 , Size: 12]
	CurPlayers(ObjectProperty)[] CurPlayers;//[Offset: 0x54 , Size: 12]
	int TotalAINum;//[Offset: 0x60 , Size: 4]
	TotalAIs(ObjectProperty)[] TotalAIs;//[Offset: 0x64 , Size: 12]
	int CurAINum;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: BehaviorTree.Object
	BTCompositeNode* RootNode;//[Offset: 0x1c , Size: 4]
	BlackboardData* BlackboardAsset;//[Offset: 0x20 , Size: 4]
	RootDecorators(ObjectProperty)[] RootDecorators;//[Offset: 0x24 , Size: 12]
	RootDecoratorOps(StructProperty)[] RootDecoratorOps;//[Offset: 0x30 , Size: 12]

--------------------------------
Class: BTCompositeNode.BTNode.Object
	Children(StructProperty)[] Children;//[Offset: 0x3c , Size: 12]
	Services(ObjectProperty)[] Services;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: BTNode.Object
	FString NodeName;//[Offset: 0x20 , Size: 12]
	BehaviorTree* TreeAsset;//[Offset: 0x2c , Size: 4]
	BTCompositeNode* ParentNode;//[Offset: 0x30 , Size: 4]

--------------------------------
Class: PlayerRespawnComponent.ActorComponent.Object
	bool bUseWeaponScheme;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	float DefaultPlayerRespawnTime;//[Offset: 0xc0 , Size: 4]
	float DefaultRespawnInvincibleTime;//[Offset: 0xc4 , Size: 4]
	enum RespawnPointType;//[Offset: 0xc8 , Size: 1]
	bool RespawnKeepAllItems;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc9 , Size: 1]
	RespawnIgnoreKeepItemTypes(IntProperty)[] RespawnIgnoreKeepItemTypes;//[Offset: 0xcc , Size: 12]
	RespawnIgnoreKeepItemIds(IntProperty)[] RespawnIgnoreKeepItemIds;//[Offset: 0xd8 , Size: 12]
	RespawnNeedReplaceWeaponIds(IntProperty)[] RespawnNeedReplaceWeaponIds;//[Offset: 0xe4 , Size: 12]
	<RespawnReplaceWeaponMap_Key(UInt32Property) , RespawnReplaceWeaponMap(StructProperty)> RespawnReplaceWeaponMap;//[Offset: 0xf0 , Size: 60]
	RespawnKeepAllItemData CustomRespawnItemData;//[Offset: 0x12c , Size: 24]
	DefaultWeaponList(IntProperty)[] DefaultWeaponList;//[Offset: 0x144 , Size: 12]
	float bRestoreDataDelay;//[Offset: 0x150 , Size: 4]
	bool bRestoreDataDelayOnRespawnAll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x154 , Size: 1]
	bool bReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x155 , Size: 1]
	BattleRoyaleGameModeBase* OwnerGameMode;//[Offset: 0x20c , Size: 4]
	function HandlePlayerDisuseItem();// 0x179be84
	function HandleCacheWeapon();// 0x179bdc8
	function ChangeWeaponSchemeIndex();// 0x1698eb0

--------------------------------
Class: RespawnKeepAllItemData
	ItemDatas(StructProperty)[] ItemDatas;//[Offset: 0x0 , Size: 12]
	WeaponDatas(StructProperty)[] WeaponDatas;//[Offset: 0xc , Size: 12]

--------------------------------
Class: RespawnItemConfig.DataAsset.Object
	MajorGroupList(StructProperty)[] MajorGroupList;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: FakePlayerCustomComponent.ActorComponent.Object
	FString tableName;//[Offset: 0xbc , Size: 12]
	<RowMap_Key(IntProperty) , RowMap(StructProperty)> RowMap;//[Offset: 0xc8 , Size: 60]
	function InitRowDataMap();// 0x1727018
	function InitAIParam();// 0x1726f28
	function GetControllerPath();// 0x1726e20

--------------------------------
Class: GameModeStateActive.GameModeState.Object
	int PlayerNumToNextState;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: GameModeStateReady.GameModeState.Object
	float AutoGroupParachuteTeamTime;//[Offset: 0x3c , Size: 4]
	float StopJoinTime;//[Offset: 0x40 , Size: 4]
	float ForceStartCountDownTime;//[Offset: 0x44 , Size: 4]
	bool bCanSendStopJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	function StopJoin();// 0x1737d84

--------------------------------
Class: GameModeStateFighting.GameModeState.Object
	UAENetDriver* NetDriver;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BattleRoyalChallengeGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	MultipleBattleLogicManager* MultipleBattleLogicManager;//[Offset: 0x1160 , Size: 4]

--------------------------------
Class: MultipleBattleLogicManager.ActorComponent.Object
	<BattleDataMap_Key(IntProperty) , BattleDataMap(ObjectProperty)> BattleDataMap;//[Offset: 0xbc , Size: 60]

--------------------------------
Class: UAEGameState.GameState.GameStateBase.Info.Actor.Object
	bool bTeamIDChgDeactivePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31d , Size: 1]
	FString WeaponAttrReloadTableName;//[Offset: 0x320 , Size: 12]
	FString VehicleAttrReloadTableName;//[Offset: 0x32c , Size: 12]
	bool IsInitTable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x338 , Size: 1]
	function GetWeaponAttrReloadTableRow();// 0x1c8ed7c
	function GetVehicleAttrReloadTableRow();// 0x1c8ecf4

--------------------------------
Class: STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	Vector AirplaneStartLoc;//[Offset: 0x344 , Size: 12]
	Vector AirplaneStopLoc;//[Offset: 0x350 , Size: 12]
	Vector AirplaneCanJumpLoc;//[Offset: 0x35c , Size: 12]
	Vector AirplaneForceJumpLoc;//[Offset: 0x368 , Size: 12]
	bool IsTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x374 , Size: 1]
	Vector BlueCircle;//[Offset: 0x378 , Size: 12]
	Vector WhiteCircle;//[Offset: 0x384 , Size: 12]
	float CirclePain;//[Offset: 0x390 , Size: 4]
	AirAttackOrder AirAttackOrder;//[Offset: 0x394 , Size: 48]
	Vector AirAttackArea;//[Offset: 0x3c4 , Size: 12]
	delegate OnSafeZoneTips;//[Offset: 0x3d0 , Size: 12]
	delegate OnHideCircle;//[Offset: 0x3dc , Size: 12]
	delegate OnBlueCirclePreWarning;//[Offset: 0x3e8 , Size: 12]
	delegate OnBlueCircleRun;//[Offset: 0x3f4 , Size: 12]
	delegate OnBlueCircleSizeAndPosition;//[Offset: 0x400 , Size: 12]
	delegate OnCharacterCircleWaveOver;//[Offset: 0x40c , Size: 12]
	delegate VehiclePostInitComponentDelegate;//[Offset: 0x418 , Size: 12]
	delegate VehicleDestroyedDelegate;//[Offset: 0x424 , Size: 12]
	int PlayerNum;//[Offset: 0x43c , Size: 4]
	bool IsUseGameStartCountDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x440 , Size: 1]
	delegate OnPlayerNumChange;//[Offset: 0x444 , Size: 12]
	delegate OnBeKilledNumChange;//[Offset: 0x450 , Size: 12]
	delegate OnGameEnd;//[Offset: 0x45c , Size: 12]
	bool bIsTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x468 , Size: 1]
	bool IsShowDeadBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x469 , Size: 1]
	bool IsWeaponFPPOffsetInTDMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46a , Size: 1]
	bool bReInitUIAfterReCreatePawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46b , Size: 1]
	bool bForbidAutoAimAt;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46c , Size: 1]
	bool bForbidAutoOpendoor;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46d , Size: 1]
	bool bForbitAudioVisual;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46e , Size: 1]
	bool bForbitAutoPick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x46f , Size: 1]
	bool bForbitHurtEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x470 , Size: 1]
	bool bGunSamePriority;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x471 , Size: 1]
	bool bShouldDeferredExitGame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x472 , Size: 1]
	bool bUseFootPrint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x473 , Size: 1]
	forbitPickItemTypeList(IntProperty)[] forbitPickItemTypeList;//[Offset: 0x474 , Size: 12]
	int TrainingCountdownTimer;//[Offset: 0x480 , Size: 4]
	bool bIsWeaponAutoReloadMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x484 , Size: 1]
	FString GrenadeEffectPath;//[Offset: 0x488 , Size: 12]
	bool bUseSpecialGrenadeEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x494 , Size: 1]
	bool bAnniversarySignalGunEffect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x495 , Size: 1]
	bool bGodzillaWarmUpSwitchOpened;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x496 , Size: 1]
	bool bOpenNewbieGuideInDeathMatch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x497 , Size: 1]
	bool bIsPickUpFillBulletMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x498 , Size: 1]
	bool bShowSkullInOB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x499 , Size: 1]
	bool bRegisterPickUpsOnEnterFight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49a , Size: 1]
	bool bEnableAutoAimTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49b , Size: 1]
	bool bEnablePickUpTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49c , Size: 1]
	bool bEnableUpdateClosestVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49d , Size: 1]
	bool bPlayVehicleMusic;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49e , Size: 1]
	float TrainingModePickUpColdCD;//[Offset: 0x4a0 , Size: 4]
	float PickUpColdCountDownToleranceTime;//[Offset: 0x4a4 , Size: 4]
	float PickUpColdCountDownMinTime;//[Offset: 0x4a8 , Size: 4]
	float TrainingModeDropLifeTime;//[Offset: 0x4ac , Size: 4]
	bool bDebugEnableDamageEffectInTrainingMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b0 , Size: 1]
	bool bEnabledReInitUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4b1 , Size: 1]
	delegate OnAirAttack;//[Offset: 0x4b4 , Size: 12]
	delegate OnInfectedAreaWarn;//[Offset: 0x4c0 , Size: 12]
	bool IsFPPGameMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cc , Size: 1]
	bool IsCanSwitchFPP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4cd , Size: 1]
	bool bResetBulletNumToMaxBulletNum;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4ce , Size: 1]
	EnableMapPackages(NameProperty)[] EnableMapPackages;//[Offset: 0x4d0 , Size: 12]
	EnableMapLayers(NameProperty)[] EnableMapLayers;//[Offset: 0x4dc , Size: 12]
	int PvePoliceOfficeTriggerCount;//[Offset: 0x4e8 , Size: 4]
	int PveZombieGrenadeCount;//[Offset: 0x4ec , Size: 4]
	bool EnableVisualField;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4f0 , Size: 1]
	VisualFieldFeatureParam VisualFieldFeatureParam;//[Offset: 0x4f4 , Size: 36]
	VisualFieldFeature* VisualFieldFeature;//[Offset: 0x518 , Size: 4]
	bool bReadyStateCountingDown;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x51c , Size: 1]
	int ReadyStateTime;//[Offset: 0x528 , Size: 4]
	delegate ReConnectGameStateInfoNotify;//[Offset: 0x52c , Size: 12]
	bool IsCircleShowSafeZoneTips;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x538 , Size: 1]
	FString GameModeDisplayName;//[Offset: 0x53c , Size: 12]
	int CurCircleWave;//[Offset: 0x548 , Size: 4]
	bool bNoAliveHumanPlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54c , Size: 1]
	bool EnableControllVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54d , Size: 1]
	GameModeFeatureSetData GameModeFeatureSet;//[Offset: 0x550 , Size: 4]
	FName GameModeState;//[Offset: 0x558 , Size: 8]
	bool bLessening;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x560 , Size: 1]
	float timeFromLessen;//[Offset: 0x564 , Size: 4]
	Vector CircleLessenFrom;//[Offset: 0x568 , Size: 12]
	Vector CircleLessenTo;//[Offset: 0x574 , Size: 12]
	float timeForLessen;//[Offset: 0x580 , Size: 4]
	byte CurCircleStatusInfo;//[Offset: 0x590 , Size: 1]
	float CurCircleStateStartServerWorldSecond;//[Offset: 0x594 , Size: 4]
	float CurCircleStatusElapsedTime;//[Offset: 0x598 , Size: 4]
	float CurCircleStatusLastTime;//[Offset: 0x59c , Size: 4]
	byte CurAirAttackType;//[Offset: 0x5a0 , Size: 1]
	int CurAirAttackWave;//[Offset: 0x5a4 , Size: 4]
	bool bActiveScreenSize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5a8 , Size: 1]
	float ScreenSizeFactor;//[Offset: 0x5ac , Size: 4]
	float ExtraRadius;//[Offset: 0x5b0 , Size: 4]
	int AlivePlayerNum;//[Offset: 0x5b4 , Size: 4]
	int AliveTeamNum;//[Offset: 0x5b8 , Size: 4]
	int PlayerNumOnPlane;//[Offset: 0x5bc , Size: 4]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x5c0 , Size: 12]
	delegate ForceStopDynamicWeatherDelegate;//[Offset: 0x5cc , Size: 12]
	WeatherChangeEvent CurWeatherTypeCach;//[Offset: 0x5d8 , Size: 2]
	UpassInfoList(StructProperty)[] UpassInfoList;//[Offset: 0x5dc , Size: 12]
	enum GameModeType;//[Offset: 0x5e8 , Size: 1]
	int PlayerNumPerTeam;//[Offset: 0x5ec , Size: 4]
	OpenTagCullingMaps(StrProperty)[] OpenTagCullingMaps;//[Offset: 0x5f0 , Size: 12]
	bool bShouldUseCompletePB;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fc , Size: 1]
	bool bGameNeedReplay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fd , Size: 1]
	bool IsDark;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5fe , Size: 1]
	float FPVEWeatherPlaySpeed;//[Offset: 0x60c , Size: 4]
	float WeatherPhaseIndex;//[Offset: 0x610 , Size: 4]
	WeatherProcessArray(EnumProperty)[] WeatherProcessArray;//[Offset: 0x614 , Size: 12]
	delegate OnWeatherStateChange;//[Offset: 0x620 , Size: 12]
	delegate OnWeatherSpeedChange;//[Offset: 0x62c , Size: 12]
	enum CurDynamicWeatherState;//[Offset: 0x638 , Size: 1]
	<BeInvitedPlayers_Key(StrProperty) , BeInvitedPlayers(FloatProperty)> BeInvitedPlayers;//[Offset: 0x63c , Size: 60]
	float InviteCountDownTime;//[Offset: 0x678 , Size: 4]
	CircleDataMining(StructProperty)[] CircleDataMining;//[Offset: 0x67c , Size: 12]
	CircleArray(StructProperty)[] CircleArray;//[Offset: 0x688 , Size: 12]
	GameDataMining GameDataMining;//[Offset: 0x694 , Size: 48]
	uint64 GameID;//[Offset: 0x6c8 , Size: 8]
	FString GameModeID;//[Offset: 0x6d0 , Size: 12]
	ModeUIManagerArray(StrProperty)[] ModeUIManagerArray;//[Offset: 0x6dc , Size: 12]
	delegate OnValidDynamicLevelChanged;//[Offset: 0x6f4 , Size: 12]
	LevelEventCenter* LevelEventCenter;//[Offset: 0x700 , Size: 4]
	Actor* StartedPlane;//[Offset: 0x704 , Size: 4]
	Character* CurCastActorMsgOwner;//[Offset: 0x708 , Size: 8]
	float StartFlyTime;//[Offset: 0x710 , Size: 4]
	int64 StartReadyUnixTimestamp;//[Offset: 0x718 , Size: 8]
	int64 StartFightingUnixTimestamp;//[Offset: 0x720 , Size: 8]
	int64 StartFinishedUnixTimestamp;//[Offset: 0x728 , Size: 8]
	bool bIsOpenShovelingAbility;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x741 , Size: 1]
	int EnableNewStateMachine;//[Offset: 0x744 , Size: 4]
	float PlayerInBlueCircleClipTime;//[Offset: 0x74c , Size: 4]
	float BroadcastClientDistance;//[Offset: 0x750 , Size: 4]
	FinalWinTeams(IntProperty)[] FinalWinTeams;//[Offset: 0x76c , Size: 12]
	FinalWinPlayers(UInt32Property)[] FinalWinPlayers;//[Offset: 0x778 , Size: 12]
	uint32 GameTerminatorPlayerKey;//[Offset: 0x784 , Size: 4]
	bool CanForbitPickupTeammateBox;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x788 , Size: 1]
	bool CanImprisonmentTeammate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x789 , Size: 1]
	ImprisonmentTeammateKillType(IntProperty)[] ImprisonmentTeammateKillType;//[Offset: 0x78c , Size: 12]
	ImprisonmentTeammateGameType(IntProperty)[] ImprisonmentTeammateGameType;//[Offset: 0x798 , Size: 12]
	bool bUseParachuteAnimCache;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a4 , Size: 1]
	bool bIsUseStandbyAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a5 , Size: 1]
	bool IsOpenHighPingTag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a6 , Size: 1]
	bool bEnableCullDistance;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a7 , Size: 1]
	FString GuideImageName;//[Offset: 0x7a8 , Size: 12]
	FString GuideLuaTableName;//[Offset: 0x7b4 , Size: 12]
	FString GuideLuaFunctionName;//[Offset: 0x7c0 , Size: 12]
	bool IsDisableTeamPanelPlayerStateInit;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7cc , Size: 1]
	float PlayerNoOperationTime;//[Offset: 0x7d0 , Size: 4]
	float PlayerNoConfirmRetToGameTime;//[Offset: 0x7d4 , Size: 4]
	bool IsEnableHealthNumberText;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d8 , Size: 1]
	Vector2D SelfHealthOffset;//[Offset: 0x7dc , Size: 8]
	bool IsCollectHitFlow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e4 , Size: 1]
	bool bOpenVehicleOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7e5 , Size: 1]
	UAELevelDirector* UAELevelDirector;//[Offset: 0x7e8 , Size: 4]
	MarkDispatchManager* MarkDispatchManager;//[Offset: 0x7ec , Size: 4]
	SyncMarkDispatchData(StructProperty)[] SyncMarkDispatchData;//[Offset: 0x7f0 , Size: 12]
	PrevSyncMarkDispatchData(StructProperty)[] PrevSyncMarkDispatchData;//[Offset: 0x7fc , Size: 12]
	DynamicWeatherMgr* DynamicWeatherMgr;//[Offset: 0x808 , Size: 4]
	class Actor* PreloadPoolActorClass;//[Offset: 0x810 , Size: 40]
	<ActorExtraComponents_Key(StrProperty) , ActorExtraComponents(StructProperty)> ActorExtraComponents;//[Offset: 0x838 , Size: 60]
	XTriggerLuaRemoteComponent* LuaRemoteComponent;//[Offset: 0x874 , Size: 4]
	FieldOfViewNotificationComponentRegistry* FieldOfViewNotificationComponentRegistry;//[Offset: 0x878 , Size: 4]
	bool bUseRecastBullet;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87c , Size: 1]
	delegate OnShowGeneralGameTipsDelegate;//[Offset: 0x880 , Size: 12]
	bool IgnoreWhenAttackNotInVehicle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88c , Size: 1]
	delegate OnVeteranOrRecruitListUpdate;//[Offset: 0x890 , Size: 12]
	function WeatherStateChangeDelegate__DelegateSignature();// 0x206ccd8
	function WeatherSpeedChangeDelegate__DelegateSignature();// 0x206ccd8
	function UISetWidgetVisibility();// 0x18493a8
	function UISetWidgetText();// 0x184919c
	function UIOperateWidget();// 0x1848e14
	function UICustomBehavior();// 0x1848c50
	function TryGetCharacterByPlayerKey();// 0x1848af0
	function SyncAirplaneRoute();// 0x18489a0
	function SimulateAirAttackOver();// 0x1848944
	function ShowGameTips();// 0x1848800
	function SetTagCulling();// 0x1702fa4
	function SetReConnectGameStateInfo();// 0x18486b4
	function SetCurAirAttackWave();// 0x184863c
	function SetCurAirAttackType();// 0x18485c4
	function SetCircleInfo();// 0x18484c4
	function SetAirplaneStopLoc();// 0x1848454
	function SetAirplaneStartLoc();// 0x18483e4
	function SetAirplaneForceJumpLoc();// 0x1848374
	function SetAirplaneCanJumpLoc();// 0x1848304
	function ServerRemoteDestroyActor();// 0x184828c
	function ServerRemoteCreateActor();// 0x1848130
	function RPC_Client_RemoteDestroyActor();// 0x18480b0
	function RPC_Client_RemoteCreateActor();// 0x1847f1c
	function PlayPawnActive();// 0x1847d78
	function OnShowGeneralGameTipsDelegate__DelegateSignature();// 0x206ccd8
	function OnRep_WeatherStateChanged();// 0x1847d64
	function OnRep_VisualFieldFeatureParam();// 0x1847d50
	function OnRep_VeteranRecruitListUpdate();// 0x1847d3c
	function OnRep_UpassInfoList();// 0x1847d28
	function OnRep_StartedPlane();// 0x1847d14
	function OnRep_ResetWeatherPlaySpeed();// 0x1847d00
	function OnRep_ReadyStateTime();// 0x17b4b08
	function OnRep_ReadyStateCountingDown();// 0x16ad21c
	function OnRep_PlayerNumOnPlane();// 0x1847cec
	function OnRep_PlayerNumChange();// 0x16ad21c
	function OnRep_ModeUIManagerArray();// 0x1847cd8
	function OnRep_MarkSyncData();// 0x1847cc4
	function OnRep_IsTrainingMode();// 0x1847cb0
	function OnRep_IsShowDeadBox();// 0x16ad21c
	function OnRep_IsFPPMode();// 0x1847c9c
	function OnRep_IsDark();// 0x1847c88
	function OnRep_GameTerminatorPlayerKey();// 0x1847c74
	function OnRep_GameModeType();// 0x1847c60
	function OnRep_GameModeState();// 0x1847c4c
	function OnRep_GameModeFeatureSet();// 0x16ad21c
	function OnRep_FinalWinTeams();// 0x16ad21c
	function OnRep_FinalWinPlayers();// 0x16ad21c
	function OnRep_DynamicWeatherState();// 0x1847c38
	function OnRep_CircleArray();// 0x16ad21c
	function OnRep_AliveTeamNum();// 0x1847c24
	function OnRep_AlivePlayerNum();// 0x1847c10
	function OnRep_AirplaneStopLoc();// 0x1847bfc
	function OnRep_AirplaneStartLoc();// 0x1847be8
	function OnRep_AirplaneForceJumpLoc();// 0x1847bd4
	function OnRep_AirplaneCanJumpLoc();// 0x1847bc0
	function OnPlayerSkillStart();// 0x17b4a1c
	function OnGameModeDisplayNameChange();// 0x1847bac
	function OnCharacterTakeHeadShot();// 0x17b4518
	function OnCharacterTakeDamage();// 0x17b4410
	function NotifyDynamicWeatherChange();// 0x1847af0
	function IsRevivalGame();// 0x1847ac8
	function IsPVEMode();// 0x1847aa0
	function IsPlaneValid();// 0x1847a7c
	function IsNoCircleInfo();// 0x1847a54
	function IsMapUseTeamPattern();// 0x1847a24
	function IsInNight();// 0x18479f4
	function IsFeatureSupported();// 0x184796c
	function GetRepServerWorldTimeSeconds();// 0x1847944
	function GetReConnectGameStateInfo();// 0x18478a8
	function GetPVEWeatherPhaseIndex();// 0x1847880
	function GetGameModeState();// 0x1847840
	function GetForceJumpLoc();// 0x184781c
	function GetFieldOfViewNotificationComponentRegistry();// 0x18477f4
	function GetCurWeatherState();// 0x18477cc
	function GetCurDynamicWeatherState();// 0x18477a4
	function GetCurCircleWave();// 0x1847788
	function GetCurCircleState();// 0x1847748
	function GetCircleStateInfo();// 0x18476c4
	function GetCanJumpLoc();// 0x18476a0
	function GetAllMarkSyncData();// 0x18475f4
	function GetAlivePlayerNum();// 0x18475cc
	function GetAirplaneStopLoc();// 0x18475a8
	function GetAirplaneStartLoc();// 0x1847584
	function DeepFindWidgetInUserWidget();// 0x18474c0
	function CheckInitLuaRemoteEvent();// 0x18474ac
	function ChangeWeatherStatus();// 0x1847434
	function ChangeDynamicWeatherState();// 0x18473bc
	function BroadcastUISetWidgetVisibility();// 0x18472b4
	function BroadcastUISetWidgetText();// 0x18470a0
	function BroadcastUIOperateWidget();// 0x1846ed4
	function BroadcastUICustomBehavior();// 0x1846d08
	function BroadcastShowGameTips();// 0x1846c00
	function BroadcastRoute();// 0x1846b38
	function BroadcastEndCircle();// 0x1846adc
	function BroadcastCircleWaveOver();// 0x1846a28
	function BroadcastCircleSizeAndPosition();// 0x1846770
	function BroadcastCircleInfo();// 0x18465a0
	function BroadcastAirAttackWarning();// 0x18464e4
	function BroadcastAirAttackOrder();// 0x1846368
	function AsyncLoadResFinishCallback();// 0x1846354
	function AddUseSpringJumpTimes();// 0x17b2f94
	function AddUseEnhancerTimes();// 0x17b2ed0
	function AddPveZombieGrenadeCount();// 0x18462dc
	function AddPvePoliceOfficeTriggerCount();// 0x1846264
	function AddPlayerScore();// 0x17b2bc8

--------------------------------
Class: AirAttackOrder
	int waveindex;//[Offset: 0x0 , Size: 4]
	float FlightHeight;//[Offset: 0x4 , Size: 4]
	float SeaLevelHeight;//[Offset: 0x8 , Size: 4]
	bombsInterval(Int16Property)[] bombsInterval;//[Offset: 0xc , Size: 12]
	bombsPosition2D(StructProperty)[] bombsPosition2D;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: VisualFieldFeatureParam
	float VisualFieldUpdateInterval;//[Offset: 0x0 , Size: 4]
	float MaxVisualFieldDistanceSquared;//[Offset: 0x4 , Size: 4]
	VisualCheckBoneList(NameProperty)[] VisualCheckBoneList;//[Offset: 0x8 , Size: 12]
	float DefaultFOVAngle;//[Offset: 0x14 , Size: 4]
	VisualCheckChanelList(ByteProperty)[] VisualCheckChanelList;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: VisualFieldFeature.Object
	TimerHandle VisualFieldTickTimerHandle;//[Offset: 0x40 , Size: 8]
	VisualFieldFrame VisualFieldFrame;//[Offset: 0x48 , Size: 60]
	<VisualAngleLimitMap_Key(IntProperty) , VisualAngleLimitMap(FloatProperty)> VisualAngleLimitMap;//[Offset: 0x84 , Size: 60]
	STExtraPlayerController* CachedLocalController;//[Offset: 0xc0 , Size: 8]

--------------------------------
Class: VisualFieldFrame
	<VisualFieldFrameMap_Key(IntProperty) , VisualFieldFrameMap(StructProperty)> VisualFieldFrameMap;//[Offset: 0x0 , Size: 60]

--------------------------------
Class: GameModeFeatureSetData
	uint32 GameModeFeatureSet_A;//[Offset: 0x0 , Size: 4]

--------------------------------
Class: WeatherChangeEvent
	enum WeaterType;//[Offset: 0x0 , Size: 1]
	enum WeaterChangeEvent;//[Offset: 0x1 , Size: 1]

--------------------------------
Class: GameDataMining
	FString BattleID;//[Offset: 0x0 , Size: 12]
	Vector PlaneStartPoint;//[Offset: 0xc , Size: 12]
	Vector PlaneEndPoint;//[Offset: 0x18 , Size: 12]
	CircleDataMining(StructProperty)[] CircleDataMining;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: MarkDispatchManager.ActorComponent.Object
	int CurrentInstanceCount;//[Offset: 0xbc , Size: 4]
	ActionQueue(StructProperty)[] ActionQueue;//[Offset: 0xc0 , Size: 12]
	BatchActionQueue(StructProperty)[] BatchActionQueue;//[Offset: 0xcc , Size: 12]
	int MarkCountProcessed;//[Offset: 0xd8 , Size: 4]
	function GetMarkDispatchManager();// 0x1767e24
	function GenerateNewInstanceID();// 0x1767e00
	function DispatchMarkData();// 0x1767c48

--------------------------------
Class: DynamicWeatherMgr.Actor.Object
	WeatherChangeConfig WeatherChangeConfig;//[Offset: 0x2c4 , Size: 68]
	int CurUseFixWeatherIndex;//[Offset: 0x308 , Size: 4]
	WeatherChangeControl WeatherChangeControl;//[Offset: 0x30c , Size: 28]
	<DynamicWeatherLookupTable_Key(EnumProperty) , DynamicWeatherLookupTable(ObjectProperty)> DynamicWeatherLookupTable;//[Offset: 0x328 , Size: 60]
	WeatherControllerRepData ControllerRepData;//[Offset: 0x364 , Size: 28]
	WeatherControllerRepData ControllerRepDataForReplay;//[Offset: 0x380 , Size: 28]
	float ServerElapsedTime;//[Offset: 0x39c , Size: 4]
	bool bAllowRPCRequire;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a4 , Size: 1]
	enum NextWeatherStatus;//[Offset: 0x3a5 , Size: 1]
	float NextWeatherCountDownTime;//[Offset: 0x3a8 , Size: 4]
	bool bEnableWeatherPredictionUI;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b1 , Size: 1]
	delegate OnDynamicWeatherChangeDelegate;//[Offset: 0x3b4 , Size: 12]
	bool bDisableModifyControllerRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3d0 , Size: 1]
	STExtraGameStateBase* GameState;//[Offset: 0x3d4 , Size: 4]
	enum UICountDownType;//[Offset: 0x3ea , Size: 1]
	bool ForbidServerHandleRepData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3eb , Size: 1]
	function StartTransition();// 0x17205e0
	function SoftReconnectRecoverData();// 0x1720568
	function RPCRequireControl();// 0x1720554
	function RPCRequire();// 0x1720540
	function RPC_S2C_UINotify();// 0x17204c0
	function RPC_S2C_ForceStopDynamicWeatherChange();// 0x16f99b4
	function ReinitInDemoReplay();// 0x1720254
	function RefreshWeatherPredictionUI();// 0x17204ac
	function OnWeatherChangeStarted();// 0x1720420
	function OnWeatherChangeSaturated();// 0x1720394
	function OnWeatherChangeRestoreStarted();// 0x1720308
	function OnWeatherChangeRestoreEnded();// 0x172027c
	function OnRep_NextWeatherCountDownTime();// 0x1720240
	function OnRep_ControllerDataForReplay();// 0x1720268
	function OnRep_ControllerData();// 0x1720254
	function OnRep_bEnableWeatherPredictionUI();// 0x1720240
	function OnDynamicWeatherChangeDelegate__DelegateSignature();// 0x206ccd8
	function HandleClientHasReactivated();// 0x172022c
	function GotoSpecificWeather();// 0x17201b4
	function GetNextWeatherDataByWeatherType();// 0x17200d8
	function GetNextWeatherData();// 0x1720044
	function GetNextWeatherCountDownTimeByType();// 0x171ffc4
	function GetInProgressElapsedTimeSecWithWeather();// 0x171ff9c
	function GetGlobalWeatherSystemTimeOnServer();// 0x171ff74
	function GetCurrentWeatherDetailStatus();// 0x171ff2c
	function ForceStopDynamicWeatherChangeOnServer();// 0x171ff18
	function ForceStartNextWeatherChangeOnServer();// 0x171ff04
	function ClientInit();// 0x171fe54

--------------------------------
Class: WeatherChangeConfig
	float StartTimeMin;//[Offset: 0x0 , Size: 4]
	float StartTimeMax;//[Offset: 0x4 , Size: 4]
	float BlendInTime;//[Offset: 0x8 , Size: 4]
	float BlendOutTime;//[Offset: 0xc , Size: 4]
	float DurationTimeMin;//[Offset: 0x10 , Size: 4]
	float DurationTimeMax;//[Offset: 0x14 , Size: 4]
	enum LastWeatherStatus;//[Offset: 0x18 , Size: 1]
	float LastWeatherAppearTime;//[Offset: 0x1c , Size: 4]
	bool bUseFixWeatherChangeSequence;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x20 , Size: 1]
	WeatherChangeWeights(StructProperty)[] WeatherChangeWeights;//[Offset: 0x24 , Size: 12]
	WeatherChangeSequence(StructProperty)[] WeatherChangeSequence;//[Offset: 0x30 , Size: 12]
	float TimeMultiplier;//[Offset: 0x3c , Size: 4]
	bool bUseReadyGameStateEnetrAsOriginalTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x40 , Size: 1]
	bool bDisableReadyGameStateWeatherTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x41 , Size: 1]

--------------------------------
Class: WeatherChangeControl
	bool WeatherChangeStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	bool WeatherChangeFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	float WeatherChangeStartTime;//[Offset: 0x4 , Size: 4]
	float ElapsedTime;//[Offset: 0x8 , Size: 4]
	enum NextWeather;//[Offset: 0xc , Size: 1]
	float NextDuration;//[Offset: 0x10 , Size: 4]
	float WeatherTotalWeight;//[Offset: 0x14 , Size: 4]
	float TimelineOffset;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: WeatherControllerRepData
	enum WeatherType;//[Offset: 0x0 , Size: 1]
	bool bStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1 , Size: 1]
	float ElapsedTime;//[Offset: 0x4 , Size: 4]
	float BlendInTime;//[Offset: 0x8 , Size: 4]
	float BlendOutTime;//[Offset: 0xc , Size: 4]
	float SaturateTime;//[Offset: 0x10 , Size: 4]
	float TimeMultiplier;//[Offset: 0x14 , Size: 4]
	bool BlendInStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x18 , Size: 1]
	bool BlendSaturated;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19 , Size: 1]
	bool BlendOutStarted;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1a , Size: 1]
	bool BlendOutEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1b , Size: 1]

--------------------------------
Class: XTriggerLuaRemoteComponent.ActorComponent.Object
	<EventTagCDMap_Key(StrProperty) , EventTagCDMap(FloatProperty)> EventTagCDMap;//[Offset: 0xbc , Size: 60]
	float EventCDTime;//[Offset: 0xf8 , Size: 4]
	function LuaRemoteEvent();// 0x192d1e4

--------------------------------
Class: FieldOfViewNotificationComponentRegistry.Object
	delegate FieldOfViewNotificationComponentRegisteredDelegate;//[Offset: 0x1c , Size: 12]
	delegate FieldOfViewNotificationComponentUnregisteredDelegate;//[Offset: 0x28 , Size: 12]
	function Unregister();// 0x1728d44
	function Register();// 0x16fb390
	function GetRegisteredFieldOfViewNotificationComponents();// 0x1728c70
	function Get();// 0x1728bf8
	function FieldOfViewNotificationComponentUnregisteredDelegate__DelegateSignature();// 0x206ccd8
	function FieldOfViewNotificationComponentRegisteredDelegate__DelegateSignature();// 0x206ccd8

--------------------------------
Class: BattleRoyalCorpsWarGameState.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	CorpsInfoArray(StructProperty)[] CorpsInfoArray;//[Offset: 0x89c , Size: 12]
	CachedSortedCorpsDetailList(StructProperty)[] CachedSortedCorpsDetailList;//[Offset: 0x8a8 , Size: 12]
	OutGameCorpsDetailList(StructProperty)[] OutGameCorpsDetailList;//[Offset: 0x8b4 , Size: 12]
	PlayerKeyToCorpsList(StructProperty)[] PlayerKeyToCorpsList;//[Offset: 0x8c0 , Size: 12]
	function ReCalculateCorpsDetailList();// 0x16e1f04
	function OnRepOutGameCorpsDetailList();// 0x16e1ef0
	function OnRepCorpsInfoArray();// 0x16e1edc
	function OnRepCachedSortedCorpsDetailList();// 0x16e1ec8
	function OnCorpsOutGame();// 0x16e1e04
	function OnCorpsJoinGame();// 0x16e1d84
	function GetTotalCorpsNums();// 0x16e1d5c
	function GetSortedCorpsDetailList();// 0x16e1c04
	function GetPlayerLiveTime();// 0x16e1b84
	function GetCorpsInfoByID();// 0x16e1a54
	function GetActiveCorpsNum();// 0x16e1a2c
	function ForceFlushList();// 0x16e1a18

--------------------------------
Class: BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	TeamModeComponent* TeamModeComponent;//[Offset: 0x1160 , Size: 4]
	PlayerStartObjs(StructProperty)[] PlayerStartObjs;//[Offset: 0x11e4 , Size: 12]
	PlayerStartNeedDestroyObjs(StructProperty)[] PlayerStartNeedDestroyObjs;//[Offset: 0x11f0 , Size: 12]
	StartNeedDestroyActorArray(ObjectProperty)[] StartNeedDestroyActorArray;//[Offset: 0x11fc , Size: 12]
	bool bConsiderCamp;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1208 , Size: 1]
	bool bIsGameEnded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1209 , Size: 1]
	function ShouldSendTeamBattleResult();// 0x16e5468
	function LoginCheckReCorrecctTeamID();// 0x16e53e8
	function InitPlayerStartObjs();// 0x16e53d4
	function GetRealTeamNum();// 0x16e53ac
	function DestroyPlayerStartObjs();// 0x16e5398
	function CheckTeamGameEnd();// 0x16e5368

--------------------------------
Class: TeamModeComponent.ActorComponent.Object
	bool IsCampMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x17c , Size: 1]
	BattleRoyaleGameModeTeam* OwnerGameMode;//[Offset: 0x180 , Size: 4]
	int RealTeamNum;//[Offset: 0x184 , Size: 4]
	function SetTestUniformDistribution();// 0x1702fa4
	function SetTestTeamNum();// 0x173e6cc
	function RemoveToTeamMap();// 0x18c1e6c
	function RemoveTeam();// 0x18c1df4
	function RemoveAllTeam();// 0x18c1de0
	function RefreshWatchTeammates();// 0x18c1d24
	function IsTeamIDValid();// 0x18c1ca4
	function GetTeamIDsByCampID();// 0x18c1b9c
	function GetTeamIDs();// 0x18c1adc
	function GetTeamates();// 0x18c19d4
	function GetRealTeamNum();// 0x184e1d0
	function GetCampmates();// 0x18c18cc
	function GetCampIDs();// 0x18c180c
	function GetAllTeamates();// 0x18c174c
	function AutoGroupAllParachuteTeams();// 0x18c1738
	function AddToTeamMap();// 0x18c16c0
	function AddToCampMap();// 0x18c1648
	function AddTeamCount();// 0x18c1584

--------------------------------
Class: GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object

--------------------------------
Class: GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BattleRoyalCorpsWarMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object

--------------------------------
Class: BattleRoyalCorpsWarPlayerState.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int CorpsID;//[Offset: 0xca8 , Size: 4]

--------------------------------
Class: BattleRoyaleGameModeGroup.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	GenerateGodSon(IntProperty)[] GenerateGodSon;//[Offset: 0x120c , Size: 12]
	<TeamSpecialPlayerNum_Key(IntProperty) , TeamSpecialPlayerNum(IntProperty)> TeamSpecialPlayerNum;//[Offset: 0x1218 , Size: 60]
	<TeamLeftSpecialPlayerNum_Key(IntProperty) , TeamLeftSpecialPlayerNum(IntProperty)> TeamLeftSpecialPlayerNum;//[Offset: 0x1254 , Size: 60]
	LoseTeamId(IntProperty)[] LoseTeamId;//[Offset: 0x1290 , Size: 12]

--------------------------------
Class: GameModeStateFightingGroup.GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object

--------------------------------
Class: GameModeStateFinishedGroup.GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BattleRoyalTrainingGameMode.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	<PlayerStartToPCMap_Key(ObjectProperty) , PlayerStartToPCMap(WeakObjectProperty)> PlayerStartToPCMap;//[Offset: 0x1160 , Size: 60]

--------------------------------
Class: BattleSceneAvatarDisplayPoseComponent.AvatarDisplayPoseComponent.SceneComponent.ActorComponent.Object
	DisplayAvatarItemFilterList(EnumProperty)[] DisplayAvatarItemFilterList;//[Offset: 0x298 , Size: 12]
	STExtraPlayerState* TargetPlayerState;//[Offset: 0x2a4 , Size: 8]
	BattleSceneAvatarDisplayInfo AvatarDisplayInfo;//[Offset: 0x2ac , Size: 56]
	function UnPossessPosePosition();// 0x16e64a8
	function PossessPosePosition();// 0x16e6494
	function OnCharacterPlayEmote();// 0x16e641c
	function MatchCharacter();// 0x16e62bc
	function IsValidDisplayInfo();// 0x16e61ec
	function IsPosePositiontPossessed();// 0x16e61c4
	function InitDisplayAvatar();// 0x16e60fc
	function GetDisplayAvatar();// 0x16e60d4
	function GetAvatarPoseDisplayInfo();// 0x16e60a4
	function GetAvatarGender();// 0x16e607c
	function EquipWeaponForDisplayAvatar();// 0x16e6060
	function EquipClothingForDisplayAvatar();// 0x16e6044
	function ClearDisplayAvatar();// 0x16e6028

--------------------------------
Class: BattleSceneAvatarDisplayInfo
	FString PlayerName;//[Offset: 0x0 , Size: 12]
	FString PlayerUIDStr;//[Offset: 0xc , Size: 12]
	int PlayerGender;//[Offset: 0x18 , Size: 4]
	bool bIsMVP;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1c , Size: 1]
	EquipedAvatarList(IntProperty)[] EquipedAvatarList;//[Offset: 0x20 , Size: 12]
	EquipedWeaponList(IntProperty)[] EquipedWeaponList;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: BossContainer.Actor.Object
	StaticMeshComponent* InStaticMesh;//[Offset: 0x2c8 , Size: 4]
	FName SocketHead;//[Offset: 0x2d0 , Size: 8]
	FName SocketTail;//[Offset: 0x2d8 , Size: 8]
	float VerticalHalfHeight;//[Offset: 0x2e0 , Size: 4]
	function ChangeNetCullDistance();// 0x16e7474

--------------------------------
Class: ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	bool DisableSimulateBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a4 , Size: 1]
	bool DisableServerBulletCollision;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a5 , Size: 1]
	Vector ServerShootPos;//[Offset: 0x4a8 , Size: 12]
	float ServerShootTime;//[Offset: 0x4b4 , Size: 4]
	ProjectileBulletLaunchParams ServerLaunchParams;//[Offset: 0x4c0 , Size: 80]
	bool bIsValidImpact;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x529 , Size: 1]
	function RPC_Multicast_StartLaunch();// 0x16e79a0
	function ProjectileComponentHandleShootDamageCallback();// 0x17ab7a8
	function OnRep_ServerLaunchParams();// 0x17ab690
	function OnImpactEnd();// 0x16e78fc
	function OnImpact();// 0x16e7858
	function HandleBeginOverlap();// 0x17ab490

--------------------------------
Class: ProjectileBulletLaunchParams
	float Speed;//[Offset: 0x0 , Size: 4]
	Transform Trans;//[Offset: 0x10 , Size: 48]
	Actor* OwningWeapon;//[Offset: 0x40 , Size: 4]
	Actor* Instigator;//[Offset: 0x44 , Size: 4]
	uint32 ShootID;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: ExplosionProjectileBullet.ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	ParticleSystem* ExplosionParticle;//[Offset: 0x52c , Size: 4]
	AkAudioEvent* ExplosionSound;//[Offset: 0x530 , Size: 4]
	ApplyRadialDamageParams RadialDamageParams;//[Offset: 0x534 , Size: 104]
	float DamageRadiusInner;//[Offset: 0x59c , Size: 4]
	float DamageRadiusOuter;//[Offset: 0x5a0 , Size: 4]
	float HealthDamageInner;//[Offset: 0x5a4 , Size: 4]
	float HealthDamageOuter;//[Offset: 0x5a8 , Size: 4]
	float ExplosionMomentum;//[Offset: 0x5ac , Size: 4]
	float DamageFallOffParam;//[Offset: 0x5b0 , Size: 4]
	float TimeBeforeExplosion;//[Offset: 0x5b4 , Size: 4]
	float HealthDamageInnerForZombie;//[Offset: 0x5b8 , Size: 4]
	float HealthDamageOuterForZombie;//[Offset: 0x5bc , Size: 4]
	float SelfDamageReduce;//[Offset: 0x5c0 , Size: 4]
	float TeammateDamageReduce;//[Offset: 0x5c4 , Size: 4]
	float DoorDamageRate;//[Offset: 0x5c8 , Size: 4]
	int MaxDamageCount;//[Offset: 0x5cc , Size: 4]
	float VoiceCheckShowTime;//[Offset: 0x5d0 , Size: 4]
	float VoiceCheckDis;//[Offset: 0x5d4 , Size: 4]
	float ExplosionCenterOffset;//[Offset: 0x5d8 , Size: 4]
	bool bHasExploded;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5dc , Size: 1]
	delegate OnBulletExplosionDelegate;//[Offset: 0x5e0 , Size: 12]
	bool bNeedDisableTailFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ec , Size: 1]
	bool bNeedOptimizeTailFX;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5ed , Size: 1]
	function RPC_Multicast_OnImpact();// 0x1725b28
	function ReloadNoEncodeAttr();// 0x16a8160
	function OnImpact();// 0x16e7858
	function OnBulletExplosionDelegate__DelegateSignature();// 0x206ccd8
	function HandleOnImpactIml();// 0x1725a84
	function GetBulletRole();// 0x1725a5c
	function CheckOptimizeTailFX();// 0x1725a40

--------------------------------
Class: ApplyRadialDamageParams
	float BaseDamage;//[Offset: 0x0 , Size: 4]
	float MinimumDamage;//[Offset: 0x4 , Size: 4]
	float BaseMomentumMag;//[Offset: 0x8 , Size: 4]
	Vector Origin;//[Offset: 0xc , Size: 12]
	float DamageInnerRadius;//[Offset: 0x18 , Size: 4]
	float DamageOuterRadius;//[Offset: 0x1c , Size: 4]
	float DamageFalloff;//[Offset: 0x20 , Size: 4]
	bool bTraceComplex;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x24 , Size: 1]
	class DamageType* DamageTypeClass;//[Offset: 0x28 , Size: 4]
	IgnoreActors(ObjectProperty)[] IgnoreActors;//[Offset: 0x2c , Size: 12]
	IgnoreClasses(ClassProperty)[] IgnoreClasses;//[Offset: 0x38 , Size: 12]
	Actor* DamageCauser;//[Offset: 0x44 , Size: 4]
	Controller* InstigatedBy;//[Offset: 0x48 , Size: 4]
	float CollisionFreeRadius;//[Offset: 0x4c , Size: 4]
	byte DamageChannel;//[Offset: 0x50 , Size: 1]
	float AddtionalDamage;//[Offset: 0x54 , Size: 4]
	byte DamageEventType;//[Offset: 0x58 , Size: 1]
	float HorizontalCoverRatio;//[Offset: 0x5c , Size: 4]
	float VerticalCoverRatio;//[Offset: 0x60 , Size: 4]
	bool bDrawVisibilityTraceLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	bool bExplosionTestOnly;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65 , Size: 1]

--------------------------------
Class: BounceExplosionProjectileBullet.ExplosionProjectileBullet.ProjectileBulletBase.STExtraShootWeaponBulletBase.Actor.Object
	float ExplosionTimeAfterFirstBounce;//[Offset: 0x5f4 , Size: 4]
	float ExplosionTimeAfterEnetrWater;//[Offset: 0x5f8 , Size: 4]
	AkAudioEvent* BounceSound;//[Offset: 0x5fc , Size: 4]
	bool bHasEnterWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x600 , Size: 1]
	function RPC_Multicast_StartLaunch();// 0x16e79a0
	function OnImpactEnd();// 0x16e78fc
	function OnImpact();// 0x16e7858
	function OnBounce();// 0x16e776c

--------------------------------
Class: BRGameModeStateActive_DeathMatch.GameModeStateActive.GameModeState.Object

--------------------------------
Class: BRGameModeStateFighting_DeathMatch.GameModeStateFightingTeam.GameModeStateFighting.GameModeState.Object
	ClearResidueClassList(ClassProperty)[] ClearResidueClassList;//[Offset: 0x44 , Size: 12]
	float StopJoin_RemainTime;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: BRGameModeStateFinished_DeathMatch.GameModeStateFinishedTeam.GameModeStateFinished.GameModeState.Object

--------------------------------
Class: BRGameModeStateReady_DeathMatch.GameModeStateReady.GameModeState.Object

--------------------------------
Class: BRGameModeTeam_DeathMatch.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	enum DeathMatchSubModeType;//[Offset: 0x120b , Size: 1]
	<HomeMapBaseRegions_Key(IntProperty) , HomeMapBaseRegions(StructProperty)> HomeMapBaseRegions;//[Offset: 0x120c , Size: 60]
	int MapId;//[Offset: 0x1248 , Size: 4]
	HomeMapBaseRegion CurMapBaseRegion;//[Offset: 0x124c , Size: 72]
	DeathMatchPlayerStartSelectConfig RespawnPointSelectConfig;//[Offset: 0x1294 , Size: 12]
	int StopJoin_BestScore;//[Offset: 0x12a0 , Size: 4]
	int StopJoin_ScoreGap;//[Offset: 0x12a4 , Size: 4]
	int DeathMatchWinScore;//[Offset: 0x12a8 , Size: 4]
	int Score_Kill;//[Offset: 0x12ac , Size: 4]
	int ContinuouKillNum;//[Offset: 0x12b0 , Size: 4]
	int SuperGodKillNum;//[Offset: 0x12b4 , Size: 4]
	int GameComingEndNotify_RemainKillNum;//[Offset: 0x12b8 , Size: 4]
	int GameComingEndNotify_RemainTime;//[Offset: 0x12bc , Size: 4]
	int GameComingEndNotify_HalfTime;//[Offset: 0x12c0 , Size: 4]

--------------------------------
Class: HomeMapBaseRegion
	HomeBaseRegion BaseRegionLeft;//[Offset: 0x0 , Size: 36]
	HomeBaseRegion BaseRegionRight;//[Offset: 0x24 , Size: 36]

--------------------------------
Class: HomeBaseRegion
	int RegionID;//[Offset: 0x0 , Size: 4]
	Vector2D P1;//[Offset: 0x4 , Size: 8]
	Vector2D P2;//[Offset: 0xc , Size: 8]
	Vector2D P3;//[Offset: 0x14 , Size: 8]
	Vector2D P4;//[Offset: 0x1c , Size: 8]

--------------------------------
Class: DeathMatchPlayerStartSelectConfig
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	float NoEnemyRangeRadius;//[Offset: 0x4 , Size: 4]
	float ExistTeammateRanageRadius;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: BRGameModeTeam_HardPoint.BRGameModeTeam_DeathMatch.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	HardPointStopJoinConfig HardPointStopJoinConfig;//[Offset: 0x12c8 , Size: 12]
	function OnPickUpTarget();// 0x16e8874
	function OnHardPointSwitchConfigEnd();// 0x16e8860
	function OnActivateNewHardPoint();// 0x16e87e8
	function OnActivatedHardPointEnd();// 0x16e8770

--------------------------------
Class: HardPointStopJoinConfig
	bool bIsEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x0 , Size: 1]
	int HardPointIndex;//[Offset: 0x4 , Size: 4]
	float ActivatedTime;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: BRGameStateTeam_DeathMatch.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	enum DeathMatchSubModeType;//[Offset: 0x89c , Size: 1]
	int RemainMatchTime;//[Offset: 0x8a0 , Size: 4]
	int DeathMatchWinScore;//[Offset: 0x8a4 , Size: 4]
	int RespawnInvincibleTime;//[Offset: 0x8a8 , Size: 4]
	int Score_Kill;//[Offset: 0x8ac , Size: 4]
	DeathMatchTeamScoreDatas(StructProperty)[] DeathMatchTeamScoreDatas;//[Offset: 0x8b0 , Size: 12]
	delegate OnDeathMatchGlobalNotifyDelegate;//[Offset: 0x8c0 , Size: 12]
	delegate OnDeathMatchGlobalAudioDelegate;//[Offset: 0x8cc , Size: 12]
	delegate OnDeathMatchTeamScoreChangeDelegate;//[Offset: 0x8d8 , Size: 12]
	delegate OnDeathMatchPlayerScoreDatasChangeDelegate;//[Offset: 0x8e4 , Size: 12]
	delegate OnDeathMatchGameEndDelegate;//[Offset: 0x8f0 , Size: 12]
	DeathMatchMedalManagerComponent* MedalManagerComponent;//[Offset: 0x8fc , Size: 4]
	DeathMatchWWISEManagerComponent* WWISEManagerComponent;//[Offset: 0x900 , Size: 4]
	uint64 FirstKillPlayer;//[Offset: 0x908 , Size: 8]
	uint64 LastKillPlayer;//[Offset: 0x910 , Size: 8]
	function ServerResetShowWrapperActor();// 0x16e972c
	function OnRep_DeathMatchTeamScoreDatas();// 0x16e9718
	function MulticastRPC_BroadcastDeathMatchGlobalNotify();// 0x16e9460
	function MulticastRPC_BroadcastDeathMatchGlobalAudio();// 0x16e9358
	function MulticastRPC_BroadcastDeathMatchGameEndNotify();// 0x16a558c
	function GetFormatRemainTimeText();// 0x16e9298
	function GetCurrentClientDeathMatchPlayerStateData();// 0x16e90bc
	function BroadcastResetWrapperShowActor();// 0x16e9060

--------------------------------
Class: DeathMatchMedalManagerComponent.ActorComponent.Object
	FString MedalDataTableName;//[Offset: 0xbc , Size: 12]
	int HunterKillCount;//[Offset: 0xc8 , Size: 4]
	int RallyContinuousDeadCount;//[Offset: 0xcc , Size: 4]
	float SharpshooterDistance;//[Offset: 0xd0 , Size: 4]
	float SlaughterTime;//[Offset: 0xd4 , Size: 4]
	int SlaughterKillCount;//[Offset: 0xd8 , Size: 4]
	float AntiKillRemainHealthRatio;//[Offset: 0xdc , Size: 4]
	MedalList(ObjectProperty)[] MedalList;//[Offset: 0xe0 , Size: 12]
	BRGameModeTeam_DeathMatch* DeathMatchGameMode;//[Offset: 0xec , Size: 4]

--------------------------------
Class: DeathMatchWWISEManagerComponent.ActorComponent.Object
	<RandEventPool_Key(EnumProperty) , RandEventPool(StructProperty)> RandEventPool;//[Offset: 0xbc , Size: 60]
	<GlobalEventPool_Key(EnumProperty) , GlobalEventPool(ObjectProperty)> GlobalEventPool;//[Offset: 0xf8 , Size: 60]
	function OnReload();// 0x171c0c0
	function OnPlayerStateRep();// 0x171c0ac
	function OnGlobalNotify();// 0x171bfac
	function DeathMatchMedalNotify();// 0x171bee0

--------------------------------
Class: BRGameStateTeam_HardPoint.BRGameStateTeam_DeathMatch.STExtraGameStateBase.UAEGameState.GameState.GameStateBase.Info.Actor.Object
	delegate OnCurrentActivatedHardPointChangeDelegate;//[Offset: 0x918 , Size: 12]
	delegate OnRemainHardPointNumChangeDelegate;//[Offset: 0x924 , Size: 12]
	delegate OnWaitActivateHardPointStateChangeDelegate;//[Offset: 0x930 , Size: 12]
	delegate OnActivatedHardPointDataRecordListChangeDelegate;//[Offset: 0x93c , Size: 12]
	int OccupyHardPointScore;//[Offset: 0x948 , Size: 4]
	int HardPointComingEndNotify_Score;//[Offset: 0x94c , Size: 4]
	int HardPointComingEndNotify_RemainTime;//[Offset: 0x950 , Size: 4]
	HardPointActor* CurrentActivatedHardPoint;//[Offset: 0x954 , Size: 4]
	int RemainHardPointNum;//[Offset: 0x958 , Size: 4]
	int WaitActivateHardPointRemainTime;//[Offset: 0x95c , Size: 4]
	bool bIsWaitActivateHardPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x960 , Size: 1]
	ActivatedHardPointDataRecordList(StructProperty)[] ActivatedHardPointDataRecordList;//[Offset: 0x964 , Size: 12]
	HardPointList(ObjectProperty)[] HardPointList;//[Offset: 0x970 , Size: 12]
	HardPointTeamScoreDatas(StructProperty)[] HardPointTeamScoreDatas;//[Offset: 0x97c , Size: 12]
	function OnWaitActivateHardPoint();// 0x16ea1a8
	function OnRep_WaitActivateHardPoint();// 0x16ea194
	function OnRep_RemainHardPointNum();// 0x16ea180
	function OnRep_HardPointTeamScoreDatList();// 0x16ea16c
	function OnRep_CurrentActivatedHardPoint();// 0x16ea0f4
	function OnRep_ActivatedHardPointDataRecordList();// 0x16ea0e0
	function OnHardPointTeamScoreDatasChange();// 0x16ea068
	function OnHardPointRemainActivateTimeChange();// 0x16e9fac
	function OnHardPointOccupyStateChange();// 0x16e9ef0
	function OnHardPointAddTeamOccupyScore();// 0x16e9df0
	function OnActivateNewHardPoint();// 0x16e9d78
	function OnActivatedHardPointEnd();// 0x16e9d00
	function GetCurrentActivatedHardPoint();// 0x16e9cd8

--------------------------------
Class: HardPointActor.Actor.Object
	delegate OnHardPointTeamScoreDatasChangeDelegate;//[Offset: 0x2c4 , Size: 12]
	delegate AddScoreDelegate;//[Offset: 0x2d0 , Size: 12]
	delegate OnHardPointActivateStateChangeDelegate;//[Offset: 0x2dc , Size: 12]
	delegate OnOccupyStateChangeDelegate;//[Offset: 0x2e8 , Size: 12]
	delegate OnCurrentOwnedTeamIDChangeDelegate;//[Offset: 0x2f4 , Size: 12]
	delegate OnHardPointRemainActivateTimeChangeDelegate;//[Offset: 0x300 , Size: 12]
	StaticMeshComponent* OverlapMesh;//[Offset: 0x30c , Size: 4]
	int HardPointID;//[Offset: 0x310 , Size: 4]
	FString HardPointName;//[Offset: 0x314 , Size: 12]
	float ScoringIntervalTime;//[Offset: 0x320 , Size: 4]
	int ScoreValue;//[Offset: 0x324 , Size: 4]
	int UseBronPointID;//[Offset: 0x328 , Size: 4]
	int IconType;//[Offset: 0x32c , Size: 4]
	enum MarkInWhichMap;//[Offset: 0x330 , Size: 1]
	int WinScore;//[Offset: 0x334 , Size: 4]
	int WinTeamID;//[Offset: 0x338 , Size: 4]
	enum CurrentOccupyState;//[Offset: 0x33c , Size: 1]
	int RemainActivateTime;//[Offset: 0x340 , Size: 4]
	int CurrentOwnedTeamID;//[Offset: 0x344 , Size: 4]
	HardPointTeamScoreDataList(StructProperty)[] HardPointTeamScoreDataList;//[Offset: 0x348 , Size: 12]
	bool bIsActivate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x354 , Size: 1]
	InHardPointPlayers(ObjectProperty)[] InHardPointPlayers;//[Offset: 0x380 , Size: 12]
	Vertexs(StructProperty)[] Vertexs;//[Offset: 0x38c , Size: 12]
	TargetPoints(ObjectProperty)[] TargetPoints;//[Offset: 0x398 , Size: 12]
	function OnRep_RemainActivateTime();// 0x174c3e4
	function OnRep_IsActivate();// 0x174c3d0
	function OnRep_HardPointTeamScoreDataList();// 0x174c3bc
	function OnRep_CurrentOwnedTeamID();// 0x174c3a8
	function OnRep_CurrentOccupyState();// 0x174c394
	function OnPlayerRealExit();// 0x174c31c
	function OnPlayerLeave();// 0x174c2a4
	function OnPlayerEnter();// 0x174c22c
	function OnPlayerDeath();// 0x174c1b4
	function OnEndOverlap();// 0x174c06c
	function OnBeginOverlap();// 0x174be70
	function GetTeamScoreByTeamID();// 0x174bdf0
	function GetHardPointName();// 0x174bcd8

--------------------------------
Class: BRPlayerStateTeam_DeathMatch.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int PlayerGameID;//[Offset: 0xca8 , Size: 4]
	int DeathMatchScore;//[Offset: 0xcac , Size: 4]
	int Rank;//[Offset: 0xcb0 , Size: 4]
	int Deaths;//[Offset: 0xcb8 , Size: 4]
	int ContinuousKills;//[Offset: 0xcbc , Size: 4]
	AchievementPrize EquippedAchievementPrize;//[Offset: 0xd1c , Size: 12]
	delegate DeathMatchPlayerKillNotifyDelegate;//[Offset: 0xd30 , Size: 12]
	delegate DeathMatchPersonalNotifyDelegate;//[Offset: 0xd3c , Size: 12]
	delegate DeathMatchTeammateContinueKillNotifyDelegate;//[Offset: 0xd48 , Size: 12]
	delegate DeathMatchPersonalDieNotifyDelegate;//[Offset: 0xd54 , Size: 12]
	delegate DeathMatchMedalNotifyDelegate;//[Offset: 0xd60 , Size: 12]
	int SelectedWeaponConfigIndex;//[Offset: 0xd6c , Size: 4]
	PlayerWeaponsConfigList(StructProperty)[] PlayerWeaponsConfigList;//[Offset: 0xd70 , Size: 12]
	function ServerRPC_ChangeDeathMatchWeaponConfigIndex();// 0x16eb1e8
	function OnRep_SelectedWeaponConfigIndex();// 0x16eb1d4
	function OnRep_PlayerWeaponsConfigList();// 0x16ad21c
	function GetPlayerContinuousKills();// 0x16eb1b8
	function ClientRPC_BroadcastTeammateContinueKillData();// 0x16eb0f0
	function ClientRPC_BroadcastDeathMatchPersonalNotify();// 0x16eae38
	function ClientRPC_BroadcastDeathMatchPersonalDieNotify();// 0x16ead40
	function ClientRPC_BroadcastDeathMatchMedalNotify();// 0x16eac7c

--------------------------------
Class: AchievementPrize
	int MedalAvatarID;//[Offset: 0x0 , Size: 4]
	int NotifyTitleAvatarID;//[Offset: 0x4 , Size: 4]
	int ScoreBoardAvatarID;//[Offset: 0x8 , Size: 4]

--------------------------------
Class: BRPlayerStateTeam_HardPoint.BRPlayerStateTeam_DeathMatch.STExtraPlayerState.UAEPlayerState.PlayerState.Info.Actor.Object
	int OccupyScore;//[Offset: 0xd7c , Size: 4]

--------------------------------
Class: BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator.BTAuxiliaryNode.BTNode.Object
	bool bInverseCondition;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x3c , Size: 1]
	byte FlowAbortMode;//[Offset: 0x3d , Size: 1]

--------------------------------
Class: BTDecorator_AttrObserver.BTDecorator.BTAuxiliaryNode.BTNode.Object
	AttrObserverList(StructProperty)[] AttrObserverList;//[Offset: 0x40 , Size: 12]

--------------------------------
Class: BTDecorator_DistanceCheck.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector CenterActorBlackBoardKey;//[Offset: 0x40 , Size: 32]
	BlackboardKeySelector TargetActorBlackBoardKey;//[Offset: 0x60 , Size: 32]
	byte CompareOperation;//[Offset: 0x80 , Size: 1]
	float Distance;//[Offset: 0x84 , Size: 4]

--------------------------------
Class: BlackboardKeySelector
	AllowedTypes(ObjectProperty)[] AllowedTypes;//[Offset: 0x0 , Size: 12]
	FName SelectedKeyName;//[Offset: 0x10 , Size: 8]
	class BlackboardKeyType* SelectedKeyType;//[Offset: 0x18 , Size: 4]
	byte SelectedKeyID;//[Offset: 0x1c , Size: 1]
	bool bNoneIsAllowedValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x1d , Size: 1]

--------------------------------
Class: BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Object.BlackboardKeyType.Object
	class Object* BaseClass;//[Offset: 0x20 , Size: 4]

--------------------------------
Class: BTDecorator_DoesDistanceSatisfy.BTDecorator.BTAuxiliaryNode.BTNode.Object
	Vector2D TestDistanceRange;//[Offset: 0x40 , Size: 8]
	bool bCustomSrcLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x48 , Size: 1]
	BlackboardKeySelector TargetBlackboardKey;//[Offset: 0x50 , Size: 32]
	BlackboardKeySelector SrcBlackboardKey;//[Offset: 0x70 , Size: 32]

--------------------------------
Class: BlackboardKeyType_Vector.BlackboardKeyType.Object

--------------------------------
Class: BTDecorator_HasOccludeBuildActor.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_HasStaticOccludePos.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsEnemyInBuilding.BTDecorator.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTDecorator_IsInSafetyCircle.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector CheckTargetBlackboardKey;//[Offset: 0x40 , Size: 32]
	enum IsCheackByCircleType;//[Offset: 0x60 , Size: 1]

--------------------------------
Class: BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x40 , Size: 32]

--------------------------------
Class: BTDecorator_IsMovementMode.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	byte MovementMode;//[Offset: 0x60 , Size: 1]

--------------------------------
Class: BTDecorator_Mob_CheckJump.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int RandomReachablePointRadius;//[Offset: 0x60 , Size: 4]
	Vector2D JumpHighRange;//[Offset: 0x64 , Size: 8]
	Vector2D JumpLowRange;//[Offset: 0x6c , Size: 8]
	int JumpStartOffsetZ;//[Offset: 0x74 , Size: 4]
	int JumpHighThreshold;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: BTDecorator_Mob_CheckJumpToLowDirect.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float JumpToLowThreshold;//[Offset: 0x60 , Size: 4]
	float CheckDistance;//[Offset: 0x64 , Size: 4]
	float JumpToLowSpeed;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: BTDecorator_Mob_CheckObstacle.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int CheckDistance;//[Offset: 0x60 , Size: 4]
	int BackDistance;//[Offset: 0x64 , Size: 4]

--------------------------------
Class: BTDecorator_Mob_CloseEnough.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableDistance;//[Offset: 0x60 , Size: 4]
	bool bCheckDistanceIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65 , Size: 1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66 , Size: 1]

--------------------------------
Class: BTDecorator_Mob_HasAIState.BTDecorator.BTAuxiliaryNode.BTNode.Object
	enum AIState;//[Offset: 0x3e , Size: 1]

--------------------------------
Class: BTDecorator_Mob_IsTargetAbove.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AcceptableDistance;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: BTDecorator_Mob_LineTrace.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	traceObjectTypes(ByteProperty)[] traceObjectTypes;//[Offset: 0x60 , Size: 12]

--------------------------------
Class: BTDecorator_Mob_LinkCheckJumpWall.BTDecorator_BlackboardBase.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int KeepDistance;//[Offset: 0x60 , Size: 4]
	float LineTraceHeightOffset;//[Offset: 0x64 , Size: 4]

--------------------------------
Class: BTDecorator_Mob_Once.BTDecorator.BTAuxiliaryNode.BTNode.Object
	int AllowTimes;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: BTDecorator_NearTargetLoc.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float Range;//[Offset: 0x40 , Size: 4]

--------------------------------
Class: BTDecorator_NewSatisfyAttkDist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float DefaultAttackDist;//[Offset: 0x40 , Size: 4]
	bool bIsInversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]
	float ExtraDistance;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTDecorator_Probability.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float ExecuteProbability;//[Offset: 0x40 , Size: 4]
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]
	<DifficultyProbabilityCfg_Key(IntProperty) , DifficultyProbabilityCfg(FloatProperty)> DifficultyProbabilityCfg;//[Offset: 0x48 , Size: 60]

--------------------------------
Class: BTDecorator_SatisfyAttkDist.BTDecorator.BTAuxiliaryNode.BTNode.Object
	float AttackDist;//[Offset: 0x40 , Size: 4]
	bool bIsInversed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x44 , Size: 1]

--------------------------------
Class: BTReuseList.UAEUserWidget.UserWidget.Widget.Visual.Object
	float itemSizeX;//[Offset: 0x304 , Size: 4]
	float itemSizeY;//[Offset: 0x308 , Size: 4]
	itemSizeYList(FloatProperty)[] itemSizeYList;//[Offset: 0x30c , Size: 12]
	int TotalNum;//[Offset: 0x318 , Size: 4]
	bool misaligned;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x31c , Size: 1]
	int visibleNum;//[Offset: 0x320 , Size: 4]
	int topEmptyNum;//[Offset: 0x324 , Size: 4]
	int oldTopEmptyNum;//[Offset: 0x328 , Size: 4]
	spacerList(ObjectProperty)[] spacerList;//[Offset: 0x32c , Size: 12]
	ItemList(ObjectProperty)[] ItemList;//[Offset: 0x338 , Size: 12]
	float totalHeight;//[Offset: 0x344 , Size: 4]
	float deltaTotalHeight;//[Offset: 0x348 , Size: 4]
	class UAEUserWidget* ItemClass;//[Offset: 0x34c , Size: 4]
	delegate itemUpdateDelegate;//[Offset: 0x368 , Size: 12]
	function UpdateSingleHeight();// 0x16ed900
	function SetRowNumAsUnif();// 0x16ed7b0
	function RefreshListByOffset();// 0x16ed738
	function DoInit();// 0x16ed724

--------------------------------
Class: BTService.BTAuxiliaryNode.BTNode.Object
	float Interval;//[Offset: 0x3c , Size: 4]
	float RandomDeviation;//[Offset: 0x40 , Size: 4]
	bool bCallTickOnSearchStart;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x44 , Size: 1]
	bool bRestartTimerOnEachActivation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x44 , Size: 1]

--------------------------------
Class: BTService_AdvancedShooting.BTService.BTAuxiliaryNode.BTNode.Object
	enum WeaponShotType;//[Offset: 0x45 , Size: 1]
	float DeviationScale;//[Offset: 0x48 , Size: 4]
	Vector2D RandomShootFreqRange;//[Offset: 0x4c , Size: 8]
	BlackboardKeySelector ReloadBlackBoardKey;//[Offset: 0x58 , Size: 32]
	bool bSetCanSeeTargetFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79 , Size: 1]
	bool bUseTargetEnemyCfg;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a , Size: 1]
	<DifficultyShootingCfg_Key(IntProperty) , DifficultyShootingCfg(StructProperty)> DifficultyShootingCfg;//[Offset: 0x7c , Size: 60]
	<TargetEnemyShootingCfg_Key(IntProperty) , TargetEnemyShootingCfg(StructProperty)> TargetEnemyShootingCfg;//[Offset: 0xb8 , Size: 60]

--------------------------------
Class: BlackboardKeyType_Bool.BlackboardKeyType.Object

--------------------------------
Class: BTService_ChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x48 , Size: 4]
	float MaxRememberLastAttackedMeTimeInSeconds;//[Offset: 0x4c , Size: 4]
	float MaxTraceLastAttackedMeDistance;//[Offset: 0x50 , Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x54 , Size: 4]
	float MinTimeLockTarget;//[Offset: 0x58 , Size: 4]
	float SensedRadius;//[Offset: 0x5c , Size: 4]
	float EquipWeaponSensedRadius;//[Offset: 0x60 , Size: 4]
	float EquipWeaponNightSensedRadius;//[Offset: 0x64 , Size: 4]
	float EmergencyRadius;//[Offset: 0x68 , Size: 4]
	WeaponType2Ranges(StructProperty)[] WeaponType2Ranges;//[Offset: 0x6c , Size: 12]
	DefaultWeaponTypeToRanges(StructProperty)[] DefaultWeaponTypeToRanges;//[Offset: 0x78 , Size: 12]
	<WeatherToRange_Key(EnumProperty) , WeatherToRange(StructProperty)> WeatherToRange;//[Offset: 0x84 , Size: 60]
	<WeatherTypeToWeatherRange_Key(EnumProperty) , WeatherTypeToWeatherRange(EnumProperty)> WeatherTypeToWeatherRange;//[Offset: 0xc0 , Size: 60]
	float PVESensedRadius;//[Offset: 0xfc , Size: 4]

--------------------------------
Class: BTService_ChooseFightbackEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float SensedRadius;//[Offset: 0x48 , Size: 4]
	float EquipWeaponSensedRadius;//[Offset: 0x4c , Size: 4]
	float EmergencyRadius;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: BTService_CJChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	bool bUpdateItemOptimize;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45 , Size: 1]
	UpdateItemIntervalList(StructProperty)[] UpdateItemIntervalList;//[Offset: 0x48 , Size: 12]
	BlackboardKeySelector OutTargetEnemyActor;//[Offset: 0x58 , Size: 32]
	BlackboardKeySelector OutIsCanNotSeeTarget;//[Offset: 0x78 , Size: 32]
	float MaxRememberLastAttackedMeTimeInSeconds;//[Offset: 0x98 , Size: 4]
	int MaxTraceLastAttackedMeDistance;//[Offset: 0x9c , Size: 4]
	EnemyInfoList(StructProperty)[] EnemyInfoList;//[Offset: 0xa0 , Size: 12]
	float MinTimeLockTarget;//[Offset: 0xac , Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0xb0 , Size: 4]
	int SensedRadius;//[Offset: 0xb4 , Size: 4]
	int EquipWeaponSensedRadius;//[Offset: 0xb8 , Size: 4]
	bool bUseFanChoose;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc , Size: 1]
	FanInfoList(StructProperty)[] FanInfoList;//[Offset: 0xc0 , Size: 12]
	bool bFindNearestEnemyPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xcc , Size: 1]
	BlackboardKeySelector OutNearestEnemyPawnVisible;//[Offset: 0xd0 , Size: 32]
	BlackboardKeySelector OutNearestEnemyPawnInVisible;//[Offset: 0xf0 , Size: 32]
	float NearestEnemyVisibleMemoryTime;//[Offset: 0x110 , Size: 4]
	int SensedNearestEnemyVisibleRadius;//[Offset: 0x114 , Size: 4]
	int SensedNearestEnemyInVisibleRadius;//[Offset: 0x118 , Size: 4]

--------------------------------
Class: BTService_ClearTrouble.BTService.BTAuxiliaryNode.BTNode.Object
	bool bOpenAIClearTrouble;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45 , Size: 1]
	float PathFindTestRadius;//[Offset: 0x48 , Size: 4]
	uint32 UnreachablePointsToBeInTrouble;//[Offset: 0x4c , Size: 4]
	class NavigationQueryFilter* TestPathFilterClass;//[Offset: 0x50 , Size: 4]
	InTroubleTeleportConfig TeleportCfg;//[Offset: 0x54 , Size: 16]
	bool bShowDebugPoint;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]

--------------------------------
Class: InTroubleTeleportConfig
	float SrcCheckRadius;//[Offset: 0x0 , Size: 4]
	float DstCheckRadius;//[Offset: 0x4 , Size: 4]
	uint32 TryFindDstLocNum;//[Offset: 0x8 , Size: 4]
	bool OnlyTeleportToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]

--------------------------------
Class: BTService_Cruising.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTService_DeliverControl.BTService.BTAuxiliaryNode.BTNode.Object
	RatingConfig(StructProperty)[] RatingConfig;//[Offset: 0x48 , Size: 12]

--------------------------------
Class: BTService_DistantJudge.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector WatchTargetBlackBoardKey;//[Offset: 0x48 , Size: 32]
	DistantJudges(StructProperty)[] DistantJudges;//[Offset: 0x68 , Size: 12]
	bool ResetModifyBBData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]

--------------------------------
Class: BTService_FightDecisionSystem.BTService.BTAuxiliaryNode.BTNode.Object
	float EnemyTraceRadius;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x48 , Size: 32]

--------------------------------
Class: BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	byte FocusPriority;//[Offset: 0x68 , Size: 1]

--------------------------------
Class: BTService_Focus.BTService_DefaultFocus.BTService_BlackboardBase.BTService.BTAuxiliaryNode.BTNode.Object
	enum AIFocusPriority;//[Offset: 0x69 , Size: 1]
	bool ResetFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6a , Size: 1]

--------------------------------
Class: BTService_LookAround.BTService.BTAuxiliaryNode.BTNode.Object
	Vector2D RotationSpeed;//[Offset: 0x48 , Size: 8]
	Vector2D RotationAngle;//[Offset: 0x50 , Size: 8]
	Vector2D WaitTimeWhenStop;//[Offset: 0x58 , Size: 8]
	float AcceptToleranceInDegree;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: BTService_Mob_AddHp.BTService.BTAuxiliaryNode.BTNode.Object
	int BuffID_AddHP;//[Offset: 0x48 , Size: 4]
	enum addHPType;//[Offset: 0x4c , Size: 1]

--------------------------------
Class: BTService_Mob_AdvancedMovementDetector.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTService_Mob_AutoDestroy.BTService.BTAuxiliaryNode.BTNode.Object
	float CheckRadius;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_Mob_CheckLocation.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxAllowedDistanceFromSpawnPointSq;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_Mob_CheckLoseTarget.BTService.BTAuxiliaryNode.BTNode.Object
	float LoseTargetThreshold;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_Mob_CheckPathExist.BTService.BTAuxiliaryNode.BTNode.Object

--------------------------------
Class: BTService_Mob_ChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x48 , Size: 4]
	float MinTimeLockTarget;//[Offset: 0x4c , Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x50 , Size: 4]
	float SensedRadius;//[Offset: 0x54 , Size: 4]
	enum searchType;//[Offset: 0x58 , Size: 1]
	float PreciseHatredDecreaseSpeed;//[Offset: 0x5c , Size: 4]
	bool SensedRadiusAdvanceInNight;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x60 , Size: 1]
	float LoseSightRadius;//[Offset: 0x64 , Size: 4]
	bool DontAttackWhenTargetInWater;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x68 , Size: 1]
	float AttackVehicleInRadius;//[Offset: 0x6c , Size: 4]
	bool AttackVehicleInRadiusEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70 , Size: 1]
	enum searchVehicleType;//[Offset: 0x71 , Size: 1]
	STExtraSimpleCharacter* ControlledMobPawn;//[Offset: 0x80 , Size: 4]

--------------------------------
Class: STExtraSimpleCharacter.STExtraCharacter.UAECharacter.Character.Pawn.Actor.Object
	int iRegionSimpleCharacter;//[Offset: 0x920 , Size: 4]
	int ForceLifePeriodTime;//[Offset: 0x924 , Size: 4]
	bool bDamageTeamate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x928 , Size: 1]
	bool bIsPreClientDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x929 , Size: 1]
	delegate OnDeath;//[Offset: 0x92c , Size: 12]
	float DelayHideDuration;//[Offset: 0x938 , Size: 4]
	float AnimDeathLifeSpan;//[Offset: 0x93c , Size: 4]
	float DelayHideDurationByHeadShoot;//[Offset: 0x940 , Size: 4]
	float AnimDeathLifeSpanByHeadShoot;//[Offset: 0x944 , Size: 4]
	float DelayHideDurationByVehicleHit;//[Offset: 0x948 , Size: 4]
	float AnimDeathLifeSpanByVehicleHit;//[Offset: 0x94c , Size: 4]
	ParticleSystem* HeadShootFX_Red;//[Offset: 0x950 , Size: 4]
	ParticleSystem* HeadShootFX_Green;//[Offset: 0x954 , Size: 4]
	class PlayerTombBox* DropTomb;//[Offset: 0x958 , Size: 4]
	int MonsterSpawnTime;//[Offset: 0x95c , Size: 4]
	int MonsterDeathTime;//[Offset: 0x960 , Size: 4]
	float AnimBornLifeSpan;//[Offset: 0x964 , Size: 4]
	bool BornOnCeiling;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x968 , Size: 1]
	float AnimLand_Hard_VelocitySquared_Threshold;//[Offset: 0x96c , Size: 4]
	float AnimLand_Hard_LifeSpan;//[Offset: 0x970 , Size: 4]
	float AnimLand_Light_LifeSpan;//[Offset: 0x974 , Size: 4]
	SimpleCharAnimParamList CurAnimParamList;//[Offset: 0x988 , Size: 76]
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x9d4 , Size: 4]
	float MinTimeLockTarget;//[Offset: 0x9d8 , Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x9dc , Size: 4]
	float SensedRadius;//[Offset: 0x9e0 , Size: 4]
	float MinTimeLockHeardEnemy;//[Offset: 0x9e4 , Size: 4]
	float HeardRadius;//[Offset: 0x9e8 , Size: 4]
	SimulateSyncSmoothComponent* SimulateSyncSmooth;//[Offset: 0x9ec , Size: 4]
	MobAdvancedMovement* MobAdvancedMovement;//[Offset: 0x9f0 , Size: 4]
	MobPerceptionController* MobPerceptionController;//[Offset: 0x9f4 , Size: 4]
	STExtraSimpleCharacterPhysics* SimpleCharacterPhysics;//[Offset: 0x9f8 , Size: 4]
	UnitAttrComponent* UnitAttrComp;//[Offset: 0x9fc , Size: 4]
	CircleMgrComponent* CircleMgr;//[Offset: 0xa0c , Size: 4]
	int SyncAIState;//[Offset: 0xa10 , Size: 4]
	int AIState;//[Offset: 0xa1c , Size: 4]
	float HurtAnimTime;//[Offset: 0xa20 , Size: 4]
	float BackAnimPerc;//[Offset: 0xa24 , Size: 4]
	delegate OnEnterAIState;//[Offset: 0xa28 , Size: 12]
	delegate OnLeaveAIState;//[Offset: 0xa34 , Size: 12]
	delegate OnBPEnterAIState;//[Offset: 0xa40 , Size: 12]
	delegate OnBPLeaveAIState;//[Offset: 0xa4c , Size: 12]
	delegate OnChangeAnimParam;//[Offset: 0xa58 , Size: 12]
	delegate OnAnimInstanceAssetLoaded;//[Offset: 0xa64 , Size: 12]
	delegate OnAnimListComponentAssetLoaded;//[Offset: 0xa70 , Size: 12]
	bool bCanSkillSpeedScale;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa90 , Size: 1]
	int FlowId;//[Offset: 0xa94 , Size: 4]
	FString MonsterName;//[Offset: 0xa98 , Size: 12]
	FString MonsterNameID;//[Offset: 0xaa4 , Size: 12]
	int MonsterSyncID;//[Offset: 0xab0 , Size: 4]
	bool bEnableAvatar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xab4 , Size: 1]
	int Gold;//[Offset: 0xab8 , Size: 4]
	int SuperGold;//[Offset: 0xabc , Size: 4]
	BornSkill(IntProperty)[] BornSkill;//[Offset: 0xac0 , Size: 12]
	AloneSkillIdList(IntProperty)[] AloneSkillIdList;//[Offset: 0xacc , Size: 12]
	int HealthBarCount;//[Offset: 0xad8 , Size: 4]
	bool bIsCrawlChar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xadc , Size: 1]
	int NeedSendAttackFlow;//[Offset: 0xae0 , Size: 4]
	Actor* AttackTarget;//[Offset: 0xae4 , Size: 8]
	DecalIndexArray(UInt32Property)[] DecalIndexArray;//[Offset: 0xaec , Size: 12]
	byte HitPartJudgment;//[Offset: 0xaf8 , Size: 1]
	<NewHitBodyPosMap_Key(StrProperty) , NewHitBodyPosMap(EnumProperty)> NewHitBodyPosMap;//[Offset: 0xafc , Size: 60]
	BodyTypeDef StandBodyDef;//[Offset: 0xb38 , Size: 8]
	PVELagCompensationComponent* PVELagCompensationComponent;//[Offset: 0xb40 , Size: 4]
	CapsuleComponent* ProneCapsuleComponent;//[Offset: 0xb44 , Size: 4]
	float IdleWalkSpeedRatio;//[Offset: 0xb48 , Size: 4]
	float AttackWalkSpeedRatio;//[Offset: 0xb4c , Size: 4]
	CircleDamageRate(FloatProperty)[] CircleDamageRate;//[Offset: 0xb50 , Size: 12]
	int ObjectPoolSize;//[Offset: 0xb5c , Size: 4]
	int LifePeriodTime;//[Offset: 0xb60 , Size: 4]
	float KilledDisCircleEdge;//[Offset: 0xb64 , Size: 4]
	int MaxHPStageForBroadcast;//[Offset: 0xb68 , Size: 4]
	bool bEnableMaxAllowedDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6c , Size: 1]
	float MaxAllowedDistanceFromSpawnPoint;//[Offset: 0xb70 , Size: 4]
	bool bMaxAllowedDistanceCheckIn2D;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb74 , Size: 1]
	bool IsHeadShootDead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb7c , Size: 1]
	int RageLevel;//[Offset: 0xb98 , Size: 4]
	float AloneRageTimerRate;//[Offset: 0xba4 , Size: 4]
	float ImpluseScale;//[Offset: 0xba8 , Size: 4]
	float ImpluseZScale;//[Offset: 0xbac , Size: 4]
	bool EnableOverlapImpulse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb0 , Size: 1]
	bool EnableOverlapDamage;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbb1 , Size: 1]
	float OverlapVehicleDamageRate;//[Offset: 0xbb4 , Size: 4]
	float OverlapAgainstVehicleDamageRate;//[Offset: 0xbb8 , Size: 4]
	float MinDamageInterval;//[Offset: 0xbbc , Size: 4]
	float MovementTickInterval;//[Offset: 0xbc0 , Size: 4]
	float DsActorTickInterval;//[Offset: 0xbc4 , Size: 4]
	bool IsNavWalkMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbc8 , Size: 1]
	AkAudioEvent* MonsterBornSound;//[Offset: 0xbd0 , Size: 4]
	AkAudioEvent* MonsterDeadSound;//[Offset: 0xbd4 , Size: 4]
	AkAudioEvent* MonsterIdleSound;//[Offset: 0xbd8 , Size: 4]
	AkAudioEvent* MonsterRunSound;//[Offset: 0xbdc , Size: 4]
	float NoPathToTargetTimer;//[Offset: 0xbe0 , Size: 4]
	enum AnimGroupMask;//[Offset: 0xbe4 , Size: 1]
	bool ExplodeBeforeDieEnabled;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xbec , Size: 1]
	int ExplodeSkillID;//[Offset: 0xbf0 , Size: 4]
	float ExplodeSkillDuration;//[Offset: 0xbf4 , Size: 4]
	float LagCompensationRecordInterval;//[Offset: 0xcb8 , Size: 4]
	float HearRadius;//[Offset: 0xcfc , Size: 4]
	float MinTimeLockHeardPos;//[Offset: 0xd00 , Size: 4]
	function TestPathSyncToLocation();// 0x189f58c
	function TestPathSyncToActor();// 0x189f50c
	function StopMovementMode();// 0x185b614
	function StartMovementMode();// 0x189f4f0
	function ShowHeadShootDeadEffect();// 0x189f4dc
	function SetCopyBoneSimpleChar();// 0x189f464
	function ResetCharAnimParam();// 0x189f450
	function OnRep_SyncAIState();// 0x189f43c
	function OnRep_ReplicatedMovement();// 0x1698f30
	function OnRep_RageLevel();// 0x189f428
	function OnRep_MonsterSyncID();// 0x189f414
	function OnRep_MonsterNameID();// 0x189f400
	function NotifyInitial();// 0x189f3ec
	function LeaveAIState();// 0x189f328
	function IsSameTeam();// 0x180fc8c
	function IsEnableBroadcastDamage();// 0x189f23c
	function IsCanCopyBone();// 0x189f214
	function IsBoss();// 0x189f1ec
	function IsBigBoss();// 0x189f1c4
	function InitCharAnimParam();// 0x189f1b0
	function HasAIState();// 0x189f130
	function HandleHitByBullet();// 0x189f0b8
	function GotoEarthAndDie();// 0x189f09c
	function GetServerHeadLocation();// 0x189f054
	function GetPlayerControllerSafety();// 0x180e70c
	function GetMonsterType();// 0x189f038
	function GetMonsterName();// 0x189ef70
	function GetHitBoxRadius();// 0x189ef54
	function GetHitBodyType();// 0x189ede0
	function GetDropTomb();// 0x189edb0
	function GetCurHitPartJugementType();// 0x189ed88
	function GetCopyBoneSimpleChar();// 0x189ed60
	function GetAnimParam();// 0x189ece4
	function GetAliveTimeSeconds();// 0x189ecc8
	function ExplodeBeforeDie();// 0x189ea0c
	function EnterAIState();// 0x189e948
	function DisappearOnDeath();// 0x189e934
	function DieAfterExplode();// 0x189e920
	function DelayHidden();// 0x180c5b4
	function ClearOnDeath();// 0x189e840
	function CheckPlayerNeedUpdateAnimation();// 0x189e818
	function CharacterMovementUpdatedCallback();// 0x189e70c
	function BroadcastReliableLeaveAIState();// 0x189e5fc
	function BroadcastReliableEnterAIState();// 0x189e4ec
	function BroadcastClientsSimulateVehicleDamage();// 0x189e270
	function BroadcastClientsSimulateRadialDamage();// 0x189df88
	function BroadcastClientsSimulatePoisonDamage();// 0x189dd0c
	function BroadcastClientsSimulatePointDamage();// 0x189da90
	function BroadcastClientsSimulateMeleeDamage();// 0x189d800
	function BroadcastClientsSimulateLastPointDamage();// 0x189d584
	function BroadcastClientsSimulateFallingDamage();// 0x189d308
	function BroadcastClientsSimulateDrowningDamage();// 0x189d08c
	function BroadcastClientsSimulateBurningDamage();// 0x189ce08
	function BroadcastClientsSimulateAirAttackDamage();// 0x189cb20
	function BroadcastClientsGMTestDamage();// 0x189c98c
	function BroadcastClientsDebugSpeed();// 0x189c8d8
	function BroadcastClientsDebugOutputDamage();// 0x189c824
	function BPSetEyeEffect();// 0x206ccd8
	function BPNotifyStartDying();// 0x206ccd8
	function BPNotifyInitial();// 0x206ccd8
	function BPNotifyDeathEnd();// 0x206ccd8
	function BPMonsterInitTableDone();// 0x206ccd8
	function BPDie();// 0x189c6b0
	function BP_HasAIState();// 0x189c630
	function BleCallGetRoadPoints();// 0x189c568
	function AllowAIState();// 0x189c4e8
	function AddWeaponDamageAddition();// 0x189c470

--------------------------------
Class: SimpleCharAnimParamList
	Vector Velocity;//[Offset: 0x0 , Size: 12]
	Vector movedir;//[Offset: 0xc , Size: 12]
	byte MovementMode;//[Offset: 0x18 , Size: 1]
	Rotator ViewRotation;//[Offset: 0x1c , Size: 12]
	bool IsHurting;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x28 , Size: 1]
	Vector HurtDir;//[Offset: 0x2c , Size: 12]
	bool IsDying;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x38 , Size: 1]
	bool IsJumping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x39 , Size: 1]
	bool IsTurning;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3a , Size: 1]
	bool ShouldPauseAnim;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x3b , Size: 1]
	int RandomAnimID;//[Offset: 0x3c , Size: 4]

--------------------------------
Class: SimulateSyncSmoothComponent.ActorComponent.Object
	RepSnapshot RepSnapshot;//[Offset: 0xbc , Size: 56]
	RepSnapshot Snapshot;//[Offset: 0xf4 , Size: 56]
	float TolerateLocationDiffSqAtServer;//[Offset: 0x12c , Size: 4]
	float TolerateRotationInDegreeAtServer;//[Offset: 0x130 , Size: 4]
	float TolerateLinearVelocityDiffSqAtServer;//[Offset: 0x134 , Size: 4]
	float TolerateAngularVelocityDiffSqAtServer;//[Offset: 0x138 , Size: 4]
	float ForceUpdateLocationDiffSqAtServer;//[Offset: 0x13c , Size: 4]
	float ForceUpdateLinearVelocityDiffSqAtServer;//[Offset: 0x140 , Size: 4]
	SimulateSyncSmooth SimulateSyncSmooth;//[Offset: 0x144 , Size: 212]
	bool bOpenDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x218 , Size: 1]
	bool bOpenServerForceUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x219 , Size: 1]
	bool bNoPredict;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x21a , Size: 1]
	delegate OnActorTeleportFinish;//[Offset: 0x21c , Size: 12]
	function TeleportNextSync();// 0x17d2b1c
	function StopPredict();// 0x17d2b08
	function SetVelocity();// 0x17d2a84
	function SetAngularVelocity();// 0x17d2984
	function OnRep_Snapshot();// 0x17d2970
	function GetVelocity();// 0x17d2928

--------------------------------
Class: RepSnapshot
	float TimeStamp;//[Offset: 0x0 , Size: 4]
	Vector_NetQuantize Location;//[Offset: 0x4 , Size: 12]
	Rotator Rotation;//[Offset: 0x10 , Size: 12]
	Vector_NetQuantize LinearVelocity;//[Offset: 0x1c , Size: 12]
	Vector_NetQuantize AngularVelocity;//[Offset: 0x28 , Size: 12]
	bool IsTeleport;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34 , Size: 1]

--------------------------------
Class: SimulateSyncSmooth
	float MaxPredictMoveTime;//[Offset: 0x0 , Size: 4]
	float MaxMoveDeltaTime;//[Offset: 0x4 , Size: 4]
	float SmoothNetUpdateTime;//[Offset: 0x8 , Size: 4]
	float SmoothNetUpdateRotationTime;//[Offset: 0xc , Size: 4]

--------------------------------
Class: MobAdvancedMovement.ActorComponent.Object
	float WallClimb_AcceptableFaceAngle;//[Offset: 0xbc , Size: 4]
	float WallClimb_TurnFaceSpeed;//[Offset: 0xc0 , Size: 4]
	float WallClimb_KeepDistanceToWall;//[Offset: 0xc4 , Size: 4]
	float WallClimb_JumpToWallSpeed;//[Offset: 0xc8 , Size: 4]
	float WallClimb_JumpToWallHeightOffset;//[Offset: 0xcc , Size: 4]
	float WallClimb_MoveUpSpeed;//[Offset: 0xd0 , Size: 4]
	float WallClimb_MoveUpHeightOffset;//[Offset: 0xd4 , Size: 4]
	float WallClimb_ClimbToStand_Duration;//[Offset: 0xd8 , Size: 4]
	CurveFloat* Curve_ClimbToStand_Forward;//[Offset: 0xdc , Size: 4]
	CurveFloat* Curve_ClimbToStand_Height;//[Offset: 0xe0 , Size: 4]
	float WallJump_JumpSpeed;//[Offset: 0xe4 , Size: 4]
	float WallJump_JumpAngle;//[Offset: 0xe8 , Size: 4]
	float WallJump_ZVelocity;//[Offset: 0xec , Size: 4]
	float Stride_AcceptableFaceAngle;//[Offset: 0xf0 , Size: 4]
	float Stride_Duration;//[Offset: 0xf4 , Size: 4]
	float Stride_KeepDistanceToWall;//[Offset: 0xf8 , Size: 4]
	float Stride_HeightOffset;//[Offset: 0xfc , Size: 4]
	float Stride_ForwardOffset;//[Offset: 0x100 , Size: 4]
	float Stride_LineTraceOffset;//[Offset: 0x104 , Size: 4]
	CurveFloat* Curve_Stride_Forward;//[Offset: 0x108 , Size: 4]
	CurveFloat* Curve_Stride_Height;//[Offset: 0x10c , Size: 4]
	bool Stride_JumpInstead;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x110 , Size: 1]
	int iWallClimbState;//[Offset: 0x114 , Size: 4]
	int iWallJumpState;//[Offset: 0x118 , Size: 4]
	int iStrideState;//[Offset: 0x11c , Size: 4]
	function WindowJump();// 0x176e68c
	function WallJump();// 0x176e61c
	function WallClimbExit();// 0x176e608
	function WallClimb();// 0x176e500
	function TickWallJump_Turn();// 0x176e488
	function TickWallJump();// 0x176e410
	function TickWallClimb_Turn();// 0x176e398
	function TickWallClimb_JumpToWall();// 0x176e320
	function TickWallClimb_ClimbUp();// 0x176e2a8
	function TickWallClimb_ClimbToStand();// 0x176e230
	function TickWallClimb();// 0x176e1b8
	function TickStride_Turn();// 0x176e140
	function TickStride_Stride();// 0x176e0c8
	function TickStride_MoveToWall();// 0x176e050
	function TickStride();// 0x176dfd8
	function StrideJump();// 0x176dfc4
	function StrideExit();// 0x176dfb0
	function Stride();// 0x176ded8
	function OnMobDie();// 0x176dec4
	function NotifyClientsWallClimbSyncState();// 0x176ddb8
	function NotifyClientsWallClimbStartClimbToStand();// 0x176dcac
	function NotifyClientsStrideState();// 0x176dba0
	function NotifyClientsStartStride();// 0x176d94c
	function IsInAdvancedMovement();// 0x176d924
	function GetWallJumpState();// 0x176d8fc
	function GetWallClimbState();// 0x176d8d4
	function GetStrideState();// 0x176d8ac
	function BPWallJump();// 0x176d834
	function BPWallClimb();// 0x176d7bc

--------------------------------
Class: MobPerceptionController.ActorComponent.Object
	float AcceptableNoiseLoudness;//[Offset: 0xbc , Size: 4]
	AcceptableNoiseType(EnumProperty)[] AcceptableNoiseType;//[Offset: 0xc0 , Size: 12]
	enum NoiseAttenuationModel;//[Offset: 0xcc , Size: 1]
	int NoisePoolSize;//[Offset: 0xd0 , Size: 4]
	float NoiseRememberTime;//[Offset: 0xd4 , Size: 4]
	float NoiseUpdateFrequency;//[Offset: 0xd8 , Size: 4]
	function SearchNoise();// 0x1770420
	function OnPerceptionSenseUpdated();// 0x1770310
	function OnMobDie();// 0x17702fc
	function ClearNoisePool();// 0x17702fc
	function CheckNoise();// 0x177015c
	function Attenuation();// 0x176ffc4
	function AddToNoisePool();// 0x176fda8

--------------------------------
Class: STExtraSimpleCharacterPhysics.ActorComponent.Object
	float VelocityDampingOnGround;//[Offset: 0xbc , Size: 4]
	float VelocityDampingInMidAir;//[Offset: 0xc0 , Size: 4]
	float StepHeight;//[Offset: 0xc4 , Size: 4]
	float VehicleHitFeedBack;//[Offset: 0xc8 , Size: 4]
	float VehicleImpluseScale;//[Offset: 0xcc , Size: 4]
	float HorizontalVelocitySquaredForSimulate;//[Offset: 0xd0 , Size: 4]
	float ResetSimulatePreventPenetrationTime;//[Offset: 0xd4 , Size: 4]
	bool bPreventPenetration;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	CharacterMovementComponent* CharacterMovement;//[Offset: 0x114 , Size: 4]
	function StopSkillSimulate();// 0x18a3c1c
	function StartSkillSimulate();// 0x18a3b50
	function SetVelocity();// 0x18a3ae0
	function SetSimulatePhysics();// 0x18a3a64
	function SetEnabled();// 0x18a39e8
	function SetCharacterMovementActive();// 0x18a3968
	function IsOnGround();// 0x18a3940
	function GetVelocity();// 0x18a38f8
	function FindGround();// 0x18a38d0
	function AddVelocity();// 0x18a3860
	function ActivatePhysics();// 0x18a384c

--------------------------------
Class: UnitAttrComponent.ActorComponent.Object
	byte Category;//[Offset: 0xbc , Size: 1]
	byte Type;//[Offset: 0xbd , Size: 1]
	int TypeID;//[Offset: 0xc0 , Size: 4]
	function SetActorVisible();// 0x18f5070

--------------------------------
Class: PVELagCompensationComponent.LagCompensationComponent.LagCompensationComponentBase.EntityAntiCheatComponent.ActorComponent.Object
	function SimulatedCharacterServerTime();// 0x175b190
	function ShootSimpleCharacterVerify();// 0x17b9e90

--------------------------------
Class: BTService_Mob_Hearing.BTService.BTAuxiliaryNode.BTNode.Object
	float MinTimeLockTarget;//[Offset: 0x48 , Size: 4]
	float MaxTimeLockWhenNoNextSound;//[Offset: 0x4c , Size: 4]
	enum searchType;//[Offset: 0x50 , Size: 1]
	float AcceptableDistance;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: BTService_Mob_MoveBlockTimer.BTService.BTAuxiliaryNode.BTNode.Object
	float ClearBlockStatusTime;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_Mob_OpenDoor.BTService.BTAuxiliaryNode.BTNode.Object
	float OpenDoorRangeSq;//[Offset: 0x48 , Size: 4]
	float AutoOpenDoorInterval;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BTService_ModifyBlackboardValue.BTService.BTAuxiliaryNode.BTNode.Object
	bool bEnterModifyBlackboardKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x45 , Size: 1]
	BlackboardKeySelector EnterModifyBlackboardKey;//[Offset: 0x48 , Size: 32]
	FString EnterSetValue;//[Offset: 0x68 , Size: 12]
	bool bExitModifyBlackboardKey;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]
	BlackboardKeySelector ExitModifyBlackboardKey;//[Offset: 0x78 , Size: 32]
	FString ExitSetValue;//[Offset: 0x98 , Size: 12]

--------------------------------
Class: BlackboardKeyType_Int.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_Float.BlackboardKeyType.Object

--------------------------------
Class: BlackboardKeyType_String.BlackboardKeyType.Object
	FString StringValue;//[Offset: 0x20 , Size: 12]

--------------------------------
Class: BTService_OccupyHandler.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector OutCurOccupyPointActor;//[Offset: 0x48 , Size: 32]
	BlackboardKeySelector OutIsOccupying;//[Offset: 0x68 , Size: 32]

--------------------------------
Class: BTService_OpenDoor.BTService.BTAuxiliaryNode.BTNode.Object
	float OpenDoorRange;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_RescueHandler.BTService.BTAuxiliaryNode.BTNode.Object
	int RescueRange;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_SensedEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float IsNotSeeTargetTime;//[Offset: 0x48 , Size: 4]
	float SensedRadius;//[Offset: 0x4c , Size: 4]
	float EquipWeaponSensedRadius;//[Offset: 0x50 , Size: 4]
	float EquipWeaponNightSensedRadius;//[Offset: 0x54 , Size: 4]
	float EmergencyRadius;//[Offset: 0x58 , Size: 4]
	<AISensedEnemyPoseRatio_Key(IntProperty) , AISensedEnemyPoseRatio(FloatProperty)> AISensedEnemyPoseRatio;//[Offset: 0x5c , Size: 60]

--------------------------------
Class: BTService_Shooting.BTService.BTAuxiliaryNode.BTNode.Object
	float DeviationScale;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_TurnAround.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector OutTatget;//[Offset: 0x48 , Size: 32]
	float TurnAroundVelocity;//[Offset: 0x68 , Size: 4]

--------------------------------
Class: BTService_WalkingDead_CheckLocation.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxAllowedAwayFromSpawnPointDis;//[Offset: 0x48 , Size: 4]

--------------------------------
Class: BTService_WalkingDeadChooseEnemy.BTService.BTAuxiliaryNode.BTNode.Object
	float MaxRememberEnemyTimeInSeconds;//[Offset: 0x48 , Size: 4]
	float MaxRememberLastAttackedMeTimeInSeconds;//[Offset: 0x4c , Size: 4]
	float MaxTraceLastAttackedMeDistance;//[Offset: 0x50 , Size: 4]
	float MinTimeWhenCannotSeeTarget;//[Offset: 0x54 , Size: 4]
	float MinTimeLockTarget;//[Offset: 0x58 , Size: 4]
	float SensedRadius;//[Offset: 0x5c , Size: 4]
	float EquipWeaponSensedRadius;//[Offset: 0x60 , Size: 4]

--------------------------------
Class: BTService_WeatherTimeCount.BTService.BTAuxiliaryNode.BTNode.Object
	BlackboardKeySelector StartCurrentWeatherCountDownBlackboardKey;//[Offset: 0x48 , Size: 32]
	BlackboardKeySelector IsCurrentWeatherBlackboardKey;//[Offset: 0x68 , Size: 32]
	enum NewWeatherStatusType;//[Offset: 0x88 , Size: 1]

--------------------------------
Class: BTTaskNode.BTNode.Object
	Services(ObjectProperty)[] Services;//[Offset: 0x3c , Size: 12]
	bool bIgnoreRestartSelf;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x48 , Size: 1]

--------------------------------
Class: BTTask_Wait.BTTaskNode.BTNode.Object
	float WaitTime;//[Offset: 0x4c , Size: 4]
	float RandomDeviation;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: BTTask_AdvancedWait.BTTask_Wait.BTTaskNode.BTNode.Object
	bool bUseDifficultyLevel;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x54 , Size: 1]
	<DifficultyTimeCfg_Key(IntProperty) , DifficultyTimeCfg(StructProperty)> DifficultyTimeCfg;//[Offset: 0x58 , Size: 60]

--------------------------------
Class: BTTask_AnimalFindDirectedPoint.BTTaskNode.BTNode.Object
	Vector2D DistanceRange;//[Offset: 0x4c , Size: 8]
	Vector2D AngleRange;//[Offset: 0x54 , Size: 8]
	float TraceHeightOffset;//[Offset: 0x5c , Size: 4]
	uint32 TryFindLocNum;//[Offset: 0x60 , Size: 4]
	bool bDoWaterTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	bool bDoNavmeshProjectTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65 , Size: 1]
	class NavigationQueryFilter* ProjectFilterClass;//[Offset: 0x68 , Size: 4]
	bool bDoLimitFindPointArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	BlackboardKeySelector TargetBlackboardKey;//[Offset: 0x70 , Size: 32]
	BlackboardKeySelector OutputBlackboardKey;//[Offset: 0x90 , Size: 32]

--------------------------------
Class: BTTask_AnimalFindRandomPoint.BTTaskNode.BTNode.Object
	Vector2D SearchRadiusRange;//[Offset: 0x4c , Size: 8]
	float TraceHeightOffset;//[Offset: 0x54 , Size: 4]
	uint32 TryFindLocNum;//[Offset: 0x58 , Size: 4]
	bool bDoNavmeshProjectTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x5c , Size: 1]
	class NavigationQueryFilter* ProjectFilterClass;//[Offset: 0x60 , Size: 4]
	bool bDoOnlyStaticTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x64 , Size: 1]
	bool bDoWaterTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x65 , Size: 1]
	bool bDoLimitFindPointArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x66 , Size: 1]
	float CollisionExcludeAngle;//[Offset: 0x68 , Size: 4]
	bool bLimitResultInForwardAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x6c , Size: 1]
	float LimitInForwardAngle;//[Offset: 0x70 , Size: 4]
	BlackboardKeySelector CenterBlackboardKey;//[Offset: 0x78 , Size: 32]
	BlackboardKeySelector OutputBlackboardKey;//[Offset: 0x98 , Size: 32]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8 , Size: 1]
	float DebugDrawPointTime;//[Offset: 0xbc , Size: 4]

--------------------------------
Class: BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector BlackboardKey;//[Offset: 0x50 , Size: 32]

--------------------------------
Class: BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableRadius;//[Offset: 0x70 , Size: 4]
	class NavigationQueryFilter* FilterClass;//[Offset: 0x74 , Size: 4]
	float ObservedBlackboardValueTolerance;//[Offset: 0x78 , Size: 4]
	bool bObserveBlackboardValue;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7c , Size: 1]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7c , Size: 1]
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7c , Size: 1]
	bool bTrackMovingGoal;//(ByteOffset: 0, ByteMask: 8, FieldMask: 8)[Offset: 0x7c , Size: 1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 16, FieldMask: 16)[Offset: 0x7c , Size: 1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 32, FieldMask: 32)[Offset: 0x7c , Size: 1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 64, FieldMask: 64)[Offset: 0x7c , Size: 1]
	bool bStopOnOverlap;//(ByteOffset: 0, ByteMask: 128, FieldMask: 128)[Offset: 0x7c , Size: 1]
	bool bStopOnOverlapNeedsUpdate;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7d , Size: 1]

--------------------------------
Class: AISystem.AISystemBase.Object
	SoftClassPath PerceptionSystemClassName;//[Offset: 0x48 , Size: 24]
	SoftClassPath HotSpotManagerClassName;//[Offset: 0x60 , Size: 24]
	float AcceptanceRadius;//[Offset: 0x78 , Size: 4]
	float PathfollowingRegularPathPointAcceptanceRadius;//[Offset: 0x7c , Size: 4]
	float PathfollowingNavLinkAcceptanceRadius;//[Offset: 0x80 , Size: 4]
	bool bFinishMoveOnGoalOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	bool bAcceptPartialPaths;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85 , Size: 1]
	bool bAllowStrafing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x86 , Size: 1]
	bool bEnableBTAITasks;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x87 , Size: 1]
	bool bAllowControllersAsEQSQuerier;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]
	bool bEnableDebuggerPlugin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89 , Size: 1]
	byte DefaultSightCollisionChannel;//[Offset: 0x8a , Size: 1]
	BehaviorTreeManager* BehaviorTreeManager;//[Offset: 0x8c , Size: 4]
	EnvQueryManager* EnvironmentQueryManager;//[Offset: 0x90 , Size: 4]
	AIPerceptionSystem* PerceptionSystem;//[Offset: 0x94 , Size: 4]
	AllProxyObjects(ObjectProperty)[] AllProxyObjects;//[Offset: 0x98 , Size: 12]
	AIHotSpotManager* HotSpotManager;//[Offset: 0xa4 , Size: 4]
	NavLocalGridManager* NavLocalGrids;//[Offset: 0xa8 , Size: 4]
	function AILoggingVerbose();// 0x16b843c
	function AIIgnorePlayers();// 0x1790b84

--------------------------------
Class: BehaviorTreeManager.Object
	int MaxDebuggerSteps;//[Offset: 0x1c , Size: 4]
	LoadedTemplates(StructProperty)[] LoadedTemplates;//[Offset: 0x20 , Size: 12]
	ActiveComponents(ObjectProperty)[] ActiveComponents;//[Offset: 0x2c , Size: 12]

--------------------------------
Class: EnvQueryManager.Object
	InstanceCache(StructProperty)[] InstanceCache;//[Offset: 0x70 , Size: 12]
	LocalContexts(ObjectProperty)[] LocalContexts;//[Offset: 0x7c , Size: 12]
	GCShieldedWrappers(ObjectProperty)[] GCShieldedWrappers;//[Offset: 0x88 , Size: 12]
	float MaxAllowedTestingTime;//[Offset: 0xd4 , Size: 4]
	bool bTestQueriesUsingBreadth;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd8 , Size: 1]
	int QueryCountWarningThreshold;//[Offset: 0xdc , Size: 4]
	double QueryCountWarningInterval;//[Offset: 0xe0 , Size: 8]
	function RunEQSQuery();// 0x2d7de1c

--------------------------------
Class: AIHotSpotManager.Object

--------------------------------
Class: NavLocalGridManager.Object
	function SetLocalNavigationGridDensity();// 0x2d81e64
	function RemoveLocalNavigationGrid();// 0x2d81d64
	function FindLocalNavigationGridPath();// 0x2d81bac
	function AddLocalNavigationGridForPoints();// 0x2d819c0
	function AddLocalNavigationGridForPoint();// 0x2d8181c
	function AddLocalNavigationGridForCapsule();// 0x2d815e8
	function AddLocalNavigationGridForBox();// 0x2d813ac

--------------------------------
Class: BTTask_AnimalMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MovePose;//[Offset: 0x7e , Size: 1]
	bool bRestorePoseWhenFinished;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7f , Size: 1]
	bool bOpenCollisionDetect;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x80 , Size: 1]
	float CollisionDetectAdvancedTime;//[Offset: 0x84 , Size: 4]
	float CollisionDetectFreq;//[Offset: 0x88 , Size: 4]
	bool bUseSweep;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	byte TraceChannel;//[Offset: 0x8d , Size: 1]
	bool bRandomAcceptableRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e , Size: 1]
	Vector2D RandomAcceptableRadiusRange;//[Offset: 0x90 , Size: 8]
	bool MoveWithOutPathFinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	float MoveFailReviseLocationInterval;//[Offset: 0x9c , Size: 4]
	float MoveFailLocationSearchRadius;//[Offset: 0xa0 , Size: 4]
	bool bAsyncExecuteTask;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	bool bShowTargetLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa5 , Size: 1]
	bool bShowDetectLine;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa6 , Size: 1]

--------------------------------
Class: BTTask_AnimalTeleport.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float RangeMin;//[Offset: 0x70 , Size: 4]
	float RangeMax;//[Offset: 0x74 , Size: 4]
	bool bDoOnlyStaticTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	bool OnlyTeleportToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79 , Size: 1]
	bool NotTeleportToHouse;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a , Size: 1]
	float OriginCheckRadius;//[Offset: 0x7c , Size: 4]
	float DestCheckRadius;//[Offset: 0x80 , Size: 4]
	float TraceHeightOffset;//[Offset: 0x84 , Size: 4]
	float TargetLocZOffset;//[Offset: 0x88 , Size: 4]
	ValidTraceActorIncludeName(StrProperty)[] ValidTraceActorIncludeName;//[Offset: 0x8c , Size: 12]
	int TryFindLocNum;//[Offset: 0x98 , Size: 4]
	bool bForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]

--------------------------------
Class: BTTask_ChangeWalkSpeed.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum iWalkType;//[Offset: 0x70 , Size: 1]

--------------------------------
Class: BTTask_ClearDelivery.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_CopyBlackboardData.BTTaskNode.BTNode.Object
	enum ValueType;//[Offset: 0x49 , Size: 1]
	BlackboardKeySelector SrcBlackboardKey;//[Offset: 0x50 , Size: 32]
	BlackboardKeySelector TargetBlackboardKey;//[Offset: 0x70 , Size: 32]

--------------------------------
Class: BTTask_CrowdMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float StopMoveRadius;//[Offset: 0x70 , Size: 4]
	float UpdateDestIntervel;//[Offset: 0x74 , Size: 4]
	bool bOpenPredictMovement;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	float PredictMovementTime;//[Offset: 0x7c , Size: 4]
	float ForceFacingTargetDist;//[Offset: 0x80 , Size: 4]
	float TimeLimit;//[Offset: 0x84 , Size: 4]
	bool bIsHalfFrame;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]
	bool bSmoothLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x89 , Size: 1]
	bool bSmoothRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8a , Size: 1]
	float SmoothLocationTime;//[Offset: 0x8c , Size: 4]
	float SmoothRotationTime;//[Offset: 0x90 , Size: 4]
	bool bOpenExceptCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94 , Size: 1]
	bool bOpenDebug;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x95 , Size: 1]
	bool bSetRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x96 , Size: 1]
	bool bOpenSeparetionAdjust;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x97 , Size: 1]
	float TempMoveLocationRadius;//[Offset: 0x98 , Size: 4]
	float UpdateTempLocIntervel;//[Offset: 0x9c , Size: 4]
	enum MoveType;//[Offset: 0xa0 , Size: 1]
	class NavigationQueryFilter* FilterClass;//[Offset: 0xa4 , Size: 4]
	bool bEnableCustomSpeed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa8 , Size: 1]
	float CustomSpeedValue;//[Offset: 0xac , Size: 4]
	float HeightOffsetForPathFinding;//[Offset: 0xb0 , Size: 4]

--------------------------------
Class: BTTask_CrowdMoveToOcclusion.BTTask_CrowdMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0xb4 , Size: 4]
	float UseLastPointRadius;//[Offset: 0xb8 , Size: 4]
	float NearDistanceValue;//[Offset: 0xbc , Size: 4]
	float PointInNearDistanceValue;//[Offset: 0xc0 , Size: 4]
	bool bChoosePointByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool bForceStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	float CirclePainThreshold;//[Offset: 0xc8 , Size: 4]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xd0 , Size: 32]

--------------------------------
Class: BTTask_DealNextBuildingPathNode.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float findSpotXYOffset;//[Offset: 0x70 , Size: 4]
	float findSpotZOffset;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: BTTask_ShortDistanceMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0x70 , Size: 1]
	enum MovePathType;//[Offset: 0x71 , Size: 1]
	int SampleNumber;//[Offset: 0x74 , Size: 4]
	Vector2D ControllPoint1;//[Offset: 0x78 , Size: 8]
	Vector2D ControllPoint2;//[Offset: 0x80 , Size: 8]
	Vector2D DirectionAngleRange;//[Offset: 0x88 , Size: 8]
	Vector2D MoveTargetDistRange;//[Offset: 0x90 , Size: 8]
	Vector2D ExecutionDuration;//[Offset: 0x98 , Size: 8]
	float RePlanTime;//[Offset: 0xa0 , Size: 4]
	bool AlwaysSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float AcceptRadius;//[Offset: 0xa8 , Size: 4]
	bool StopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	bool UsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad , Size: 1]
	bool AllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae , Size: 1]
	bool ProjectDestinationToNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf , Size: 1]
	float ExceptionRandomRadius;//[Offset: 0xb0 , Size: 4]
	bool DebugDrawPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]

--------------------------------
Class: BTTask_Escape.BTTask_ShortDistanceMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float TryLineTestZOffset;//[Offset: 0xb8 , Size: 4]
	float TryLineTestDistance;//[Offset: 0xbc , Size: 4]
	int MaxTrySampleTimes;//[Offset: 0xc0 , Size: 4]
	float MinTrySampleDistance;//[Offset: 0xc4 , Size: 4]
	float MinTryEscapeDistance;//[Offset: 0xc8 , Size: 4]
	float EscapeStopDistance;//[Offset: 0xcc , Size: 4]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xd0 , Size: 32]

--------------------------------
Class: BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0x7e , Size: 1]
	float AcceptRadius;//[Offset: 0x80 , Size: 4]
	float GenerateNavRadius;//[Offset: 0x84 , Size: 4]
	float TimeLimit;//[Offset: 0x88 , Size: 4]
	bool ForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	bool MoveWithOutPathFinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d , Size: 1]
	bool GotoExceptionWhenFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e , Size: 1]

--------------------------------
Class: BTTask_FindAndPickItem.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_FindAndPickupEquip.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_FindNearestTombBoxTask.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float PlayerBackpackSearchRadius;//[Offset: 0x70 , Size: 4]
	float AirDropSearchRadius;//[Offset: 0x74 , Size: 4]
	float AirDropBoxRadius;//[Offset: 0x78 , Size: 4]
	float MaxPainFindInBlueCircle;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: BTTask_FindOcclusionPoint.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: BTTask_FindRandPosInOccupyPt.BTTaskNode.BTNode.Object
	BlackboardKeySelector OutOccupyPointActor;//[Offset: 0x50 , Size: 32]
	BlackboardKeySelector OutOccupyPos;//[Offset: 0x70 , Size: 32]
	int MaxTryFindTime;//[Offset: 0x90 , Size: 4]

--------------------------------
Class: BTTask_FindSnowfallHoleUpPoint.BTTaskNode.BTNode.Object
	BlackboardKeySelector FindOriginBlackboardKey;//[Offset: 0x50 , Size: 32]
	BlackboardKeySelector HoleUpPointBlackboardKey;//[Offset: 0x70 , Size: 32]
	BlackboardKeySelector IsFindHoleUpSnowfallBlackboardKey;//[Offset: 0x90 , Size: 32]
	float MaxMoveSpeed;//[Offset: 0xb0 , Size: 4]
	float SearchRadius;//[Offset: 0xb4 , Size: 4]

--------------------------------
Class: BTTask_FindTargetPTInHardPT.BTTaskNode.BTNode.Object
	BlackboardKeySelector InHardPTKey;//[Offset: 0x50 , Size: 32]
	BlackboardKeySelector OutTargetPTKey;//[Offset: 0x70 , Size: 32]

--------------------------------
Class: BTTask_FindWayPoint.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float InPointRadius;//[Offset: 0x70 , Size: 4]
	byte MaxRandIterTimes;//[Offset: 0x74 , Size: 1]
	bool bRandUseNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75 , Size: 1]
	bool bDebugDraw;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76 , Size: 1]
	float DebugDrawPointTime;//[Offset: 0x78 , Size: 4]

--------------------------------
Class: BTTask_ForceIdle.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float IdleTime;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: BTTask_GetRandomAttackablePosition.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AttackableRadius;//[Offset: 0x70 , Size: 4]
	float KeepDistanceFromTarget;//[Offset: 0x74 , Size: 4]
	float RandomMoveRadius;//[Offset: 0x78 , Size: 4]
	int RetryTimes;//[Offset: 0x7c , Size: 4]

--------------------------------
Class: BTTask_Mob_CastSkill.BTTaskNode.BTNode.Object
	int SkillIndex;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BTTask_Mob_Explode.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	int ExplodeSkillIndex;//[Offset: 0x70 , Size: 4]
	byte ExplodeSkillType;//[Offset: 0x74 , Size: 1]

--------------------------------
Class: BTTask_Mob_FaceEnemy.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AcceptableAngle;//[Offset: 0x70 , Size: 4]
	float TurnSpeed;//[Offset: 0x74 , Size: 4]

--------------------------------
Class: BTTask_Mob_FindNextPathPosition.BTTaskNode.BTNode.Object
	float SearchDistanceFromSpawnPointSq;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BTTask_Mob_FindNextPatrolPosition.BTTaskNode.BTNode.Object
	float SearchDistanceFromSpawnPoint;//[Offset: 0x4c , Size: 4]
	bool bEnableRaycastTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x50 , Size: 1]
	float MinSquaredDistanceFromSpawnPoint;//[Offset: 0x54 , Size: 4]

--------------------------------
Class: BTTask_Mob_FindPosByTarget.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x70 , Size: 4]
	bool bUseNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]
	bool NotInBossContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75 , Size: 1]
	retryRules(StructProperty)[] retryRules;//[Offset: 0x78 , Size: 12]
	bool StopWhenFindPos;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x84 , Size: 1]
	bool KeepCloseToEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x85 , Size: 1]
	float MinMoveDistance;//[Offset: 0x88 , Size: 4]
	float HeightTestOffset;//[Offset: 0x8c , Size: 4]
	bool SimulateMoveWithLineCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90 , Size: 1]
	float SimulateMoveDistance;//[Offset: 0x94 , Size: 4]
	float SimulateCapsuleRadius;//[Offset: 0x98 , Size: 4]
	float SimulateCapsuleHalfHeight;//[Offset: 0x9c , Size: 4]

--------------------------------
Class: BTTask_Mob_FindRandomAttackablePosition.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float AttackableRadius;//[Offset: 0x70 , Size: 4]
	float KeepDistanceFromTarget;//[Offset: 0x74 , Size: 4]
	float MinMoveDistance;//[Offset: 0x78 , Size: 4]
	bool WithLineTrace;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]
	enum lineTraceType;//[Offset: 0x7d , Size: 1]
	float CustomLineTraceHeightOffset;//[Offset: 0x80 , Size: 4]
	float HeightTestOffset;//[Offset: 0x84 , Size: 4]
	retryRules(StructProperty)[] retryRules;//[Offset: 0x88 , Size: 12]
	bool ReachableTest;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x94 , Size: 1]
	float ReachableTestRadius;//[Offset: 0x98 , Size: 4]
	bool EnableTriggerCastSkillBlockAfterFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]
	int TriggerCastSkillBlockAfterFailedTimes;//[Offset: 0xa0 , Size: 4]
	bool NotInBossContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]

--------------------------------
Class: BTTask_Mob_GetNearDeathCharNearby.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetChar;//[Offset: 0x70 , Size: 32]
	float SearchRadius;//[Offset: 0x90 , Size: 4]
	float CheckInterval;//[Offset: 0x94 , Size: 4]

--------------------------------
Class: BTTask_Mob_GetRandomAttackTargetInRadius.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	int TriggerMinTimes;//[Offset: 0x70 , Size: 4]
	int TriggerMaxTimes;//[Offset: 0x74 , Size: 4]
	int ChooseCurEnemyProbability;//[Offset: 0x78 , Size: 4]
	enum searchType;//[Offset: 0x7c , Size: 1]
	float SearchRadius;//[Offset: 0x80 , Size: 4]
	Vector SpecificLocation;//[Offset: 0x84 , Size: 12]

--------------------------------
Class: BTTask_Mob_GetRandomSkill.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool DontChangeSkillWhenTargetNearBossContainer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70 , Size: 1]

--------------------------------
Class: BTTask_Mob_GetTargetVehicle.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetVehicle;//[Offset: 0x70 , Size: 32]

--------------------------------
Class: BTTask_Mob_GetVehicleNearby.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	BlackboardKeySelector TargetVehicle;//[Offset: 0x70 , Size: 32]
	float SearchRadius;//[Offset: 0x90 , Size: 4]
	float CheckInterval;//[Offset: 0x94 , Size: 4]

--------------------------------
Class: BTTask_Mob_LeaveState.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum iState;//[Offset: 0x70 , Size: 1]

--------------------------------
Class: BTTask_Mob_LinkGetJumpVelocity.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float JumpForwardOffset;//[Offset: 0x70 , Size: 4]
	Vector2D JumpSpeedRange;//[Offset: 0x74 , Size: 8]
	byte Stride_JumpProjTraceType;//[Offset: 0x7c , Size: 1]
	bool SetJumpFaceAngle;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7d , Size: 1]

--------------------------------
Class: BTTask_Mob_MoveTo.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float BlockTimeLimit;//[Offset: 0x80 , Size: 4]
	float BlockVelocitySizeThreshold;//[Offset: 0x84 , Size: 4]
	bool BlockDistCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]
	float BlockThresholdValidMoveDist;//[Offset: 0x8c , Size: 4]
	float BlockThresholdValidMoveTime;//[Offset: 0x90 , Size: 4]
	float BlockThresholdValidVelocitySize;//[Offset: 0x94 , Size: 4]
	bool ForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x98 , Size: 1]
	bool GotoExceptionWhenFailed;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x99 , Size: 1]

--------------------------------
Class: BTTask_Mob_SnakeMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float NormalDis;//[Offset: 0x70 , Size: 4]
	Vector2D DisOffset;//[Offset: 0x74 , Size: 8]
	Vector2D AngleOffset;//[Offset: 0x7c , Size: 8]
	float TaskMaxTime;//[Offset: 0x84 , Size: 4]
	float AcceptRadius;//[Offset: 0x88 , Size: 4]
	bool StopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8c , Size: 1]
	bool UsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8d , Size: 1]
	bool AllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8e , Size: 1]
	bool ProjectDestinationToNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8f , Size: 1]

--------------------------------
Class: BTTask_Mob_Suicide.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_Mob_SwimDirect.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SwimVelocitySize;//[Offset: 0x70 , Size: 4]
	float AcceptableRadius;//[Offset: 0x74 , Size: 4]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79 , Size: 1]

--------------------------------
Class: BTTask_ModifyBlackboardData.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum ValueType;//[Offset: 0x70 , Size: 1]
	FString SetValue;//[Offset: 0x74 , Size: 12]

--------------------------------
Class: BTTask_MoveAround.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MoveRadius;//[Offset: 0x70 , Size: 4]
	float RotationSpeed;//[Offset: 0x74 , Size: 4]
	enum MoveType;//[Offset: 0x78 , Size: 1]
	Vector2D WaitTimeRange;//[Offset: 0x7c , Size: 8]
	Vector2D ExecutionDuration;//[Offset: 0x84 , Size: 8]
	float AcceptRadius;//[Offset: 0x8c , Size: 4]
	bool bIncludeNeighborVerts;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x90 , Size: 1]
	bool bSetFocus;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x91 , Size: 1]
	bool bCanMoveWhenNoTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x92 , Size: 1]
	Vector2D DirectionAngleRange;//[Offset: 0x94 , Size: 8]
	Vector2D MoveTargetDistRange;//[Offset: 0x9c , Size: 8]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xa8 , Size: 32]

--------------------------------
Class: BTTask_MoveToBuildingOcclusion.BTTask_CrowdMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0xb4 , Size: 4]
	bool bChoosePointByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb8 , Size: 1]
	bool bForceStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb9 , Size: 1]
	float CirclePainThreshold;//[Offset: 0xbc , Size: 4]
	float MaxStraightLineDistanceRate;//[Offset: 0xc0 , Size: 4]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xc8 , Size: 32]

--------------------------------
Class: BTTask_MoveToOcclusion.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x90 , Size: 4]
	float UseLastPointRadius;//[Offset: 0x94 , Size: 4]
	float NearDistanceValue;//[Offset: 0x98 , Size: 4]
	float PointInNearDistanceValue;//[Offset: 0x9c , Size: 4]
	bool bChoosePointByEnemy;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa0 , Size: 1]
	bool bForceStand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa1 , Size: 1]
	float CirclePainThreshold;//[Offset: 0xa4 , Size: 4]
	BlackboardKeySelector EnemyBlackboardKey;//[Offset: 0xa8 , Size: 32]

--------------------------------
Class: BTTask_MoveToSafeArea.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float RadiusScale;//[Offset: 0x90 , Size: 4]

--------------------------------
Class: BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bDisablePathUpdateOnGoalLocationChange;//(ByteOffset: 0, ByteMask: 1, FieldMask: 1)[Offset: 0x7e , Size: 1]
	bool bProjectVectorGoalToNavigation;//(ByteOffset: 0, ByteMask: 2, FieldMask: 2)[Offset: 0x7e , Size: 1]
	bool bUpdatedDeprecatedProperties;//(ByteOffset: 0, ByteMask: 4, FieldMask: 4)[Offset: 0x7e , Size: 1]

--------------------------------
Class: BTTask_Pet_SwimDirect.BTTask_MoveDirectlyToward.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTask_PickUpItemAtTombBox.BTTaskNode.BTNode.Object
	float DeltaTime;//[Offset: 0x4c , Size: 4]
	int MaxPickCount;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: BTTask_SetDownwardPos.BTTaskNode.BTNode.Object
	BlackboardKeySelector ActorBlackboardKey;//[Offset: 0x50 , Size: 32]
	BlackboardKeySelector PosBlackboardKey;//[Offset: 0x70 , Size: 32]
	float DownwardTraceDistance;//[Offset: 0x90 , Size: 4]
	float OffsetZ;//[Offset: 0x94 , Size: 4]
	TracableObjectTemplate(ClassProperty)[] TracableObjectTemplate;//[Offset: 0x98 , Size: 12]
	bool bForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float SearchRadius;//[Offset: 0xa8 , Size: 4]
	bool bIgnoreStartPenetratingLoc;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]

--------------------------------
Class: BTTask_SpawnItem.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float CheckNoPlayerRadiusSquare;//[Offset: 0x70 , Size: 4]
	SpawnEquipDataBase(StructProperty)[] SpawnEquipDataBase;//[Offset: 0x74 , Size: 12]

--------------------------------
Class: BTTask_StrategyMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	enum MoveType;//[Offset: 0x70 , Size: 1]
	enum MovePathType;//[Offset: 0x71 , Size: 1]
	int SampleNumber;//[Offset: 0x74 , Size: 4]
	Vector2D ControllPoint1;//[Offset: 0x78 , Size: 8]
	Vector2D ControllPoint2;//[Offset: 0x80 , Size: 8]
	Vector2D DirectionAngleRange;//[Offset: 0x88 , Size: 8]
	Vector2D MoveTargetDistRange;//[Offset: 0x90 , Size: 8]
	Vector2D ExecutionDuration;//[Offset: 0x98 , Size: 8]
	float RePlanTime;//[Offset: 0xa0 , Size: 4]
	bool AlwaysSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xa4 , Size: 1]
	float AcceptRadius;//[Offset: 0xa8 , Size: 4]
	bool StopOnOverlap;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xac , Size: 1]
	bool UsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xad , Size: 1]
	bool AllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xae , Size: 1]
	bool ProjectDestinationToNavigation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xaf , Size: 1]
	float ExceptionRandomRadius;//[Offset: 0xb0 , Size: 4]
	bool bCanMoveWhenNoTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb4 , Size: 1]
	bool bCheckWallPass;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb5 , Size: 1]
	bool DebugDrawPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xb6 , Size: 1]

--------------------------------
Class: BTTask_TeleportToSpecLoc.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float RangeMin;//[Offset: 0x70 , Size: 4]
	float RangeMax;//[Offset: 0x74 , Size: 4]
	bool OnlyTeleportToLand;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	float OriginCheckSquare;//[Offset: 0x7c , Size: 4]
	float DestCheckSquare;//[Offset: 0x80 , Size: 4]
	float TraceHeight;//[Offset: 0x84 , Size: 4]
	bool bForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x88 , Size: 1]

--------------------------------
Class: BTTask_TryFightback.BTTask_MagicMove.BTTask_MoveTo.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float MaxTraceRadius;//[Offset: 0x90 , Size: 4]
	float MaxTraceTime;//[Offset: 0x94 , Size: 4]
	float CheckTargetVisableTimeIntervel;//[Offset: 0x98 , Size: 4]
	bool bIsCheckHasWeapon;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x9c , Size: 1]
	float MinEnemyInSightTime;//[Offset: 0xa0 , Size: 4]

--------------------------------
Class: BTTask_WalkingDead_FindNextPatrolPosition.BTTaskNode.BTNode.Object
	float SearchDistance;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BTTask_WayPointListMove.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	bool bAllowPartialPath;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x70 , Size: 1]
	float AcceptableRadius;//[Offset: 0x74 , Size: 4]
	bool bAllowStrafe;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x78 , Size: 1]
	bool bReachTestIncludesAgentRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x79 , Size: 1]
	bool bReachTestIncludesGoalRadius;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7a , Size: 1]
	bool bProjectGoalLocation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7b , Size: 1]
	bool bUsePathfinding;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]

--------------------------------
Class: BTTaskNode_CastSkill.BTTaskNode.BTNode.Object
	int SkillIndex;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BTTaskNode_CheckOcclusionSafe.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float CheckRadius;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: BTTaskNode_ClearFocus.BTTaskNode.BTNode.Object
	enum ClearedFocus;//[Offset: 0x49 , Size: 1]

--------------------------------
Class: BTTaskNode_EmptyShot.BTTaskNode.BTNode.Object
	float FireTime;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BTTaskNode_EquipItemDirectly.BTTaskNode.BTNode.Object
	float CheckNoPlayerRadiusSquare;//[Offset: 0x4c , Size: 4]
	RandomSpawnEquipGroupSet(StructProperty)[] RandomSpawnEquipGroupSet;//[Offset: 0x50 , Size: 12]

--------------------------------
Class: BTTaskNode_EquipOrUnWeapon.BTTaskNode.BTNode.Object
	bool Equip;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]
	bool FailedWhenEquipSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4a , Size: 1]

--------------------------------
Class: BTTaskNode_FindBuilding.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	RatingConfig(StructProperty)[] RatingConfig;//[Offset: 0x70 , Size: 12]
	bool OnlySafeBuildings;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x7c , Size: 1]
	float MaxMoveSpeed;//[Offset: 0x80 , Size: 4]
	float findSpotXYOffset;//[Offset: 0x84 , Size: 4]
	float findSpotZOffset;//[Offset: 0x88 , Size: 4]
	float GoBackThreshold;//[Offset: 0x8c , Size: 4]

--------------------------------
Class: BTTaskNode_FindItemSpot.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_FindPosByTarget.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	float SearchRadius;//[Offset: 0x70 , Size: 4]
	bool bUseNav;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x74 , Size: 1]

--------------------------------
Class: BTTaskNode_ForceSuccess.BTTaskNode.BTNode.Object
	bool IsForceSuccess;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x49 , Size: 1]

--------------------------------
Class: BTTaskNode_HumanAction.BTTaskNode.BTNode.Object
	enum SetAction;//[Offset: 0x49 , Size: 1]

--------------------------------
Class: BTTaskNode_MeleeAttack.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_MonsterCastSkill.BTTask_BlackboardBase.BTTaskNode.BTNode.Object
	int SkillIndex;//[Offset: 0x70 , Size: 4]
	byte SkillType;//[Offset: 0x74 , Size: 1]
	bool bCanCastWithoutTarget;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x75 , Size: 1]
	bool bIgnoreSkillCastDistanceCheck;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x76 , Size: 1]

--------------------------------
Class: BTTaskNode_MonsterJumpToPos.BTTask_BlackboardBase.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_NewParachuteJump.BTTaskNode.BTNode.Object
	float RandomStartJumpTime;//[Offset: 0x4c , Size: 4]
	float RandomEndJumpTime;//[Offset: 0x50 , Size: 4]
	float JumpRadius;//[Offset: 0x54 , Size: 4]
	float JumpHeight;//[Offset: 0x58 , Size: 4]
	float RandomAccelerateStart;//[Offset: 0x5c , Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x60 , Size: 4]
	float OpenParachuteHeight;//[Offset: 0x64 , Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x68 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x6c , Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x70 , Size: 4]
	float DelayClearParachuteTime;//[Offset: 0x74 , Size: 4]
	function DelayClearParachute();// 0x16f84d0

--------------------------------
Class: BTTaskNode_ParachuteJump.BTTaskNode.BTNode.Object
	float TimeLimit;//[Offset: 0x4c , Size: 4]
	float RandomRadius;//[Offset: 0x50 , Size: 4]
	float JumpStartTime;//[Offset: 0x54 , Size: 4]
	float JumpEndTime;//[Offset: 0x58 , Size: 4]

--------------------------------
Class: BTTaskNode_ParachuteJumpV3.BTTaskNode.BTNode.Object
	float RandomStartJumpTime;//[Offset: 0x4c , Size: 4]
	float RandomEndJumpTime;//[Offset: 0x50 , Size: 4]
	float JumpRadius;//[Offset: 0x54 , Size: 4]
	float JumpHeight;//[Offset: 0x58 , Size: 4]
	float RandomAccelerateStart;//[Offset: 0x5c , Size: 4]
	float RandomAccelerateEnd;//[Offset: 0x60 , Size: 4]
	float OpenParachuteHeight;//[Offset: 0x64 , Size: 4]
	float CheckOpenParachuteFreq;//[Offset: 0x68 , Size: 4]
	float CloseParachuteHeight;//[Offset: 0x6c , Size: 4]
	float CheckCloseParachuteFreq;//[Offset: 0x70 , Size: 4]

--------------------------------
Class: BTTaskNode_PickItemsAtSpot.BTTaskNode.BTNode.Object
	float DeltaTime;//[Offset: 0x4c , Size: 4]
	int MaxPickCount;//[Offset: 0x50 , Size: 4]

--------------------------------
Class: BTTaskNode_RefreshWeaponBBD.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_StopShooting.BTTaskNode.BTNode.Object

--------------------------------
Class: BTTaskNode_TakeMedicine.BTTaskNode.BTNode.Object
	int MedicineIndex;//[Offset: 0x4c , Size: 4]

--------------------------------
Class: BulletHitInfoUploadComponent.WeaponLogicBaseComponent.ActorComponent.Object
	float UploadInterval;//[Offset: 0xc0 , Size: 4]
	bool bEnableTssSdkAntiData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc4 , Size: 1]
	bool bEnableTssSdkAntiDataFilter;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc5 , Size: 1]
	bool bEnableTssSdkAntiDataFilterNew;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc6 , Size: 1]
	bool bDisableDsTick;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc7 , Size: 1]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xc8 , Size: 4]
	STExtraPlayerController* OwnerPlayerController;//[Offset: 0x124 , Size: 4]
	bool NeedSendSimpleCharacterHitData;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x128 , Size: 1]
	function HandleOnWeaponStopFire();// 0x16f91c4
	function HandleOnWeaponStartFire();// 0x16f91b0
	function CheckCloseDSTick();// 0x16f9188
	function AddHitData();// 0x16f8f80

--------------------------------
Class: BulletPredictLine.Actor.Object
	bool IsShowing;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c4 , Size: 1]
	STExtraPlayerCharacter* PlayerCharacter;//[Offset: 0x2c8 , Size: 4]
	STExtraShootWeapon* CurShootWeapon;//[Offset: 0x2cc , Size: 4]
	STExtraShootWeapon* OwnerWeapon;//[Offset: 0x2d0 , Size: 4]
	function ShowLine();// 0x16f99b4
	function HideLine();// 0x16e6e40

--------------------------------
Class: CameraSettingComponentFromBP.ActorComponent.Object
	function SaveCurCameraSetting();// 0x16fa3ac
	function LerpCameraSettings();// 0x16fa29c

--------------------------------
Class: CanReceiveMsgInterface.Interface.Object
	function CastMsg();// 0x16fa6f4

--------------------------------
Class: CaveStoneActor.UAENetActor.Actor.Object
	float BrokenVelocity;//[Offset: 0x2d0 , Size: 4]
	SceneComponent* DefaultRoot;//[Offset: 0x2d4 , Size: 4]
	float TotalHP;//[Offset: 0x2d8 , Size: 4]
	float CurHP;//[Offset: 0x2dc , Size: 4]
	float bBroken;//[Offset: 0x2e0 , Size: 4]
	function PlayStoneExplsion();// 0x206ccd8
	function OnRep_CurHP();// 0x16fae90
	function OnRep_bBroken();// 0x16fae7c
	function BroadcastClientCaveStoneExplsion();// 0x16fae60

--------------------------------
Class: ChangeCharacterComponent.ActorComponent.Object
	Transform TargetTransform;//[Offset: 0xc0 , Size: 48]
	byte TargetMovementMode;//[Offset: 0xf0 , Size: 1]
	bool TargetIsJump;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf1 , Size: 1]
	byte TargetPoseState;//[Offset: 0xf2 , Size: 1]
	DefaultInfectionPawns(StructProperty)[] DefaultInfectionPawns;//[Offset: 0xf4 , Size: 12]
	class Actor* FirstChgToZombieEftTemplate;//[Offset: 0x100 , Size: 4]
	float FirstChgToZombieExistEftTime;//[Offset: 0x104 , Size: 4]
	PVEInfectionGameMode* OwnerGameMode;//[Offset: 0x108 , Size: 4]
	function DoTransformStateAction();// 0x16fbc78
	function DoPropertyStateAction();// 0x1698eb0
	function DoPoseStateAction();// 0x1698f4c
	function DoMovementStateAction();// 0x16fbbf8
	function CacheTransformState();// 0x16fbb78
	function CachePropertyState();// 0x16fbaf8
	function CachePoseState();// 0x16fba78
	function CacheMovementState();// 0x16fb9f8

--------------------------------
Class: PVEInfectionGameMode.BattleRoyaleGameModeTeam.BattleRoyaleGameMode.BattleRoyaleGameModeBase.UAEGameMode.GameMode.GameModeBase.Info.Actor.Object
	MaternalZombieRatiosConfig(StructProperty)[] MaternalZombieRatiosConfig;//[Offset: 0x120c , Size: 12]
	float MaternalZombieReduceRatio;//[Offset: 0x1218 , Size: 4]
	float MidWayJoinReduceRatio;//[Offset: 0x121c , Size: 4]
	int RoundNum;//[Offset: 0x1220 , Size: 4]
	int RoundTime;//[Offset: 0x1224 , Size: 4]
	int StopJoinRoundNumEnd;//[Offset: 0x1228 , Size: 4]
	float ResetPlayerInterTime;//[Offset: 0x122c , Size: 4]
	bool ResetPlayerClearUnPossessPawn;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1230 , Size: 1]
	bool ResetPlayerClearAllRespawnTimer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1231 , Size: 1]
	float ResetPlayerLastPawnDestroyEarlyTime;//[Offset: 0x1234 , Size: 4]
	bool bSentStopJoin;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x1238 , Size: 1]
	float PlayerLongTimeNoOperationTime;//[Offset: 0x123c , Size: 4]
	class CameraShake* ZombieCameraShakeTemplate;//[Offset: 0x1240 , Size: 4]
	<CameraShakeTypeSet(EnumProperty)> CameraShakeTypeSet;//[Offset: 0x1244 , Size: 60]
	ChangeCharacterComponent* ChangeCharComponent;//[Offset: 0x1280 , Size: 4]
	function StartNewRound();// 0x17b1160
	function RestartPlayerAtPlayerStart();// 0x17b109c
	function RecordRoleNum();// 0x17b1088
	function PlayChangeToRevengerEffect();// 0x17b1010
	function OnPlayerControlDestroyEnd();// 0x16e37f4
	function LoginCheckReCorrecctTeamID();// 0x16e53e8
	function IsZombiePlayer();// 0x17b0f90
	function GetRoundNum();// 0x17b0f68
	function GetPawnSubTypeByController();// 0x17b0ee8
	function GetInfectionUnActiveEnhancerCount();// 0x17b0ec0
	function GetInfectionRoundRoleCountBySubType();// 0x17b0df4
	function GetInfectionRoundRoleCountByMainType();// 0x17b0d28
	function GetConfigMaternalZombieNum();// 0x17b0ca8
	function GetConfigMaternalZombieKingNum();// 0x17b0c28
	function GeneraterRevengerPlayers();// 0x17b0bb0
	function GeneraterMaternalZombies();// 0x17b0b9c
	function ConvertSubTypeToMainType();// 0x17b0b1c
	function ClearAllPickupWrapper();// 0x17b0b08
	function ChooseZombiePlayerStart();// 0x17b0a88
	function ChangePlayerToPawnSubType();// 0x17b092c
	function CanCharacterCircleTakePain();// 0x16e2fbc
	function AddRoundNum();// 0x17b08b4

--------------------------------
Class: ChangeWearingComponent.ActorComponent.Object
	int WillChangeWearIndex;//[Offset: 0xbc , Size: 4]
	float CoolDownTime;//[Offset: 0xc0 , Size: 4]
	float LastChangeWearTime;//[Offset: 0xc4 , Size: 4]
	function ServerRequestChangeWear();// 0x16fc75c
	function RequestChangeWearInBattle();// 0x16fc6dc
	function RequestChangeWear();// 0x16fc65c
	function RealChangeWearInBattle();// 0x16fc5e4
	function IsInCoolDownTime();// 0x16fc55c
	function IsInBattleState();// 0x16fc4d4
	function IsChangeWearingOpend();// 0x16fc4ac
	function IsAllowChangeWearingState();// 0x16fc424
	function GetCoolDownTime();// 0x16fc408
	function ClientChangeWearDone();// 0x16fc2dc
	function CheckCanChangeWearing();// 0x16fc254

--------------------------------
Class: CharacterAvatarEntity.AvatarEntity.Object
	bool PendingRenderFlag;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x185 , Size: 1]
	int EquipedPendantSlotID;//[Offset: 0x188 , Size: 4]
	int EquipedDefaultPendantSlotID;//[Offset: 0x18c , Size: 4]
	NeedUnHideBone(NameProperty)[] NeedUnHideBone;//[Offset: 0x190 , Size: 12]
	bool ForceHide;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x19c , Size: 1]
	function SetSlotMeshByReplacedMark();// 0x1702fa4
	function SetSlotHidden();// 0x17030f0
	function ScaledMeshBone();// 0x1702fa4
	function ReplaceTargetSlotMesh();// 0x17030f0
	function RenderEntity();// 0x16b8920
	function RefreshVisable();// 0x16ad21c
	function PutOnEquipmentLogic();// 0x16b887c
	function PutOnDefaultEquipment();// 0x16b87fc
	function GetReplacingSlots();// 0x1703024
	function GetMeshType();// 0x16b8554
	function GetDefineID();// 0x16b8474
	function EnterRenderPipeline();// 0x16b8458
	function EnterLogicPipeline();// 0x16b843c
	function DoPostLogic();// 0x16ad21c
	function DealSlotHidden();// 0x1702fa4
	function DealSelfReplaced();// 0x16ad21c
	function DealSelfHide();// 0x16ad21c
	function DealHideBone();// 0x16ad21c
	function CreateAndApplyResource();// 0x16b82d0
	function ClearLogicExecutedFlag();// 0x1702f90
	function ClearEquipmentRenderData();// 0x16b8204
	function ClearEquipmentLogic();// 0x16b817c
	function ClearEntity();// 0x16b80f4
	function CheckPendantForEquipmentPutOn();// 0x1702f10
	function CheckPendantForEquipmentPutOff();// 0x1702ef4
	function CheckDefaultPendantForEquipmentPutOn();// 0x1702e74
	function ApplyMeshCompCollision();// 0x16ad21c
	function ApplyAnimation();// 0x16b80d8
	function ApplaySocketRelativeTransform();// 0x16b8058

--------------------------------
Class: CharacterPendantEntity.CharacterAvatarEntity.AvatarEntity.Object
	function TickEntity();// 0x16b8b90
	function SetAttachedEntityVisibility();// 0x17058dc
	function OnPostRender();// 0x16b87e0
	function GetPendantSlotType();// 0x17058ac
	function GetMeshType();// 0x16b8554
	function GetAttachPartSlotType();// 0x170587c
	function EnterRenderPipeline();// 0x16b8458
	function EnterLogicPipeline();// 0x16b843c
	function ClearEntity();// 0x16b80f4
	function ApplaySocketRelativeTransform();// 0x16b8058

--------------------------------
Class: ChasingBar.UAEUserWidget.UserWidget.Widget.Visual.Object
	float ProgressBarCanvasXValue;//[Offset: 0x2f4 , Size: 4]
	bool IsNeedClearProgressBar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f8 , Size: 1]
	float BlueCircleAppearanceTime;//[Offset: 0x2fc , Size: 4]
	float BlueCircleMovingCountDownDuration;//[Offset: 0x300 , Size: 4]
	float BlueCircleRunStartTime;//[Offset: 0x304 , Size: 4]
	float BlueCircleRunDuration;//[Offset: 0x308 , Size: 4]
	float BlueCircleChasingPercent;//[Offset: 0x30c , Size: 4]
	float ProgressBarLength;//[Offset: 0x310 , Size: 4]
	Vector OriginBlueCircle;//[Offset: 0x314 , Size: 12]
	float CleaningTime;//[Offset: 0x320 , Size: 4]
	STExtraGameStateBase* STEGameStateBase;//[Offset: 0x324 , Size: 4]
	STExtraPlayerController* STEPlayerController;//[Offset: 0x328 , Size: 4]
	FText BlueCircleMovingCountDownText;//[Offset: 0x32c , Size: 12]
	float PlayerEscapeProgress;//[Offset: 0x338 , Size: 4]
	bool IsPlayerOutBlueCircleCurrently;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x33c , Size: 1]
	Image* PlayerIcon;//[Offset: 0x340 , Size: 4]
	TextBlock* TextBlock_Dist;//[Offset: 0x344 , Size: 4]
	float PlayerPositionC;//[Offset: 0x348 , Size: 4]
	bool IsRefreshCircleDistanceC;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x34c , Size: 1]
	FText CircleDistanceTextFormat;//[Offset: 0x350 , Size: 12]
	function UpdateCountDownText();// 0x206ccd8
	function ShowCircleDistanceC();// 0x1706760
	function PlayerEscapePercentC();// 0x170674c
	function OnPlayerEnterExitBlueCircle();// 0x206ccd8
	function OnCountDownTextInvisible();// 0x206ccd8
	function IsPlayerOutBlueCircle();// 0x17066cc
	function IsPlayerInWhiteCircle();// 0x170664c
	function IsBlueCircleMoving();// 0x1706624
	function IsBlueCircleAppearAndCountDown();// 0x17065fc
	function ClearProgressBar();// 0x206ccd8
	function CleanTheProgressBar();// 0x206ccd8
	function CheckToCleanProgress();// 0x17065e8
	function CalPlayerEscapePercent();// 0x17065c0
	function BlueCirclePreMoveCountDown();// 0x17065ac

--------------------------------
Class: ClientWeaponAntiCheatComp.WeaponLogicBaseComponent.ActorComponent.Object
	uint32 TolerateCharacterImpactOffsetDistSqured;//[Offset: 0xc0 , Size: 4]
	uint32 TolerateVehicleImpactOffsetDistSqured;//[Offset: 0xc4 , Size: 4]
	float TolerateBulletImpactOffsetDistSqured;//[Offset: 0xc8 , Size: 4]
	float TolerateWeaponAndCharacterBottomDis;//[Offset: 0xcc , Size: 4]
	float TolerateWeaponAndVehicleBottomDis;//[Offset: 0xd0 , Size: 4]
	float TolerateDownShootMuzzleAndCharacterBottomHeight;//[Offset: 0xd4 , Size: 4]
	float TolerateDownShootMaxMuzzleAndCharacterHeight;//[Offset: 0xd8 , Size: 4]
	float ShortDirReverseDistance;//[Offset: 0xdc , Size: 4]
	float TolerateBulletDirOffsetSquared;//[Offset: 0xe0 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0xec , Size: 4]
	function VertifyDownShoot();// 0x170ab98
	function VerifyWeaponHeight();// 0x170aad4
	function VerifyBulletImpactOffset();// 0x170a9f4
	function VerifyBulletDir();// 0x170a8c0
	function VerifyActorImpactOffset();// 0x170a7f0
	function GetClientVerifyResult();// 0x170a690
	function GetAntiCheatConfig();// 0x170a668

--------------------------------
Class: ClimbingProxyGenerator.SceneComponent.ActorComponent.Object

--------------------------------
Class: ClothAvatarUtils.BlueprintFunctionLibrary.Object

--------------------------------
Class: ClothAvatarBPUtils.Object
	<DefaultCutHairConfig_Key(IntProperty) , DefaultCutHairConfig(StructProperty)> DefaultCutHairConfig;//[Offset: 0x1c , Size: 60]
	function GetDefaultReplaceMeshPack();// 0x170b604

--------------------------------
Class: ColorBlindnessMgr.Object
	<CBColorMap_Key(IntProperty) , CBColorMap(StructProperty)> CBColorMap;//[Offset: 0x1c , Size: 60]
	<CBParticleColorMap_Key(IntProperty) , CBParticleColorMap(StructProperty)> CBParticleColorMap;//[Offset: 0x58 , Size: 60]
	<HandleCBColorImageContaner_Key(UInt32Property) , HandleCBColorImageContaner(StructProperty)> HandleCBColorImageContaner;//[Offset: 0x94 , Size: 60]
	<HandleCBColorMeshContaner_Key(UInt32Property) , HandleCBColorMeshContaner(StructProperty)> HandleCBColorMeshContaner;//[Offset: 0xd0 , Size: 60]
	<HandleCBColorParticleContaner_Key(UInt32Property) , HandleCBColorParticleContaner(StructProperty)> HandleCBColorParticleContaner;//[Offset: 0x10c , Size: 60]
	function Reset();// 0x170c434
	function RemoveParticleSystem();// 0x170c3bc
	function RemoveMeshComponent();// 0x170c344
	function RemoveImage();// 0x170c2cc
	function HandleUserSettingChange();// 0x170c2b8
	function GetColorByType();// 0x170c22c
	function Clear();// 0x170c218
	function AddParticleSystem();// 0x170c15c
	function AddMeshComponent();// 0x170c0a0
	function AddImage();// 0x170bf94
	function AddColorByType();// 0x170bdf0

--------------------------------
Class: CompatibleEventCenter.LevelEventCenter.Object

--------------------------------
Class: ConsumeAdditionalDataComponent.ActorComponent.Object
	int ItemID;//[Offset: 0xbc , Size: 4]
	int Type;//[Offset: 0xc0 , Size: 4]
	FString AdditionalDataMaxName;//[Offset: 0xc4 , Size: 12]
	FString AdditionalDataName;//[Offset: 0xd0 , Size: 12]
	FString AdditionalDataConsumeSpeed;//[Offset: 0xdc , Size: 12]
	float LowValueRatio;//[Offset: 0xe8 , Size: 4]
	int LowValuePromptID;//[Offset: 0xec , Size: 4]
	int UsedUpPromptID;//[Offset: 0xf0 , Size: 4]
	delegate ConsumeFinishDelegate;//[Offset: 0xf4 , Size: 12]
	BattleItemData BattleItemData;//[Offset: 0x100 , Size: 136]
	BackpackComponent* BackpackComponent;//[Offset: 0x188 , Size: 4]
	function OnConsumeFinishDelegate__DelegateSignature();// 0x206ccd8
	function GetOwnerPawn();// 0x170dd5c
	function ConsumeOn();// 0x170dd48
	function ConsumeOff();// 0x170dd34
	function CheckConsume();// 0x170dd0c

--------------------------------
Class: BattleItemData.ItemData
	int count;//[Offset: 0x48 , Size: 4]
	bool bEquipping;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	AdditionalData(StructProperty)[] AdditionalData;//[Offset: 0x50 , Size: 12]
	BattleItemFeatureData FeatureData;//[Offset: 0x5c , Size: 28]
	Associations(StructProperty)[] Associations;//[Offset: 0x78 , Size: 12]

--------------------------------
Class: ItemData
	ItemDefineID DefineID;//[Offset: 0x8 , Size: 24]
	FString Name;//[Offset: 0x20 , Size: 12]
	FString Desc;//[Offset: 0x2c , Size: 12]
	FString Icon;//[Offset: 0x38 , Size: 12]
	ItemHandleBase* ItemHandle;//[Offset: 0x44 , Size: 4]

--------------------------------
Class: BattleItemFeatureData
	float UnitWeight;//[Offset: 0x0 , Size: 4]
	int MaxCount;//[Offset: 0x4 , Size: 4]
	int CountLimit;//[Offset: 0x8 , Size: 4]
	bool bUnique;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc , Size: 1]
	bool bStackable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xd , Size: 1]
	bool bEquippable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe , Size: 1]
	bool bConsumable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xf , Size: 1]
	bool bAutoEquipAndDrop;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	int SortingPriority;//[Offset: 0x14 , Size: 4]
	int itemType;//[Offset: 0x18 , Size: 4]

--------------------------------
Class: CrossHairComponent.WeaponLogicBaseComponent.ActorComponent.Object
	<CrossHairNameAndTextureMap_Key(NameProperty) , CrossHairNameAndTextureMap(StrProperty)> CrossHairNameAndTextureMap;//[Offset: 0xc0 , Size: 60]
	CrossHairData(StructProperty)[] CrossHairData;//[Offset: 0xfc , Size: 12]
	float PistolCenterDownDis;//[Offset: 0x108 , Size: 4]
	bool bDrawDebugCrossHairCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10c , Size: 1]
	float DrawDebugCrossHairCircleAreaSteps;//[Offset: 0x110 , Size: 4]
	bool bDrawDebugSpreadCircleArea;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x114 , Size: 1]
	float DrawDebugSpreadCircleAreaSteps;//[Offset: 0x118 , Size: 4]
	float RotateAngle;//[Offset: 0x11c , Size: 4]
	STExtraPlayerController* PlayerController;//[Offset: 0x120 , Size: 4]
	ShootWeaponEntity* ShootWeaponEntity;//[Offset: 0x124 , Size: 4]
	STExtraShootWeapon* OwnerShootWeapon;//[Offset: 0x128 , Size: 4]
	BulletTrackComponent* BulletTrackComp;//[Offset: 0x12c , Size: 4]
	Texture2D* CrossHairTextureNormal;//[Offset: 0x130 , Size: 4]
	Texture2D* CrossHairEmptyHand;//[Offset: 0x134 , Size: 4]
	Texture2D* CrossHairPistolEdge;//[Offset: 0x138 , Size: 4]
	Texture2D* CrossHairPistolCenter;//[Offset: 0x13c , Size: 4]
	Texture2D* CrossHairShotGun;//[Offset: 0x140 , Size: 4]
	function UpdateComponentTick();// 0x170e77c
	function DrawWeaponCrosshairInner();// 0x170e6b8
	function DrawSpreadEnd();// 0x170e6a4
	function DrawDebugPointEnd();// 0x170e690

--------------------------------
Class: CrowdAgentComponent.ActorComponent.Object
	float AgentRadius;//[Offset: 0xbc , Size: 4]
	float SegmentRadius;//[Offset: 0xc0 , Size: 4]
	float Height;//[Offset: 0xc4 , Size: 4]
	function StopMove();// 0x170ec08
	function MoveToLoc();// 0x170eb84
	function MoveToActor();// 0x170eb0c

--------------------------------
Class: CrowdAgentQueryInterface.Interface.Object

--------------------------------
Class: CustomBase.Object
	int CustomID;//[Offset: 0x1c , Size: 4]
	ActorComponent* OwnerComp;//[Offset: 0x20 , Size: 8]
	MeshComponent* OwnerMeshComp;//[Offset: 0x28 , Size: 8]
	function SetCustomID();// 0x17112e0
	function GetOwnerMeshComp();// 0x17112b8
	function GetOwnerComp();// 0x1711290
	function ClearCustomInfo();// 0x17101ac
	function ApplyCustomInfo();// 0x1710168

--------------------------------
Class: AvatarCustomBase.CustomBase.Object
	MatConfigs(StructProperty)[] MatConfigs;//[Offset: 0x30 , Size: 12]
	function SetCustomMatParam();// 0x171166c
	function AsyncLoadCustomAssetDone();// 0x1711658
	function ApplyCustomInfo();// 0x1710168

--------------------------------
Class: AvatarCustomColor.AvatarCustomBase.CustomBase.Object
	function InitColorInfo();// 0x170f964

--------------------------------
Class: AvatarCustomParticle.AvatarCustomBase.CustomBase.Object
	ParticleDataList(StructProperty)[] ParticleDataList;//[Offset: 0x3c , Size: 12]
	ParticleGroup ParticleGroup;//[Offset: 0x48 , Size: 36]
	function ClearCustomInfo();// 0x17101ac
	function AsyncLoadCustomParticleDone();// 0x1710198
	function ApplyCustomInfo();// 0x1710168

--------------------------------
Class: ParticleGroup
	ParticleSystemList(ObjectProperty)[] ParticleSystemList;//[Offset: 0x0 , Size: 12]
	ParticleCompList(ObjectProperty)[] ParticleCompList;//[Offset: 0xc , Size: 12]
	ParticleAssetList(StructProperty)[] ParticleAssetList;//[Offset: 0x18 , Size: 12]

--------------------------------
Class: AvatarCustomPattern.AvatarCustomBase.CustomBase.Object
	function InitPatternInfo();// 0x171057c

--------------------------------
Class: AvatarCustomPatternNum.AvatarCustomBase.CustomBase.Object
	SoftObjectPath SoftRefPath1;//[Offset: 0x40 , Size: 24]
	SoftObjectPath SoftRefPath2;//[Offset: 0x58 , Size: 24]
	function GetPatternNumTexturePath();// 0x206ccd8
	function CreatePattenNumTexture();// 0x206ccd8
	function AsyncLoadCustomAssetDone();// 0x1710eac
	function ApplyCustomInfo();// 0x1710168

--------------------------------
Class: CustomCameraComponent.CameraComponent.SceneComponent.ActorComponent.Object
	function InterpToTargetFov();// 0x1711b6c

--------------------------------
Class: CustomCndComponent.ActorComponent.Object
	CndWrappers(StructProperty)[] CndWrappers;//[Offset: 0xbc , Size: 12]
	function RemoveCndWrapper();// 0x1713384
	function RegisterCndWrappers();// 0x1698f30
	function OnReceiveEvent();// 0x1713304
	function AddCndWrapper();// 0x1713204

--------------------------------
Class: CustomCndWrapper.Object
	Conditions(StructProperty)[] Conditions;//[Offset: 0x1c , Size: 12]
	TriggerSkills(IntProperty)[] TriggerSkills;//[Offset: 0x28 , Size: 12]
	CancelSkills(IntProperty)[] CancelSkills;//[Offset: 0x34 , Size: 12]
	TriggerBuffs(IntProperty)[] TriggerBuffs;//[Offset: 0x40 , Size: 12]
	bool TriggerFromClient;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x4c , Size: 1]
	byte EventType;//[Offset: 0x4d , Size: 1]
	Object* WrapperOwner;//[Offset: 0x50 , Size: 8]
	function SetWrapperOwner();// 0x1713a08
	function OnTriggerEvent();// 0x1713988
	function IsValidEvent();// 0x1713908

--------------------------------
Class: ComboBoxString.Widget.Visual.Object
	DefaultOptions(StrProperty)[] DefaultOptions;//[Offset: 0xcc , Size: 12]
	FString SelectedOption;//[Offset: 0xd8 , Size: 12]
	ComboBoxStyle WidgetStyle;//[Offset: 0xe8 , Size: 1032]
	TableRowStyle ItemStyle;//[Offset: 0x4f0 , Size: 1792]
	Margin ContentPadding;//[Offset: 0xbf0 , Size: 16]
	float MaxListHeight;//[Offset: 0xc00 , Size: 4]
	bool HasDownArrow;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc04 , Size: 1]
	bool EnableGamepadNavigationMode;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc05 , Size: 1]
	SlateFontInfo Font;//[Offset: 0xc08 , Size: 64]
	SlateColor ForegroundColor;//[Offset: 0xc48 , Size: 28]
	bool bIsFocusable;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xc64 , Size: 1]
	delegate OnGenerateWidgetEvent;//[Offset: 0xc68 , Size: 16]
	delegate OnSelectionChanged;//[Offset: 0xc88 , Size: 12]
	delegate OnOpening;//[Offset: 0xc94 , Size: 12]
	function SetSelectedOption();// 0x2bcfd78
	function RemoveOption();// 0x2bcfcb4
	function RefreshOptions();// 0x2bcfca0
	function OnSelectionChangedEvent__DelegateSignature();// 0x206ccd8
	function OnOpeningEvent__DelegateSignature();// 0x206ccd8
	function GetSelectedOption();// 0x2bcfbe0
	function GetOptionCount();// 0x2bcfbb8
	function GetOptionAtIndex();// 0x2bcfab0
	function FindOptionIndex();// 0x2bcf9ec
	function ClearSelection();// 0x2bcf9d8
	function ClearOptions();// 0x2bcf9c4
	function AddOption();// 0x2bcf908

--------------------------------
Class: ComboBoxStyle.SlateWidgetStyle
	ComboButtonStyle ComboButtonStyle;//[Offset: 0x8 , Size: 976]
	SlateSound PressedSlateSound;//[Offset: 0x3d8 , Size: 24]
	SlateSound SelectionChangeSlateSound;//[Offset: 0x3f0 , Size: 24]

--------------------------------
Class: ComboButtonStyle.SlateWidgetStyle
	ButtonStyle ButtonStyle;//[Offset: 0x8 , Size: 664]
	SlateBrush DownArrowImage;//[Offset: 0x2a0 , Size: 144]
	SlateBrush MenuBorderBrush;//[Offset: 0x330 , Size: 144]
	Margin MenuBorderPadding;//[Offset: 0x3c0 , Size: 16]

--------------------------------
Class: TableRowStyle.SlateWidgetStyle
	SlateBrush SelectorFocusedBrush;//[Offset: 0x8 , Size: 144]
	SlateBrush ActiveHoveredBrush;//[Offset: 0x98 , Size: 144]
	SlateBrush ActiveBrush;//[Offset: 0x128 , Size: 144]
	SlateBrush InactiveHoveredBrush;//[Offset: 0x1b8 , Size: 144]
	SlateBrush InactiveBrush;//[Offset: 0x248 , Size: 144]
	SlateBrush EvenRowBackgroundHoveredBrush;//[Offset: 0x2d8 , Size: 144]
	SlateBrush EvenRowBackgroundBrush;//[Offset: 0x368 , Size: 144]
	SlateBrush OddRowBackgroundHoveredBrush;//[Offset: 0x3f8 , Size: 144]
	SlateBrush OddRowBackgroundBrush;//[Offset: 0x488 , Size: 144]
	SlateColor TextColor;//[Offset: 0x518 , Size: 28]
	SlateColor SelectedTextColor;//[Offset: 0x534 , Size: 28]
	SlateBrush DropIndicator_Above;//[Offset: 0x550 , Size: 144]
	SlateBrush DropIndicator_Onto;//[Offset: 0x5e0 , Size: 144]
	SlateBrush DropIndicator_Below;//[Offset: 0x670 , Size: 144]

--------------------------------
Class: CustomComboBox.ComboBoxString.Widget.Visual.Object
	class Widget* itemType;//[Offset: 0xccc , Size: 4]
	class Widget* ContentType;//[Offset: 0xcd0 , Size: 4]
	delegate OnRefreshItem;//[Offset: 0xcd4 , Size: 12]
	delegate OnSelectItem;//[Offset: 0xce0 , Size: 12]
	Widget* ContentWidget;//[Offset: 0xcec , Size: 4]
	function RequireOneWidget();// 0x1713e8c
	function RefreshOptions();// 0x1713e78
	function OnRefreshItem__DelegateSignature();// 0x206ccd8

--------------------------------
Class: CustomCondition.Object
	Object* CndOwner;//[Offset: 0x1c , Size: 8]
	function SetCndOwner();// 0x1714248
	function SafeGetPawn();// 0x17141d0
	function IsOK();// 0x1710168

--------------------------------
Class: CustomCondition_AND.CustomCondition.Object
	CndList(ObjectProperty)[] CndList;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: CustomCondition_CharacterHP.CustomCondition.Object
	enum CheckType;//[Offset: 0x24 , Size: 1]
	float Health;//[Offset: 0x28 , Size: 4]

--------------------------------
Class: CustomCondition_OR.CustomCondition.Object
	CndList(ObjectProperty)[] CndList;//[Offset: 0x24 , Size: 12]

--------------------------------
Class: CustomDecalComponent.ActorComponent.Object
	MaterialInstance* DecalMaterial;//[Offset: 0xbc , Size: 4]
	float AutoDisappearTime;//[Offset: 0xc0 , Size: 4]
	Vector LocationOffset;//[Offset: 0xc4 , Size: 12]
	Rotator RotationOffset;//[Offset: 0xd0 , Size: 12]
	Vector Scale;//[Offset: 0xdc , Size: 12]
	bool IgnoreCauserActorRotation;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xe8 , Size: 1]
	byte TraceAxis;//[Offset: 0xe9 , Size: 1]
	bool bTraceNegative;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xea , Size: 1]
	bool bIgnoreTransForEndPosition;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0xeb , Size: 1]
	MaterialInstanceDynamic* CacheDealMaterialInstance;//[Offset: 0xfc , Size: 4]
	function RemoveDecal();// 0x1714b88
	function AddDecal();// 0x1714b10

--------------------------------
Class: CustomScrollBox.PanelWidget.Widget.Visual.Object
	ScrollBoxStyle WidgetStyle;//[Offset: 0xe0 , Size: 584]
	ScrollBarStyle WidgetBarStyle;//[Offset: 0x328 , Size: 1304]
	SlateWidgetStyleAsset* Style;//[Offset: 0x840 , Size: 4]
	SlateWidgetStyleAsset* BarStyle;//[Offset: 0x844 , Size: 4]
	byte Orientation;//[Offset: 0x848 , Size: 1]
	enum ScrollBarVisibility;//[Offset: 0x849 , Size: 1]
	enum ConsumeMouseWheel;//[Offset: 0x84a , Size: 1]
	Vector2D ScrollbarThickness;//[Offset: 0x84c , Size: 8]
	bool AlwaysShowScrollbar;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x854 , Size: 1]
	bool AllowOverscroll;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x855 , Size: 1]
	enum NavigationDestination;//[Offset: 0x856 , Size: 1]
	float NavigationScrollPadding;//[Offset: 0x858 , Size: 4]
	delegate OnUserScrolled;//[Offset: 0x85c , Size: 12]
	delegate OnMoveOut;//[Offset: 0x868 , Size: 12]
	function SwitchChildToIndex();// 0x1715608
	function SetScrollOffset();// 0x1715590
	function SetScrollBarVisibility();// 0x1715518
	function SetScrollbarThickness();// 0x1715494
	function SetOrientation();// 0x171541c
	function SetAlwaysShowScrollbar();// 0x171539c
	function SetAllowOverscroll();// 0x171531c
	function ScrollWidgetIntoView();// 0x1715210
	function ScrollToStart();// 0x17151fc
	function ScrollToEnd();// 0x17151e8
	function ScrollStop();// 0x17151d4
	function GetScrollOffset();// 0x17151ac
	function GetMaxScrollOffset();// 0x1715184

--------------------------------
Class: CustomScrollBoxSlot.PanelSlot.Visual.Object
	Margin Padding;//[Offset: 0x24 , Size: 16]
	byte HorizontalAlignment;//[Offset: 0x34 , Size: 1]
	function SetPadding();// 0x1715d3c
	function SetHorizontalAlignment();// 0x1715cc4

--------------------------------
Class: CustomUserWidget.UAEUserWidget.UserWidget.Widget.Visual.Object
	bool bEnableGlobalTouch;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2f4 , Size: 1]

--------------------------------
Class: CustomWidgetComponent.WidgetComponent.MeshComponent.PrimitiveComponent.SceneComponent.ActorComponent.Object
	Actor* OwnerActor;//[Offset: 0x634 , Size: 4]
	MeshComponent* AttachedMeshComponent;//[Offset: 0x638 , Size: 4]
	ParticleSystemComponent* UIParticleComp;//[Offset: 0x63c , Size: 4]
	StaticMeshComponent* SurfaceEffectMesh;//[Offset: 0x640 , Size: 4]
	function SetupAttachMeshComponent();// 0x1716c80
	function GetBindOwner();// 0x1716c5c
	function GetAttachedMeshComponent();// 0x1716c40
	function CreateParticle();// 0x1716a90
	function BindOwner();// 0x1716a10
	function BindEvent();// 0x1716988

--------------------------------
Class: DamageableInterface.DamageableInterfaceBase.Interface.Object
	function JudgeComponentBlockBullet();// 0x1717850
	function GetPickingBoundingBox();// 0x17176b8
	function GetDamageRateFromDamageEvent();// 0x171760c
	function GetDamageRateByTarget();// 0x1717584
	function GetDamageableGameObjectType();// 0x17174bc
	function GetCanBePicked();// 0x171748c
	function GetBulletBlockComponentTag();// 0x1717444
	function GetAdditionaAbsoluteDamageFromDamageEvent();// 0x1717398
	function CalcFinalMomentum();// 0x17172cc
	function CalcFinalDamageRate();// 0x17171d8

--------------------------------
Class: DataTableManager.BlueprintFunctionLibrary.Object
	DataTable* PickUpGlobalDataTable;//[Offset: 0x1c , Size: 4]
	DataTable* PickUpGlobalIDAndWrapperDataTable;//[Offset: 0x20 , Size: 4]
	DataTable* WeaponDataTable;//[Offset: 0x24 , Size: 4]
	DataTable* PlayerEquipmentDataTable;//[Offset: 0x28 , Size: 4]
	DataTable* WeaponComponentDataTable;//[Offset: 0x2c , Size: 4]
	DataTable* ConsumeItemDataTable;//[Offset: 0x30 , Size: 4]
	DataTable* AkEventDataTable;//[Offset: 0x34 , Size: 4]
	function GetTableByType();// 0x1717e30
	function GetInstance();// 0x1717e08

--------------------------------
Class: DayToNightActor.Actor.Object
	float ClientSyncTime;//[Offset: 0x2c4 , Size: 4]
	EventConfigs(StructProperty)[] EventConfigs;//[Offset: 0x2c8 , Size: 12]
	LevelSequenceActor* LevelSequenceActor;//[Offset: 0x2e0 , Size: 4]
	function TrytoFireEvent();// 0x1718438
	function SetNightVisionOpen();// 0x17183b8
	function FireEvent();// 0x17182f4
	function BP_ClientOnFireEvent();// 0x206ccd8

--------------------------------
Class: LevelSequenceActor.Actor.Object
	bool bAutoPlay;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x2c8 , Size: 1]
	MovieSceneSequencePlaybackSettings PlaybackSettings;//[Offset: 0x2cc , Size: 32]
	LevelSequencePlayer* SequencePlayer;//[Offset: 0x2ec , Size: 4]
	SoftObjectPath LevelSequence;//[Offset: 0x2f0 , Size: 24]
	AdditionalEventReceivers(ObjectProperty)[] AdditionalEventReceivers;//[Offset: 0x308 , Size: 12]
	LevelSequenceBurnInOptions* BurnInOptions;//[Offset: 0x314 , Size: 4]
	MovieSceneBindingOverrides* BindingOverrides;//[Offset: 0x318 , Size: 4]
	LevelSequenceBurnIn* BurnInInstance;//[Offset: 0x31c , Size: 4]
	function SetSequence();// 0x2da48b0
	function SetEventReceivers();// 0x2da4758
	function SetBinding();// 0x2da45c0
	function ResetBindings();// 0x2da4580
	function ResetBinding();// 0x2da4488
	function RemoveBinding();// 0x2da4348
	function GetSequence();// 0x2da4270
	function AddBinding();// 0x2da40e8

--------------------------------
Class: MovieSceneSequencePlaybackSettings
	int LoopCount;//[Offset: 0x0 , Size: 4]
	float PlayRate;//[Offset: 0x4 , Size: 4]
	bool bRandomStartTime;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x8 , Size: 1]
	float StartTime;//[Offset: 0xc , Size: 4]
	bool bRestoreState;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x10 , Size: 1]
	bool bDisableMovementInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x11 , Size: 1]
	bool bDisableLookAtInput;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x12 , Size: 1]
	bool bHidePlayer;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x13 , Size: 1]
	bool bHideHud;//(ByteOffset: 0, ByteMask: 1, FieldMask: 255)[Offset: 0x14 , Size: 1]
	interface class * BindingOverrides;//[Offset: 0x18 , Size: 8]

--------------------------------
